#include <algorithm>
#include <charconv>  // for from_chars
#include <chrono>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <exception>
#include <fstream>
#include <functional>
#include <iostream>
#include <optional>
#include <random>
#include <tuple>
#include <utility>
#include <variant>
#include <vector>
#include "dessser/runtime.h"
#include "desssergen/units.h"
#include "desssergen/raql_type.h"
#include "desssergen/raql_top_output.h"
#include "desssergen/raql_type.h"
#include "desssergen/raql_type.h"
#include "desssergen/raql_path_comp.h"
#include "desssergen/raql_binding_key.h"
#include "desssergen/raql_variable.h"
#include "desssergen/raql_value.h"
#include "desssergen/field_name.h"

namespace dessser::gen::raql_expr {
using dessser::operator<<;

std::uniform_real_distribution<double> _random_float_(0, 1);
std::uniform_int_distribution<uint8_t> _random_u8_(0);
std::uniform_int_distribution<uint32_t> _random_u32_(0);
std::uniform_int_distribution<uint64_t> _random_u64_(0);
std::default_random_engine _random_engine_;

/* ------------ */
/* Declarations */
/* ------------ */
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct t893212699a9dab9c7aae59235cac13d9 : public std::tuple<
  dessser::gen::field_name::t_ext,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t893212699a9dab9c7aae59235cac13d9 const &a, t893212699a9dab9c7aae59235cac13d9 const &b) {
  return ::dessser::gen::field_name::Deref(std::get<0>(a)) == ::dessser::gen::field_name::Deref(std::get<0>(b)) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(t893212699a9dab9c7aae59235cac13d9 const &a, t893212699a9dab9c7aae59235cac13d9 const &b) {
  return !operator==(a, b);
}
struct ta4f782a597a104ffca4e8eb34b1832aa {
  std::shared_ptr<::dessser::gen::raql_expr::t>  case_cond;
  std::shared_ptr<::dessser::gen::raql_expr::t>  case_cons;
  ta4f782a597a104ffca4e8eb34b1832aa(std::shared_ptr<::dessser::gen::raql_expr::t>  case_cond_, std::shared_ptr<::dessser::gen::raql_expr::t>  case_cons_) : case_cond(case_cond_), case_cons(case_cons_) {}
  ta4f782a597a104ffca4e8eb34b1832aa() = default;
};
inline bool operator==(ta4f782a597a104ffca4e8eb34b1832aa const &a, ta4f782a597a104ffca4e8eb34b1832aa const &b) {
  return (*a.case_cond) == (*b.case_cond) && (*a.case_cons) == (*b.case_cons);
}

inline bool operator!=(ta4f782a597a104ffca4e8eb34b1832aa const &a, ta4f782a597a104ffca4e8eb34b1832aa const &b) {
  return !operator==(a, b);
}
struct t7a300b42842ab70bb0c47c946967b5e9 : public std::tuple<
  Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>,
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >
> {
  using tuple::tuple;
};
inline bool operator==(t7a300b42842ab70bb0c47c946967b5e9 const &a, t7a300b42842ab70bb0c47c946967b5e9 const &b) {
  return std::get<0>(a) == std::get<0>(b) && ((std::get<1>(a) && std::get<1>(b) && (*std::get<1>(a).value()) == (*std::get<1>(b).value())) || (!std::get<1>(a) && !std::get<1>(b)));
}
inline bool operator!=(t7a300b42842ab70bb0c47c946967b5e9 const &a, t7a300b42842ab70bb0c47c946967b5e9 const &b) {
  return !operator==(a, b);
}
struct tc12b6657c8a8e014a9c0805fe6c1ffaa : public std::variant<
  dessser::gen::raql_value::t_ext, // Const
  dessser::gen::raql_variable::t_ext, // Variable
  dessser::gen::raql_binding_key::t_ext, // Binding
  Void, // Now
  Void, // Random
  Void, // EventStart
  Void, // EventStop
  Lst<dessser::gen::raql_path_comp::t_ext>, // Path
  Void // Pi
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 9 };
};

inline bool operator==(tc12b6657c8a8e014a9c0805fe6c1ffaa const &a, tc12b6657c8a8e014a9c0805fe6c1ffaa const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return ::dessser::gen::raql_value::Deref(std::get<0>(a)) == ::dessser::gen::raql_value::Deref(std::get<0>(b)); // Const
    case 1: return ::dessser::gen::raql_variable::Deref(std::get<1>(a)) == ::dessser::gen::raql_variable::Deref(std::get<1>(b)); // Variable
    case 2: return ::dessser::gen::raql_binding_key::Deref(std::get<2>(a)) == ::dessser::gen::raql_binding_key::Deref(std::get<2>(b)); // Binding
    case 3: return std::get<3>(a) == std::get<3>(b); // Now
    case 4: return std::get<4>(a) == std::get<4>(b); // Random
    case 5: return std::get<5>(a) == std::get<5>(b); // EventStart
    case 6: return std::get<6>(a) == std::get<6>(b); // EventStop
    case 7: return std::get<7>(a) == std::get<7>(b); // Path
    case 8: return std::get<8>(a) == std::get<8>(b); // Pi
  };
  return false;
}
inline bool operator!=(tc12b6657c8a8e014a9c0805fe6c1ffaa const &a, tc12b6657c8a8e014a9c0805fe6c1ffaa const &b) {
  return !operator==(a, b);
}
enum t33468f773066246b23483d21d37a8051 {
  LittleEndian,
  BigEndian,
};

constexpr size_t t33468f773066246b23483d21d37a8051_size { 2 };
struct tb74caafb8030d46b153cbcb9ef47ad2d : public std::tuple<
  dessser::gen::raql_type::t_ext,
  ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051
> {
  using tuple::tuple;
};
inline bool operator==(tb74caafb8030d46b153cbcb9ef47ad2d const &a, tb74caafb8030d46b153cbcb9ef47ad2d const &b) {
  return ::dessser::gen::raql_type::Deref(std::get<0>(a)) == ::dessser::gen::raql_type::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tb74caafb8030d46b153cbcb9ef47ad2d const &a, tb74caafb8030d46b153cbcb9ef47ad2d const &b) {
  return !operator==(a, b);
}
struct ta1361e7c36afcb5ba90129e776bcbf84 : public std::variant<
  Void, // Age
  dessser::gen::raql_type::t_ext, // Cast
  Void, // Force
  ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d, // Peek
  Void, // Length
  Void, // Lower
  Void, // Upper
  Void, // UuidOfU128
  Void, // Not
  Void, // Abs
  Void, // Minus
  Void, // Defined
  Void, // Exp
  Void, // Log
  Void, // Log10
  Void, // Sqrt
  Void, // Sq
  Void, // Ceil
  Void, // Floor
  Void, // Round
  Void, // Cos
  Void, // Sin
  Void, // Tan
  Void, // ACos
  Void, // ASin
  Void, // ATan
  Void, // CosH
  Void, // SinH
  Void, // TanH
  Void, // Hash
  Void, // BeginOfRange
  Void, // EndOfRange
  Void, // Sparkline
  Void, // Strptime
  Void, // Variant
  Void, // Chr
  std::string, // Like
  Void, // Fit
  Void, // CountryCode
  Void, // IpFamily
  Void // Basename
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 41 };
};

inline bool operator==(ta1361e7c36afcb5ba90129e776bcbf84 const &a, ta1361e7c36afcb5ba90129e776bcbf84 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // Age
    case 1: return ::dessser::gen::raql_type::Deref(std::get<1>(a)) == ::dessser::gen::raql_type::Deref(std::get<1>(b)); // Cast
    case 2: return std::get<2>(a) == std::get<2>(b); // Force
    case 3: return std::get<3>(a) == std::get<3>(b); // Peek
    case 4: return std::get<4>(a) == std::get<4>(b); // Length
    case 5: return std::get<5>(a) == std::get<5>(b); // Lower
    case 6: return std::get<6>(a) == std::get<6>(b); // Upper
    case 7: return std::get<7>(a) == std::get<7>(b); // UuidOfU128
    case 8: return std::get<8>(a) == std::get<8>(b); // Not
    case 9: return std::get<9>(a) == std::get<9>(b); // Abs
    case 10: return std::get<10>(a) == std::get<10>(b); // Minus
    case 11: return std::get<11>(a) == std::get<11>(b); // Defined
    case 12: return std::get<12>(a) == std::get<12>(b); // Exp
    case 13: return std::get<13>(a) == std::get<13>(b); // Log
    case 14: return std::get<14>(a) == std::get<14>(b); // Log10
    case 15: return std::get<15>(a) == std::get<15>(b); // Sqrt
    case 16: return std::get<16>(a) == std::get<16>(b); // Sq
    case 17: return std::get<17>(a) == std::get<17>(b); // Ceil
    case 18: return std::get<18>(a) == std::get<18>(b); // Floor
    case 19: return std::get<19>(a) == std::get<19>(b); // Round
    case 20: return std::get<20>(a) == std::get<20>(b); // Cos
    case 21: return std::get<21>(a) == std::get<21>(b); // Sin
    case 22: return std::get<22>(a) == std::get<22>(b); // Tan
    case 23: return std::get<23>(a) == std::get<23>(b); // ACos
    case 24: return std::get<24>(a) == std::get<24>(b); // ASin
    case 25: return std::get<25>(a) == std::get<25>(b); // ATan
    case 26: return std::get<26>(a) == std::get<26>(b); // CosH
    case 27: return std::get<27>(a) == std::get<27>(b); // SinH
    case 28: return std::get<28>(a) == std::get<28>(b); // TanH
    case 29: return std::get<29>(a) == std::get<29>(b); // Hash
    case 30: return std::get<30>(a) == std::get<30>(b); // BeginOfRange
    case 31: return std::get<31>(a) == std::get<31>(b); // EndOfRange
    case 32: return std::get<32>(a) == std::get<32>(b); // Sparkline
    case 33: return std::get<33>(a) == std::get<33>(b); // Strptime
    case 34: return std::get<34>(a) == std::get<34>(b); // Variant
    case 35: return std::get<35>(a) == std::get<35>(b); // Chr
    case 36: return std::get<36>(a) == std::get<36>(b); // Like
    case 37: return std::get<37>(a) == std::get<37>(b); // Fit
    case 38: return std::get<38>(a) == std::get<38>(b); // CountryCode
    case 39: return std::get<39>(a) == std::get<39>(b); // IpFamily
    case 40: return std::get<40>(a) == std::get<40>(b); // Basename
  };
  return false;
}
inline bool operator!=(ta1361e7c36afcb5ba90129e776bcbf84 const &a, ta1361e7c36afcb5ba90129e776bcbf84 const &b) {
  return !operator==(a, b);
}
struct tdcaebeaea4b518f114e9d5c6a3122d25 : public std::tuple<
  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(tdcaebeaea4b518f114e9d5c6a3122d25 const &a, tdcaebeaea4b518f114e9d5c6a3122d25 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(tdcaebeaea4b518f114e9d5c6a3122d25 const &a, tdcaebeaea4b518f114e9d5c6a3122d25 const &b) {
  return !operator==(a, b);
}
enum t5cdb95783a680d6980d26fd9ad947036 {
  Max,
  Min,
  Print,
  Coalesce,
};

constexpr size_t t5cdb95783a680d6980d26fd9ad947036_size { 4 };
struct t15592658c87dfdd5b6aa9aea551004da : public std::tuple<
  ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036,
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >
> {
  using tuple::tuple;
};
inline bool operator==(t15592658c87dfdd5b6aa9aea551004da const &a, t15592658c87dfdd5b6aa9aea551004da const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t15592658c87dfdd5b6aa9aea551004da const &a, t15592658c87dfdd5b6aa9aea551004da const &b) {
  return !operator==(a, b);
}
enum t2ade1f1615a1b24c8e2ee86351d1ee39 {
  Add,
  Sub,
  Mul,
  Div,
  IDiv,
  Mod,
  Pow,
  Trunc,
  Reldiff,
  And,
  Or,
  Ge,
  Gt,
  Eq,
  Concat,
  StartsWith,
  EndsWith,
  BitAnd,
  BitOr,
  BitXor,
  BitShift,
  Get,
  In,
  Strftime,
  Index,
  Percentile,
};

constexpr size_t t2ade1f1615a1b24c8e2ee86351d1ee39_size { 26 };
struct te7a4d6eae2f27f87719b7e00a7ae2e76 : public std::tuple<
  ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(te7a4d6eae2f27f87719b7e00a7ae2e76 const &a, te7a4d6eae2f27f87719b7e00a7ae2e76 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b));
}
inline bool operator!=(te7a4d6eae2f27f87719b7e00a7ae2e76 const &a, te7a4d6eae2f27f87719b7e00a7ae2e76 const &b) {
  return !operator==(a, b);
}
enum tafe36d3b8e34b0bdb04064c3f4cda035 {
  SubString,
  MapSet,
};

constexpr size_t tafe36d3b8e34b0bdb04064c3f4cda035_size { 2 };
struct t53da299de89588caa86990df40ee157b : public std::tuple<
  ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t53da299de89588caa86990df40ee157b const &a, t53da299de89588caa86990df40ee157b const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b));
}
inline bool operator!=(t53da299de89588caa86990df40ee157b const &a, t53da299de89588caa86990df40ee157b const &b) {
  return !operator==(a, b);
}
struct t3267fa899a41f9e0c8db35320b53e6b1 : public std::variant<
  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa, // SL0
  ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25, // SL1
  ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da, // SL1s
  ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76, // SL2
  ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b // SL3
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 5 };
};

inline bool operator==(t3267fa899a41f9e0c8db35320b53e6b1 const &a, t3267fa899a41f9e0c8db35320b53e6b1 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // SL0
    case 1: return std::get<1>(a) == std::get<1>(b); // SL1
    case 2: return std::get<2>(a) == std::get<2>(b); // SL1s
    case 3: return std::get<3>(a) == std::get<3>(b); // SL2
    case 4: return std::get<4>(a) == std::get<4>(b); // SL3
  };
  return false;
}
inline bool operator!=(t3267fa899a41f9e0c8db35320b53e6b1 const &a, t3267fa899a41f9e0c8db35320b53e6b1 const &b) {
  return !operator==(a, b);
}
enum t30db7861170b37de146c6231a87c6042 {
  LocalState,
  GlobalState,
};

constexpr size_t t30db7861170b37de146c6231a87c6042_size { 2 };
struct t66cf3f891349e2747678760eec02eb62 : public std::tuple<
  double,
  double,
  uint32_t
> {
  using tuple::tuple;
};
inline bool operator==(t66cf3f891349e2747678760eec02eb62 const &a, t66cf3f891349e2747678760eec02eb62 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b) && std::get<2>(a) == std::get<2>(b);
}
inline bool operator!=(t66cf3f891349e2747678760eec02eb62 const &a, t66cf3f891349e2747678760eec02eb62 const &b) {
  return !operator==(a, b);
}
struct t72c6a286926f82d38f40c2c2d00ebcc6 : public std::variant<
  Void, // AggrMin
  Void, // AggrMax
  Void, // AggrSum
  Void, // AggrAvg
  Void, // AggrAnd
  Void, // AggrOr
  Void, // AggrBitAnd
  Void, // AggrBitOr
  Void, // AggrBitXor
  Void, // AggrFirst
  Void, // AggrLast
  ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62, // AggrHistogram
  Void, // Group
  Void, // Count
  Void // Distinct
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 15 };
};

inline bool operator==(t72c6a286926f82d38f40c2c2d00ebcc6 const &a, t72c6a286926f82d38f40c2c2d00ebcc6 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // AggrMin
    case 1: return std::get<1>(a) == std::get<1>(b); // AggrMax
    case 2: return std::get<2>(a) == std::get<2>(b); // AggrSum
    case 3: return std::get<3>(a) == std::get<3>(b); // AggrAvg
    case 4: return std::get<4>(a) == std::get<4>(b); // AggrAnd
    case 5: return std::get<5>(a) == std::get<5>(b); // AggrOr
    case 6: return std::get<6>(a) == std::get<6>(b); // AggrBitAnd
    case 7: return std::get<7>(a) == std::get<7>(b); // AggrBitOr
    case 8: return std::get<8>(a) == std::get<8>(b); // AggrBitXor
    case 9: return std::get<9>(a) == std::get<9>(b); // AggrFirst
    case 10: return std::get<10>(a) == std::get<10>(b); // AggrLast
    case 11: return std::get<11>(a) == std::get<11>(b); // AggrHistogram
    case 12: return std::get<12>(a) == std::get<12>(b); // Group
    case 13: return std::get<13>(a) == std::get<13>(b); // Count
    case 14: return std::get<14>(a) == std::get<14>(b); // Distinct
  };
  return false;
}
inline bool operator!=(t72c6a286926f82d38f40c2c2d00ebcc6 const &a, t72c6a286926f82d38f40c2c2d00ebcc6 const &b) {
  return !operator==(a, b);
}
struct t33838a2e63bc4895abd013987ee48342 : public std::tuple<
  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t33838a2e63bc4895abd013987ee48342 const &a, t33838a2e63bc4895abd013987ee48342 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(t33838a2e63bc4895abd013987ee48342 const &a, t33838a2e63bc4895abd013987ee48342 const &b) {
  return !operator==(a, b);
}
enum t638469967f4a441e0e32d7820019314d {
  Lag,
  ExpSmooth,
  Sample,
  OneOutOf,
};

constexpr size_t t638469967f4a441e0e32d7820019314d_size { 4 };
struct tce9a4f76e50a6cfbfc9de64ac8fc6e78 : public std::tuple<
  ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(tce9a4f76e50a6cfbfc9de64ac8fc6e78 const &a, tce9a4f76e50a6cfbfc9de64ac8fc6e78 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b));
}
inline bool operator!=(tce9a4f76e50a6cfbfc9de64ac8fc6e78 const &a, tce9a4f76e50a6cfbfc9de64ac8fc6e78 const &b) {
  return !operator==(a, b);
}
struct tde6226ab24e2bde569d940f438b90782 : public std::variant<
  Void, // MovingAvg
  Void, // Hysteresis
  bool // OnceEvery
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 3 };
};

inline bool operator==(tde6226ab24e2bde569d940f438b90782 const &a, tde6226ab24e2bde569d940f438b90782 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // MovingAvg
    case 1: return std::get<1>(a) == std::get<1>(b); // Hysteresis
    case 2: return std::get<2>(a) == std::get<2>(b); // OnceEvery
  };
  return false;
}
inline bool operator!=(tde6226ab24e2bde569d940f438b90782 const &a, tde6226ab24e2bde569d940f438b90782 const &b) {
  return !operator==(a, b);
}
struct t27e357241014cac9c70637dbe763fa46 : public std::tuple<
  ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t27e357241014cac9c70637dbe763fa46 const &a, t27e357241014cac9c70637dbe763fa46 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b));
}
inline bool operator!=(t27e357241014cac9c70637dbe763fa46 const &a, t27e357241014cac9c70637dbe763fa46 const &b) {
  return !operator==(a, b);
}
struct t482aebd3608ffaf2914a7e856b14192b : public std::variant<
  Void, // DampedHolt
  bool // Remember
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 2 };
};

inline bool operator==(t482aebd3608ffaf2914a7e856b14192b const &a, t482aebd3608ffaf2914a7e856b14192b const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // DampedHolt
    case 1: return std::get<1>(a) == std::get<1>(b); // Remember
  };
  return false;
}
inline bool operator!=(t482aebd3608ffaf2914a7e856b14192b const &a, t482aebd3608ffaf2914a7e856b14192b const &b) {
  return !operator==(a, b);
}
struct t2783f1bd5678d740a05f0e7d758a084e : public std::tuple<
  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t2783f1bd5678d740a05f0e7d758a084e const &a, t2783f1bd5678d740a05f0e7d758a084e const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b)) && (*std::get<4>(a)) == (*std::get<4>(b));
}
inline bool operator!=(t2783f1bd5678d740a05f0e7d758a084e const &a, t2783f1bd5678d740a05f0e7d758a084e const &b) {
  return !operator==(a, b);
}
struct t98f65fefde90f21cac9f06d483a57475 {
  bool inv;
  bool up_to;
  t98f65fefde90f21cac9f06d483a57475(bool inv_, bool up_to_) : inv(inv_), up_to(up_to_) {}
  t98f65fefde90f21cac9f06d483a57475() = default;
};
inline bool operator==(t98f65fefde90f21cac9f06d483a57475 const &a, t98f65fefde90f21cac9f06d483a57475 const &b) {
  return a.inv == b.inv && a.up_to == b.up_to;
}

inline bool operator!=(t98f65fefde90f21cac9f06d483a57475 const &a, t98f65fefde90f21cac9f06d483a57475 const &b) {
  return !operator==(a, b);
}
struct tdd3c5c0a7097ddd3d17c28956240cbea : public std::variant<
  Void, // MultiLinReg
  ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 // Largest
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 2 };
};

inline bool operator==(tdd3c5c0a7097ddd3d17c28956240cbea const &a, tdd3c5c0a7097ddd3d17c28956240cbea const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // MultiLinReg
    case 1: return std::get<1>(a) == std::get<1>(b); // Largest
  };
  return false;
}
inline bool operator!=(tdd3c5c0a7097ddd3d17c28956240cbea const &a, tdd3c5c0a7097ddd3d17c28956240cbea const &b) {
  return !operator==(a, b);
}
struct t62a574a444d31b9a476bfa017f081a2b : public std::tuple<
  ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >
> {
  using tuple::tuple;
};
inline bool operator==(t62a574a444d31b9a476bfa017f081a2b const &a, t62a574a444d31b9a476bfa017f081a2b const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b)) && std::get<4>(a) == std::get<4>(b);
}
inline bool operator!=(t62a574a444d31b9a476bfa017f081a2b const &a, t62a574a444d31b9a476bfa017f081a2b const &b) {
  return !operator==(a, b);
}
enum t7ca40b2395ae0931861f2a365208f839 {
  DampedHoltWinter,
};

constexpr size_t t7ca40b2395ae0931861f2a365208f839_size { 1 };
struct t7a9d88064d123458a7299610e9c50c56 : public std::tuple<
  ::dessser::gen::raql_expr::t7ca40b2395ae0931861f2a365208f839,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t7a9d88064d123458a7299610e9c50c56 const &a, t7a9d88064d123458a7299610e9c50c56 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b)) && (*std::get<4>(a)) == (*std::get<4>(b)) && (*std::get<5>(a)) == (*std::get<5>(b)) && (*std::get<6>(a)) == (*std::get<6>(b));
}
inline bool operator!=(t7a9d88064d123458a7299610e9c50c56 const &a, t7a9d88064d123458a7299610e9c50c56 const &b) {
  return !operator==(a, b);
}
struct t9ff32f6938631a338c8ace99a86c40f3 {
  dessser::gen::raql_top_output::t_ext output;
  std::shared_ptr<::dessser::gen::raql_expr::t>  size;
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > max_size;
  std::shared_ptr<::dessser::gen::raql_expr::t>  Top_what;
  std::shared_ptr<::dessser::gen::raql_expr::t>  by;
  std::shared_ptr<::dessser::gen::raql_expr::t>  Top_time;
  std::shared_ptr<::dessser::gen::raql_expr::t>  duration;
  std::shared_ptr<::dessser::gen::raql_expr::t>  sigmas;
  t9ff32f6938631a338c8ace99a86c40f3(dessser::gen::raql_top_output::t_ext output_, std::shared_ptr<::dessser::gen::raql_expr::t>  size_, std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > max_size_, std::shared_ptr<::dessser::gen::raql_expr::t>  Top_what_, std::shared_ptr<::dessser::gen::raql_expr::t>  by_, std::shared_ptr<::dessser::gen::raql_expr::t>  Top_time_, std::shared_ptr<::dessser::gen::raql_expr::t>  duration_, std::shared_ptr<::dessser::gen::raql_expr::t>  sigmas_) : output(output_), size(size_), max_size(max_size_), Top_what(Top_what_), by(by_), Top_time(Top_time_), duration(duration_), sigmas(sigmas_) {}
  t9ff32f6938631a338c8ace99a86c40f3() = default;
};
inline bool operator==(t9ff32f6938631a338c8ace99a86c40f3 const &a, t9ff32f6938631a338c8ace99a86c40f3 const &b) {
  return ::dessser::gen::raql_top_output::Deref(a.output) == ::dessser::gen::raql_top_output::Deref(b.output) && (*a.size) == (*b.size) && ((a.max_size && b.max_size && (*a.max_size.value()) == (*b.max_size.value())) || (!a.max_size && !b.max_size)) && (*a.Top_what) == (*b.Top_what) && (*a.by) == (*b.by) && (*a.Top_time) == (*b.Top_time) && (*a.duration) == (*b.duration) && (*a.sigmas) == (*b.sigmas);
}

inline bool operator!=(t9ff32f6938631a338c8ace99a86c40f3 const &a, t9ff32f6938631a338c8ace99a86c40f3 const &b) {
  return !operator==(a, b);
}
struct t1444e78faaacd44c5e033d97448c4e87 {
  std::shared_ptr<::dessser::gen::raql_expr::t>  what;
  std::shared_ptr<::dessser::gen::raql_expr::t>  time;
  std::shared_ptr<::dessser::gen::raql_expr::t>  max_age;
  bool tumbling;
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > sample_size;
  t1444e78faaacd44c5e033d97448c4e87(std::shared_ptr<::dessser::gen::raql_expr::t>  what_, std::shared_ptr<::dessser::gen::raql_expr::t>  time_, std::shared_ptr<::dessser::gen::raql_expr::t>  max_age_, bool tumbling_, std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > sample_size_) : what(what_), time(time_), max_age(max_age_), tumbling(tumbling_), sample_size(sample_size_) {}
  t1444e78faaacd44c5e033d97448c4e87() = default;
};
inline bool operator==(t1444e78faaacd44c5e033d97448c4e87 const &a, t1444e78faaacd44c5e033d97448c4e87 const &b) {
  return (*a.what) == (*b.what) && (*a.time) == (*b.time) && (*a.max_age) == (*b.max_age) && a.tumbling == b.tumbling && ((a.sample_size && b.sample_size && (*a.sample_size.value()) == (*b.sample_size.value())) || (!a.sample_size && !b.sample_size));
}

inline bool operator!=(t1444e78faaacd44c5e033d97448c4e87 const &a, t1444e78faaacd44c5e033d97448c4e87 const &b) {
  return !operator==(a, b);
}
struct t988dbba8f7f718b94a28d77808883135 : public std::variant<
  ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342, // SF1
  ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78, // SF2
  ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46, // SF3
  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e, // SF4
  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b, // SF4s
  ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56, // SF6
  ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3, // Top
  ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 // Past
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 8 };
};

inline bool operator==(t988dbba8f7f718b94a28d77808883135 const &a, t988dbba8f7f718b94a28d77808883135 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // SF1
    case 1: return std::get<1>(a) == std::get<1>(b); // SF2
    case 2: return std::get<2>(a) == std::get<2>(b); // SF3
    case 3: return std::get<3>(a) == std::get<3>(b); // SF4
    case 4: return std::get<4>(a) == std::get<4>(b); // SF4s
    case 5: return std::get<5>(a) == std::get<5>(b); // SF6
    case 6: return std::get<6>(a) == std::get<6>(b); // Top
    case 7: return std::get<7>(a) == std::get<7>(b); // Past
  };
  return false;
}
inline bool operator!=(t988dbba8f7f718b94a28d77808883135 const &a, t988dbba8f7f718b94a28d77808883135 const &b) {
  return !operator==(a, b);
}
struct te911ed7290f60379de95c4e48ca07aa8 {
  std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> lifespan;
  bool skip_nulls;
  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 operation;
  te911ed7290f60379de95c4e48ca07aa8(std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> lifespan_, bool skip_nulls_, ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 operation_) : lifespan(lifespan_), skip_nulls(skip_nulls_), operation(operation_) {}
  te911ed7290f60379de95c4e48ca07aa8() = default;
};
inline bool operator==(te911ed7290f60379de95c4e48ca07aa8 const &a, te911ed7290f60379de95c4e48ca07aa8 const &b) {
  return ((a.lifespan && b.lifespan && a.lifespan.value() == b.lifespan.value()) || (!a.lifespan && !b.lifespan)) && a.skip_nulls == b.skip_nulls && a.operation == b.operation;
}

inline bool operator!=(te911ed7290f60379de95c4e48ca07aa8 const &a, te911ed7290f60379de95c4e48ca07aa8 const &b) {
  return !operator==(a, b);
}
struct t09ebe067ef7b13158d058ba3ce6f150c : public std::tuple<
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t09ebe067ef7b13158d058ba3ce6f150c const &a, t09ebe067ef7b13158d058ba3ce6f150c const &b) {
  return (*std::get<0>(a)) == (*std::get<0>(b)) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(t09ebe067ef7b13158d058ba3ce6f150c const &a, t09ebe067ef7b13158d058ba3ce6f150c const &b) {
  return !operator==(a, b);
}
struct t8411610d7f6cfe33697a36943471c946 : public std::variant<
  ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c // Split
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 1 };
};

inline bool operator==(t8411610d7f6cfe33697a36943471c946 const &a, t8411610d7f6cfe33697a36943471c946 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // Split
  };
  return false;
}
inline bool operator!=(t8411610d7f6cfe33697a36943471c946 const &a, t8411610d7f6cfe33697a36943471c946 const &b) {
  return !operator==(a, b);
}
struct t6c5f9fd1d543de7239bd047f61f528e7 : public std::variant<
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, // Tuple
  Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>, // Record
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, // Vector
  ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9, // Case
  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1, // Stateless
  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8, // Stateful
  ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 // Generator
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 7 };
};

inline bool operator==(t6c5f9fd1d543de7239bd047f61f528e7 const &a, t6c5f9fd1d543de7239bd047f61f528e7 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // Tuple
    case 1: return std::get<1>(a) == std::get<1>(b); // Record
    case 2: return std::get<2>(a) == std::get<2>(b); // Vector
    case 3: return std::get<3>(a) == std::get<3>(b); // Case
    case 4: return std::get<4>(a) == std::get<4>(b); // Stateless
    case 5: return std::get<5>(a) == std::get<5>(b); // Stateful
    case 6: return std::get<6>(a) == std::get<6>(b); // Generator
  };
  return false;
}
inline bool operator!=(t6c5f9fd1d543de7239bd047f61f528e7 const &a, t6c5f9fd1d543de7239bd047f61f528e7 const &b) {
  return !operator==(a, b);
}
struct t {
  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 text;
  uint32_t uniq_num;
  dessser::gen::raql_type::t_ext typ;
  std::optional<dessser::gen::units::t_ext> units;
  t(::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 text_, uint32_t uniq_num_, dessser::gen::raql_type::t_ext typ_, std::optional<dessser::gen::units::t_ext> units_) : text(text_), uniq_num(uniq_num_), typ(typ_), units(units_) {}
  t() = default;
};
inline bool operator==(t const &a, t const &b) {
  return a.text == b.text && a.uniq_num == b.uniq_num && ::dessser::gen::raql_type::Deref(a.typ) == ::dessser::gen::raql_type::Deref(b.typ) && ((a.units && b.units && ::dessser::gen::units::Deref(a.units.value()) == ::dessser::gen::units::Deref(b.units.value())) || (!a.units && !b.units));
}

inline bool operator!=(t const &a, t const &b) {
  return !operator==(a, b);
}
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct tf4faeadcb1d4bc08688cd9dc4070e517 : public std::tuple<
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  Pointer
> {
  using tuple::tuple;
  tf4faeadcb1d4bc08688cd9dc4070e517(std::tuple<std::shared_ptr<::dessser::gen::raql_expr::t> , Pointer> p)
    : std::tuple<std::shared_ptr<::dessser::gen::raql_expr::t> , Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tf4faeadcb1d4bc08688cd9dc4070e517 const &a, tf4faeadcb1d4bc08688cd9dc4070e517 const &b) {
  return (*std::get<0>(a)) == (*std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tf4faeadcb1d4bc08688cd9dc4070e517 const &a, tf4faeadcb1d4bc08688cd9dc4070e517 const &b) {
  return !operator==(a, b);
}
struct ta97bb48ed75bbda6173555873826c8c6 : public std::tuple<
  uint16_t,
  Pointer
> {
  using tuple::tuple;
  ta97bb48ed75bbda6173555873826c8c6(std::tuple<uint16_t, Pointer> p)
    : std::tuple<uint16_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(ta97bb48ed75bbda6173555873826c8c6 const &a, ta97bb48ed75bbda6173555873826c8c6 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(ta97bb48ed75bbda6173555873826c8c6 const &a, ta97bb48ed75bbda6173555873826c8c6 const &b) {
  return !operator==(a, b);
}
struct tdfbb1db4490dff22d6a3c6eddc51a564 : public std::tuple<
  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7,
  Pointer
> {
  using tuple::tuple;
  tdfbb1db4490dff22d6a3c6eddc51a564(std::tuple<::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tdfbb1db4490dff22d6a3c6eddc51a564 const &a, tdfbb1db4490dff22d6a3c6eddc51a564 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tdfbb1db4490dff22d6a3c6eddc51a564 const &a, tdfbb1db4490dff22d6a3c6eddc51a564 const &b) {
  return !operator==(a, b);
}
struct t491c44439106a32f896827242e8e76a1 : public std::tuple<
  uint32_t,
  Pointer
> {
  using tuple::tuple;
  t491c44439106a32f896827242e8e76a1(std::tuple<uint32_t, Pointer> p)
    : std::tuple<uint32_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t491c44439106a32f896827242e8e76a1 const &a, t491c44439106a32f896827242e8e76a1 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t491c44439106a32f896827242e8e76a1 const &a, t491c44439106a32f896827242e8e76a1 const &b) {
  return !operator==(a, b);
}
struct t1a5d74abf838df33f185a72a8912f5c9 : public std::tuple<
  uint8_t,
  Pointer
> {
  using tuple::tuple;
  t1a5d74abf838df33f185a72a8912f5c9(std::tuple<uint8_t, Pointer> p)
    : std::tuple<uint8_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t1a5d74abf838df33f185a72a8912f5c9 const &a, t1a5d74abf838df33f185a72a8912f5c9 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t1a5d74abf838df33f185a72a8912f5c9 const &a, t1a5d74abf838df33f185a72a8912f5c9 const &b) {
  return !operator==(a, b);
}
struct t60d2a53484b8e0b6653034ad96861c61 : public std::tuple<
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >,
  Pointer
> {
  using tuple::tuple;
  t60d2a53484b8e0b6653034ad96861c61(std::tuple<Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer> p)
    : std::tuple<Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t60d2a53484b8e0b6653034ad96861c61 const &a, t60d2a53484b8e0b6653034ad96861c61 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t60d2a53484b8e0b6653034ad96861c61 const &a, t60d2a53484b8e0b6653034ad96861c61 const &b) {
  return !operator==(a, b);
}
struct te61b5292977bf2669de474a297a8d1e4 : public std::tuple<
  Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>,
  Pointer
> {
  using tuple::tuple;
  te61b5292977bf2669de474a297a8d1e4(std::tuple<Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>, Pointer> p)
    : std::tuple<Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(te61b5292977bf2669de474a297a8d1e4 const &a, te61b5292977bf2669de474a297a8d1e4 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(te61b5292977bf2669de474a297a8d1e4 const &a, te61b5292977bf2669de474a297a8d1e4 const &b) {
  return !operator==(a, b);
}
struct t18cecf882d7ac80cef37dfe6b22279d4 : public std::tuple<
  dessser::gen::field_name::t_ext,
  Pointer
> {
  using tuple::tuple;
  t18cecf882d7ac80cef37dfe6b22279d4(std::tuple<dessser::gen::field_name::t_ext, Pointer> p)
    : std::tuple<dessser::gen::field_name::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t18cecf882d7ac80cef37dfe6b22279d4 const &a, t18cecf882d7ac80cef37dfe6b22279d4 const &b) {
  return ::dessser::gen::field_name::Deref(std::get<0>(a)) == ::dessser::gen::field_name::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t18cecf882d7ac80cef37dfe6b22279d4 const &a, t18cecf882d7ac80cef37dfe6b22279d4 const &b) {
  return !operator==(a, b);
}
struct te88211e2a2e61aaae42952aaddf8e9e2 : public std::tuple<
  Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>,
  Pointer
> {
  using tuple::tuple;
  te88211e2a2e61aaae42952aaddf8e9e2(std::tuple<Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>, Pointer> p)
    : std::tuple<Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(te88211e2a2e61aaae42952aaddf8e9e2 const &a, te88211e2a2e61aaae42952aaddf8e9e2 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(te88211e2a2e61aaae42952aaddf8e9e2 const &a, te88211e2a2e61aaae42952aaddf8e9e2 const &b) {
  return !operator==(a, b);
}
struct t0a80625c094043132be3ecb4371c3ca6 : public std::tuple<
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >,
  Pointer
> {
  using tuple::tuple;
  t0a80625c094043132be3ecb4371c3ca6(std::tuple<std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer> p)
    : std::tuple<std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t0a80625c094043132be3ecb4371c3ca6 const &a, t0a80625c094043132be3ecb4371c3ca6 const &b) {
  return ((std::get<0>(a) && std::get<0>(b) && (*std::get<0>(a).value()) == (*std::get<0>(b).value())) || (!std::get<0>(a) && !std::get<0>(b))) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t0a80625c094043132be3ecb4371c3ca6 const &a, t0a80625c094043132be3ecb4371c3ca6 const &b) {
  return !operator==(a, b);
}
struct t36e2c6991fbf89e0e7d761537d7323c0 : public std::tuple<
  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1,
  Pointer
> {
  using tuple::tuple;
  t36e2c6991fbf89e0e7d761537d7323c0(std::tuple<::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t36e2c6991fbf89e0e7d761537d7323c0 const &a, t36e2c6991fbf89e0e7d761537d7323c0 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t36e2c6991fbf89e0e7d761537d7323c0 const &a, t36e2c6991fbf89e0e7d761537d7323c0 const &b) {
  return !operator==(a, b);
}
struct tadb8577e09b7edb2961f1b2389da22e4 : public std::tuple<
  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa,
  Pointer
> {
  using tuple::tuple;
  tadb8577e09b7edb2961f1b2389da22e4(std::tuple<::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tadb8577e09b7edb2961f1b2389da22e4 const &a, tadb8577e09b7edb2961f1b2389da22e4 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tadb8577e09b7edb2961f1b2389da22e4 const &a, tadb8577e09b7edb2961f1b2389da22e4 const &b) {
  return !operator==(a, b);
}
struct tf3063cfb73e0f06d3ea99ebd15a86d50 : public std::tuple<
  dessser::gen::raql_value::t_ext,
  Pointer
> {
  using tuple::tuple;
  tf3063cfb73e0f06d3ea99ebd15a86d50(std::tuple<dessser::gen::raql_value::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_value::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tf3063cfb73e0f06d3ea99ebd15a86d50 const &a, tf3063cfb73e0f06d3ea99ebd15a86d50 const &b) {
  return ::dessser::gen::raql_value::Deref(std::get<0>(a)) == ::dessser::gen::raql_value::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tf3063cfb73e0f06d3ea99ebd15a86d50 const &a, tf3063cfb73e0f06d3ea99ebd15a86d50 const &b) {
  return !operator==(a, b);
}
struct tc4e06565de85990f3a8300f3d579c5ec : public std::tuple<
  dessser::gen::raql_variable::t_ext,
  Pointer
> {
  using tuple::tuple;
  tc4e06565de85990f3a8300f3d579c5ec(std::tuple<dessser::gen::raql_variable::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_variable::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tc4e06565de85990f3a8300f3d579c5ec const &a, tc4e06565de85990f3a8300f3d579c5ec const &b) {
  return ::dessser::gen::raql_variable::Deref(std::get<0>(a)) == ::dessser::gen::raql_variable::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tc4e06565de85990f3a8300f3d579c5ec const &a, tc4e06565de85990f3a8300f3d579c5ec const &b) {
  return !operator==(a, b);
}
struct tafafa3f11f4987d5593612447c141adc : public std::tuple<
  dessser::gen::raql_binding_key::t_ext,
  Pointer
> {
  using tuple::tuple;
  tafafa3f11f4987d5593612447c141adc(std::tuple<dessser::gen::raql_binding_key::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_binding_key::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tafafa3f11f4987d5593612447c141adc const &a, tafafa3f11f4987d5593612447c141adc const &b) {
  return ::dessser::gen::raql_binding_key::Deref(std::get<0>(a)) == ::dessser::gen::raql_binding_key::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tafafa3f11f4987d5593612447c141adc const &a, tafafa3f11f4987d5593612447c141adc const &b) {
  return !operator==(a, b);
}
struct t6459c10486533027b3ba85d163bef4e9 : public std::tuple<
  Lst<dessser::gen::raql_path_comp::t_ext>,
  Pointer
> {
  using tuple::tuple;
  t6459c10486533027b3ba85d163bef4e9(std::tuple<Lst<dessser::gen::raql_path_comp::t_ext>, Pointer> p)
    : std::tuple<Lst<dessser::gen::raql_path_comp::t_ext>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t6459c10486533027b3ba85d163bef4e9 const &a, t6459c10486533027b3ba85d163bef4e9 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t6459c10486533027b3ba85d163bef4e9 const &a, t6459c10486533027b3ba85d163bef4e9 const &b) {
  return !operator==(a, b);
}
struct tdb32a2e5c34c950a3600da6c2ff4f8f3 : public std::tuple<
  dessser::gen::raql_path_comp::t_ext,
  Pointer
> {
  using tuple::tuple;
  tdb32a2e5c34c950a3600da6c2ff4f8f3(std::tuple<dessser::gen::raql_path_comp::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_path_comp::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tdb32a2e5c34c950a3600da6c2ff4f8f3 const &a, tdb32a2e5c34c950a3600da6c2ff4f8f3 const &b) {
  return ::dessser::gen::raql_path_comp::Deref(std::get<0>(a)) == ::dessser::gen::raql_path_comp::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tdb32a2e5c34c950a3600da6c2ff4f8f3 const &a, tdb32a2e5c34c950a3600da6c2ff4f8f3 const &b) {
  return !operator==(a, b);
}
struct t556c024f790314c3a0cb755ef8a385e6 : public std::tuple<
  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84,
  Pointer
> {
  using tuple::tuple;
  t556c024f790314c3a0cb755ef8a385e6(std::tuple<::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t556c024f790314c3a0cb755ef8a385e6 const &a, t556c024f790314c3a0cb755ef8a385e6 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t556c024f790314c3a0cb755ef8a385e6 const &a, t556c024f790314c3a0cb755ef8a385e6 const &b) {
  return !operator==(a, b);
}
struct t101502ffd7fb38beafe4b49259f92ba1 : public std::tuple<
  dessser::gen::raql_type::t_ext,
  Pointer
> {
  using tuple::tuple;
  t101502ffd7fb38beafe4b49259f92ba1(std::tuple<dessser::gen::raql_type::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_type::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t101502ffd7fb38beafe4b49259f92ba1 const &a, t101502ffd7fb38beafe4b49259f92ba1 const &b) {
  return ::dessser::gen::raql_type::Deref(std::get<0>(a)) == ::dessser::gen::raql_type::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t101502ffd7fb38beafe4b49259f92ba1 const &a, t101502ffd7fb38beafe4b49259f92ba1 const &b) {
  return !operator==(a, b);
}
struct te8dcb493b127a28ebc308edae07a8c7e : public std::tuple<
  ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051,
  Pointer
> {
  using tuple::tuple;
  te8dcb493b127a28ebc308edae07a8c7e(std::tuple<::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(te8dcb493b127a28ebc308edae07a8c7e const &a, te8dcb493b127a28ebc308edae07a8c7e const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(te8dcb493b127a28ebc308edae07a8c7e const &a, te8dcb493b127a28ebc308edae07a8c7e const &b) {
  return !operator==(a, b);
}
struct t12fb9c475959b52bf7b17b155a955ffa : public std::tuple<
  Size,
  Pointer
> {
  using tuple::tuple;
  t12fb9c475959b52bf7b17b155a955ffa(std::tuple<Size, Pointer> p)
    : std::tuple<Size, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t12fb9c475959b52bf7b17b155a955ffa const &a, t12fb9c475959b52bf7b17b155a955ffa const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t12fb9c475959b52bf7b17b155a955ffa const &a, t12fb9c475959b52bf7b17b155a955ffa const &b) {
  return !operator==(a, b);
}
struct t9ef6882174ae71a34a3c5ef6b29242fb : public std::tuple<
  Bytes,
  Pointer
> {
  using tuple::tuple;
  t9ef6882174ae71a34a3c5ef6b29242fb(std::tuple<Bytes, Pointer> p)
    : std::tuple<Bytes, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t9ef6882174ae71a34a3c5ef6b29242fb const &a, t9ef6882174ae71a34a3c5ef6b29242fb const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t9ef6882174ae71a34a3c5ef6b29242fb const &a, t9ef6882174ae71a34a3c5ef6b29242fb const &b) {
  return !operator==(a, b);
}
struct t53f6edb28f7db698ddcd7f845431bd86 : public std::tuple<
  ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036,
  Pointer
> {
  using tuple::tuple;
  t53f6edb28f7db698ddcd7f845431bd86(std::tuple<::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t53f6edb28f7db698ddcd7f845431bd86 const &a, t53f6edb28f7db698ddcd7f845431bd86 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t53f6edb28f7db698ddcd7f845431bd86 const &a, t53f6edb28f7db698ddcd7f845431bd86 const &b) {
  return !operator==(a, b);
}
struct t0469c19d1fe04171944ad66599e0de7a : public std::tuple<
  ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39,
  Pointer
> {
  using tuple::tuple;
  t0469c19d1fe04171944ad66599e0de7a(std::tuple<::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t0469c19d1fe04171944ad66599e0de7a const &a, t0469c19d1fe04171944ad66599e0de7a const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t0469c19d1fe04171944ad66599e0de7a const &a, t0469c19d1fe04171944ad66599e0de7a const &b) {
  return !operator==(a, b);
}
struct t499e7f93530e4a340351cd37426efa24 : public std::tuple<
  ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035,
  Pointer
> {
  using tuple::tuple;
  t499e7f93530e4a340351cd37426efa24(std::tuple<::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t499e7f93530e4a340351cd37426efa24 const &a, t499e7f93530e4a340351cd37426efa24 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t499e7f93530e4a340351cd37426efa24 const &a, t499e7f93530e4a340351cd37426efa24 const &b) {
  return !operator==(a, b);
}
struct t275f8f4c2f7ef1a9aeb843eadc0fca02 : public std::tuple<
  std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042>,
  Pointer
> {
  using tuple::tuple;
  t275f8f4c2f7ef1a9aeb843eadc0fca02(std::tuple<std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042>, Pointer> p)
    : std::tuple<std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t275f8f4c2f7ef1a9aeb843eadc0fca02 const &a, t275f8f4c2f7ef1a9aeb843eadc0fca02 const &b) {
  return ((std::get<0>(a) && std::get<0>(b) && std::get<0>(a).value() == std::get<0>(b).value()) || (!std::get<0>(a) && !std::get<0>(b))) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t275f8f4c2f7ef1a9aeb843eadc0fca02 const &a, t275f8f4c2f7ef1a9aeb843eadc0fca02 const &b) {
  return !operator==(a, b);
}
struct t3101f9e5733a087ce955507938ed5ee8 : public std::tuple<
  ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042,
  Pointer
> {
  using tuple::tuple;
  t3101f9e5733a087ce955507938ed5ee8(std::tuple<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t3101f9e5733a087ce955507938ed5ee8 const &a, t3101f9e5733a087ce955507938ed5ee8 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t3101f9e5733a087ce955507938ed5ee8 const &a, t3101f9e5733a087ce955507938ed5ee8 const &b) {
  return !operator==(a, b);
}
struct tf9a0a3fefc87c9e10a93d3a172850c26 : public std::tuple<
  bool,
  Pointer
> {
  using tuple::tuple;
  tf9a0a3fefc87c9e10a93d3a172850c26(std::tuple<bool, Pointer> p)
    : std::tuple<bool, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tf9a0a3fefc87c9e10a93d3a172850c26 const &a, tf9a0a3fefc87c9e10a93d3a172850c26 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tf9a0a3fefc87c9e10a93d3a172850c26 const &a, tf9a0a3fefc87c9e10a93d3a172850c26 const &b) {
  return !operator==(a, b);
}
struct tf96977136b2195e79d540e0390dedf3c : public std::tuple<
  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135,
  Pointer
> {
  using tuple::tuple;
  tf96977136b2195e79d540e0390dedf3c(std::tuple<::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tf96977136b2195e79d540e0390dedf3c const &a, tf96977136b2195e79d540e0390dedf3c const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tf96977136b2195e79d540e0390dedf3c const &a, tf96977136b2195e79d540e0390dedf3c const &b) {
  return !operator==(a, b);
}
struct tb9364de84f89845fbdcb5e88d743800f : public std::tuple<
  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6,
  Pointer
> {
  using tuple::tuple;
  tb9364de84f89845fbdcb5e88d743800f(std::tuple<::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tb9364de84f89845fbdcb5e88d743800f const &a, tb9364de84f89845fbdcb5e88d743800f const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tb9364de84f89845fbdcb5e88d743800f const &a, tb9364de84f89845fbdcb5e88d743800f const &b) {
  return !operator==(a, b);
}
struct td2cd337bb3c8bc04d5603393d084985b : public std::tuple<
  uint64_t,
  Pointer
> {
  using tuple::tuple;
  td2cd337bb3c8bc04d5603393d084985b(std::tuple<uint64_t, Pointer> p)
    : std::tuple<uint64_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(td2cd337bb3c8bc04d5603393d084985b const &a, td2cd337bb3c8bc04d5603393d084985b const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(td2cd337bb3c8bc04d5603393d084985b const &a, td2cd337bb3c8bc04d5603393d084985b const &b) {
  return !operator==(a, b);
}
struct t9a758baeff17224a77e1a522010b4168 : public std::tuple<
  double,
  Pointer
> {
  using tuple::tuple;
  t9a758baeff17224a77e1a522010b4168(std::tuple<double, Pointer> p)
    : std::tuple<double, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t9a758baeff17224a77e1a522010b4168 const &a, t9a758baeff17224a77e1a522010b4168 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t9a758baeff17224a77e1a522010b4168 const &a, t9a758baeff17224a77e1a522010b4168 const &b) {
  return !operator==(a, b);
}
struct t553735768d089d4c366f6b66481092a2 : public std::tuple<
  ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d,
  Pointer
> {
  using tuple::tuple;
  t553735768d089d4c366f6b66481092a2(std::tuple<::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t553735768d089d4c366f6b66481092a2 const &a, t553735768d089d4c366f6b66481092a2 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t553735768d089d4c366f6b66481092a2 const &a, t553735768d089d4c366f6b66481092a2 const &b) {
  return !operator==(a, b);
}
struct t3ddb4633a3ccf43793c03838edabfa36 : public std::tuple<
  ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782,
  Pointer
> {
  using tuple::tuple;
  t3ddb4633a3ccf43793c03838edabfa36(std::tuple<::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t3ddb4633a3ccf43793c03838edabfa36 const &a, t3ddb4633a3ccf43793c03838edabfa36 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t3ddb4633a3ccf43793c03838edabfa36 const &a, t3ddb4633a3ccf43793c03838edabfa36 const &b) {
  return !operator==(a, b);
}
struct t4ccad2556e823529795cd21badd54b9e : public std::tuple<
  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b,
  Pointer
> {
  using tuple::tuple;
  t4ccad2556e823529795cd21badd54b9e(std::tuple<::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t4ccad2556e823529795cd21badd54b9e const &a, t4ccad2556e823529795cd21badd54b9e const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t4ccad2556e823529795cd21badd54b9e const &a, t4ccad2556e823529795cd21badd54b9e const &b) {
  return !operator==(a, b);
}
struct te93c07274cadb39058f1f0ef45b6ad7c : public std::tuple<
  ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea,
  Pointer
> {
  using tuple::tuple;
  te93c07274cadb39058f1f0ef45b6ad7c(std::tuple<::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(te93c07274cadb39058f1f0ef45b6ad7c const &a, te93c07274cadb39058f1f0ef45b6ad7c const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(te93c07274cadb39058f1f0ef45b6ad7c const &a, te93c07274cadb39058f1f0ef45b6ad7c const &b) {
  return !operator==(a, b);
}
struct tcf2bbf57edbf797e26f0528c2c828563 : public std::tuple<
  dessser::gen::raql_top_output::t_ext,
  Pointer
> {
  using tuple::tuple;
  tcf2bbf57edbf797e26f0528c2c828563(std::tuple<dessser::gen::raql_top_output::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_top_output::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tcf2bbf57edbf797e26f0528c2c828563 const &a, tcf2bbf57edbf797e26f0528c2c828563 const &b) {
  return ::dessser::gen::raql_top_output::Deref(std::get<0>(a)) == ::dessser::gen::raql_top_output::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tcf2bbf57edbf797e26f0528c2c828563 const &a, tcf2bbf57edbf797e26f0528c2c828563 const &b) {
  return !operator==(a, b);
}
struct t096d6a0956a2df6dec7d0945ab177a4b : public std::tuple<
  std::optional<dessser::gen::units::t_ext>,
  Pointer
> {
  using tuple::tuple;
  t096d6a0956a2df6dec7d0945ab177a4b(std::tuple<std::optional<dessser::gen::units::t_ext>, Pointer> p)
    : std::tuple<std::optional<dessser::gen::units::t_ext>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t096d6a0956a2df6dec7d0945ab177a4b const &a, t096d6a0956a2df6dec7d0945ab177a4b const &b) {
  return ((std::get<0>(a) && std::get<0>(b) && ::dessser::gen::units::Deref(std::get<0>(a).value()) == ::dessser::gen::units::Deref(std::get<0>(b).value())) || (!std::get<0>(a) && !std::get<0>(b))) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t096d6a0956a2df6dec7d0945ab177a4b const &a, t096d6a0956a2df6dec7d0945ab177a4b const &b) {
  return !operator==(a, b);
}
struct tdcd8238b20249643ff5b5f9a7648e226 : public std::tuple<
  dessser::gen::units::t_ext,
  Pointer
> {
  using tuple::tuple;
  tdcd8238b20249643ff5b5f9a7648e226(std::tuple<dessser::gen::units::t_ext, Pointer> p)
    : std::tuple<dessser::gen::units::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tdcd8238b20249643ff5b5f9a7648e226 const &a, tdcd8238b20249643ff5b5f9a7648e226 const &b) {
  return ::dessser::gen::units::Deref(std::get<0>(a)) == ::dessser::gen::units::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tdcd8238b20249643ff5b5f9a7648e226 const &a, tdcd8238b20249643ff5b5f9a7648e226 const &b) {
  return !operator==(a, b);
}
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
/* ----------- */
/* Definitions */
/* ----------- */
/* 
    (fun ("{text: [Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]; uniq_num: U32; typ: $raql_type; units: $units?}" "Ptr")
      (let "srec_dst_1292"
        (let "srec_dst_1291"
          (let "srec_dst_1290"
            (let "label1_1169" (label-of (get-field "text" (param 0)))
              (let "ssum_dst_1170" (write-u16 little-endian (param 1) (identifier "label1_1169"))
                (if (eq (u16 0) (identifier "label1_1169"))
                  (let "dst_ref_1287"
                    (make-vec
                      (let "leb128_sz_1285" (make-vec (cardinality (get-alt "Tuple" (get-field "text" (param 0)))))
                        (let "leb128_ptr_1286" (make-vec (identifier "ssum_dst_1170"))
                          (seq
                            (while
                              (seq
                                (set-vec (u8 0) (identifier "leb128_ptr_1286")
                                  (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1286"))
                                    (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1285"))) 
                                      (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1285"))) 
                                      (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1285"))) (u8 128)))))
                                (set-vec (u8 0) (identifier "leb128_sz_1285") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1285")) (u8 7))) 
                                (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1285")) (u32 0))) 
                              (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1286"))))))
                    (let "n_ref_1288" (make-vec (i32 0))
                      (seq
                        (for-each "x_1289" (get-alt "Tuple" (get-field "text" (param 0)))
                          (seq (set-vec (u8 0) (identifier "dst_ref_1287") (apply (myself "Ptr") (identifier "x_1289") (unsafe-nth (u8 0) (identifier "dst_ref_1287"))))
                            (set-vec (u8 0) (identifier "n_ref_1288") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1288")))))) 
                        (unsafe-nth (u8 0) (identifier "dst_ref_1287")))))
                  (if (eq (u16 1) (identifier "label1_1169"))
                    (let "dst_ref_1280"
                      (make-vec
                        (let "leb128_sz_1278" (make-vec (cardinality (get-alt "Record" (get-field "text" (param 0)))))
                          (let "leb128_ptr_1279" (make-vec (identifier "ssum_dst_1170"))
                            (seq
                              (while
                                (seq
                                  (set-vec (u8 0) (identifier "leb128_ptr_1279")
                                    (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1279"))
                                      (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1278"))) 
                                        (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1278"))) 
                                        (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1278"))) (u8 128)))))
                                  (set-vec (u8 0) (identifier "leb128_sz_1278") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1278")) (u8 7))) 
                                  (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1278")) (u32 0))) 
                                (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1279"))))))
                      (let "n_ref_1281" (make-vec (i32 0))
                        (seq
                          (for-each "x_1282" (get-alt "Record" (get-field "text" (param 0)))
                            (seq
                              (set-vec (u8 0) (identifier "dst_ref_1280")
                                (apply (myself "Ptr") (get-item 1 (identifier "x_1282"))
                                  (let "stup_dst_1283" (unsafe-nth (u8 0) (identifier "dst_ref_1280")) (apply (ext-identifier field_name to-row-binary) (get-item 0 (identifier "x_1282")) (identifier "stup_dst_1283")))))
                              (set-vec (u8 0) (identifier "n_ref_1281") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1281")))))) 
                          (unsafe-nth (u8 0) (identifier "dst_ref_1280")))))
                    (if (eq (u16 2) (identifier "label1_1169"))
                      (let "dst_ref_1275"
                        (make-vec
                          (let "leb128_sz_1273" (make-vec (cardinality (get-alt "Vector" (get-field "text" (param 0)))))
                            (let "leb128_ptr_1274" (make-vec (identifier "ssum_dst_1170"))
                              (seq
                                (while
                                  (seq
                                    (set-vec (u8 0) (identifier "leb128_ptr_1274")
                                      (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1274"))
                                        (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1273"))) 
                                          (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1273"))) 
                                          (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1273"))) (u8 128)))))
                                    (set-vec (u8 0) (identifier "leb128_sz_1273") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1273")) (u8 7))) 
                                    (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1273")) (u32 0))) 
                                  (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1274"))))))
                        (let "n_ref_1276" (make-vec (i32 0))
                          (seq
                            (for-each "x_1277" (get-alt "Vector" (get-field "text" (param 0)))
                              (seq (set-vec (u8 0) (identifier "dst_ref_1275") (apply (myself "Ptr") (identifier "x_1277") (unsafe-nth (u8 0) (identifier "dst_ref_1275"))))
                                (set-vec (u8 0) (identifier "n_ref_1276") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1276")))))) 
                            (unsafe-nth (u8 0) (identifier "dst_ref_1275")))))
                      (if (eq (u16 3) (identifier "label1_1169"))
                        (let "stup_dst_1272"
                          (let "dst_ref_1267"
                            (make-vec
                              (let "leb128_sz_1265" (make-vec (cardinality (get-item 0 (get-alt "Case" (get-field "text" (param 0))))))
                                (let "leb128_ptr_1266" (make-vec (identifier "ssum_dst_1170"))
                                  (seq
                                    (while
                                      (seq
                                        (set-vec (u8 0) (identifier "leb128_ptr_1266")
                                          (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1266"))
                                            (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1265"))) 
                                              (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1265"))) 
                                              (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1265"))) (u8 128)))))
                                        (set-vec (u8 0) (identifier "leb128_sz_1265") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1265")) (u8 7))) 
                                        (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1265")) (u32 0))) 
                                      (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1266"))))))
                            (let "n_ref_1268" (make-vec (i32 0))
                              (seq
                                (for-each "x_1269" (get-item 0 (get-alt "Case" (get-field "text" (param 0))))
                                  (seq
                                    (set-vec (u8 0) (identifier "dst_ref_1267")
                                      (apply (myself "Ptr") (get-field "case_cons" (identifier "x_1269")) (apply (myself "Ptr") (get-field "case_cond" (identifier "x_1269")) (unsafe-nth (u8 0) (identifier "dst_ref_1267")))))
                                    (set-vec (u8 0) (identifier "n_ref_1268") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1268")))))) 
                                (unsafe-nth (u8 0) (identifier "dst_ref_1267")))))
                          (if (is-null (get-item 1 (get-alt "Case" (get-field "text" (param 0))))) 
                            (write-u8 (identifier "stup_dst_1272") (u8 1)) 
                            (apply (myself "Ptr") (force (get-item 1 (get-alt "Case" (get-field "text" (param 0))))) (write-u8 (identifier "stup_dst_1272") (u8 0)))))
                        (if (eq (u16 4) (identifier "label1_1169"))
                          (let "label1_1231" (label-of (get-alt "Stateless" (get-field "text" (param 0))))
                            (let "ssum_dst_1232" (write-u16 little-endian (identifier "ssum_dst_1170") (identifier "label1_1231"))
                              (if (eq (u16 0) (identifier "label1_1231"))
                                (let "label1_1258" (label-of (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))
                                  (let "ssum_dst_1259" (write-u16 little-endian (identifier "ssum_dst_1232") (identifier "label1_1258"))
                                    (if (eq (u16 0) (identifier "label1_1258"))
                                      (apply (ext-identifier raql_value to-row-binary) (get-alt "Const" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))) (identifier "ssum_dst_1259"))
                                      (if (eq (u16 1) (identifier "label1_1258"))
                                        (apply (ext-identifier raql_variable to-row-binary) (get-alt "Variable" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))) (identifier "ssum_dst_1259"))
                                        (if (eq (u16 2) (identifier "label1_1258"))
                                          (apply (ext-identifier raql_binding_key to-row-binary) (get-alt "Binding" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))) (identifier "ssum_dst_1259"))
                                          (if (eq (u16 3) (identifier "label1_1258")) 
                                            (identifier "ssum_dst_1259")
                                            (if (eq (u16 4) (identifier "label1_1258")) 
                                              (identifier "ssum_dst_1259")
                                              (if (eq (u16 5) (identifier "label1_1258")) 
                                                (identifier "ssum_dst_1259")
                                                (if (eq (u16 6) (identifier "label1_1258")) 
                                                  (identifier "ssum_dst_1259")
                                                  (if (eq (u16 7) (identifier "label1_1258"))
                                                    (let "dst_ref_1262"
                                                      (make-vec
                                                        (let "leb128_sz_1260" 
                                                          (make-vec (cardinality (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                                          (let "leb128_ptr_1261" 
                                                            (make-vec (identifier "ssum_dst_1259"))
                                                            (seq
                                                              (while
                                                                (seq
                                                                  (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb128_ptr_1261")
                                                                    (write-u8 
                                                                    (unsafe-nth (u8 0) (identifier "leb128_ptr_1261"))
                                                                    (if 
                                                                    (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1260"))) 
                                                                    (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1260"))) 
                                                                    (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1260"))) (u8 128)))))
                                                                  (set-vec (u8 0) (identifier "leb128_sz_1260") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1260")) (u8 7)))
                                                                  (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1260")) (u32 0))) 
                                                                (nop)) 
                                                              (unsafe-nth (u8 0) (identifier "leb128_ptr_1261"))))))
                                                      (let "n_ref_1263" 
                                                        (make-vec (i32 0))
                                                        (seq
                                                          (for-each "x_1264" 
                                                            (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))
                                                            (seq
                                                              (set-vec 
                                                                (u8 0) 
                                                                (identifier "dst_ref_1262") 
                                                                (apply (ext-identifier raql_path_comp to-row-binary) (identifier "x_1264") (unsafe-nth (u8 0) (identifier "dst_ref_1262"))))
                                                              (set-vec (u8 0) (identifier "n_ref_1263") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1263")))))) 
                                                          (unsafe-nth (u8 0) (identifier "dst_ref_1262"))))) 
                                                    (seq (assert (eq (identifier "label1_1258") (u16 8))) (identifier "ssum_dst_1259"))))))))))))
                                (if (eq (u16 1) (identifier "label1_1231"))
                                  (apply (myself "Ptr") (get-item 1 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))
                                    (let "label1_1250" (label-of (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))
                                      (let "ssum_dst_1251" (write-u16 little-endian (identifier "ssum_dst_1232") (identifier "label1_1250"))
                                        (if (eq (u16 0) (identifier "label1_1250")) 
                                          (identifier "ssum_dst_1251")
                                          (if (eq (u16 1) (identifier "label1_1250"))
                                            (apply (ext-identifier raql_type to-row-binary) (get-alt "Cast" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))) (identifier "ssum_dst_1251"))
                                            (if (eq (u16 2) (identifier "label1_1250")) 
                                              (identifier "ssum_dst_1251")
                                              (if (eq (u16 3) (identifier "label1_1250"))
                                                (let "stup_dst_1254"
                                                  (apply (ext-identifier raql_type to-row-binary) 
                                                    (get-item 0 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))) 
                                                    (identifier "ssum_dst_1251"))
                                                  (let "ssum_dst_1256"
                                                    (write-u16 little-endian (identifier "stup_dst_1254") (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                                    (if (eq (u16 0) (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))) 
                                                      (identifier "ssum_dst_1256")
                                                      (seq (assert (eq (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))) (u16 1)))
                                                        (identifier "ssum_dst_1256")))))
                                                (if (eq (u16 4) (identifier "label1_1250")) 
                                                  (identifier "ssum_dst_1251")
                                                  (if (eq (u16 5) (identifier "label1_1250")) 
                                                    (identifier "ssum_dst_1251")
                                                    (if (eq (u16 6) (identifier "label1_1250")) 
                                                      (identifier "ssum_dst_1251")
                                                      (if (eq (u16 7) (identifier "label1_1250")) 
                                                        (identifier "ssum_dst_1251")
                                                        (if (eq (u16 8) (identifier "label1_1250")) 
                                                          (identifier "ssum_dst_1251")
                                                          (if (eq (u16 9) (identifier "label1_1250")) 
                                                            (identifier "ssum_dst_1251")
                                                            (if (eq (u16 10) (identifier "label1_1250")) 
                                                              (identifier "ssum_dst_1251")
                                                              (if (eq (u16 11) (identifier "label1_1250")) 
                                                                (identifier "ssum_dst_1251")
                                                                (if (eq (u16 12) (identifier "label1_1250")) 
                                                                  (identifier "ssum_dst_1251")
                                                                  (if 
                                                                    (eq (u16 13) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 14) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 15) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 24) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 25) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 26) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 27) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 28) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 29) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 30) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 31) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 32) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 33) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 34) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 35) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 36) (identifier "label1_1250"))
                                                                    (write-bytes
                                                                    (let "leb128_sz_1252" 
                                                                    (make-vec (string-length (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                                                    (let "leb128_ptr_1253" 
                                                                    (make-vec (identifier "ssum_dst_1251"))
                                                                    (seq
                                                                    (while
                                                                    (seq
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb128_ptr_1253")
                                                                    (write-u8 
                                                                    (unsafe-nth (u8 0) (identifier "leb128_ptr_1253"))
                                                                    (if 
                                                                    (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1252"))) 
                                                                    (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1252"))) 
                                                                    (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1252"))) (u8 128)))))
                                                                    (set-vec (u8 0) (identifier "leb128_sz_1252") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1252")) (u8 7)))
                                                                    (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1252")) (u32 0))) 
                                                                    (nop)) 
                                                                    (unsafe-nth (u8 0) (identifier "leb128_ptr_1253")))))
                                                                    (bytes-of-string (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                                                    (if 
                                                                    (eq (u16 37) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if 
                                                                    (eq (u16 38) (identifier "label1_1250")) 
                                                                    (identifier "ssum_dst_1251")
                                                                    (if (eq (u16 39) (identifier "label1_1250")) (identifier "ssum_dst_1251") (seq (assert (eq (identifier "label1_1250") (u16 40))) (identifier "ssum_dst_1251")))))))))))))))))))))))))))))))))))))))))))))
                                  (if (eq (u16 2) (identifier "label1_1231"))
                                    (let "stup_dst_1244"
                                      (let "label1_1242" (label-of (get-item 0 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0))))))
                                        (let "ssum_dst_1243" (write-u16 little-endian (identifier "ssum_dst_1232") (identifier "label1_1242"))
                                          (if (eq (u16 0) (identifier "label1_1242")) 
                                            (identifier "ssum_dst_1243")
                                            (if (eq (u16 1) (identifier "label1_1242")) 
                                              (identifier "ssum_dst_1243")
                                              (if (eq (u16 2) (identifier "label1_1242")) (identifier "ssum_dst_1243") (seq (assert (eq (identifier "label1_1242") (u16 3))) (identifier "ssum_dst_1243")))))))
                                      (let "dst_ref_1247"
                                        (make-vec
                                          (let "leb128_sz_1245" (make-vec (cardinality (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                            (let "leb128_ptr_1246" (make-vec (identifier "stup_dst_1244"))
                                              (seq
                                                (while
                                                  (seq
                                                    (set-vec (u8 0) (identifier "leb128_ptr_1246")
                                                      (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1246"))
                                                        (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1245"))) 
                                                          (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1245"))) 
                                                          (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1245"))) (u8 128)))))
                                                    (set-vec (u8 0) (identifier "leb128_sz_1245") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1245")) (u8 7)))
                                                    (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1245")) (u32 0))) 
                                                  (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1246"))))))
                                        (let "n_ref_1248" (make-vec (i32 0))
                                          (seq
                                            (for-each "x_1249" (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))
                                              (seq (set-vec (u8 0) (identifier "dst_ref_1247") (apply (myself "Ptr") (identifier "x_1249") (unsafe-nth (u8 0) (identifier "dst_ref_1247"))))
                                                (set-vec (u8 0) (identifier "n_ref_1248") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1248")))))) 
                                            (unsafe-nth (u8 0) (identifier "dst_ref_1247"))))))
                                    (if (eq (u16 3) (identifier "label1_1231"))
                                      (apply (myself "Ptr") (get-item 2 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))
                                        (apply (myself "Ptr") (get-item 1 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))
                                          (let "label1_1238" (label-of (get-item 0 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0))))))
                                            (let "ssum_dst_1239" (write-u16 little-endian (identifier "ssum_dst_1232") (identifier "label1_1238"))
                                              (if (eq (u16 0) (identifier "label1_1238")) 
                                                (identifier "ssum_dst_1239")
                                                (if (eq (u16 1) (identifier "label1_1238")) 
                                                  (identifier "ssum_dst_1239")
                                                  (if (eq (u16 2) (identifier "label1_1238")) 
                                                    (identifier "ssum_dst_1239")
                                                    (if (eq (u16 3) (identifier "label1_1238")) 
                                                      (identifier "ssum_dst_1239")
                                                      (if (eq (u16 4) (identifier "label1_1238")) 
                                                        (identifier "ssum_dst_1239")
                                                        (if (eq (u16 5) (identifier "label1_1238")) 
                                                          (identifier "ssum_dst_1239")
                                                          (if (eq (u16 6) (identifier "label1_1238")) 
                                                            (identifier "ssum_dst_1239")
                                                            (if (eq (u16 7) (identifier "label1_1238")) 
                                                              (identifier "ssum_dst_1239")
                                                              (if (eq (u16 8) (identifier "label1_1238")) 
                                                                (identifier "ssum_dst_1239")
                                                                (if (eq (u16 9) (identifier "label1_1238")) 
                                                                  (identifier "ssum_dst_1239")
                                                                  (if 
                                                                    (eq (u16 10) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 11) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 12) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 13) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 14) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 15) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label1_1238")) 
                                                                    (identifier "ssum_dst_1239")
                                                                    (if (eq (u16 24) (identifier "label1_1238")) (identifier "ssum_dst_1239") (seq (assert (eq (identifier "label1_1238") (u16 25))) (identifier "ssum_dst_1239")))))))))))))))))))))))))))))))
                                      (seq (assert (eq (identifier "label1_1231") (u16 4)))
                                        (apply (myself "Ptr") (get-item 3 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))
                                          (apply (myself "Ptr") (get-item 2 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))
                                            (apply (myself "Ptr") (get-item 1 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))
                                              (let "ssum_dst_1234" (write-u16 little-endian (identifier "ssum_dst_1232") (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                                (if (eq (u16 0) (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0))))))) 
                                                  (identifier "ssum_dst_1234") 
                                                  (seq (assert (eq (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))) (u16 1))) (identifier "ssum_dst_1234"))))))))))))))
                          (if (eq (u16 5) (identifier "label1_1169"))
                            (let "srec_dst_1177"
                              (let "srec_dst_1176"
                                (if (is-null (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))) 
                                  (write-u8 (identifier "ssum_dst_1170") (u8 1))
                                  (let "ssum_dst_1175" (write-u16 little-endian (write-u8 (identifier "ssum_dst_1170") (u8 0)) (label-of (force (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                    (if (eq (u16 0) (label-of (force (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                      (identifier "ssum_dst_1175") (seq (assert (eq (label-of (force (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0)))))) (u16 1))) (identifier "ssum_dst_1175")))))
                                (write-u8 (identifier "srec_dst_1176") (u8-of-bool (get-field "skip_nulls" (get-alt "Stateful" (get-field "text" (param 0)))))))
                              (let "label1_1178" (label-of (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))
                                (let "ssum_dst_1179" (write-u16 little-endian (identifier "srec_dst_1177") (identifier "label1_1178"))
                                  (if (eq (u16 0) (identifier "label1_1178"))
                                    (apply (myself "Ptr") (get-item 1 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                      (let "label1_1226" (label-of (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                        (let "ssum_dst_1227" (write-u16 little-endian (identifier "ssum_dst_1179") (identifier "label1_1226"))
                                          (if (eq (u16 0) (identifier "label1_1226")) 
                                            (identifier "ssum_dst_1227")
                                            (if (eq (u16 1) (identifier "label1_1226")) 
                                              (identifier "ssum_dst_1227")
                                              (if (eq (u16 2) (identifier "label1_1226")) 
                                                (identifier "ssum_dst_1227")
                                                (if (eq (u16 3) (identifier "label1_1226")) 
                                                  (identifier "ssum_dst_1227")
                                                  (if (eq (u16 4) (identifier "label1_1226")) 
                                                    (identifier "ssum_dst_1227")
                                                    (if (eq (u16 5) (identifier "label1_1226")) 
                                                      (identifier "ssum_dst_1227")
                                                      (if (eq (u16 6) (identifier "label1_1226")) 
                                                        (identifier "ssum_dst_1227")
                                                        (if (eq (u16 7) (identifier "label1_1226")) 
                                                          (identifier "ssum_dst_1227")
                                                          (if (eq (u16 8) (identifier "label1_1226")) 
                                                            (identifier "ssum_dst_1227")
                                                            (if (eq (u16 9) (identifier "label1_1226")) 
                                                              (identifier "ssum_dst_1227")
                                                              (if (eq (u16 10) (identifier "label1_1226")) 
                                                                (identifier "ssum_dst_1227")
                                                                (if (eq (u16 11) (identifier "label1_1226"))
                                                                  (let "stup_dst_1229"
                                                                    (let "stup_dst_1228"
                                                                    (write-u64 little-endian 
                                                                    (identifier "ssum_dst_1227")
                                                                    (u64-of-float (get-item 0 (get-alt "AggrHistogram" (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                                    (write-u64 little-endian 
                                                                    (identifier "stup_dst_1228")
                                                                    (u64-of-float (get-item 1 (get-alt "AggrHistogram" (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))))))
                                                                    (write-u32 little-endian 
                                                                    (identifier "stup_dst_1229")
                                                                    (get-item 2 (get-alt "AggrHistogram" (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                                  (if 
                                                                    (eq (u16 12) (identifier "label1_1226")) 
                                                                    (identifier "ssum_dst_1227")
                                                                    (if (eq (u16 13) (identifier "label1_1226")) (identifier "ssum_dst_1227") (seq (assert (eq (identifier "label1_1226") (u16 14))) (identifier "ssum_dst_1227")))))))))))))))))))
                                    (if (eq (u16 1) (identifier "label1_1178"))
                                      (apply (myself "Ptr") (get-item 2 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                        (apply (myself "Ptr") (get-item 1 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                          (let "label1_1222" (label-of (get-item 0 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                            (let "ssum_dst_1223" (write-u16 little-endian (identifier "ssum_dst_1179") (identifier "label1_1222"))
                                              (if (eq (u16 0) (identifier "label1_1222")) 
                                                (identifier "ssum_dst_1223")
                                                (if (eq (u16 1) (identifier "label1_1222")) 
                                                  (identifier "ssum_dst_1223")
                                                  (if (eq (u16 2) (identifier "label1_1222")) (identifier "ssum_dst_1223") (seq (assert (eq (identifier "label1_1222") (u16 3))) (identifier "ssum_dst_1223")))))))))
                                      (if (eq (u16 2) (identifier "label1_1178"))
                                        (apply (myself "Ptr") (get-item 3 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                          (apply (myself "Ptr") (get-item 2 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                            (apply (myself "Ptr") (get-item 1 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                              (let "label1_1217" (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                                (let "ssum_dst_1218" 
                                                  (write-u16 little-endian (identifier "ssum_dst_1179") (identifier "label1_1217"))
                                                  (if (eq (u16 0) (identifier "label1_1217")) 
                                                    (identifier "ssum_dst_1218")
                                                    (if (eq (u16 1) (identifier "label1_1217")) 
                                                      (identifier "ssum_dst_1218")
                                                      (seq (assert (eq (identifier "label1_1217") (u16 2)))
                                                        (write-u8 (identifier "ssum_dst_1218")
                                                          (u8-of-bool (get-alt "OnceEvery" (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))))))))))))
                                        (if (eq (u16 3) (identifier "label1_1178"))
                                          (apply (myself "Ptr") (get-item 4 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                            (apply (myself "Ptr") (get-item 3 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                              (apply (myself "Ptr") (get-item 2 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                (apply (myself "Ptr") 
                                                  (get-item 1 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (let "ssum_dst_1212"
                                                    (write-u16 little-endian (identifier "ssum_dst_1179") (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                      (identifier "ssum_dst_1212")
                                                      (seq (assert (eq (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                        (write-u8 (identifier "ssum_dst_1212")
                                                          (u8-of-bool (get-alt "Remember" (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))))))))
                                          (if (eq (u16 4) (identifier "label1_1178"))
                                            (let "stup_dst_1205"
                                              (apply (myself "Ptr") (get-item 3 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                (apply (myself "Ptr") 
                                                  (get-item 2 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (apply (myself "Ptr") 
                                                    (get-item 1 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                    (let "ssum_dst_1200"
                                                      (write-u16 little-endian (identifier "ssum_dst_1179") (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                        (identifier "ssum_dst_1200")
                                                        (seq (assert (eq (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                          (let "srec_dst_1201"
                                                            (write-u8 
                                                              (identifier "ssum_dst_1200")
                                                              (u8-of-bool (get-field "inv" (get-alt "Largest" (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                            (write-u8 
                                                              (identifier "srec_dst_1201")
                                                              (u8-of-bool (get-field "up_to" (get-alt "Largest" (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))))))))))))
                                              (let "dst_ref_1208"
                                                (make-vec
                                                  (let "leb128_sz_1206" 
                                                    (make-vec (cardinality (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (let "leb128_ptr_1207" 
                                                      (make-vec (identifier "stup_dst_1205"))
                                                      (seq
                                                        (while
                                                          (seq
                                                            (set-vec 
                                                              (u8 0) 
                                                              (identifier "leb128_ptr_1207")
                                                              (write-u8 
                                                                (unsafe-nth (u8 0) (identifier "leb128_ptr_1207"))
                                                                (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1206"))) 
                                                                  (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1206"))) 
                                                                  (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1206"))) (u8 128)))))
                                                            (set-vec (u8 0) (identifier "leb128_sz_1206") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1206")) (u8 7)))
                                                            (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1206")) (u32 0))) 
                                                          (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1207"))))))
                                                (let "n_ref_1209" (make-vec (i32 0))
                                                  (seq
                                                    (for-each "x_1210" 
                                                      (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                      (seq (set-vec (u8 0) (identifier "dst_ref_1208") (apply (myself "Ptr") (identifier "x_1210") (unsafe-nth (u8 0) (identifier "dst_ref_1208"))))
                                                        (set-vec (u8 0) (identifier "n_ref_1209") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1209")))))) 
                                                    (unsafe-nth (u8 0) (identifier "dst_ref_1208"))))))
                                            (if (eq (u16 5) (identifier "label1_1178"))
                                              (apply (myself "Ptr") (get-item 6 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                (apply (myself "Ptr") 
                                                  (get-item 5 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (apply (myself "Ptr") 
                                                    (get-item 4 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                    (apply (myself "Ptr") 
                                                      (get-item 3 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                      (apply (myself "Ptr") 
                                                        (get-item 2 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                        (apply (myself "Ptr") 
                                                          (get-item 1 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                          (let "ssum_dst_1192"
                                                            (write-u16 little-endian (identifier "ssum_dst_1179") (label-of (get-item 0 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                            (seq (assert (eq (label-of (get-item 0 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 0)))
                                                              (identifier "ssum_dst_1192")))))))))
                                              (if (eq (u16 6) (identifier "label1_1178"))
                                                (apply (myself "Ptr") 
                                                  (get-field "sigmas" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (apply (myself "Ptr") 
                                                    (get-field "duration" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                    (apply (myself "Ptr") 
                                                      (get-field "time" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                      (apply (myself "Ptr") 
                                                        (get-field "by" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                        (apply (myself "Ptr") 
                                                          (get-field "what" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                          (let "srec_dst_1185"
                                                            (apply (myself "Ptr") 
                                                              (get-field "size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                              (apply 
                                                                (ext-identifier raql_top_output to-row-binary) 
                                                                (get-field "output" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))) 
                                                                (identifier "ssum_dst_1179")))
                                                            (if (is-null (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                                              (write-u8 (identifier "srec_dst_1185") (u8 1))
                                                              (apply 
                                                                (myself "Ptr") 
                                                                (force (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                                                (write-u8 (identifier "srec_dst_1185") (u8 0))))))))))
                                                (seq (assert (eq (identifier "label1_1178") (u16 7)))
                                                  (let "srec_dst_1183"
                                                    (write-u8
                                                      (apply (myself "Ptr") 
                                                        (get-field "max_age" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                        (apply (myself "Ptr") 
                                                          (get-field "time" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                          (apply (myself "Ptr") (get-field "what" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))) (identifier "ssum_dst_1179"))))
                                                      (u8-of-bool (get-field "tumbling" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (if (is-null (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                      (write-u8 (identifier "srec_dst_1183") (u8 1))
                                                      (apply (myself "Ptr") 
                                                        (force (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                        (write-u8 (identifier "srec_dst_1183") (u8 0))))))))))))))))
                            (seq (assert (eq (identifier "label1_1169") (u16 6)))
                              (let "ssum_dst_1172" (write-u16 little-endian (identifier "ssum_dst_1170") (label-of (get-alt "Generator" (get-field "text" (param 0)))))
                                (seq (assert (eq (label-of (get-alt "Generator" (get-field "text" (param 0)))) (u16 0)))
                                  (apply (myself "Ptr") (get-item 1 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0)))))
                                    (apply (myself "Ptr") (get-item 0 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0))))) (identifier "ssum_dst_1172"))))))))))))))
            (write-u32 little-endian (identifier "srec_dst_1290") (get-field "uniq_num" (param 0)))) 
          (apply (ext-identifier raql_type to-row-binary) (get-field "typ" (param 0)) (identifier "srec_dst_1291")))
        (if (is-null (get-field "units" (param 0))) (write-u8 (identifier "srec_dst_1292") (u8 1)) (apply (ext-identifier units to-row-binary) (force (get-field "units" (param 0))) (write-u8 (identifier "srec_dst_1292") (u8 0))))))
 */
static std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> to_row_binary_init()
{
  std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> fun0 { [&](std::shared_ptr<::dessser::gen::raql_expr::t>  p_0, Pointer p_1) {
    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1 { (*p_0).text };
    uint16_t id_2 { uint16_t(id_1.index()) };
    Pointer let_res_3;
    {
      uint16_t label1_1169 { id_2 };
      Pointer id_4 { p_1.writeU16Le(label1_1169) };
      Pointer let_res_5;
      {
        Pointer ssum_dst_1170 { id_4 };
        uint16_t id_6 { 0 };
        bool id_7 { bool(id_6 == label1_1169) };
        Pointer choose_res_8;
        if (id_7) {
          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_9 { (*p_0).text };
          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_10 { std::get<0 /* Tuple */>(id_9) };
          uint32_t id_11 { id_10.size() };
          Vec<1, uint32_t> id_12 {  id_11  };
          Pointer let_res_13;
          {
            Vec<1, uint32_t> leb128_sz_1285 { id_12 };
            Vec<1, Pointer> id_14 {  ssum_dst_1170  };
            Pointer let_res_15;
            {
              Vec<1, Pointer> leb128_ptr_1286 { id_14 };
              bool while_flag_16 { true };
              do {
                uint8_t id_17 { 0 };
                uint8_t id_18 { 0 };
                Pointer id_19 { leb128_ptr_1286[id_18] };
                uint32_t id_20 { 128U };
                uint8_t id_21 { 0 };
                uint32_t id_22 { leb128_sz_1285[id_21] };
                bool id_23 { bool(id_20 > id_22) };
                uint8_t choose_res_24;
                if (id_23) {
                  uint8_t id_25 { 0 };
                  uint32_t id_26 { leb128_sz_1285[id_25] };
                  uint8_t id_27 { uint8_t(id_26) };
                  choose_res_24 = id_27;
                } else {
                  uint8_t id_28 { 0 };
                  uint32_t id_29 { leb128_sz_1285[id_28] };
                  uint8_t id_30 { uint8_t(id_29) };
                  uint8_t id_31 { 128 };
                  uint8_t id_32 { uint8_t(id_30 | id_31) };
                  choose_res_24 = id_32;
                }
                Pointer id_33 { id_19.writeU8(choose_res_24) };
                Void id_34 { ((void)(leb128_ptr_1286[id_17] = id_33), ::dessser::Void()) };
                (void)id_34;
                uint8_t id_35 { 0 };
                uint8_t id_36 { 0 };
                uint32_t id_37 { leb128_sz_1285[id_36] };
                uint8_t id_38 { 7 };
                uint32_t id_39 { uint32_t(id_37 >> id_38) };
                Void id_40 { ((void)(leb128_sz_1285[id_35] = id_39), ::dessser::Void()) };
                (void)id_40;
                uint8_t id_41 { 0 };
                uint32_t id_42 { leb128_sz_1285[id_41] };
                uint32_t id_43 { 0U };
                bool id_44 { bool(id_42 > id_43) };
                while_flag_16 = id_44;
                if (while_flag_16) {
                  (void)::dessser::Void();
                }
              } while (while_flag_16);
              (void)::dessser::Void();
              uint8_t id_45 { 0 };
              Pointer id_46 { leb128_ptr_1286[id_45] };
              let_res_15 = id_46;
            }
            let_res_13 = let_res_15;
          }
          Vec<1, Pointer> id_47 {  let_res_13  };
          Pointer let_res_48;
          {
            Vec<1, Pointer> dst_ref_1287 { id_47 };
            int32_t id_49 { 0L };
            Vec<1, int32_t> id_50 {  id_49  };
            Pointer let_res_51;
            {
              Vec<1, int32_t> n_ref_1288 { id_50 };
              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_52 { (*p_0).text };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_53 { std::get<0 /* Tuple */>(id_52) };
              for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1289 : id_53) {
                uint8_t id_54 { 0 };
                uint8_t id_55 { 0 };
                Pointer id_56 { dst_ref_1287[id_55] };
                Pointer id_57 { fun0(x_1289, id_56) };
                Void id_58 { ((void)(dst_ref_1287[id_54] = id_57), ::dessser::Void()) };
                (void)id_58;
                uint8_t id_59 { 0 };
                int32_t id_60 { 1L };
                uint8_t id_61 { 0 };
                int32_t id_62 { n_ref_1288[id_61] };
                int32_t id_63 { int32_t(id_60 + id_62) };
                Void id_64 { ((void)(n_ref_1288[id_59] = id_63), ::dessser::Void()) };
                (void)id_64;
                (void)id_64;
              }
              (void)::dessser::Void();
              uint8_t id_65 { 0 };
              Pointer id_66 { dst_ref_1287[id_65] };
              let_res_51 = id_66;
            }
            let_res_48 = let_res_51;
          }
          choose_res_8 = let_res_48;
        } else {
          uint16_t id_67 { 1 };
          bool id_68 { bool(id_67 == label1_1169) };
          Pointer choose_res_69;
          if (id_68) {
            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_70 { (*p_0).text };
            Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_71 { std::get<1 /* Record */>(id_70) };
            uint32_t id_72 { id_71.size() };
            Vec<1, uint32_t> id_73 {  id_72  };
            Pointer let_res_74;
            {
              Vec<1, uint32_t> leb128_sz_1278 { id_73 };
              Vec<1, Pointer> id_75 {  ssum_dst_1170  };
              Pointer let_res_76;
              {
                Vec<1, Pointer> leb128_ptr_1279 { id_75 };
                bool while_flag_77 { true };
                do {
                  uint8_t id_78 { 0 };
                  uint8_t id_79 { 0 };
                  Pointer id_80 { leb128_ptr_1279[id_79] };
                  uint32_t id_81 { 128U };
                  uint8_t id_82 { 0 };
                  uint32_t id_83 { leb128_sz_1278[id_82] };
                  bool id_84 { bool(id_81 > id_83) };
                  uint8_t choose_res_85;
                  if (id_84) {
                    uint8_t id_86 { 0 };
                    uint32_t id_87 { leb128_sz_1278[id_86] };
                    uint8_t id_88 { uint8_t(id_87) };
                    choose_res_85 = id_88;
                  } else {
                    uint8_t id_89 { 0 };
                    uint32_t id_90 { leb128_sz_1278[id_89] };
                    uint8_t id_91 { uint8_t(id_90) };
                    uint8_t id_92 { 128 };
                    uint8_t id_93 { uint8_t(id_91 | id_92) };
                    choose_res_85 = id_93;
                  }
                  Pointer id_94 { id_80.writeU8(choose_res_85) };
                  Void id_95 { ((void)(leb128_ptr_1279[id_78] = id_94), ::dessser::Void()) };
                  (void)id_95;
                  uint8_t id_96 { 0 };
                  uint8_t id_97 { 0 };
                  uint32_t id_98 { leb128_sz_1278[id_97] };
                  uint8_t id_99 { 7 };
                  uint32_t id_100 { uint32_t(id_98 >> id_99) };
                  Void id_101 { ((void)(leb128_sz_1278[id_96] = id_100), ::dessser::Void()) };
                  (void)id_101;
                  uint8_t id_102 { 0 };
                  uint32_t id_103 { leb128_sz_1278[id_102] };
                  uint32_t id_104 { 0U };
                  bool id_105 { bool(id_103 > id_104) };
                  while_flag_77 = id_105;
                  if (while_flag_77) {
                    (void)::dessser::Void();
                  }
                } while (while_flag_77);
                (void)::dessser::Void();
                uint8_t id_106 { 0 };
                Pointer id_107 { leb128_ptr_1279[id_106] };
                let_res_76 = id_107;
              }
              let_res_74 = let_res_76;
            }
            Vec<1, Pointer> id_108 {  let_res_74  };
            Pointer let_res_109;
            {
              Vec<1, Pointer> dst_ref_1280 { id_108 };
              int32_t id_110 { 0L };
              Vec<1, int32_t> id_111 {  id_110  };
              Pointer let_res_112;
              {
                Vec<1, int32_t> n_ref_1281 { id_111 };
                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_113 { (*p_0).text };
                Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_114 { std::get<1 /* Record */>(id_113) };
                for (::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 &x_1282 : id_114) {
                  uint8_t id_115 { 0 };
                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_116 { std::get<1>(x_1282) };
                  uint8_t id_117 { 0 };
                  Pointer id_118 { dst_ref_1280[id_117] };
                  Pointer let_res_119;
                  {
                    Pointer stup_dst_1283 { id_118 };
                    auto fun120 { dessser::gen::field_name::to_row_binary };
                    dessser::gen::field_name::t_ext id_121 { std::get<0>(x_1282) };
                    Pointer id_122 { fun120(id_121, stup_dst_1283) };
                    let_res_119 = id_122;
                  }
                  Pointer id_123 { fun0(id_116, let_res_119) };
                  Void id_124 { ((void)(dst_ref_1280[id_115] = id_123), ::dessser::Void()) };
                  (void)id_124;
                  uint8_t id_125 { 0 };
                  int32_t id_126 { 1L };
                  uint8_t id_127 { 0 };
                  int32_t id_128 { n_ref_1281[id_127] };
                  int32_t id_129 { int32_t(id_126 + id_128) };
                  Void id_130 { ((void)(n_ref_1281[id_125] = id_129), ::dessser::Void()) };
                  (void)id_130;
                  (void)id_130;
                }
                (void)::dessser::Void();
                uint8_t id_131 { 0 };
                Pointer id_132 { dst_ref_1280[id_131] };
                let_res_112 = id_132;
              }
              let_res_109 = let_res_112;
            }
            choose_res_69 = let_res_109;
          } else {
            uint16_t id_133 { 2 };
            bool id_134 { bool(id_133 == label1_1169) };
            Pointer choose_res_135;
            if (id_134) {
              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_136 { (*p_0).text };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_137 { std::get<2 /* Vector */>(id_136) };
              uint32_t id_138 { id_137.size() };
              Vec<1, uint32_t> id_139 {  id_138  };
              Pointer let_res_140;
              {
                Vec<1, uint32_t> leb128_sz_1273 { id_139 };
                Vec<1, Pointer> id_141 {  ssum_dst_1170  };
                Pointer let_res_142;
                {
                  Vec<1, Pointer> leb128_ptr_1274 { id_141 };
                  bool while_flag_143 { true };
                  do {
                    uint8_t id_144 { 0 };
                    uint8_t id_145 { 0 };
                    Pointer id_146 { leb128_ptr_1274[id_145] };
                    uint32_t id_147 { 128U };
                    uint8_t id_148 { 0 };
                    uint32_t id_149 { leb128_sz_1273[id_148] };
                    bool id_150 { bool(id_147 > id_149) };
                    uint8_t choose_res_151;
                    if (id_150) {
                      uint8_t id_152 { 0 };
                      uint32_t id_153 { leb128_sz_1273[id_152] };
                      uint8_t id_154 { uint8_t(id_153) };
                      choose_res_151 = id_154;
                    } else {
                      uint8_t id_155 { 0 };
                      uint32_t id_156 { leb128_sz_1273[id_155] };
                      uint8_t id_157 { uint8_t(id_156) };
                      uint8_t id_158 { 128 };
                      uint8_t id_159 { uint8_t(id_157 | id_158) };
                      choose_res_151 = id_159;
                    }
                    Pointer id_160 { id_146.writeU8(choose_res_151) };
                    Void id_161 { ((void)(leb128_ptr_1274[id_144] = id_160), ::dessser::Void()) };
                    (void)id_161;
                    uint8_t id_162 { 0 };
                    uint8_t id_163 { 0 };
                    uint32_t id_164 { leb128_sz_1273[id_163] };
                    uint8_t id_165 { 7 };
                    uint32_t id_166 { uint32_t(id_164 >> id_165) };
                    Void id_167 { ((void)(leb128_sz_1273[id_162] = id_166), ::dessser::Void()) };
                    (void)id_167;
                    uint8_t id_168 { 0 };
                    uint32_t id_169 { leb128_sz_1273[id_168] };
                    uint32_t id_170 { 0U };
                    bool id_171 { bool(id_169 > id_170) };
                    while_flag_143 = id_171;
                    if (while_flag_143) {
                      (void)::dessser::Void();
                    }
                  } while (while_flag_143);
                  (void)::dessser::Void();
                  uint8_t id_172 { 0 };
                  Pointer id_173 { leb128_ptr_1274[id_172] };
                  let_res_142 = id_173;
                }
                let_res_140 = let_res_142;
              }
              Vec<1, Pointer> id_174 {  let_res_140  };
              Pointer let_res_175;
              {
                Vec<1, Pointer> dst_ref_1275 { id_174 };
                int32_t id_176 { 0L };
                Vec<1, int32_t> id_177 {  id_176  };
                Pointer let_res_178;
                {
                  Vec<1, int32_t> n_ref_1276 { id_177 };
                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_179 { (*p_0).text };
                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_180 { std::get<2 /* Vector */>(id_179) };
                  for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1277 : id_180) {
                    uint8_t id_181 { 0 };
                    uint8_t id_182 { 0 };
                    Pointer id_183 { dst_ref_1275[id_182] };
                    Pointer id_184 { fun0(x_1277, id_183) };
                    Void id_185 { ((void)(dst_ref_1275[id_181] = id_184), ::dessser::Void()) };
                    (void)id_185;
                    uint8_t id_186 { 0 };
                    int32_t id_187 { 1L };
                    uint8_t id_188 { 0 };
                    int32_t id_189 { n_ref_1276[id_188] };
                    int32_t id_190 { int32_t(id_187 + id_189) };
                    Void id_191 { ((void)(n_ref_1276[id_186] = id_190), ::dessser::Void()) };
                    (void)id_191;
                    (void)id_191;
                  }
                  (void)::dessser::Void();
                  uint8_t id_192 { 0 };
                  Pointer id_193 { dst_ref_1275[id_192] };
                  let_res_178 = id_193;
                }
                let_res_175 = let_res_178;
              }
              choose_res_135 = let_res_175;
            } else {
              uint16_t id_194 { 3 };
              bool id_195 { bool(id_194 == label1_1169) };
              Pointer choose_res_196;
              if (id_195) {
                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_197 { (*p_0).text };
                ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_198 { std::get<3 /* Case */>(id_197) };
                Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_199 { std::get<0>(id_198) };
                uint32_t id_200 { id_199.size() };
                Vec<1, uint32_t> id_201 {  id_200  };
                Pointer let_res_202;
                {
                  Vec<1, uint32_t> leb128_sz_1265 { id_201 };
                  Vec<1, Pointer> id_203 {  ssum_dst_1170  };
                  Pointer let_res_204;
                  {
                    Vec<1, Pointer> leb128_ptr_1266 { id_203 };
                    bool while_flag_205 { true };
                    do {
                      uint8_t id_206 { 0 };
                      uint8_t id_207 { 0 };
                      Pointer id_208 { leb128_ptr_1266[id_207] };
                      uint32_t id_209 { 128U };
                      uint8_t id_210 { 0 };
                      uint32_t id_211 { leb128_sz_1265[id_210] };
                      bool id_212 { bool(id_209 > id_211) };
                      uint8_t choose_res_213;
                      if (id_212) {
                        uint8_t id_214 { 0 };
                        uint32_t id_215 { leb128_sz_1265[id_214] };
                        uint8_t id_216 { uint8_t(id_215) };
                        choose_res_213 = id_216;
                      } else {
                        uint8_t id_217 { 0 };
                        uint32_t id_218 { leb128_sz_1265[id_217] };
                        uint8_t id_219 { uint8_t(id_218) };
                        uint8_t id_220 { 128 };
                        uint8_t id_221 { uint8_t(id_219 | id_220) };
                        choose_res_213 = id_221;
                      }
                      Pointer id_222 { id_208.writeU8(choose_res_213) };
                      Void id_223 { ((void)(leb128_ptr_1266[id_206] = id_222), ::dessser::Void()) };
                      (void)id_223;
                      uint8_t id_224 { 0 };
                      uint8_t id_225 { 0 };
                      uint32_t id_226 { leb128_sz_1265[id_225] };
                      uint8_t id_227 { 7 };
                      uint32_t id_228 { uint32_t(id_226 >> id_227) };
                      Void id_229 { ((void)(leb128_sz_1265[id_224] = id_228), ::dessser::Void()) };
                      (void)id_229;
                      uint8_t id_230 { 0 };
                      uint32_t id_231 { leb128_sz_1265[id_230] };
                      uint32_t id_232 { 0U };
                      bool id_233 { bool(id_231 > id_232) };
                      while_flag_205 = id_233;
                      if (while_flag_205) {
                        (void)::dessser::Void();
                      }
                    } while (while_flag_205);
                    (void)::dessser::Void();
                    uint8_t id_234 { 0 };
                    Pointer id_235 { leb128_ptr_1266[id_234] };
                    let_res_204 = id_235;
                  }
                  let_res_202 = let_res_204;
                }
                Vec<1, Pointer> id_236 {  let_res_202  };
                Pointer let_res_237;
                {
                  Vec<1, Pointer> dst_ref_1267 { id_236 };
                  int32_t id_238 { 0L };
                  Vec<1, int32_t> id_239 {  id_238  };
                  Pointer let_res_240;
                  {
                    Vec<1, int32_t> n_ref_1268 { id_239 };
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_241 { (*p_0).text };
                    ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_242 { std::get<3 /* Case */>(id_241) };
                    Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_243 { std::get<0>(id_242) };
                    for (::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa &x_1269 : id_243) {
                      uint8_t id_244 { 0 };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_245 { x_1269.case_cons };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_246 { x_1269.case_cond };
                      uint8_t id_247 { 0 };
                      Pointer id_248 { dst_ref_1267[id_247] };
                      Pointer id_249 { fun0(id_246, id_248) };
                      Pointer id_250 { fun0(id_245, id_249) };
                      Void id_251 { ((void)(dst_ref_1267[id_244] = id_250), ::dessser::Void()) };
                      (void)id_251;
                      uint8_t id_252 { 0 };
                      int32_t id_253 { 1L };
                      uint8_t id_254 { 0 };
                      int32_t id_255 { n_ref_1268[id_254] };
                      int32_t id_256 { int32_t(id_253 + id_255) };
                      Void id_257 { ((void)(n_ref_1268[id_252] = id_256), ::dessser::Void()) };
                      (void)id_257;
                      (void)id_257;
                    }
                    (void)::dessser::Void();
                    uint8_t id_258 { 0 };
                    Pointer id_259 { dst_ref_1267[id_258] };
                    let_res_240 = id_259;
                  }
                  let_res_237 = let_res_240;
                }
                Pointer let_res_260;
                {
                  Pointer stup_dst_1272 { let_res_237 };
                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_261 { (*p_0).text };
                  ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_262 { std::get<3 /* Case */>(id_261) };
                  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_263 { std::get<1>(id_262) };
                  bool id_264 { !(id_263.has_value ()) };
                  Pointer choose_res_265;
                  if (id_264) {
                    uint8_t id_266 { 1 };
                    Pointer id_267 { stup_dst_1272.writeU8(id_266) };
                    choose_res_265 = id_267;
                  } else {
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_268 { (*p_0).text };
                    ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_269 { std::get<3 /* Case */>(id_268) };
                    std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_270 { std::get<1>(id_269) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_271 { id_270.value() };
                    uint8_t id_272 { 0 };
                    Pointer id_273 { stup_dst_1272.writeU8(id_272) };
                    Pointer id_274 { fun0(id_271, id_273) };
                    choose_res_265 = id_274;
                  }
                  let_res_260 = choose_res_265;
                }
                choose_res_196 = let_res_260;
              } else {
                uint16_t id_275 { 4 };
                bool id_276 { bool(id_275 == label1_1169) };
                Pointer choose_res_277;
                if (id_276) {
                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_278 { (*p_0).text };
                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_279 { std::get<4 /* Stateless */>(id_278) };
                  uint16_t id_280 { uint16_t(id_279.index()) };
                  Pointer let_res_281;
                  {
                    uint16_t label1_1231 { id_280 };
                    Pointer id_282 { ssum_dst_1170.writeU16Le(label1_1231) };
                    Pointer let_res_283;
                    {
                      Pointer ssum_dst_1232 { id_282 };
                      uint16_t id_284 { 0 };
                      bool id_285 { bool(id_284 == label1_1231) };
                      Pointer choose_res_286;
                      if (id_285) {
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_287 { (*p_0).text };
                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_288 { std::get<4 /* Stateless */>(id_287) };
                        ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_289 { std::get<0 /* SL0 */>(id_288) };
                        uint16_t id_290 { uint16_t(id_289.index()) };
                        Pointer let_res_291;
                        {
                          uint16_t label1_1258 { id_290 };
                          Pointer id_292 { ssum_dst_1232.writeU16Le(label1_1258) };
                          Pointer let_res_293;
                          {
                            Pointer ssum_dst_1259 { id_292 };
                            uint16_t id_294 { 0 };
                            bool id_295 { bool(id_294 == label1_1258) };
                            Pointer choose_res_296;
                            if (id_295) {
                              auto fun297 { dessser::gen::raql_value::to_row_binary };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_298 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_299 { std::get<4 /* Stateless */>(id_298) };
                              ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_300 { std::get<0 /* SL0 */>(id_299) };
                              dessser::gen::raql_value::t_ext id_301 { std::get<0 /* Const */>(id_300) };
                              Pointer id_302 { fun297(id_301, ssum_dst_1259) };
                              choose_res_296 = id_302;
                            } else {
                              uint16_t id_303 { 1 };
                              bool id_304 { bool(id_303 == label1_1258) };
                              Pointer choose_res_305;
                              if (id_304) {
                                auto fun306 { dessser::gen::raql_variable::to_row_binary };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_307 { (*p_0).text };
                                ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_308 { std::get<4 /* Stateless */>(id_307) };
                                ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_309 { std::get<0 /* SL0 */>(id_308) };
                                dessser::gen::raql_variable::t_ext id_310 { std::get<1 /* Variable */>(id_309) };
                                Pointer id_311 { fun306(id_310, ssum_dst_1259) };
                                choose_res_305 = id_311;
                              } else {
                                uint16_t id_312 { 2 };
                                bool id_313 { bool(id_312 == label1_1258) };
                                Pointer choose_res_314;
                                if (id_313) {
                                  auto fun315 { dessser::gen::raql_binding_key::to_row_binary };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_316 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_317 { std::get<4 /* Stateless */>(id_316) };
                                  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_318 { std::get<0 /* SL0 */>(id_317) };
                                  dessser::gen::raql_binding_key::t_ext id_319 { std::get<2 /* Binding */>(id_318) };
                                  Pointer id_320 { fun315(id_319, ssum_dst_1259) };
                                  choose_res_314 = id_320;
                                } else {
                                  uint16_t id_321 { 3 };
                                  bool id_322 { bool(id_321 == label1_1258) };
                                  Pointer choose_res_323;
                                  if (id_322) {
                                    choose_res_323 = ssum_dst_1259;
                                  } else {
                                    uint16_t id_324 { 4 };
                                    bool id_325 { bool(id_324 == label1_1258) };
                                    Pointer choose_res_326;
                                    if (id_325) {
                                      choose_res_326 = ssum_dst_1259;
                                    } else {
                                      uint16_t id_327 { 5 };
                                      bool id_328 { bool(id_327 == label1_1258) };
                                      Pointer choose_res_329;
                                      if (id_328) {
                                        choose_res_329 = ssum_dst_1259;
                                      } else {
                                        uint16_t id_330 { 6 };
                                        bool id_331 { bool(id_330 == label1_1258) };
                                        Pointer choose_res_332;
                                        if (id_331) {
                                          choose_res_332 = ssum_dst_1259;
                                        } else {
                                          uint16_t id_333 { 7 };
                                          bool id_334 { bool(id_333 == label1_1258) };
                                          Pointer choose_res_335;
                                          if (id_334) {
                                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_336 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_337 { std::get<4 /* Stateless */>(id_336) };
                                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_338 { std::get<0 /* SL0 */>(id_337) };
                                            Lst<dessser::gen::raql_path_comp::t_ext> id_339 { std::get<7 /* Path */>(id_338) };
                                            uint32_t id_340 { id_339.size() };
                                            Vec<1, uint32_t> id_341 {  id_340  };
                                            Pointer let_res_342;
                                            {
                                              Vec<1, uint32_t> leb128_sz_1260 { id_341 };
                                              Vec<1, Pointer> id_343 {  ssum_dst_1259  };
                                              Pointer let_res_344;
                                              {
                                                Vec<1, Pointer> leb128_ptr_1261 { id_343 };
                                                bool while_flag_345 { true };
                                                do {
                                                  uint8_t id_346 { 0 };
                                                  uint8_t id_347 { 0 };
                                                  Pointer id_348 { leb128_ptr_1261[id_347] };
                                                  uint32_t id_349 { 128U };
                                                  uint8_t id_350 { 0 };
                                                  uint32_t id_351 { leb128_sz_1260[id_350] };
                                                  bool id_352 { bool(id_349 > id_351) };
                                                  uint8_t choose_res_353;
                                                  if (id_352) {
                                                    uint8_t id_354 { 0 };
                                                    uint32_t id_355 { leb128_sz_1260[id_354] };
                                                    uint8_t id_356 { uint8_t(id_355) };
                                                    choose_res_353 = id_356;
                                                  } else {
                                                    uint8_t id_357 { 0 };
                                                    uint32_t id_358 { leb128_sz_1260[id_357] };
                                                    uint8_t id_359 { uint8_t(id_358) };
                                                    uint8_t id_360 { 128 };
                                                    uint8_t id_361 { uint8_t(id_359 | id_360) };
                                                    choose_res_353 = id_361;
                                                  }
                                                  Pointer id_362 { id_348.writeU8(choose_res_353) };
                                                  Void id_363 { ((void)(leb128_ptr_1261[id_346] = id_362), ::dessser::Void()) };
                                                  (void)id_363;
                                                  uint8_t id_364 { 0 };
                                                  uint8_t id_365 { 0 };
                                                  uint32_t id_366 { leb128_sz_1260[id_365] };
                                                  uint8_t id_367 { 7 };
                                                  uint32_t id_368 { uint32_t(id_366 >> id_367) };
                                                  Void id_369 { ((void)(leb128_sz_1260[id_364] = id_368), ::dessser::Void()) };
                                                  (void)id_369;
                                                  uint8_t id_370 { 0 };
                                                  uint32_t id_371 { leb128_sz_1260[id_370] };
                                                  uint32_t id_372 { 0U };
                                                  bool id_373 { bool(id_371 > id_372) };
                                                  while_flag_345 = id_373;
                                                  if (while_flag_345) {
                                                    (void)::dessser::Void();
                                                  }
                                                } while (while_flag_345);
                                                (void)::dessser::Void();
                                                uint8_t id_374 { 0 };
                                                Pointer id_375 { leb128_ptr_1261[id_374] };
                                                let_res_344 = id_375;
                                              }
                                              let_res_342 = let_res_344;
                                            }
                                            Vec<1, Pointer> id_376 {  let_res_342  };
                                            Pointer let_res_377;
                                            {
                                              Vec<1, Pointer> dst_ref_1262 { id_376 };
                                              int32_t id_378 { 0L };
                                              Vec<1, int32_t> id_379 {  id_378  };
                                              Pointer let_res_380;
                                              {
                                                Vec<1, int32_t> n_ref_1263 { id_379 };
                                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_381 { (*p_0).text };
                                                ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_382 { std::get<4 /* Stateless */>(id_381) };
                                                ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_383 { std::get<0 /* SL0 */>(id_382) };
                                                Lst<dessser::gen::raql_path_comp::t_ext> id_384 { std::get<7 /* Path */>(id_383) };
                                                for (dessser::gen::raql_path_comp::t_ext &x_1264 : id_384) {
                                                  uint8_t id_385 { 0 };
                                                  auto fun386 { dessser::gen::raql_path_comp::to_row_binary };
                                                  uint8_t id_387 { 0 };
                                                  Pointer id_388 { dst_ref_1262[id_387] };
                                                  Pointer id_389 { fun386(x_1264, id_388) };
                                                  Void id_390 { ((void)(dst_ref_1262[id_385] = id_389), ::dessser::Void()) };
                                                  (void)id_390;
                                                  uint8_t id_391 { 0 };
                                                  int32_t id_392 { 1L };
                                                  uint8_t id_393 { 0 };
                                                  int32_t id_394 { n_ref_1263[id_393] };
                                                  int32_t id_395 { int32_t(id_392 + id_394) };
                                                  Void id_396 { ((void)(n_ref_1263[id_391] = id_395), ::dessser::Void()) };
                                                  (void)id_396;
                                                  (void)id_396;
                                                }
                                                (void)::dessser::Void();
                                                uint8_t id_397 { 0 };
                                                Pointer id_398 { dst_ref_1262[id_397] };
                                                let_res_380 = id_398;
                                              }
                                              let_res_377 = let_res_380;
                                            }
                                            choose_res_335 = let_res_377;
                                          } else {
                                            uint16_t id_399 { 8 };
                                            bool id_400 { bool(label1_1258 == id_399) };
                                            Void id_401 { ((void)(assert(id_400)), ::dessser::Void()) };
                                            (void)id_401;
                                            choose_res_335 = ssum_dst_1259;
                                          }
                                          choose_res_332 = choose_res_335;
                                        }
                                        choose_res_329 = choose_res_332;
                                      }
                                      choose_res_326 = choose_res_329;
                                    }
                                    choose_res_323 = choose_res_326;
                                  }
                                  choose_res_314 = choose_res_323;
                                }
                                choose_res_305 = choose_res_314;
                              }
                              choose_res_296 = choose_res_305;
                            }
                            let_res_293 = choose_res_296;
                          }
                          let_res_291 = let_res_293;
                        }
                        choose_res_286 = let_res_291;
                      } else {
                        uint16_t id_402 { 1 };
                        bool id_403 { bool(id_402 == label1_1231) };
                        Pointer choose_res_404;
                        if (id_403) {
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_405 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_406 { std::get<4 /* Stateless */>(id_405) };
                          ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_407 { std::get<1 /* SL1 */>(id_406) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_408 { std::get<1>(id_407) };
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_409 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_410 { std::get<4 /* Stateless */>(id_409) };
                          ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_411 { std::get<1 /* SL1 */>(id_410) };
                          ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_412 { std::get<0>(id_411) };
                          uint16_t id_413 { uint16_t(id_412.index()) };
                          Pointer let_res_414;
                          {
                            uint16_t label1_1250 { id_413 };
                            Pointer id_415 { ssum_dst_1232.writeU16Le(label1_1250) };
                            Pointer let_res_416;
                            {
                              Pointer ssum_dst_1251 { id_415 };
                              uint16_t id_417 { 0 };
                              bool id_418 { bool(id_417 == label1_1250) };
                              Pointer choose_res_419;
                              if (id_418) {
                                choose_res_419 = ssum_dst_1251;
                              } else {
                                uint16_t id_420 { 1 };
                                bool id_421 { bool(id_420 == label1_1250) };
                                Pointer choose_res_422;
                                if (id_421) {
                                  auto fun423 { dessser::gen::raql_type::to_row_binary };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_424 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_425 { std::get<4 /* Stateless */>(id_424) };
                                  ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_426 { std::get<1 /* SL1 */>(id_425) };
                                  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_427 { std::get<0>(id_426) };
                                  dessser::gen::raql_type::t_ext id_428 { std::get<1 /* Cast */>(id_427) };
                                  Pointer id_429 { fun423(id_428, ssum_dst_1251) };
                                  choose_res_422 = id_429;
                                } else {
                                  uint16_t id_430 { 2 };
                                  bool id_431 { bool(id_430 == label1_1250) };
                                  Pointer choose_res_432;
                                  if (id_431) {
                                    choose_res_432 = ssum_dst_1251;
                                  } else {
                                    uint16_t id_433 { 3 };
                                    bool id_434 { bool(id_433 == label1_1250) };
                                    Pointer choose_res_435;
                                    if (id_434) {
                                      auto fun436 { dessser::gen::raql_type::to_row_binary };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_437 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_438 { std::get<4 /* Stateless */>(id_437) };
                                      ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_439 { std::get<1 /* SL1 */>(id_438) };
                                      ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_440 { std::get<0>(id_439) };
                                      ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_441 { std::get<3 /* Peek */>(id_440) };
                                      dessser::gen::raql_type::t_ext id_442 { std::get<0>(id_441) };
                                      Pointer id_443 { fun436(id_442, ssum_dst_1251) };
                                      Pointer let_res_444;
                                      {
                                        Pointer stup_dst_1254 { id_443 };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_445 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_446 { std::get<4 /* Stateless */>(id_445) };
                                        ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_447 { std::get<1 /* SL1 */>(id_446) };
                                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_448 { std::get<0>(id_447) };
                                        ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_449 { std::get<3 /* Peek */>(id_448) };
                                        ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051 id_450 { std::get<1>(id_449) };
                                        uint16_t id_451 { uint16_t(id_450) };
                                        Pointer id_452 { stup_dst_1254.writeU16Le(id_451) };
                                        Pointer let_res_453;
                                        {
                                          Pointer ssum_dst_1256 { id_452 };
                                          uint16_t id_454 { 0 };
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_455 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_456 { std::get<4 /* Stateless */>(id_455) };
                                          ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_457 { std::get<1 /* SL1 */>(id_456) };
                                          ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_458 { std::get<0>(id_457) };
                                          ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_459 { std::get<3 /* Peek */>(id_458) };
                                          ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051 id_460 { std::get<1>(id_459) };
                                          uint16_t id_461 { uint16_t(id_460) };
                                          bool id_462 { bool(id_454 == id_461) };
                                          Pointer choose_res_463;
                                          if (id_462) {
                                            choose_res_463 = ssum_dst_1256;
                                          } else {
                                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_464 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_465 { std::get<4 /* Stateless */>(id_464) };
                                            ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_466 { std::get<1 /* SL1 */>(id_465) };
                                            ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_467 { std::get<0>(id_466) };
                                            ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_468 { std::get<3 /* Peek */>(id_467) };
                                            ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051 id_469 { std::get<1>(id_468) };
                                            uint16_t id_470 { uint16_t(id_469) };
                                            uint16_t id_471 { 1 };
                                            bool id_472 { bool(id_470 == id_471) };
                                            Void id_473 { ((void)(assert(id_472)), ::dessser::Void()) };
                                            (void)id_473;
                                            choose_res_463 = ssum_dst_1256;
                                          }
                                          let_res_453 = choose_res_463;
                                        }
                                        let_res_444 = let_res_453;
                                      }
                                      choose_res_435 = let_res_444;
                                    } else {
                                      uint16_t id_474 { 4 };
                                      bool id_475 { bool(id_474 == label1_1250) };
                                      Pointer choose_res_476;
                                      if (id_475) {
                                        choose_res_476 = ssum_dst_1251;
                                      } else {
                                        uint16_t id_477 { 5 };
                                        bool id_478 { bool(id_477 == label1_1250) };
                                        Pointer choose_res_479;
                                        if (id_478) {
                                          choose_res_479 = ssum_dst_1251;
                                        } else {
                                          uint16_t id_480 { 6 };
                                          bool id_481 { bool(id_480 == label1_1250) };
                                          Pointer choose_res_482;
                                          if (id_481) {
                                            choose_res_482 = ssum_dst_1251;
                                          } else {
                                            uint16_t id_483 { 7 };
                                            bool id_484 { bool(id_483 == label1_1250) };
                                            Pointer choose_res_485;
                                            if (id_484) {
                                              choose_res_485 = ssum_dst_1251;
                                            } else {
                                              uint16_t id_486 { 8 };
                                              bool id_487 { bool(id_486 == label1_1250) };
                                              Pointer choose_res_488;
                                              if (id_487) {
                                                choose_res_488 = ssum_dst_1251;
                                              } else {
                                                uint16_t id_489 { 9 };
                                                bool id_490 { bool(id_489 == label1_1250) };
                                                Pointer choose_res_491;
                                                if (id_490) {
                                                  choose_res_491 = ssum_dst_1251;
                                                } else {
                                                  uint16_t id_492 { 10 };
                                                  bool id_493 { bool(id_492 == label1_1250) };
                                                  Pointer choose_res_494;
                                                  if (id_493) {
                                                    choose_res_494 = ssum_dst_1251;
                                                  } else {
                                                    uint16_t id_495 { 11 };
                                                    bool id_496 { bool(id_495 == label1_1250) };
                                                    Pointer choose_res_497;
                                                    if (id_496) {
                                                      choose_res_497 = ssum_dst_1251;
                                                    } else {
                                                      uint16_t id_498 { 12 };
                                                      bool id_499 { bool(id_498 == label1_1250) };
                                                      Pointer choose_res_500;
                                                      if (id_499) {
                                                        choose_res_500 = ssum_dst_1251;
                                                      } else {
                                                        uint16_t id_501 { 13 };
                                                        bool id_502 { bool(id_501 == label1_1250) };
                                                        Pointer choose_res_503;
                                                        if (id_502) {
                                                          choose_res_503 = ssum_dst_1251;
                                                        } else {
                                                          uint16_t id_504 { 14 };
                                                          bool id_505 { bool(id_504 == label1_1250) };
                                                          Pointer choose_res_506;
                                                          if (id_505) {
                                                            choose_res_506 = ssum_dst_1251;
                                                          } else {
                                                            uint16_t id_507 { 15 };
                                                            bool id_508 { bool(id_507 == label1_1250) };
                                                            Pointer choose_res_509;
                                                            if (id_508) {
                                                              choose_res_509 = ssum_dst_1251;
                                                            } else {
                                                              uint16_t id_510 { 16 };
                                                              bool id_511 { bool(id_510 == label1_1250) };
                                                              Pointer choose_res_512;
                                                              if (id_511) {
                                                                choose_res_512 = ssum_dst_1251;
                                                              } else {
                                                                uint16_t id_513 { 17 };
                                                                bool id_514 { bool(id_513 == label1_1250) };
                                                                Pointer choose_res_515;
                                                                if (id_514) {
                                                                  choose_res_515 = ssum_dst_1251;
                                                                } else {
                                                                  uint16_t id_516 { 18 };
                                                                  bool id_517 { bool(id_516 == label1_1250) };
                                                                  Pointer choose_res_518;
                                                                  if (id_517) {
                                                                    choose_res_518 = ssum_dst_1251;
                                                                  } else {
                                                                    uint16_t id_519 { 19 };
                                                                    bool id_520 { bool(id_519 == label1_1250) };
                                                                    Pointer choose_res_521;
                                                                    if (id_520) {
                                                                      choose_res_521 = ssum_dst_1251;
                                                                    } else {
                                                                      uint16_t id_522 { 20 };
                                                                      bool id_523 { bool(id_522 == label1_1250) };
                                                                      Pointer choose_res_524;
                                                                      if (id_523) {
                                                                        choose_res_524 = ssum_dst_1251;
                                                                      } else {
                                                                        uint16_t id_525 { 21 };
                                                                        bool id_526 { bool(id_525 == label1_1250) };
                                                                        Pointer choose_res_527;
                                                                        if (id_526) {
                                                                          choose_res_527 = ssum_dst_1251;
                                                                        } else {
                                                                          uint16_t id_528 { 22 };
                                                                          bool id_529 { bool(id_528 == label1_1250) };
                                                                          Pointer choose_res_530;
                                                                          if (id_529) {
                                                                            choose_res_530 = ssum_dst_1251;
                                                                          } else {
                                                                            uint16_t id_531 { 23 };
                                                                            bool id_532 { bool(id_531 == label1_1250) };
                                                                            Pointer choose_res_533;
                                                                            if (id_532) {
                                                                              choose_res_533 = ssum_dst_1251;
                                                                            } else {
                                                                              uint16_t id_534 { 24 };
                                                                              bool id_535 { bool(id_534 == label1_1250) };
                                                                              Pointer choose_res_536;
                                                                              if (id_535) {
                                                                                choose_res_536 = ssum_dst_1251;
                                                                              } else {
                                                                                uint16_t id_537 { 25 };
                                                                                bool id_538 { bool(id_537 == label1_1250) };
                                                                                Pointer choose_res_539;
                                                                                if (id_538) {
                                                                                  choose_res_539 = ssum_dst_1251;
                                                                                } else {
                                                                                  uint16_t id_540 { 26 };
                                                                                  bool id_541 { bool(id_540 == label1_1250) };
                                                                                  Pointer choose_res_542;
                                                                                  if (id_541) {
                                                                                    choose_res_542 = ssum_dst_1251;
                                                                                  } else {
                                                                                    uint16_t id_543 { 27 };
                                                                                    bool id_544 { bool(id_543 == label1_1250) };
                                                                                    Pointer choose_res_545;
                                                                                    if (id_544) {
                                                                                      choose_res_545 = ssum_dst_1251;
                                                                                    } else {
                                                                                      uint16_t id_546 { 28 };
                                                                                      bool id_547 { bool(id_546 == label1_1250) };
                                                                                      Pointer choose_res_548;
                                                                                      if (id_547) {
                                                                                        choose_res_548 = ssum_dst_1251;
                                                                                      } else {
                                                                                        uint16_t id_549 { 29 };
                                                                                        bool id_550 { bool(id_549 == label1_1250) };
                                                                                        Pointer choose_res_551;
                                                                                        if (id_550) {
                                                                                          choose_res_551 = ssum_dst_1251;
                                                                                        } else {
                                                                                          uint16_t id_552 { 30 };
                                                                                          bool id_553 { bool(id_552 == label1_1250) };
                                                                                          Pointer choose_res_554;
                                                                                          if (id_553) {
                                                                                            choose_res_554 = ssum_dst_1251;
                                                                                          } else {
                                                                                            uint16_t id_555 { 31 };
                                                                                            bool id_556 { bool(id_555 == label1_1250) };
                                                                                            Pointer choose_res_557;
                                                                                            if (id_556) {
                                                                                              choose_res_557 = ssum_dst_1251;
                                                                                            } else {
                                                                                              uint16_t id_558 { 32 };
                                                                                              bool id_559 { bool(id_558 == label1_1250) };
                                                                                              Pointer choose_res_560;
                                                                                              if (id_559) {
                                                                                                choose_res_560 = ssum_dst_1251;
                                                                                              } else {
                                                                                                uint16_t id_561 { 33 };
                                                                                                bool id_562 { bool(id_561 == label1_1250) };
                                                                                                Pointer choose_res_563;
                                                                                                if (id_562) {
                                                                                                  choose_res_563 = ssum_dst_1251;
                                                                                                } else {
                                                                                                  uint16_t id_564 { 34 };
                                                                                                  bool id_565 { bool(id_564 == label1_1250) };
                                                                                                  Pointer choose_res_566;
                                                                                                  if (id_565) {
                                                                                                    choose_res_566 = ssum_dst_1251;
                                                                                                  } else {
                                                                                                    uint16_t id_567 { 35 };
                                                                                                    bool id_568 { bool(id_567 == label1_1250) };
                                                                                                    Pointer choose_res_569;
                                                                                                    if (id_568) {
                                                                                                      choose_res_569 = ssum_dst_1251;
                                                                                                    } else {
                                                                                                      uint16_t id_570 { 36 };
                                                                                                      bool id_571 { bool(id_570 == label1_1250) };
                                                                                                      Pointer choose_res_572;
                                                                                                      if (id_571) {
                                                                                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_573 { (*p_0).text };
                                                                                                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_574 { std::get<4 /* Stateless */>(id_573) };
                                                                                                        ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_575 { std::get<1 /* SL1 */>(id_574) };
                                                                                                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_576 { std::get<0>(id_575) };
                                                                                                        std::string id_577 { std::get<36 /* Like */>(id_576) };
                                                                                                        uint32_t id_578 { (uint32_t)id_577.size() };
                                                                                                        Vec<1, uint32_t> id_579 {  id_578  };
                                                                                                        Pointer let_res_580;
                                                                                                        {
                                                                                                          Vec<1, uint32_t> leb128_sz_1252 { id_579 };
                                                                                                          Vec<1, Pointer> id_581 {  ssum_dst_1251  };
                                                                                                          Pointer let_res_582;
                                                                                                          {
                                                                                                            Vec<1, Pointer> leb128_ptr_1253 { id_581 };
                                                                                                            bool while_flag_583 { true };
                                                                                                            do {
                                                                                                              uint8_t id_584 { 0 };
                                                                                                              uint8_t id_585 { 0 };
                                                                                                              Pointer id_586 { leb128_ptr_1253[id_585] };
                                                                                                              uint32_t id_587 { 128U };
                                                                                                              uint8_t id_588 { 0 };
                                                                                                              uint32_t id_589 { leb128_sz_1252[id_588] };
                                                                                                              bool id_590 { bool(id_587 > id_589) };
                                                                                                              uint8_t choose_res_591;
                                                                                                              if (id_590) {
                                                                                                                uint8_t id_592 { 0 };
                                                                                                                uint32_t id_593 { leb128_sz_1252[id_592] };
                                                                                                                uint8_t id_594 { uint8_t(id_593) };
                                                                                                                choose_res_591 = id_594;
                                                                                                              } else {
                                                                                                                uint8_t id_595 { 0 };
                                                                                                                uint32_t id_596 { leb128_sz_1252[id_595] };
                                                                                                                uint8_t id_597 { uint8_t(id_596) };
                                                                                                                uint8_t id_598 { 128 };
                                                                                                                uint8_t id_599 { uint8_t(id_597 | id_598) };
                                                                                                                choose_res_591 = id_599;
                                                                                                              }
                                                                                                              Pointer id_600 { id_586.writeU8(choose_res_591) };
                                                                                                              Void id_601 { ((void)(leb128_ptr_1253[id_584] = id_600), ::dessser::Void()) };
                                                                                                              (void)id_601;
                                                                                                              uint8_t id_602 { 0 };
                                                                                                              uint8_t id_603 { 0 };
                                                                                                              uint32_t id_604 { leb128_sz_1252[id_603] };
                                                                                                              uint8_t id_605 { 7 };
                                                                                                              uint32_t id_606 { uint32_t(id_604 >> id_605) };
                                                                                                              Void id_607 { ((void)(leb128_sz_1252[id_602] = id_606), ::dessser::Void()) };
                                                                                                              (void)id_607;
                                                                                                              uint8_t id_608 { 0 };
                                                                                                              uint32_t id_609 { leb128_sz_1252[id_608] };
                                                                                                              uint32_t id_610 { 0U };
                                                                                                              bool id_611 { bool(id_609 > id_610) };
                                                                                                              while_flag_583 = id_611;
                                                                                                              if (while_flag_583) {
                                                                                                                (void)::dessser::Void();
                                                                                                              }
                                                                                                            } while (while_flag_583);
                                                                                                            (void)::dessser::Void();
                                                                                                            uint8_t id_612 { 0 };
                                                                                                            Pointer id_613 { leb128_ptr_1253[id_612] };
                                                                                                            let_res_582 = id_613;
                                                                                                          }
                                                                                                          let_res_580 = let_res_582;
                                                                                                        }
                                                                                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_614 { (*p_0).text };
                                                                                                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_615 { std::get<4 /* Stateless */>(id_614) };
                                                                                                        ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_616 { std::get<1 /* SL1 */>(id_615) };
                                                                                                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_617 { std::get<0>(id_616) };
                                                                                                        std::string id_618 { std::get<36 /* Like */>(id_617) };
                                                                                                        Bytes id_619 { id_618 };
                                                                                                        Pointer id_620 { let_res_580.writeBytes(id_619) };
                                                                                                        choose_res_572 = id_620;
                                                                                                      } else {
                                                                                                        uint16_t id_621 { 37 };
                                                                                                        bool id_622 { bool(id_621 == label1_1250) };
                                                                                                        Pointer choose_res_623;
                                                                                                        if (id_622) {
                                                                                                          choose_res_623 = ssum_dst_1251;
                                                                                                        } else {
                                                                                                          uint16_t id_624 { 38 };
                                                                                                          bool id_625 { bool(id_624 == label1_1250) };
                                                                                                          Pointer choose_res_626;
                                                                                                          if (id_625) {
                                                                                                            choose_res_626 = ssum_dst_1251;
                                                                                                          } else {
                                                                                                            uint16_t id_627 { 39 };
                                                                                                            bool id_628 { bool(id_627 == label1_1250) };
                                                                                                            Pointer choose_res_629;
                                                                                                            if (id_628) {
                                                                                                              choose_res_629 = ssum_dst_1251;
                                                                                                            } else {
                                                                                                              uint16_t id_630 { 40 };
                                                                                                              bool id_631 { bool(label1_1250 == id_630) };
                                                                                                              Void id_632 { ((void)(assert(id_631)), ::dessser::Void()) };
                                                                                                              (void)id_632;
                                                                                                              choose_res_629 = ssum_dst_1251;
                                                                                                            }
                                                                                                            choose_res_626 = choose_res_629;
                                                                                                          }
                                                                                                          choose_res_623 = choose_res_626;
                                                                                                        }
                                                                                                        choose_res_572 = choose_res_623;
                                                                                                      }
                                                                                                      choose_res_569 = choose_res_572;
                                                                                                    }
                                                                                                    choose_res_566 = choose_res_569;
                                                                                                  }
                                                                                                  choose_res_563 = choose_res_566;
                                                                                                }
                                                                                                choose_res_560 = choose_res_563;
                                                                                              }
                                                                                              choose_res_557 = choose_res_560;
                                                                                            }
                                                                                            choose_res_554 = choose_res_557;
                                                                                          }
                                                                                          choose_res_551 = choose_res_554;
                                                                                        }
                                                                                        choose_res_548 = choose_res_551;
                                                                                      }
                                                                                      choose_res_545 = choose_res_548;
                                                                                    }
                                                                                    choose_res_542 = choose_res_545;
                                                                                  }
                                                                                  choose_res_539 = choose_res_542;
                                                                                }
                                                                                choose_res_536 = choose_res_539;
                                                                              }
                                                                              choose_res_533 = choose_res_536;
                                                                            }
                                                                            choose_res_530 = choose_res_533;
                                                                          }
                                                                          choose_res_527 = choose_res_530;
                                                                        }
                                                                        choose_res_524 = choose_res_527;
                                                                      }
                                                                      choose_res_521 = choose_res_524;
                                                                    }
                                                                    choose_res_518 = choose_res_521;
                                                                  }
                                                                  choose_res_515 = choose_res_518;
                                                                }
                                                                choose_res_512 = choose_res_515;
                                                              }
                                                              choose_res_509 = choose_res_512;
                                                            }
                                                            choose_res_506 = choose_res_509;
                                                          }
                                                          choose_res_503 = choose_res_506;
                                                        }
                                                        choose_res_500 = choose_res_503;
                                                      }
                                                      choose_res_497 = choose_res_500;
                                                    }
                                                    choose_res_494 = choose_res_497;
                                                  }
                                                  choose_res_491 = choose_res_494;
                                                }
                                                choose_res_488 = choose_res_491;
                                              }
                                              choose_res_485 = choose_res_488;
                                            }
                                            choose_res_482 = choose_res_485;
                                          }
                                          choose_res_479 = choose_res_482;
                                        }
                                        choose_res_476 = choose_res_479;
                                      }
                                      choose_res_435 = choose_res_476;
                                    }
                                    choose_res_432 = choose_res_435;
                                  }
                                  choose_res_422 = choose_res_432;
                                }
                                choose_res_419 = choose_res_422;
                              }
                              let_res_416 = choose_res_419;
                            }
                            let_res_414 = let_res_416;
                          }
                          Pointer id_633 { fun0(id_408, let_res_414) };
                          choose_res_404 = id_633;
                        } else {
                          uint16_t id_634 { 2 };
                          bool id_635 { bool(id_634 == label1_1231) };
                          Pointer choose_res_636;
                          if (id_635) {
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_637 { (*p_0).text };
                            ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_638 { std::get<4 /* Stateless */>(id_637) };
                            ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_639 { std::get<2 /* SL1s */>(id_638) };
                            ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036 id_640 { std::get<0>(id_639) };
                            uint16_t id_641 { uint16_t(id_640) };
                            Pointer let_res_642;
                            {
                              uint16_t label1_1242 { id_641 };
                              Pointer id_643 { ssum_dst_1232.writeU16Le(label1_1242) };
                              Pointer let_res_644;
                              {
                                Pointer ssum_dst_1243 { id_643 };
                                uint16_t id_645 { 0 };
                                bool id_646 { bool(id_645 == label1_1242) };
                                Pointer choose_res_647;
                                if (id_646) {
                                  choose_res_647 = ssum_dst_1243;
                                } else {
                                  uint16_t id_648 { 1 };
                                  bool id_649 { bool(id_648 == label1_1242) };
                                  Pointer choose_res_650;
                                  if (id_649) {
                                    choose_res_650 = ssum_dst_1243;
                                  } else {
                                    uint16_t id_651 { 2 };
                                    bool id_652 { bool(id_651 == label1_1242) };
                                    Pointer choose_res_653;
                                    if (id_652) {
                                      choose_res_653 = ssum_dst_1243;
                                    } else {
                                      uint16_t id_654 { 3 };
                                      bool id_655 { bool(label1_1242 == id_654) };
                                      Void id_656 { ((void)(assert(id_655)), ::dessser::Void()) };
                                      (void)id_656;
                                      choose_res_653 = ssum_dst_1243;
                                    }
                                    choose_res_650 = choose_res_653;
                                  }
                                  choose_res_647 = choose_res_650;
                                }
                                let_res_644 = choose_res_647;
                              }
                              let_res_642 = let_res_644;
                            }
                            Pointer let_res_657;
                            {
                              Pointer stup_dst_1244 { let_res_642 };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_658 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_659 { std::get<4 /* Stateless */>(id_658) };
                              ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_660 { std::get<2 /* SL1s */>(id_659) };
                              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_661 { std::get<1>(id_660) };
                              uint32_t id_662 { id_661.size() };
                              Vec<1, uint32_t> id_663 {  id_662  };
                              Pointer let_res_664;
                              {
                                Vec<1, uint32_t> leb128_sz_1245 { id_663 };
                                Vec<1, Pointer> id_665 {  stup_dst_1244  };
                                Pointer let_res_666;
                                {
                                  Vec<1, Pointer> leb128_ptr_1246 { id_665 };
                                  bool while_flag_667 { true };
                                  do {
                                    uint8_t id_668 { 0 };
                                    uint8_t id_669 { 0 };
                                    Pointer id_670 { leb128_ptr_1246[id_669] };
                                    uint32_t id_671 { 128U };
                                    uint8_t id_672 { 0 };
                                    uint32_t id_673 { leb128_sz_1245[id_672] };
                                    bool id_674 { bool(id_671 > id_673) };
                                    uint8_t choose_res_675;
                                    if (id_674) {
                                      uint8_t id_676 { 0 };
                                      uint32_t id_677 { leb128_sz_1245[id_676] };
                                      uint8_t id_678 { uint8_t(id_677) };
                                      choose_res_675 = id_678;
                                    } else {
                                      uint8_t id_679 { 0 };
                                      uint32_t id_680 { leb128_sz_1245[id_679] };
                                      uint8_t id_681 { uint8_t(id_680) };
                                      uint8_t id_682 { 128 };
                                      uint8_t id_683 { uint8_t(id_681 | id_682) };
                                      choose_res_675 = id_683;
                                    }
                                    Pointer id_684 { id_670.writeU8(choose_res_675) };
                                    Void id_685 { ((void)(leb128_ptr_1246[id_668] = id_684), ::dessser::Void()) };
                                    (void)id_685;
                                    uint8_t id_686 { 0 };
                                    uint8_t id_687 { 0 };
                                    uint32_t id_688 { leb128_sz_1245[id_687] };
                                    uint8_t id_689 { 7 };
                                    uint32_t id_690 { uint32_t(id_688 >> id_689) };
                                    Void id_691 { ((void)(leb128_sz_1245[id_686] = id_690), ::dessser::Void()) };
                                    (void)id_691;
                                    uint8_t id_692 { 0 };
                                    uint32_t id_693 { leb128_sz_1245[id_692] };
                                    uint32_t id_694 { 0U };
                                    bool id_695 { bool(id_693 > id_694) };
                                    while_flag_667 = id_695;
                                    if (while_flag_667) {
                                      (void)::dessser::Void();
                                    }
                                  } while (while_flag_667);
                                  (void)::dessser::Void();
                                  uint8_t id_696 { 0 };
                                  Pointer id_697 { leb128_ptr_1246[id_696] };
                                  let_res_666 = id_697;
                                }
                                let_res_664 = let_res_666;
                              }
                              Vec<1, Pointer> id_698 {  let_res_664  };
                              Pointer let_res_699;
                              {
                                Vec<1, Pointer> dst_ref_1247 { id_698 };
                                int32_t id_700 { 0L };
                                Vec<1, int32_t> id_701 {  id_700  };
                                Pointer let_res_702;
                                {
                                  Vec<1, int32_t> n_ref_1248 { id_701 };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_703 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_704 { std::get<4 /* Stateless */>(id_703) };
                                  ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_705 { std::get<2 /* SL1s */>(id_704) };
                                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_706 { std::get<1>(id_705) };
                                  for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1249 : id_706) {
                                    uint8_t id_707 { 0 };
                                    uint8_t id_708 { 0 };
                                    Pointer id_709 { dst_ref_1247[id_708] };
                                    Pointer id_710 { fun0(x_1249, id_709) };
                                    Void id_711 { ((void)(dst_ref_1247[id_707] = id_710), ::dessser::Void()) };
                                    (void)id_711;
                                    uint8_t id_712 { 0 };
                                    int32_t id_713 { 1L };
                                    uint8_t id_714 { 0 };
                                    int32_t id_715 { n_ref_1248[id_714] };
                                    int32_t id_716 { int32_t(id_713 + id_715) };
                                    Void id_717 { ((void)(n_ref_1248[id_712] = id_716), ::dessser::Void()) };
                                    (void)id_717;
                                    (void)id_717;
                                  }
                                  (void)::dessser::Void();
                                  uint8_t id_718 { 0 };
                                  Pointer id_719 { dst_ref_1247[id_718] };
                                  let_res_702 = id_719;
                                }
                                let_res_699 = let_res_702;
                              }
                              let_res_657 = let_res_699;
                            }
                            choose_res_636 = let_res_657;
                          } else {
                            uint16_t id_720 { 3 };
                            bool id_721 { bool(id_720 == label1_1231) };
                            Pointer choose_res_722;
                            if (id_721) {
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_723 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_724 { std::get<4 /* Stateless */>(id_723) };
                              ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76 id_725 { std::get<3 /* SL2 */>(id_724) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_726 { std::get<2>(id_725) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_727 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_728 { std::get<4 /* Stateless */>(id_727) };
                              ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76 id_729 { std::get<3 /* SL2 */>(id_728) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_730 { std::get<1>(id_729) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_731 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_732 { std::get<4 /* Stateless */>(id_731) };
                              ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76 id_733 { std::get<3 /* SL2 */>(id_732) };
                              ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_734 { std::get<0>(id_733) };
                              uint16_t id_735 { uint16_t(id_734) };
                              Pointer let_res_736;
                              {
                                uint16_t label1_1238 { id_735 };
                                Pointer id_737 { ssum_dst_1232.writeU16Le(label1_1238) };
                                Pointer let_res_738;
                                {
                                  Pointer ssum_dst_1239 { id_737 };
                                  uint16_t id_739 { 0 };
                                  bool id_740 { bool(id_739 == label1_1238) };
                                  Pointer choose_res_741;
                                  if (id_740) {
                                    choose_res_741 = ssum_dst_1239;
                                  } else {
                                    uint16_t id_742 { 1 };
                                    bool id_743 { bool(id_742 == label1_1238) };
                                    Pointer choose_res_744;
                                    if (id_743) {
                                      choose_res_744 = ssum_dst_1239;
                                    } else {
                                      uint16_t id_745 { 2 };
                                      bool id_746 { bool(id_745 == label1_1238) };
                                      Pointer choose_res_747;
                                      if (id_746) {
                                        choose_res_747 = ssum_dst_1239;
                                      } else {
                                        uint16_t id_748 { 3 };
                                        bool id_749 { bool(id_748 == label1_1238) };
                                        Pointer choose_res_750;
                                        if (id_749) {
                                          choose_res_750 = ssum_dst_1239;
                                        } else {
                                          uint16_t id_751 { 4 };
                                          bool id_752 { bool(id_751 == label1_1238) };
                                          Pointer choose_res_753;
                                          if (id_752) {
                                            choose_res_753 = ssum_dst_1239;
                                          } else {
                                            uint16_t id_754 { 5 };
                                            bool id_755 { bool(id_754 == label1_1238) };
                                            Pointer choose_res_756;
                                            if (id_755) {
                                              choose_res_756 = ssum_dst_1239;
                                            } else {
                                              uint16_t id_757 { 6 };
                                              bool id_758 { bool(id_757 == label1_1238) };
                                              Pointer choose_res_759;
                                              if (id_758) {
                                                choose_res_759 = ssum_dst_1239;
                                              } else {
                                                uint16_t id_760 { 7 };
                                                bool id_761 { bool(id_760 == label1_1238) };
                                                Pointer choose_res_762;
                                                if (id_761) {
                                                  choose_res_762 = ssum_dst_1239;
                                                } else {
                                                  uint16_t id_763 { 8 };
                                                  bool id_764 { bool(id_763 == label1_1238) };
                                                  Pointer choose_res_765;
                                                  if (id_764) {
                                                    choose_res_765 = ssum_dst_1239;
                                                  } else {
                                                    uint16_t id_766 { 9 };
                                                    bool id_767 { bool(id_766 == label1_1238) };
                                                    Pointer choose_res_768;
                                                    if (id_767) {
                                                      choose_res_768 = ssum_dst_1239;
                                                    } else {
                                                      uint16_t id_769 { 10 };
                                                      bool id_770 { bool(id_769 == label1_1238) };
                                                      Pointer choose_res_771;
                                                      if (id_770) {
                                                        choose_res_771 = ssum_dst_1239;
                                                      } else {
                                                        uint16_t id_772 { 11 };
                                                        bool id_773 { bool(id_772 == label1_1238) };
                                                        Pointer choose_res_774;
                                                        if (id_773) {
                                                          choose_res_774 = ssum_dst_1239;
                                                        } else {
                                                          uint16_t id_775 { 12 };
                                                          bool id_776 { bool(id_775 == label1_1238) };
                                                          Pointer choose_res_777;
                                                          if (id_776) {
                                                            choose_res_777 = ssum_dst_1239;
                                                          } else {
                                                            uint16_t id_778 { 13 };
                                                            bool id_779 { bool(id_778 == label1_1238) };
                                                            Pointer choose_res_780;
                                                            if (id_779) {
                                                              choose_res_780 = ssum_dst_1239;
                                                            } else {
                                                              uint16_t id_781 { 14 };
                                                              bool id_782 { bool(id_781 == label1_1238) };
                                                              Pointer choose_res_783;
                                                              if (id_782) {
                                                                choose_res_783 = ssum_dst_1239;
                                                              } else {
                                                                uint16_t id_784 { 15 };
                                                                bool id_785 { bool(id_784 == label1_1238) };
                                                                Pointer choose_res_786;
                                                                if (id_785) {
                                                                  choose_res_786 = ssum_dst_1239;
                                                                } else {
                                                                  uint16_t id_787 { 16 };
                                                                  bool id_788 { bool(id_787 == label1_1238) };
                                                                  Pointer choose_res_789;
                                                                  if (id_788) {
                                                                    choose_res_789 = ssum_dst_1239;
                                                                  } else {
                                                                    uint16_t id_790 { 17 };
                                                                    bool id_791 { bool(id_790 == label1_1238) };
                                                                    Pointer choose_res_792;
                                                                    if (id_791) {
                                                                      choose_res_792 = ssum_dst_1239;
                                                                    } else {
                                                                      uint16_t id_793 { 18 };
                                                                      bool id_794 { bool(id_793 == label1_1238) };
                                                                      Pointer choose_res_795;
                                                                      if (id_794) {
                                                                        choose_res_795 = ssum_dst_1239;
                                                                      } else {
                                                                        uint16_t id_796 { 19 };
                                                                        bool id_797 { bool(id_796 == label1_1238) };
                                                                        Pointer choose_res_798;
                                                                        if (id_797) {
                                                                          choose_res_798 = ssum_dst_1239;
                                                                        } else {
                                                                          uint16_t id_799 { 20 };
                                                                          bool id_800 { bool(id_799 == label1_1238) };
                                                                          Pointer choose_res_801;
                                                                          if (id_800) {
                                                                            choose_res_801 = ssum_dst_1239;
                                                                          } else {
                                                                            uint16_t id_802 { 21 };
                                                                            bool id_803 { bool(id_802 == label1_1238) };
                                                                            Pointer choose_res_804;
                                                                            if (id_803) {
                                                                              choose_res_804 = ssum_dst_1239;
                                                                            } else {
                                                                              uint16_t id_805 { 22 };
                                                                              bool id_806 { bool(id_805 == label1_1238) };
                                                                              Pointer choose_res_807;
                                                                              if (id_806) {
                                                                                choose_res_807 = ssum_dst_1239;
                                                                              } else {
                                                                                uint16_t id_808 { 23 };
                                                                                bool id_809 { bool(id_808 == label1_1238) };
                                                                                Pointer choose_res_810;
                                                                                if (id_809) {
                                                                                  choose_res_810 = ssum_dst_1239;
                                                                                } else {
                                                                                  uint16_t id_811 { 24 };
                                                                                  bool id_812 { bool(id_811 == label1_1238) };
                                                                                  Pointer choose_res_813;
                                                                                  if (id_812) {
                                                                                    choose_res_813 = ssum_dst_1239;
                                                                                  } else {
                                                                                    uint16_t id_814 { 25 };
                                                                                    bool id_815 { bool(label1_1238 == id_814) };
                                                                                    Void id_816 { ((void)(assert(id_815)), ::dessser::Void()) };
                                                                                    (void)id_816;
                                                                                    choose_res_813 = ssum_dst_1239;
                                                                                  }
                                                                                  choose_res_810 = choose_res_813;
                                                                                }
                                                                                choose_res_807 = choose_res_810;
                                                                              }
                                                                              choose_res_804 = choose_res_807;
                                                                            }
                                                                            choose_res_801 = choose_res_804;
                                                                          }
                                                                          choose_res_798 = choose_res_801;
                                                                        }
                                                                        choose_res_795 = choose_res_798;
                                                                      }
                                                                      choose_res_792 = choose_res_795;
                                                                    }
                                                                    choose_res_789 = choose_res_792;
                                                                  }
                                                                  choose_res_786 = choose_res_789;
                                                                }
                                                                choose_res_783 = choose_res_786;
                                                              }
                                                              choose_res_780 = choose_res_783;
                                                            }
                                                            choose_res_777 = choose_res_780;
                                                          }
                                                          choose_res_774 = choose_res_777;
                                                        }
                                                        choose_res_771 = choose_res_774;
                                                      }
                                                      choose_res_768 = choose_res_771;
                                                    }
                                                    choose_res_765 = choose_res_768;
                                                  }
                                                  choose_res_762 = choose_res_765;
                                                }
                                                choose_res_759 = choose_res_762;
                                              }
                                              choose_res_756 = choose_res_759;
                                            }
                                            choose_res_753 = choose_res_756;
                                          }
                                          choose_res_750 = choose_res_753;
                                        }
                                        choose_res_747 = choose_res_750;
                                      }
                                      choose_res_744 = choose_res_747;
                                    }
                                    choose_res_741 = choose_res_744;
                                  }
                                  let_res_738 = choose_res_741;
                                }
                                let_res_736 = let_res_738;
                              }
                              Pointer id_817 { fun0(id_730, let_res_736) };
                              Pointer id_818 { fun0(id_726, id_817) };
                              choose_res_722 = id_818;
                            } else {
                              uint16_t id_819 { 4 };
                              bool id_820 { bool(label1_1231 == id_819) };
                              Void id_821 { ((void)(assert(id_820)), ::dessser::Void()) };
                              (void)id_821;
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_822 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_823 { std::get<4 /* Stateless */>(id_822) };
                              ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_824 { std::get<4 /* SL3 */>(id_823) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_825 { std::get<3>(id_824) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_826 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_827 { std::get<4 /* Stateless */>(id_826) };
                              ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_828 { std::get<4 /* SL3 */>(id_827) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_829 { std::get<2>(id_828) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_830 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_831 { std::get<4 /* Stateless */>(id_830) };
                              ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_832 { std::get<4 /* SL3 */>(id_831) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_833 { std::get<1>(id_832) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_834 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_835 { std::get<4 /* Stateless */>(id_834) };
                              ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_836 { std::get<4 /* SL3 */>(id_835) };
                              ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035 id_837 { std::get<0>(id_836) };
                              uint16_t id_838 { uint16_t(id_837) };
                              Pointer id_839 { ssum_dst_1232.writeU16Le(id_838) };
                              Pointer let_res_840;
                              {
                                Pointer ssum_dst_1234 { id_839 };
                                uint16_t id_841 { 0 };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_842 { (*p_0).text };
                                ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_843 { std::get<4 /* Stateless */>(id_842) };
                                ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_844 { std::get<4 /* SL3 */>(id_843) };
                                ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035 id_845 { std::get<0>(id_844) };
                                uint16_t id_846 { uint16_t(id_845) };
                                bool id_847 { bool(id_841 == id_846) };
                                Pointer choose_res_848;
                                if (id_847) {
                                  choose_res_848 = ssum_dst_1234;
                                } else {
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_849 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_850 { std::get<4 /* Stateless */>(id_849) };
                                  ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_851 { std::get<4 /* SL3 */>(id_850) };
                                  ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035 id_852 { std::get<0>(id_851) };
                                  uint16_t id_853 { uint16_t(id_852) };
                                  uint16_t id_854 { 1 };
                                  bool id_855 { bool(id_853 == id_854) };
                                  Void id_856 { ((void)(assert(id_855)), ::dessser::Void()) };
                                  (void)id_856;
                                  choose_res_848 = ssum_dst_1234;
                                }
                                let_res_840 = choose_res_848;
                              }
                              Pointer id_857 { fun0(id_833, let_res_840) };
                              Pointer id_858 { fun0(id_829, id_857) };
                              Pointer id_859 { fun0(id_825, id_858) };
                              choose_res_722 = id_859;
                            }
                            choose_res_636 = choose_res_722;
                          }
                          choose_res_404 = choose_res_636;
                        }
                        choose_res_286 = choose_res_404;
                      }
                      let_res_283 = choose_res_286;
                    }
                    let_res_281 = let_res_283;
                  }
                  choose_res_277 = let_res_281;
                } else {
                  uint16_t id_860 { 5 };
                  bool id_861 { bool(id_860 == label1_1169) };
                  Pointer choose_res_862;
                  if (id_861) {
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_863 { (*p_0).text };
                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_864 { std::get<5 /* Stateful */>(id_863) };
                    std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_865 { id_864.lifespan };
                    bool id_866 { !(id_865.has_value ()) };
                    Pointer choose_res_867;
                    if (id_866) {
                      uint8_t id_868 { 1 };
                      Pointer id_869 { ssum_dst_1170.writeU8(id_868) };
                      choose_res_867 = id_869;
                    } else {
                      uint8_t id_870 { 0 };
                      Pointer id_871 { ssum_dst_1170.writeU8(id_870) };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_872 { (*p_0).text };
                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_873 { std::get<5 /* Stateful */>(id_872) };
                      std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_874 { id_873.lifespan };
                      ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042 id_875 { id_874.value() };
                      uint16_t id_876 { uint16_t(id_875) };
                      Pointer id_877 { id_871.writeU16Le(id_876) };
                      Pointer let_res_878;
                      {
                        Pointer ssum_dst_1175 { id_877 };
                        uint16_t id_879 { 0 };
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_880 { (*p_0).text };
                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_881 { std::get<5 /* Stateful */>(id_880) };
                        std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_882 { id_881.lifespan };
                        ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042 id_883 { id_882.value() };
                        uint16_t id_884 { uint16_t(id_883) };
                        bool id_885 { bool(id_879 == id_884) };
                        Pointer choose_res_886;
                        if (id_885) {
                          choose_res_886 = ssum_dst_1175;
                        } else {
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_887 { (*p_0).text };
                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_888 { std::get<5 /* Stateful */>(id_887) };
                          std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_889 { id_888.lifespan };
                          ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042 id_890 { id_889.value() };
                          uint16_t id_891 { uint16_t(id_890) };
                          uint16_t id_892 { 1 };
                          bool id_893 { bool(id_891 == id_892) };
                          Void id_894 { ((void)(assert(id_893)), ::dessser::Void()) };
                          (void)id_894;
                          choose_res_886 = ssum_dst_1175;
                        }
                        let_res_878 = choose_res_886;
                      }
                      choose_res_867 = let_res_878;
                    }
                    Pointer let_res_895;
                    {
                      Pointer srec_dst_1176 { choose_res_867 };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_896 { (*p_0).text };
                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_897 { std::get<5 /* Stateful */>(id_896) };
                      bool id_898 { id_897.skip_nulls };
                      uint8_t id_899 { uint8_t(id_898) };
                      Pointer id_900 { srec_dst_1176.writeU8(id_899) };
                      let_res_895 = id_900;
                    }
                    Pointer let_res_901;
                    {
                      Pointer srec_dst_1177 { let_res_895 };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_902 { (*p_0).text };
                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_903 { std::get<5 /* Stateful */>(id_902) };
                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_904 { id_903.operation };
                      uint16_t id_905 { uint16_t(id_904.index()) };
                      Pointer let_res_906;
                      {
                        uint16_t label1_1178 { id_905 };
                        Pointer id_907 { srec_dst_1177.writeU16Le(label1_1178) };
                        Pointer let_res_908;
                        {
                          Pointer ssum_dst_1179 { id_907 };
                          uint16_t id_909 { 0 };
                          bool id_910 { bool(id_909 == label1_1178) };
                          Pointer choose_res_911;
                          if (id_910) {
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_912 { (*p_0).text };
                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_913 { std::get<5 /* Stateful */>(id_912) };
                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_914 { id_913.operation };
                            ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_915 { std::get<0 /* SF1 */>(id_914) };
                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_916 { std::get<1>(id_915) };
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_917 { (*p_0).text };
                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_918 { std::get<5 /* Stateful */>(id_917) };
                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_919 { id_918.operation };
                            ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_920 { std::get<0 /* SF1 */>(id_919) };
                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_921 { std::get<0>(id_920) };
                            uint16_t id_922 { uint16_t(id_921.index()) };
                            Pointer let_res_923;
                            {
                              uint16_t label1_1226 { id_922 };
                              Pointer id_924 { ssum_dst_1179.writeU16Le(label1_1226) };
                              Pointer let_res_925;
                              {
                                Pointer ssum_dst_1227 { id_924 };
                                uint16_t id_926 { 0 };
                                bool id_927 { bool(id_926 == label1_1226) };
                                Pointer choose_res_928;
                                if (id_927) {
                                  choose_res_928 = ssum_dst_1227;
                                } else {
                                  uint16_t id_929 { 1 };
                                  bool id_930 { bool(id_929 == label1_1226) };
                                  Pointer choose_res_931;
                                  if (id_930) {
                                    choose_res_931 = ssum_dst_1227;
                                  } else {
                                    uint16_t id_932 { 2 };
                                    bool id_933 { bool(id_932 == label1_1226) };
                                    Pointer choose_res_934;
                                    if (id_933) {
                                      choose_res_934 = ssum_dst_1227;
                                    } else {
                                      uint16_t id_935 { 3 };
                                      bool id_936 { bool(id_935 == label1_1226) };
                                      Pointer choose_res_937;
                                      if (id_936) {
                                        choose_res_937 = ssum_dst_1227;
                                      } else {
                                        uint16_t id_938 { 4 };
                                        bool id_939 { bool(id_938 == label1_1226) };
                                        Pointer choose_res_940;
                                        if (id_939) {
                                          choose_res_940 = ssum_dst_1227;
                                        } else {
                                          uint16_t id_941 { 5 };
                                          bool id_942 { bool(id_941 == label1_1226) };
                                          Pointer choose_res_943;
                                          if (id_942) {
                                            choose_res_943 = ssum_dst_1227;
                                          } else {
                                            uint16_t id_944 { 6 };
                                            bool id_945 { bool(id_944 == label1_1226) };
                                            Pointer choose_res_946;
                                            if (id_945) {
                                              choose_res_946 = ssum_dst_1227;
                                            } else {
                                              uint16_t id_947 { 7 };
                                              bool id_948 { bool(id_947 == label1_1226) };
                                              Pointer choose_res_949;
                                              if (id_948) {
                                                choose_res_949 = ssum_dst_1227;
                                              } else {
                                                uint16_t id_950 { 8 };
                                                bool id_951 { bool(id_950 == label1_1226) };
                                                Pointer choose_res_952;
                                                if (id_951) {
                                                  choose_res_952 = ssum_dst_1227;
                                                } else {
                                                  uint16_t id_953 { 9 };
                                                  bool id_954 { bool(id_953 == label1_1226) };
                                                  Pointer choose_res_955;
                                                  if (id_954) {
                                                    choose_res_955 = ssum_dst_1227;
                                                  } else {
                                                    uint16_t id_956 { 10 };
                                                    bool id_957 { bool(id_956 == label1_1226) };
                                                    Pointer choose_res_958;
                                                    if (id_957) {
                                                      choose_res_958 = ssum_dst_1227;
                                                    } else {
                                                      uint16_t id_959 { 11 };
                                                      bool id_960 { bool(id_959 == label1_1226) };
                                                      Pointer choose_res_961;
                                                      if (id_960) {
                                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_962 { (*p_0).text };
                                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_963 { std::get<5 /* Stateful */>(id_962) };
                                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_964 { id_963.operation };
                                                        ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_965 { std::get<0 /* SF1 */>(id_964) };
                                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_966 { std::get<0>(id_965) };
                                                        ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_967 { std::get<11 /* AggrHistogram */>(id_966) };
                                                        double id_968 { std::get<0>(id_967) };
                                                        uint64_t id_969 { qword_of_float(id_968) };
                                                        Pointer id_970 { ssum_dst_1227.writeU64Le(id_969) };
                                                        Pointer let_res_971;
                                                        {
                                                          Pointer stup_dst_1228 { id_970 };
                                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_972 { (*p_0).text };
                                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_973 { std::get<5 /* Stateful */>(id_972) };
                                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_974 { id_973.operation };
                                                          ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_975 { std::get<0 /* SF1 */>(id_974) };
                                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_976 { std::get<0>(id_975) };
                                                          ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_977 { std::get<11 /* AggrHistogram */>(id_976) };
                                                          double id_978 { std::get<1>(id_977) };
                                                          uint64_t id_979 { qword_of_float(id_978) };
                                                          Pointer id_980 { stup_dst_1228.writeU64Le(id_979) };
                                                          let_res_971 = id_980;
                                                        }
                                                        Pointer let_res_981;
                                                        {
                                                          Pointer stup_dst_1229 { let_res_971 };
                                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_982 { (*p_0).text };
                                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_983 { std::get<5 /* Stateful */>(id_982) };
                                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_984 { id_983.operation };
                                                          ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_985 { std::get<0 /* SF1 */>(id_984) };
                                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_986 { std::get<0>(id_985) };
                                                          ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_987 { std::get<11 /* AggrHistogram */>(id_986) };
                                                          uint32_t id_988 { std::get<2>(id_987) };
                                                          Pointer id_989 { stup_dst_1229.writeU32Le(id_988) };
                                                          let_res_981 = id_989;
                                                        }
                                                        choose_res_961 = let_res_981;
                                                      } else {
                                                        uint16_t id_990 { 12 };
                                                        bool id_991 { bool(id_990 == label1_1226) };
                                                        Pointer choose_res_992;
                                                        if (id_991) {
                                                          choose_res_992 = ssum_dst_1227;
                                                        } else {
                                                          uint16_t id_993 { 13 };
                                                          bool id_994 { bool(id_993 == label1_1226) };
                                                          Pointer choose_res_995;
                                                          if (id_994) {
                                                            choose_res_995 = ssum_dst_1227;
                                                          } else {
                                                            uint16_t id_996 { 14 };
                                                            bool id_997 { bool(label1_1226 == id_996) };
                                                            Void id_998 { ((void)(assert(id_997)), ::dessser::Void()) };
                                                            (void)id_998;
                                                            choose_res_995 = ssum_dst_1227;
                                                          }
                                                          choose_res_992 = choose_res_995;
                                                        }
                                                        choose_res_961 = choose_res_992;
                                                      }
                                                      choose_res_958 = choose_res_961;
                                                    }
                                                    choose_res_955 = choose_res_958;
                                                  }
                                                  choose_res_952 = choose_res_955;
                                                }
                                                choose_res_949 = choose_res_952;
                                              }
                                              choose_res_946 = choose_res_949;
                                            }
                                            choose_res_943 = choose_res_946;
                                          }
                                          choose_res_940 = choose_res_943;
                                        }
                                        choose_res_937 = choose_res_940;
                                      }
                                      choose_res_934 = choose_res_937;
                                    }
                                    choose_res_931 = choose_res_934;
                                  }
                                  choose_res_928 = choose_res_931;
                                }
                                let_res_925 = choose_res_928;
                              }
                              let_res_923 = let_res_925;
                            }
                            Pointer id_999 { fun0(id_916, let_res_923) };
                            choose_res_911 = id_999;
                          } else {
                            uint16_t id_1000 { 1 };
                            bool id_1001 { bool(id_1000 == label1_1178) };
                            Pointer choose_res_1002;
                            if (id_1001) {
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1003 { (*p_0).text };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1004 { std::get<5 /* Stateful */>(id_1003) };
                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1005 { id_1004.operation };
                              ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78 id_1006 { std::get<1 /* SF2 */>(id_1005) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_1007 { std::get<2>(id_1006) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1008 { (*p_0).text };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1009 { std::get<5 /* Stateful */>(id_1008) };
                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1010 { id_1009.operation };
                              ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78 id_1011 { std::get<1 /* SF2 */>(id_1010) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_1012 { std::get<1>(id_1011) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1013 { (*p_0).text };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1014 { std::get<5 /* Stateful */>(id_1013) };
                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1015 { id_1014.operation };
                              ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78 id_1016 { std::get<1 /* SF2 */>(id_1015) };
                              ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d id_1017 { std::get<0>(id_1016) };
                              uint16_t id_1018 { uint16_t(id_1017) };
                              Pointer let_res_1019;
                              {
                                uint16_t label1_1222 { id_1018 };
                                Pointer id_1020 { ssum_dst_1179.writeU16Le(label1_1222) };
                                Pointer let_res_1021;
                                {
                                  Pointer ssum_dst_1223 { id_1020 };
                                  uint16_t id_1022 { 0 };
                                  bool id_1023 { bool(id_1022 == label1_1222) };
                                  Pointer choose_res_1024;
                                  if (id_1023) {
                                    choose_res_1024 = ssum_dst_1223;
                                  } else {
                                    uint16_t id_1025 { 1 };
                                    bool id_1026 { bool(id_1025 == label1_1222) };
                                    Pointer choose_res_1027;
                                    if (id_1026) {
                                      choose_res_1027 = ssum_dst_1223;
                                    } else {
                                      uint16_t id_1028 { 2 };
                                      bool id_1029 { bool(id_1028 == label1_1222) };
                                      Pointer choose_res_1030;
                                      if (id_1029) {
                                        choose_res_1030 = ssum_dst_1223;
                                      } else {
                                        uint16_t id_1031 { 3 };
                                        bool id_1032 { bool(label1_1222 == id_1031) };
                                        Void id_1033 { ((void)(assert(id_1032)), ::dessser::Void()) };
                                        (void)id_1033;
                                        choose_res_1030 = ssum_dst_1223;
                                      }
                                      choose_res_1027 = choose_res_1030;
                                    }
                                    choose_res_1024 = choose_res_1027;
                                  }
                                  let_res_1021 = choose_res_1024;
                                }
                                let_res_1019 = let_res_1021;
                              }
                              Pointer id_1034 { fun0(id_1012, let_res_1019) };
                              Pointer id_1035 { fun0(id_1007, id_1034) };
                              choose_res_1002 = id_1035;
                            } else {
                              uint16_t id_1036 { 2 };
                              bool id_1037 { bool(id_1036 == label1_1178) };
                              Pointer choose_res_1038;
                              if (id_1037) {
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1039 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1040 { std::get<5 /* Stateful */>(id_1039) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1041 { id_1040.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1042 { std::get<2 /* SF3 */>(id_1041) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_1043 { std::get<3>(id_1042) };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1044 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1045 { std::get<5 /* Stateful */>(id_1044) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1046 { id_1045.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1047 { std::get<2 /* SF3 */>(id_1046) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_1048 { std::get<2>(id_1047) };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1049 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1050 { std::get<5 /* Stateful */>(id_1049) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1051 { id_1050.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1052 { std::get<2 /* SF3 */>(id_1051) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_1053 { std::get<1>(id_1052) };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1054 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1055 { std::get<5 /* Stateful */>(id_1054) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1056 { id_1055.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1057 { std::get<2 /* SF3 */>(id_1056) };
                                ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_1058 { std::get<0>(id_1057) };
                                uint16_t id_1059 { uint16_t(id_1058.index()) };
                                Pointer let_res_1060;
                                {
                                  uint16_t label1_1217 { id_1059 };
                                  Pointer id_1061 { ssum_dst_1179.writeU16Le(label1_1217) };
                                  Pointer let_res_1062;
                                  {
                                    Pointer ssum_dst_1218 { id_1061 };
                                    uint16_t id_1063 { 0 };
                                    bool id_1064 { bool(id_1063 == label1_1217) };
                                    Pointer choose_res_1065;
                                    if (id_1064) {
                                      choose_res_1065 = ssum_dst_1218;
                                    } else {
                                      uint16_t id_1066 { 1 };
                                      bool id_1067 { bool(id_1066 == label1_1217) };
                                      Pointer choose_res_1068;
                                      if (id_1067) {
                                        choose_res_1068 = ssum_dst_1218;
                                      } else {
                                        uint16_t id_1069 { 2 };
                                        bool id_1070 { bool(label1_1217 == id_1069) };
                                        Void id_1071 { ((void)(assert(id_1070)), ::dessser::Void()) };
                                        (void)id_1071;
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1072 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1073 { std::get<5 /* Stateful */>(id_1072) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1074 { id_1073.operation };
                                        ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1075 { std::get<2 /* SF3 */>(id_1074) };
                                        ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_1076 { std::get<0>(id_1075) };
                                        bool id_1077 { std::get<2 /* OnceEvery */>(id_1076) };
                                        uint8_t id_1078 { uint8_t(id_1077) };
                                        Pointer id_1079 { ssum_dst_1218.writeU8(id_1078) };
                                        choose_res_1068 = id_1079;
                                      }
                                      choose_res_1065 = choose_res_1068;
                                    }
                                    let_res_1062 = choose_res_1065;
                                  }
                                  let_res_1060 = let_res_1062;
                                }
                                Pointer id_1080 { fun0(id_1053, let_res_1060) };
                                Pointer id_1081 { fun0(id_1048, id_1080) };
                                Pointer id_1082 { fun0(id_1043, id_1081) };
                                choose_res_1038 = id_1082;
                              } else {
                                uint16_t id_1083 { 3 };
                                bool id_1084 { bool(id_1083 == label1_1178) };
                                Pointer choose_res_1085;
                                if (id_1084) {
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1086 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1087 { std::get<5 /* Stateful */>(id_1086) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1088 { id_1087.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1089 { std::get<3 /* SF4 */>(id_1088) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1090 { std::get<4>(id_1089) };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1091 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1092 { std::get<5 /* Stateful */>(id_1091) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1093 { id_1092.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1094 { std::get<3 /* SF4 */>(id_1093) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1095 { std::get<3>(id_1094) };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1096 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1097 { std::get<5 /* Stateful */>(id_1096) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1098 { id_1097.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1099 { std::get<3 /* SF4 */>(id_1098) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1100 { std::get<2>(id_1099) };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1101 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1102 { std::get<5 /* Stateful */>(id_1101) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1103 { id_1102.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1104 { std::get<3 /* SF4 */>(id_1103) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1105 { std::get<1>(id_1104) };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1106 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1107 { std::get<5 /* Stateful */>(id_1106) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1108 { id_1107.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1109 { std::get<3 /* SF4 */>(id_1108) };
                                  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1110 { std::get<0>(id_1109) };
                                  uint16_t id_1111 { uint16_t(id_1110.index()) };
                                  Pointer id_1112 { ssum_dst_1179.writeU16Le(id_1111) };
                                  Pointer let_res_1113;
                                  {
                                    Pointer ssum_dst_1212 { id_1112 };
                                    uint16_t id_1114 { 0 };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1115 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1116 { std::get<5 /* Stateful */>(id_1115) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1117 { id_1116.operation };
                                    ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1118 { std::get<3 /* SF4 */>(id_1117) };
                                    ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1119 { std::get<0>(id_1118) };
                                    uint16_t id_1120 { uint16_t(id_1119.index()) };
                                    bool id_1121 { bool(id_1114 == id_1120) };
                                    Pointer choose_res_1122;
                                    if (id_1121) {
                                      choose_res_1122 = ssum_dst_1212;
                                    } else {
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1123 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1124 { std::get<5 /* Stateful */>(id_1123) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1125 { id_1124.operation };
                                      ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1126 { std::get<3 /* SF4 */>(id_1125) };
                                      ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1127 { std::get<0>(id_1126) };
                                      uint16_t id_1128 { uint16_t(id_1127.index()) };
                                      uint16_t id_1129 { 1 };
                                      bool id_1130 { bool(id_1128 == id_1129) };
                                      Void id_1131 { ((void)(assert(id_1130)), ::dessser::Void()) };
                                      (void)id_1131;
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1132 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1133 { std::get<5 /* Stateful */>(id_1132) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1134 { id_1133.operation };
                                      ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1135 { std::get<3 /* SF4 */>(id_1134) };
                                      ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1136 { std::get<0>(id_1135) };
                                      bool id_1137 { std::get<1 /* Remember */>(id_1136) };
                                      uint8_t id_1138 { uint8_t(id_1137) };
                                      Pointer id_1139 { ssum_dst_1212.writeU8(id_1138) };
                                      choose_res_1122 = id_1139;
                                    }
                                    let_res_1113 = choose_res_1122;
                                  }
                                  Pointer id_1140 { fun0(id_1105, let_res_1113) };
                                  Pointer id_1141 { fun0(id_1100, id_1140) };
                                  Pointer id_1142 { fun0(id_1095, id_1141) };
                                  Pointer id_1143 { fun0(id_1090, id_1142) };
                                  choose_res_1085 = id_1143;
                                } else {
                                  uint16_t id_1144 { 4 };
                                  bool id_1145 { bool(id_1144 == label1_1178) };
                                  Pointer choose_res_1146;
                                  if (id_1145) {
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1147 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1148 { std::get<5 /* Stateful */>(id_1147) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1149 { id_1148.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1150 { std::get<4 /* SF4s */>(id_1149) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1151 { std::get<3>(id_1150) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1152 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1153 { std::get<5 /* Stateful */>(id_1152) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1154 { id_1153.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1155 { std::get<4 /* SF4s */>(id_1154) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1156 { std::get<2>(id_1155) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1157 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1158 { std::get<5 /* Stateful */>(id_1157) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1159 { id_1158.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1160 { std::get<4 /* SF4s */>(id_1159) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1161 { std::get<1>(id_1160) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1162 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1163 { std::get<5 /* Stateful */>(id_1162) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1164 { id_1163.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1165 { std::get<4 /* SF4s */>(id_1164) };
                                    ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1166 { std::get<0>(id_1165) };
                                    uint16_t id_1167 { uint16_t(id_1166.index()) };
                                    Pointer id_1168 { ssum_dst_1179.writeU16Le(id_1167) };
                                    Pointer let_res_1169;
                                    {
                                      Pointer ssum_dst_1200 { id_1168 };
                                      uint16_t id_1170 { 0 };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1171 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1172 { std::get<5 /* Stateful */>(id_1171) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1173 { id_1172.operation };
                                      ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1174 { std::get<4 /* SF4s */>(id_1173) };
                                      ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1175 { std::get<0>(id_1174) };
                                      uint16_t id_1176 { uint16_t(id_1175.index()) };
                                      bool id_1177 { bool(id_1170 == id_1176) };
                                      Pointer choose_res_1178;
                                      if (id_1177) {
                                        choose_res_1178 = ssum_dst_1200;
                                      } else {
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1179 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1180 { std::get<5 /* Stateful */>(id_1179) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1181 { id_1180.operation };
                                        ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1182 { std::get<4 /* SF4s */>(id_1181) };
                                        ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1183 { std::get<0>(id_1182) };
                                        uint16_t id_1184 { uint16_t(id_1183.index()) };
                                        uint16_t id_1185 { 1 };
                                        bool id_1186 { bool(id_1184 == id_1185) };
                                        Void id_1187 { ((void)(assert(id_1186)), ::dessser::Void()) };
                                        (void)id_1187;
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1188 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1189 { std::get<5 /* Stateful */>(id_1188) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1190 { id_1189.operation };
                                        ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1191 { std::get<4 /* SF4s */>(id_1190) };
                                        ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1192 { std::get<0>(id_1191) };
                                        ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 id_1193 { std::get<1 /* Largest */>(id_1192) };
                                        bool id_1194 { id_1193.inv };
                                        uint8_t id_1195 { uint8_t(id_1194) };
                                        Pointer id_1196 { ssum_dst_1200.writeU8(id_1195) };
                                        Pointer let_res_1197;
                                        {
                                          Pointer srec_dst_1201 { id_1196 };
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1198 { (*p_0).text };
                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1199 { std::get<5 /* Stateful */>(id_1198) };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1200 { id_1199.operation };
                                          ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1201 { std::get<4 /* SF4s */>(id_1200) };
                                          ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1202 { std::get<0>(id_1201) };
                                          ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 id_1203 { std::get<1 /* Largest */>(id_1202) };
                                          bool id_1204 { id_1203.up_to };
                                          uint8_t id_1205 { uint8_t(id_1204) };
                                          Pointer id_1206 { srec_dst_1201.writeU8(id_1205) };
                                          let_res_1197 = id_1206;
                                        }
                                        choose_res_1178 = let_res_1197;
                                      }
                                      let_res_1169 = choose_res_1178;
                                    }
                                    Pointer id_1207 { fun0(id_1161, let_res_1169) };
                                    Pointer id_1208 { fun0(id_1156, id_1207) };
                                    Pointer id_1209 { fun0(id_1151, id_1208) };
                                    Pointer let_res_1210;
                                    {
                                      Pointer stup_dst_1205 { id_1209 };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1211 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1212 { std::get<5 /* Stateful */>(id_1211) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1213 { id_1212.operation };
                                      ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1214 { std::get<4 /* SF4s */>(id_1213) };
                                      Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1215 { std::get<4>(id_1214) };
                                      uint32_t id_1216 { id_1215.size() };
                                      Vec<1, uint32_t> id_1217 {  id_1216  };
                                      Pointer let_res_1218;
                                      {
                                        Vec<1, uint32_t> leb128_sz_1206 { id_1217 };
                                        Vec<1, Pointer> id_1219 {  stup_dst_1205  };
                                        Pointer let_res_1220;
                                        {
                                          Vec<1, Pointer> leb128_ptr_1207 { id_1219 };
                                          bool while_flag_1221 { true };
                                          do {
                                            uint8_t id_1222 { 0 };
                                            uint8_t id_1223 { 0 };
                                            Pointer id_1224 { leb128_ptr_1207[id_1223] };
                                            uint32_t id_1225 { 128U };
                                            uint8_t id_1226 { 0 };
                                            uint32_t id_1227 { leb128_sz_1206[id_1226] };
                                            bool id_1228 { bool(id_1225 > id_1227) };
                                            uint8_t choose_res_1229;
                                            if (id_1228) {
                                              uint8_t id_1230 { 0 };
                                              uint32_t id_1231 { leb128_sz_1206[id_1230] };
                                              uint8_t id_1232 { uint8_t(id_1231) };
                                              choose_res_1229 = id_1232;
                                            } else {
                                              uint8_t id_1233 { 0 };
                                              uint32_t id_1234 { leb128_sz_1206[id_1233] };
                                              uint8_t id_1235 { uint8_t(id_1234) };
                                              uint8_t id_1236 { 128 };
                                              uint8_t id_1237 { uint8_t(id_1235 | id_1236) };
                                              choose_res_1229 = id_1237;
                                            }
                                            Pointer id_1238 { id_1224.writeU8(choose_res_1229) };
                                            Void id_1239 { ((void)(leb128_ptr_1207[id_1222] = id_1238), ::dessser::Void()) };
                                            (void)id_1239;
                                            uint8_t id_1240 { 0 };
                                            uint8_t id_1241 { 0 };
                                            uint32_t id_1242 { leb128_sz_1206[id_1241] };
                                            uint8_t id_1243 { 7 };
                                            uint32_t id_1244 { uint32_t(id_1242 >> id_1243) };
                                            Void id_1245 { ((void)(leb128_sz_1206[id_1240] = id_1244), ::dessser::Void()) };
                                            (void)id_1245;
                                            uint8_t id_1246 { 0 };
                                            uint32_t id_1247 { leb128_sz_1206[id_1246] };
                                            uint32_t id_1248 { 0U };
                                            bool id_1249 { bool(id_1247 > id_1248) };
                                            while_flag_1221 = id_1249;
                                            if (while_flag_1221) {
                                              (void)::dessser::Void();
                                            }
                                          } while (while_flag_1221);
                                          (void)::dessser::Void();
                                          uint8_t id_1250 { 0 };
                                          Pointer id_1251 { leb128_ptr_1207[id_1250] };
                                          let_res_1220 = id_1251;
                                        }
                                        let_res_1218 = let_res_1220;
                                      }
                                      Vec<1, Pointer> id_1252 {  let_res_1218  };
                                      Pointer let_res_1253;
                                      {
                                        Vec<1, Pointer> dst_ref_1208 { id_1252 };
                                        int32_t id_1254 { 0L };
                                        Vec<1, int32_t> id_1255 {  id_1254  };
                                        Pointer let_res_1256;
                                        {
                                          Vec<1, int32_t> n_ref_1209 { id_1255 };
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1257 { (*p_0).text };
                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1258 { std::get<5 /* Stateful */>(id_1257) };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1259 { id_1258.operation };
                                          ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1260 { std::get<4 /* SF4s */>(id_1259) };
                                          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1261 { std::get<4>(id_1260) };
                                          for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1210 : id_1261) {
                                            uint8_t id_1262 { 0 };
                                            uint8_t id_1263 { 0 };
                                            Pointer id_1264 { dst_ref_1208[id_1263] };
                                            Pointer id_1265 { fun0(x_1210, id_1264) };
                                            Void id_1266 { ((void)(dst_ref_1208[id_1262] = id_1265), ::dessser::Void()) };
                                            (void)id_1266;
                                            uint8_t id_1267 { 0 };
                                            int32_t id_1268 { 1L };
                                            uint8_t id_1269 { 0 };
                                            int32_t id_1270 { n_ref_1209[id_1269] };
                                            int32_t id_1271 { int32_t(id_1268 + id_1270) };
                                            Void id_1272 { ((void)(n_ref_1209[id_1267] = id_1271), ::dessser::Void()) };
                                            (void)id_1272;
                                            (void)id_1272;
                                          }
                                          (void)::dessser::Void();
                                          uint8_t id_1273 { 0 };
                                          Pointer id_1274 { dst_ref_1208[id_1273] };
                                          let_res_1256 = id_1274;
                                        }
                                        let_res_1253 = let_res_1256;
                                      }
                                      let_res_1210 = let_res_1253;
                                    }
                                    choose_res_1146 = let_res_1210;
                                  } else {
                                    uint16_t id_1275 { 5 };
                                    bool id_1276 { bool(id_1275 == label1_1178) };
                                    Pointer choose_res_1277;
                                    if (id_1276) {
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1278 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1279 { std::get<5 /* Stateful */>(id_1278) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1280 { id_1279.operation };
                                      ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1281 { std::get<5 /* SF6 */>(id_1280) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1282 { std::get<6>(id_1281) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1283 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1284 { std::get<5 /* Stateful */>(id_1283) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1285 { id_1284.operation };
                                      ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1286 { std::get<5 /* SF6 */>(id_1285) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1287 { std::get<5>(id_1286) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1288 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1289 { std::get<5 /* Stateful */>(id_1288) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1290 { id_1289.operation };
                                      ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1291 { std::get<5 /* SF6 */>(id_1290) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1292 { std::get<4>(id_1291) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1293 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1294 { std::get<5 /* Stateful */>(id_1293) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1295 { id_1294.operation };
                                      ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1296 { std::get<5 /* SF6 */>(id_1295) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1297 { std::get<3>(id_1296) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1298 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1299 { std::get<5 /* Stateful */>(id_1298) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1300 { id_1299.operation };
                                      ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1301 { std::get<5 /* SF6 */>(id_1300) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1302 { std::get<2>(id_1301) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1303 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1304 { std::get<5 /* Stateful */>(id_1303) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1305 { id_1304.operation };
                                      ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1306 { std::get<5 /* SF6 */>(id_1305) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1307 { std::get<1>(id_1306) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1308 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1309 { std::get<5 /* Stateful */>(id_1308) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1310 { id_1309.operation };
                                      ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1311 { std::get<5 /* SF6 */>(id_1310) };
                                      ::dessser::gen::raql_expr::t7ca40b2395ae0931861f2a365208f839 id_1312 { std::get<0>(id_1311) };
                                      uint16_t id_1313 { uint16_t(id_1312) };
                                      Pointer id_1314 { ssum_dst_1179.writeU16Le(id_1313) };
                                      Pointer let_res_1315;
                                      {
                                        Pointer ssum_dst_1192 { id_1314 };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1316 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1317 { std::get<5 /* Stateful */>(id_1316) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1318 { id_1317.operation };
                                        ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_1319 { std::get<5 /* SF6 */>(id_1318) };
                                        ::dessser::gen::raql_expr::t7ca40b2395ae0931861f2a365208f839 id_1320 { std::get<0>(id_1319) };
                                        uint16_t id_1321 { uint16_t(id_1320) };
                                        uint16_t id_1322 { 0 };
                                        bool id_1323 { bool(id_1321 == id_1322) };
                                        Void id_1324 { ((void)(assert(id_1323)), ::dessser::Void()) };
                                        (void)id_1324;
                                        let_res_1315 = ssum_dst_1192;
                                      }
                                      Pointer id_1325 { fun0(id_1307, let_res_1315) };
                                      Pointer id_1326 { fun0(id_1302, id_1325) };
                                      Pointer id_1327 { fun0(id_1297, id_1326) };
                                      Pointer id_1328 { fun0(id_1292, id_1327) };
                                      Pointer id_1329 { fun0(id_1287, id_1328) };
                                      Pointer id_1330 { fun0(id_1282, id_1329) };
                                      choose_res_1277 = id_1330;
                                    } else {
                                      uint16_t id_1331 { 6 };
                                      bool id_1332 { bool(id_1331 == label1_1178) };
                                      Pointer choose_res_1333;
                                      if (id_1332) {
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1334 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1335 { std::get<5 /* Stateful */>(id_1334) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1336 { id_1335.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1337 { std::get<6 /* Top */>(id_1336) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1338 { id_1337.sigmas };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1339 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1340 { std::get<5 /* Stateful */>(id_1339) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1341 { id_1340.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1342 { std::get<6 /* Top */>(id_1341) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1343 { id_1342.duration };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1344 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1345 { std::get<5 /* Stateful */>(id_1344) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1346 { id_1345.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1347 { std::get<6 /* Top */>(id_1346) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1348 { id_1347.Top_time };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1349 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1350 { std::get<5 /* Stateful */>(id_1349) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1351 { id_1350.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1352 { std::get<6 /* Top */>(id_1351) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1353 { id_1352.by };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1354 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1355 { std::get<5 /* Stateful */>(id_1354) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1356 { id_1355.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1357 { std::get<6 /* Top */>(id_1356) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1358 { id_1357.Top_what };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1359 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1360 { std::get<5 /* Stateful */>(id_1359) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1361 { id_1360.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1362 { std::get<6 /* Top */>(id_1361) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1363 { id_1362.size };
                                        auto fun1364 { dessser::gen::raql_top_output::to_row_binary };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1365 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1366 { std::get<5 /* Stateful */>(id_1365) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1367 { id_1366.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1368 { std::get<6 /* Top */>(id_1367) };
                                        dessser::gen::raql_top_output::t_ext id_1369 { id_1368.output };
                                        Pointer id_1370 { fun1364(id_1369, ssum_dst_1179) };
                                        Pointer id_1371 { fun0(id_1363, id_1370) };
                                        Pointer let_res_1372;
                                        {
                                          Pointer srec_dst_1185 { id_1371 };
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1373 { (*p_0).text };
                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1374 { std::get<5 /* Stateful */>(id_1373) };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1375 { id_1374.operation };
                                          ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1376 { std::get<6 /* Top */>(id_1375) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1377 { id_1376.max_size };
                                          bool id_1378 { !(id_1377.has_value ()) };
                                          Pointer choose_res_1379;
                                          if (id_1378) {
                                            uint8_t id_1380 { 1 };
                                            Pointer id_1381 { srec_dst_1185.writeU8(id_1380) };
                                            choose_res_1379 = id_1381;
                                          } else {
                                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1382 { (*p_0).text };
                                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1383 { std::get<5 /* Stateful */>(id_1382) };
                                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1384 { id_1383.operation };
                                            ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1385 { std::get<6 /* Top */>(id_1384) };
                                            std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1386 { id_1385.max_size };
                                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_1387 { id_1386.value() };
                                            uint8_t id_1388 { 0 };
                                            Pointer id_1389 { srec_dst_1185.writeU8(id_1388) };
                                            Pointer id_1390 { fun0(id_1387, id_1389) };
                                            choose_res_1379 = id_1390;
                                          }
                                          let_res_1372 = choose_res_1379;
                                        }
                                        Pointer id_1391 { fun0(id_1358, let_res_1372) };
                                        Pointer id_1392 { fun0(id_1353, id_1391) };
                                        Pointer id_1393 { fun0(id_1348, id_1392) };
                                        Pointer id_1394 { fun0(id_1343, id_1393) };
                                        Pointer id_1395 { fun0(id_1338, id_1394) };
                                        choose_res_1333 = id_1395;
                                      } else {
                                        uint16_t id_1396 { 7 };
                                        bool id_1397 { bool(label1_1178 == id_1396) };
                                        Void id_1398 { ((void)(assert(id_1397)), ::dessser::Void()) };
                                        (void)id_1398;
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1399 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1400 { std::get<5 /* Stateful */>(id_1399) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1401 { id_1400.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1402 { std::get<7 /* Past */>(id_1401) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1403 { id_1402.max_age };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1404 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1405 { std::get<5 /* Stateful */>(id_1404) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1406 { id_1405.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1407 { std::get<7 /* Past */>(id_1406) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1408 { id_1407.time };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1409 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1410 { std::get<5 /* Stateful */>(id_1409) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1411 { id_1410.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1412 { std::get<7 /* Past */>(id_1411) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1413 { id_1412.what };
                                        Pointer id_1414 { fun0(id_1413, ssum_dst_1179) };
                                        Pointer id_1415 { fun0(id_1408, id_1414) };
                                        Pointer id_1416 { fun0(id_1403, id_1415) };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1417 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1418 { std::get<5 /* Stateful */>(id_1417) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1419 { id_1418.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1420 { std::get<7 /* Past */>(id_1419) };
                                        bool id_1421 { id_1420.tumbling };
                                        uint8_t id_1422 { uint8_t(id_1421) };
                                        Pointer id_1423 { id_1416.writeU8(id_1422) };
                                        Pointer let_res_1424;
                                        {
                                          Pointer srec_dst_1183 { id_1423 };
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1425 { (*p_0).text };
                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1426 { std::get<5 /* Stateful */>(id_1425) };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1427 { id_1426.operation };
                                          ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1428 { std::get<7 /* Past */>(id_1427) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1429 { id_1428.sample_size };
                                          bool id_1430 { !(id_1429.has_value ()) };
                                          Pointer choose_res_1431;
                                          if (id_1430) {
                                            uint8_t id_1432 { 1 };
                                            Pointer id_1433 { srec_dst_1183.writeU8(id_1432) };
                                            choose_res_1431 = id_1433;
                                          } else {
                                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1434 { (*p_0).text };
                                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_1435 { std::get<5 /* Stateful */>(id_1434) };
                                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_1436 { id_1435.operation };
                                            ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1437 { std::get<7 /* Past */>(id_1436) };
                                            std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1438 { id_1437.sample_size };
                                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_1439 { id_1438.value() };
                                            uint8_t id_1440 { 0 };
                                            Pointer id_1441 { srec_dst_1183.writeU8(id_1440) };
                                            Pointer id_1442 { fun0(id_1439, id_1441) };
                                            choose_res_1431 = id_1442;
                                          }
                                          let_res_1424 = choose_res_1431;
                                        }
                                        choose_res_1333 = let_res_1424;
                                      }
                                      choose_res_1277 = choose_res_1333;
                                    }
                                    choose_res_1146 = choose_res_1277;
                                  }
                                  choose_res_1085 = choose_res_1146;
                                }
                                choose_res_1038 = choose_res_1085;
                              }
                              choose_res_1002 = choose_res_1038;
                            }
                            choose_res_911 = choose_res_1002;
                          }
                          let_res_908 = choose_res_911;
                        }
                        let_res_906 = let_res_908;
                      }
                      let_res_901 = let_res_906;
                    }
                    choose_res_862 = let_res_901;
                  } else {
                    uint16_t id_1443 { 6 };
                    bool id_1444 { bool(label1_1169 == id_1443) };
                    Void id_1445 { ((void)(assert(id_1444)), ::dessser::Void()) };
                    (void)id_1445;
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1446 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1447 { std::get<6 /* Generator */>(id_1446) };
                    uint16_t id_1448 { uint16_t(id_1447.index()) };
                    Pointer id_1449 { ssum_dst_1170.writeU16Le(id_1448) };
                    Pointer let_res_1450;
                    {
                      Pointer ssum_dst_1172 { id_1449 };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1451 { (*p_0).text };
                      ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1452 { std::get<6 /* Generator */>(id_1451) };
                      uint16_t id_1453 { uint16_t(id_1452.index()) };
                      uint16_t id_1454 { 0 };
                      bool id_1455 { bool(id_1453 == id_1454) };
                      Void id_1456 { ((void)(assert(id_1455)), ::dessser::Void()) };
                      (void)id_1456;
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1457 { (*p_0).text };
                      ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1458 { std::get<6 /* Generator */>(id_1457) };
                      ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_1459 { std::get<0 /* Split */>(id_1458) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1460 { std::get<1>(id_1459) };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1461 { (*p_0).text };
                      ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1462 { std::get<6 /* Generator */>(id_1461) };
                      ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_1463 { std::get<0 /* Split */>(id_1462) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1464 { std::get<0>(id_1463) };
                      Pointer id_1465 { fun0(id_1464, ssum_dst_1172) };
                      Pointer id_1466 { fun0(id_1460, id_1465) };
                      let_res_1450 = id_1466;
                    }
                    choose_res_862 = let_res_1450;
                  }
                  choose_res_277 = choose_res_862;
                }
                choose_res_196 = choose_res_277;
              }
              choose_res_135 = choose_res_196;
            }
            choose_res_69 = choose_res_135;
          }
          choose_res_8 = choose_res_69;
        }
        let_res_5 = choose_res_8;
      }
      let_res_3 = let_res_5;
    }
    Pointer let_res_1467;
    {
      Pointer srec_dst_1290 { let_res_3 };
      uint32_t id_1468 { (*p_0).uniq_num };
      Pointer id_1469 { srec_dst_1290.writeU32Le(id_1468) };
      let_res_1467 = id_1469;
    }
    Pointer let_res_1470;
    {
      Pointer srec_dst_1291 { let_res_1467 };
      auto fun1471 { dessser::gen::raql_type::to_row_binary };
      dessser::gen::raql_type::t_ext id_1472 { (*p_0).typ };
      Pointer id_1473 { fun1471(id_1472, srec_dst_1291) };
      let_res_1470 = id_1473;
    }
    Pointer let_res_1474;
    {
      Pointer srec_dst_1292 { let_res_1470 };
      std::optional<dessser::gen::units::t_ext> id_1475 { (*p_0).units };
      bool id_1476 { !(id_1475.has_value ()) };
      Pointer choose_res_1477;
      if (id_1476) {
        uint8_t id_1478 { 1 };
        Pointer id_1479 { srec_dst_1292.writeU8(id_1478) };
        choose_res_1477 = id_1479;
      } else {
        auto fun1480 { dessser::gen::units::to_row_binary };
        std::optional<dessser::gen::units::t_ext> id_1481 { (*p_0).units };
        dessser::gen::units::t_ext id_1482 { id_1481.value() };
        uint8_t id_1483 { 0 };
        Pointer id_1484 { srec_dst_1292.writeU8(id_1483) };
        Pointer id_1485 { fun1480(id_1482, id_1484) };
        choose_res_1477 = id_1485;
      }
      let_res_1474 = choose_res_1477;
    }
    return let_res_1474;
  }
   };
  return fun0;
}
std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> to_row_binary(to_row_binary_init());

/* 
    (fun ("{text: [Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]; uniq_num: U32; typ: $raql_type; units: $units?}")
      (let "sz_1168"
        (let "sz_1167"
          (add
            (let "sz_1049" (size 0)
              (let "label2_1050" (label-of (get-field "text" (param 0)))
                (if (eq (u16 0) (identifier "label2_1050"))
                  (let "sz_ref_1164"
                    (make-vec
                      (add (add (identifier "sz_1049") (size 2))
                        (let "n_ref_1162" (make-vec (cardinality (get-alt "Tuple" (get-field "text" (param 0)))))
                          (let "lebsz_ref_1163" (make-vec (u32 1))
                            (seq
                              (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1162")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1163")) (u8 7)))
                                (set-vec (u8 0) (identifier "lebsz_ref_1163") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1163")) (u32 1)))) 
                              (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1163"))))))))
                    (seq
                      (let "repeat_n_1165" (make-vec (i32 0))
                        (while (gt (to-i32 (cardinality (get-alt "Tuple" (get-field "text" (param 0))))) (unsafe-nth (u8 0) (identifier "repeat_n_1165")))
                          (seq
                            (set-vec (u8 0) (identifier "sz_ref_1164")
                              (add (unsafe-nth (u8 0) (identifier "sz_ref_1164")) (apply (myself "Size") (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1165")) (get-alt "Tuple" (get-field "text" (param 0)))))))
                            (set-vec (u8 0) (identifier "repeat_n_1165") (add (unsafe-nth (u8 0) (identifier "repeat_n_1165")) (i32 1)))))) 
                      (unsafe-nth (u8 0) (identifier "sz_ref_1164"))))
                  (if (eq (u16 1) (identifier "label2_1050"))
                    (let "sz_ref_1158"
                      (make-vec
                        (add (add (identifier "sz_1049") (size 2))
                          (let "n_ref_1156" (make-vec (cardinality (get-alt "Record" (get-field "text" (param 0)))))
                            (let "lebsz_ref_1157" (make-vec (u32 1))
                              (seq
                                (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1156")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1157")) (u8 7)))
                                  (set-vec (u8 0) (identifier "lebsz_ref_1157") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1157")) (u32 1)))) 
                                (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1157"))))))))
                      (seq
                        (let "repeat_n_1159" (make-vec (i32 0))
                          (while (gt (to-i32 (cardinality (get-alt "Record" (get-field "text" (param 0))))) (unsafe-nth (u8 0) (identifier "repeat_n_1159")))
                            (seq
                              (set-vec (u8 0) (identifier "sz_ref_1158")
                                (let "sz_1161"
                                  (let "sz_1160" (unsafe-nth (u8 0) (identifier "sz_ref_1158"))
                                    (add (identifier "sz_1160")
                                      (apply (ext-identifier field_name sersize-of-row-binary) (get-item 0 (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1159")) (get-alt "Record" (get-field "text" (param 0))))))))
                                  (add (identifier "sz_1161") (apply (myself "Size") (get-item 1 (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1159")) (get-alt "Record" (get-field "text" (param 0)))))))))
                              (set-vec (u8 0) (identifier "repeat_n_1159") (add (unsafe-nth (u8 0) (identifier "repeat_n_1159")) (i32 1)))))) 
                        (unsafe-nth (u8 0) (identifier "sz_ref_1158"))))
                    (if (eq (u16 2) (identifier "label2_1050"))
                      (let "sz_ref_1154"
                        (make-vec
                          (add (add (identifier "sz_1049") (size 2))
                            (let "n_ref_1152" (make-vec (cardinality (get-alt "Vector" (get-field "text" (param 0)))))
                              (let "lebsz_ref_1153" (make-vec (u32 1))
                                (seq
                                  (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1152")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1153")) (u8 7)))
                                    (set-vec (u8 0) (identifier "lebsz_ref_1153") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1153")) (u32 1)))) 
                                  (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1153"))))))))
                        (seq
                          (let "repeat_n_1155" (make-vec (i32 0))
                            (while (gt (to-i32 (cardinality (get-alt "Vector" (get-field "text" (param 0))))) (unsafe-nth (u8 0) (identifier "repeat_n_1155")))
                              (seq
                                (set-vec (u8 0) (identifier "sz_ref_1154")
                                  (add (unsafe-nth (u8 0) (identifier "sz_ref_1154")) (apply (myself "Size") (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1155")) (get-alt "Vector" (get-field "text" (param 0)))))))
                                (set-vec (u8 0) (identifier "repeat_n_1155") (add (unsafe-nth (u8 0) (identifier "repeat_n_1155")) (i32 1)))))) 
                          (unsafe-nth (u8 0) (identifier "sz_ref_1154"))))
                      (if (eq (u16 3) (identifier "label2_1050"))
                        (let "sz_1151"
                          (let "sz_ref_1147"
                            (make-vec
                              (add (add (identifier "sz_1049") (size 2))
                                (let "n_ref_1145" (make-vec (cardinality (get-item 0 (get-alt "Case" (get-field "text" (param 0))))))
                                  (let "lebsz_ref_1146" (make-vec (u32 1))
                                    (seq
                                      (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1145")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1146")) (u8 7)))
                                        (set-vec (u8 0) (identifier "lebsz_ref_1146") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1146")) (u32 1)))) 
                                      (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1146"))))))))
                            (seq
                              (let "repeat_n_1148" (make-vec (i32 0))
                                (while (gt (to-i32 (cardinality (get-item 0 (get-alt "Case" (get-field "text" (param 0)))))) (unsafe-nth (u8 0) (identifier "repeat_n_1148")))
                                  (seq
                                    (set-vec (u8 0) (identifier "sz_ref_1147")
                                      (add
                                        (add (unsafe-nth (u8 0) (identifier "sz_ref_1147"))
                                          (apply (myself "Size") (get-field "case_cond" (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1148")) (get-item 0 (get-alt "Case" (get-field "text" (param 0))))))))
                                        (apply (myself "Size") (get-field "case_cons" (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1148")) (get-item 0 (get-alt "Case" (get-field "text" (param 0)))))))))
                                    (set-vec (u8 0) (identifier "repeat_n_1148") (add (unsafe-nth (u8 0) (identifier "repeat_n_1148")) (i32 1)))))) 
                              (unsafe-nth (u8 0) (identifier "sz_ref_1147"))))
                          (if (is-null (get-item 1 (get-alt "Case" (get-field "text" (param 0))))) 
                            (add (identifier "sz_1151") (size 1)) (add (add (identifier "sz_1151") (apply (myself "Size") (force (get-item 1 (get-alt "Case" (get-field "text" (param 0))))))) (size 1))))
                        (if (eq (u16 4) (identifier "label2_1050"))
                          (if (eq (u16 0) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                            (let "label2_1139" (label-of (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))
                              (if (eq (u16 0) (identifier "label2_1139"))
                                (add (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                  (apply (ext-identifier raql_value sersize-of-row-binary) (get-alt "Const" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                (if (eq (u16 1) (identifier "label2_1139"))
                                  (add (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                    (apply (ext-identifier raql_variable sersize-of-row-binary) (get-alt "Variable" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                  (if (eq (u16 2) (identifier "label2_1139"))
                                    (add (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                      (apply (ext-identifier raql_binding_key sersize-of-row-binary) (get-alt "Binding" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                    (if (eq (u16 3) (identifier "label2_1139")) 
                                      (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                      (if (eq (u16 4) (identifier "label2_1139")) 
                                        (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                        (if (eq (u16 5) (identifier "label2_1139")) 
                                          (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                          (if (eq (u16 6) (identifier "label2_1139")) 
                                            (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                            (if (eq (u16 7) (identifier "label2_1139"))
                                              (let "sz_ref_1142"
                                                (make-vec
                                                  (add (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                                    (let "n_ref_1140" 
                                                      (make-vec (cardinality (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                                      (let "lebsz_ref_1141" 
                                                        (make-vec (u32 1))
                                                        (seq
                                                          (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1140")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1141")) (u8 7)))
                                                            (set-vec (u8 0) (identifier "lebsz_ref_1141") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1141")) (u32 1))))
                                                          (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1141"))))))))
                                                (seq
                                                  (let "repeat_n_1143" 
                                                    (make-vec (i32 0))
                                                    (while (gt (to-i32 (cardinality (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))))) (unsafe-nth (u8 0) (identifier "repeat_n_1143")))
                                                      (seq
                                                        (set-vec (u8 0) 
                                                          (identifier "sz_ref_1142")
                                                          (add (unsafe-nth (u8 0) (identifier "sz_ref_1142"))
                                                            (apply (ext-identifier raql_path_comp sersize-of-row-binary)
                                                              (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1143")) (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                                        (set-vec (u8 0) (identifier "repeat_n_1143") (add (unsafe-nth (u8 0) (identifier "repeat_n_1143")) (i32 1)))))) 
                                                  (unsafe-nth (u8 0) (identifier "sz_ref_1142")))) 
                                              (seq (assert (eq (identifier "label2_1139") (u16 8))) (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))))))))))))
                            (if (eq (u16 1) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                              (add
                                (let "sz_1130" (add (add (identifier "sz_1049") (size 2)) (size 2))
                                  (let "label2_1131" (label-of (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))
                                    (if (eq (u16 0) (identifier "label2_1131")) 
                                      (add (identifier "sz_1130") (size 2))
                                      (if (eq (u16 1) (identifier "label2_1131"))
                                        (add (add (identifier "sz_1130") (size 2))
                                          (apply (ext-identifier raql_type sersize-of-row-binary) (get-alt "Cast" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                        (if (eq (u16 2) (identifier "label2_1131")) 
                                          (add (identifier "sz_1130") (size 2))
                                          (if (eq (u16 3) (identifier "label2_1131"))
                                            (let "sz_1136"
                                              (add (add (identifier "sz_1130") (size 2))
                                                (apply (ext-identifier raql_type sersize-of-row-binary) (get-item 0 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                              (if (eq (u16 0) (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))) 
                                                (add (identifier "sz_1136") (size 2))
                                                (seq (assert (eq (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))) (u16 1)))
                                                  (add (identifier "sz_1136") (size 2)))))
                                            (if (eq (u16 4) (identifier "label2_1131")) 
                                              (add (identifier "sz_1130") (size 2))
                                              (if (eq (u16 5) (identifier "label2_1131")) 
                                                (add (identifier "sz_1130") (size 2))
                                                (if (eq (u16 6) (identifier "label2_1131")) 
                                                  (add (identifier "sz_1130") (size 2))
                                                  (if (eq (u16 7) (identifier "label2_1131")) 
                                                    (add (identifier "sz_1130") (size 2))
                                                    (if (eq (u16 8) (identifier "label2_1131")) 
                                                      (add (identifier "sz_1130") (size 2))
                                                      (if (eq (u16 9) (identifier "label2_1131")) 
                                                        (add (identifier "sz_1130") (size 2))
                                                        (if (eq (u16 10) (identifier "label2_1131")) 
                                                          (add (identifier "sz_1130") (size 2))
                                                          (if (eq (u16 11) (identifier "label2_1131")) 
                                                            (add (identifier "sz_1130") (size 2))
                                                            (if (eq (u16 12) (identifier "label2_1131")) 
                                                              (add (identifier "sz_1130") (size 2))
                                                              (if (eq (u16 13) (identifier "label2_1131")) 
                                                                (add (identifier "sz_1130") (size 2))
                                                                (if (eq (u16 14) (identifier "label2_1131")) 
                                                                  (add (identifier "sz_1130") (size 2))
                                                                  (if 
                                                                    (eq (u16 15) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 25) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 26) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 27) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 28) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 29) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 30) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 31) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 32) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 33) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 34) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 35) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 36) (identifier "label2_1131"))
                                                                    (add 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (add
                                                                    (let "n_ref_1133" 
                                                                    (make-vec (string-length (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                                                    (let "lebsz_ref_1134" 
                                                                    (make-vec (u32 1))
                                                                    (seq
                                                                    (while 
                                                                    (ge (unsafe-nth (u8 0) (identifier "n_ref_1133")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1134")) (u8 7)))
                                                                    (set-vec (u8 0) (identifier "lebsz_ref_1134") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1134")) (u32 1))))
                                                                    (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1134"))))))
                                                                    (size-of-u32 (string-length (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))))
                                                                    (if 
                                                                    (eq (u16 37) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 38) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2))
                                                                    (if 
                                                                    (eq (u16 39) (identifier "label2_1131")) 
                                                                    (add (identifier "sz_1130") (size 2)) 
                                                                    (seq (assert (eq (identifier "label2_1131") (u16 40))) (add (identifier "sz_1130") (size 2)))))))))))))))))))))))))))))))))))))))))))))
                                (apply (myself "Size") (get-item 1 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))
                              (if (eq (u16 2) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                                (let "sz_1125"
                                  (let "label2_1124" (label-of (get-item 0 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0))))))
                                    (if (eq (u16 0) (identifier "label2_1124")) 
                                      (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                      (if (eq (u16 1) (identifier "label2_1124")) 
                                        (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                        (if (eq (u16 2) (identifier "label2_1124")) 
                                          (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                          (seq (assert (eq (identifier "label2_1124") (u16 3))) (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2)))))))
                                  (let "sz_ref_1128"
                                    (make-vec
                                      (add (identifier "sz_1125")
                                        (let "n_ref_1126" (make-vec (cardinality (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                          (let "lebsz_ref_1127" (make-vec (u32 1))
                                            (seq
                                              (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1126")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1127")) (u8 7)))
                                                (set-vec (u8 0) (identifier "lebsz_ref_1127") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1127")) (u32 1)))) 
                                              (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1127"))))))))
                                    (seq
                                      (let "repeat_n_1129" (make-vec (i32 0))
                                        (while (gt (to-i32 (cardinality (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0))))))) (unsafe-nth (u8 0) (identifier "repeat_n_1129")))
                                          (seq
                                            (set-vec (u8 0) (identifier "sz_ref_1128")
                                              (add (unsafe-nth (u8 0) (identifier "sz_ref_1128"))
                                                (apply (myself "Size") (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1129")) (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                            (set-vec (u8 0) (identifier "repeat_n_1129") (add (unsafe-nth (u8 0) (identifier "repeat_n_1129")) (i32 1)))))) 
                                      (unsafe-nth (u8 0) (identifier "sz_ref_1128")))))
                                (if (eq (u16 3) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                                  (add
                                    (add
                                      (let "sz_1119" (add (add (identifier "sz_1049") (size 2)) (size 2))
                                        (let "label2_1120" (label-of (get-item 0 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0))))))
                                          (if (eq (u16 0) (identifier "label2_1120")) 
                                            (add (identifier "sz_1119") (size 2))
                                            (if (eq (u16 1) (identifier "label2_1120")) 
                                              (add (identifier "sz_1119") (size 2))
                                              (if (eq (u16 2) (identifier "label2_1120")) 
                                                (add (identifier "sz_1119") (size 2))
                                                (if (eq (u16 3) (identifier "label2_1120")) 
                                                  (add (identifier "sz_1119") (size 2))
                                                  (if (eq (u16 4) (identifier "label2_1120")) 
                                                    (add (identifier "sz_1119") (size 2))
                                                    (if (eq (u16 5) (identifier "label2_1120")) 
                                                      (add (identifier "sz_1119") (size 2))
                                                      (if (eq (u16 6) (identifier "label2_1120")) 
                                                        (add (identifier "sz_1119") (size 2))
                                                        (if (eq (u16 7) (identifier "label2_1120")) 
                                                          (add (identifier "sz_1119") (size 2))
                                                          (if (eq (u16 8) (identifier "label2_1120")) 
                                                            (add (identifier "sz_1119") (size 2))
                                                            (if (eq (u16 9) (identifier "label2_1120")) 
                                                              (add (identifier "sz_1119") (size 2))
                                                              (if (eq (u16 10) (identifier "label2_1120")) 
                                                                (add (identifier "sz_1119") (size 2))
                                                                (if (eq (u16 11) (identifier "label2_1120")) 
                                                                  (add (identifier "sz_1119") (size 2))
                                                                  (if 
                                                                    (eq (u16 12) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 13) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 14) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 15) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "label2_1120")) 
                                                                    (add (identifier "sz_1119") (size 2)) 
                                                                    (seq (assert (eq (identifier "label2_1120") (u16 25))) (add (identifier "sz_1119") (size 2))))))))))))))))))))))))))))))
                                      (apply (myself "Size") (get-item 1 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                    (apply (myself "Size") (get-item 2 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                  (seq (assert (eq (label-of (get-alt "Stateless" (get-field "text" (param 0)))) (u16 4)))
                                    (add
                                      (add
                                        (add
                                          (if (eq (u16 0) (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0))))))) 
                                            (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2))
                                            (seq (assert (eq (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))) (u16 1)))
                                              (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (size 2)))) 
                                          (apply (myself "Size") (get-item 1 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                        (apply (myself "Size") (get-item 2 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                      (apply (myself "Size") (get-item 3 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0))))))))))))
                          (if (eq (u16 5) (identifier "label2_1050"))
                            (let "sz_1057"
                              (add
                                (if (is-null (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))) 
                                  (add (add (identifier "sz_1049") (size 2)) (size 1))
                                  (add
                                    (if (eq (u16 0) (label-of (force (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                      (add (add (identifier "sz_1049") (size 2)) (size 2))
                                      (seq (assert (eq (label-of (force (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0)))))) (u16 1))) (add (add (identifier "sz_1049") (size 2)) (size 2)))) 
                                    (size 1))) (size 1))
                              (let "label2_1058" (label-of (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))
                                (if (eq (u16 0) (identifier "label2_1058"))
                                  (add
                                    (let "sz_1107" (add (identifier "sz_1057") (size 2))
                                      (let "label2_1108" (label-of (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                        (if (eq (u16 0) (identifier "label2_1108")) 
                                          (add (identifier "sz_1107") (size 2))
                                          (if (eq (u16 1) (identifier "label2_1108")) 
                                            (add (identifier "sz_1107") (size 2))
                                            (if (eq (u16 2) (identifier "label2_1108")) 
                                              (add (identifier "sz_1107") (size 2))
                                              (if (eq (u16 3) (identifier "label2_1108")) 
                                                (add (identifier "sz_1107") (size 2))
                                                (if (eq (u16 4) (identifier "label2_1108")) 
                                                  (add (identifier "sz_1107") (size 2))
                                                  (if (eq (u16 5) (identifier "label2_1108")) 
                                                    (add (identifier "sz_1107") (size 2))
                                                    (if (eq (u16 6) (identifier "label2_1108")) 
                                                      (add (identifier "sz_1107") (size 2))
                                                      (if (eq (u16 7) (identifier "label2_1108")) 
                                                        (add (identifier "sz_1107") (size 2))
                                                        (if (eq (u16 8) (identifier "label2_1108")) 
                                                          (add (identifier "sz_1107") (size 2))
                                                          (if (eq (u16 9) (identifier "label2_1108")) 
                                                            (add (identifier "sz_1107") (size 2))
                                                            (if (eq (u16 10) (identifier "label2_1108")) 
                                                              (add (identifier "sz_1107") (size 2))
                                                              (if (eq (u16 11) (identifier "label2_1108")) 
                                                                (add (add (add (add (identifier "sz_1107") (size 2)) (size 8)) (size 8)) (size 4))
                                                                (if (eq (u16 12) (identifier "label2_1108")) 
                                                                  (add (identifier "sz_1107") (size 2))
                                                                  (if 
                                                                    (eq (u16 13) (identifier "label2_1108")) 
                                                                    (add (identifier "sz_1107") (size 2)) 
                                                                    (seq (assert (eq (identifier "label2_1108") (u16 14))) (add (identifier "sz_1107") (size 2)))))))))))))))))))
                                    (apply (myself "Size") (get-item 1 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                  (if (eq (u16 1) (identifier "label2_1058"))
                                    (add
                                      (add
                                        (let "label2_1104" (label-of (get-item 0 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                          (if (eq (u16 0) (identifier "label2_1104")) 
                                            (add (add (identifier "sz_1057") (size 2)) (size 2))
                                            (if (eq (u16 1) (identifier "label2_1104")) 
                                              (add (add (identifier "sz_1057") (size 2)) (size 2))
                                              (if (eq (u16 2) (identifier "label2_1104")) 
                                                (add (add (identifier "sz_1057") (size 2)) (size 2)) 
                                                (seq (assert (eq (identifier "label2_1104") (u16 3))) (add (add (identifier "sz_1057") (size 2)) (size 2)))))))
                                        (apply (myself "Size") (get-item 1 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                      (apply (myself "Size") (get-item 2 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                    (if (eq (u16 2) (identifier "label2_1058"))
                                      (add
                                        (add
                                          (add
                                            (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                              (add (add (identifier "sz_1057") (size 2)) (size 2))
                                              (if (eq (u16 1) (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                (add (add (identifier "sz_1057") (size 2)) (size 2))
                                                (seq (assert (eq (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 2)))
                                                  (add (add (add (identifier "sz_1057") (size 2)) (size 2)) (size 1)))))
                                            (apply (myself "Size") (get-item 1 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                          (apply (myself "Size") (get-item 2 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                        (apply (myself "Size") (get-item 3 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                      (if (eq (u16 3) (identifier "label2_1058"))
                                        (add
                                          (add
                                            (add
                                              (add
                                                (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                  (add (add (identifier "sz_1057") (size 2)) (size 2))
                                                  (seq (assert (eq (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                    (add (add (add (identifier "sz_1057") (size 2)) (size 2)) (size 1))))
                                                (apply (myself "Size") (get-item 1 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (apply (myself "Size") (get-item 2 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                            (apply (myself "Size") (get-item 3 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                          (apply (myself "Size") (get-item 4 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                        (if (eq (u16 4) (identifier "label2_1058"))
                                          (let "sz_1087"
                                            (add
                                              (add
                                                (add
                                                  (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (add (add (identifier "sz_1057") (size 2)) (size 2))
                                                    (seq (assert (eq (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                      (add (add (add (add (identifier "sz_1057") (size 2)) (size 2)) (size 1)) (size 1))))
                                                  (apply (myself "Size") (get-item 1 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                (apply (myself "Size") (get-item 2 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (apply (myself "Size") (get-item 3 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                            (let "sz_ref_1090"
                                              (make-vec
                                                (add (identifier "sz_1087")
                                                  (let "n_ref_1088" (make-vec (cardinality (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (let "lebsz_ref_1089" 
                                                      (make-vec (u32 1))
                                                      (seq
                                                        (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1088")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1089")) (u8 7)))
                                                          (set-vec (u8 0) (identifier "lebsz_ref_1089") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1089")) (u32 1))))
                                                        (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1089"))))))))
                                              (seq
                                                (let "repeat_n_1091" 
                                                  (make-vec (i32 0))
                                                  (while
                                                    (gt (to-i32 (cardinality (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (unsafe-nth (u8 0) (identifier "repeat_n_1091")))
                                                    (seq
                                                      (set-vec (u8 0) 
                                                        (identifier "sz_ref_1090")
                                                        (add (unsafe-nth (u8 0) (identifier "sz_ref_1090"))
                                                          (apply (myself "Size")
                                                            (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1091")) (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                      (set-vec (u8 0) (identifier "repeat_n_1091") (add (unsafe-nth (u8 0) (identifier "repeat_n_1091")) (i32 1)))))) 
                                                (unsafe-nth (u8 0) (identifier "sz_ref_1090")))))
                                          (if (eq (u16 5) (identifier "label2_1058"))
                                            (add
                                              (add
                                                (add
                                                  (add
                                                    (add
                                                      (add
                                                        (seq (assert (eq (label-of (get-item 0 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 0)))
                                                          (add (add (identifier "sz_1057") (size 2)) (size 2)))
                                                        (apply (myself "Size") (get-item 1 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (apply (myself "Size") (get-item 2 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (apply (myself "Size") (get-item 3 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                  (apply (myself "Size") (get-item 4 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                (apply (myself "Size") (get-item 5 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (apply (myself "Size") (get-item 6 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                            (if (eq (u16 6) (identifier "label2_1058"))
                                              (add
                                                (add
                                                  (add
                                                    (add
                                                      (add
                                                        (let "sz_1066"
                                                          (add
                                                            (add (add (identifier "sz_1057") (size 2))
                                                              (apply 
                                                                (ext-identifier raql_top_output sersize-of-row-binary)
                                                                (get-field "output" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                            (apply (myself "Size") (get-field "size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                          (if (is-null (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                            (add (identifier "sz_1066") (size 1))
                                                            (add
                                                              (add (identifier "sz_1066")
                                                                (apply (myself "Size") (force (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))) 
                                                              (size 1)))) 
                                                        (apply (myself "Size") (get-field "what" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (apply (myself "Size") (get-field "by" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (apply (myself "Size") (get-field "time" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                  (apply (myself "Size") (get-field "duration" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                (apply (myself "Size") (get-field "sigmas" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (seq (assert (eq (identifier "label2_1058") (u16 7)))
                                                (let "sz_1063"
                                                  (add
                                                    (add
                                                      (add
                                                        (add (add (identifier "sz_1057") (size 2))
                                                          (apply (myself "Size") (get-field "what" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                        (apply (myself "Size") (get-field "time" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (apply (myself "Size") (get-field "max_age" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                    (size 1))
                                                  (if (is-null (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                    (add (identifier "sz_1063") (size 1))
                                                    (add
                                                      (add (identifier "sz_1063")
                                                        (apply (myself "Size") (force (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))) 
                                                      (size 1))))))))))))))
                            (seq (assert (eq (identifier "label2_1050") (u16 6)))
                              (seq (assert (eq (label-of (get-alt "Generator" (get-field "text" (param 0)))) (u16 0)))
                                (add (add (add (add (identifier "sz_1049") (size 2)) (size 2)) (apply (myself "Size") (get-item 0 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0)))))))
                                  (apply (myself "Size") (get-item 1 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0))))))))))))))))) 
            (size 4)) (add (identifier "sz_1167") (apply (ext-identifier raql_type sersize-of-row-binary) (get-field "typ" (param 0)))))
        (if (is-null (get-field "units" (param 0))) (add (identifier "sz_1168") (size 1)) (add (add (identifier "sz_1168") (apply (ext-identifier units sersize-of-row-binary) (force (get-field "units" (param 0))))) (size 1)))))
 */
static std::function<Size(std::shared_ptr<::dessser::gen::raql_expr::t>  &)> sersize_of_row_binary_init()
{
  std::function<Size(std::shared_ptr<::dessser::gen::raql_expr::t>  &)> fun1486 { [&](std::shared_ptr<::dessser::gen::raql_expr::t>  p_0) {
    Size id_1487 { 0UL };
    Size let_res_1488;
    {
      Size sz_1049 { id_1487 };
      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1489 { (*p_0).text };
      uint16_t id_1490 { uint16_t(id_1489.index()) };
      Size let_res_1491;
      {
        uint16_t label2_1050 { id_1490 };
        uint16_t id_1492 { 0 };
        bool id_1493 { bool(id_1492 == label2_1050) };
        Size choose_res_1494;
        if (id_1493) {
          Size id_1495 { 2UL };
          Size id_1496 { Size(sz_1049 + id_1495) };
          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1497 { (*p_0).text };
          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1498 { std::get<0 /* Tuple */>(id_1497) };
          uint32_t id_1499 { id_1498.size() };
          Vec<1, uint32_t> id_1500 {  id_1499  };
          Size let_res_1501;
          {
            Vec<1, uint32_t> n_ref_1162 { id_1500 };
            uint32_t id_1502 { 1U };
            Vec<1, uint32_t> id_1503 {  id_1502  };
            Size let_res_1504;
            {
              Vec<1, uint32_t> lebsz_ref_1163 { id_1503 };
              bool while_flag_1505 { true };
              do {
                uint8_t id_1506 { 0 };
                uint32_t id_1507 { n_ref_1162[id_1506] };
                uint8_t id_1508 { 0 };
                uint32_t id_1509 { lebsz_ref_1163[id_1508] };
                uint8_t id_1510 { 7 };
                uint32_t id_1511 { uint32_t(id_1509 << id_1510) };
                bool id_1512 { bool(id_1507 >= id_1511) };
                while_flag_1505 = id_1512;
                if (while_flag_1505) {
                  uint8_t id_1513 { 0 };
                  uint8_t id_1514 { 0 };
                  uint32_t id_1515 { lebsz_ref_1163[id_1514] };
                  uint32_t id_1516 { 1U };
                  uint32_t id_1517 { uint32_t(id_1515 + id_1516) };
                  Void id_1518 { ((void)(lebsz_ref_1163[id_1513] = id_1517), ::dessser::Void()) };
                  (void)id_1518;
                }
              } while (while_flag_1505);
              (void)::dessser::Void();
              uint8_t id_1519 { 0 };
              uint32_t id_1520 { lebsz_ref_1163[id_1519] };
              Size id_1521 { Size(id_1520) };
              let_res_1504 = id_1521;
            }
            let_res_1501 = let_res_1504;
          }
          Size id_1522 { Size(id_1496 + let_res_1501) };
          Vec<1, Size> id_1523 {  id_1522  };
          Size let_res_1524;
          {
            Vec<1, Size> sz_ref_1164 { id_1523 };
            int32_t id_1525 { 0L };
            Vec<1, int32_t> id_1526 {  id_1525  };
            {
              Vec<1, int32_t> repeat_n_1165 { id_1526 };
              bool while_flag_1527 { true };
              do {
                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1528 { (*p_0).text };
                Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1529 { std::get<0 /* Tuple */>(id_1528) };
                uint32_t id_1530 { id_1529.size() };
                int32_t id_1531 { int32_t(id_1530) };
                uint8_t id_1532 { 0 };
                int32_t id_1533 { repeat_n_1165[id_1532] };
                bool id_1534 { bool(id_1531 > id_1533) };
                while_flag_1527 = id_1534;
                if (while_flag_1527) {
                  uint8_t id_1535 { 0 };
                  uint8_t id_1536 { 0 };
                  Size id_1537 { sz_ref_1164[id_1536] };
                  uint8_t id_1538 { 0 };
                  int32_t id_1539 { repeat_n_1165[id_1538] };
                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1540 { (*p_0).text };
                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1541 { std::get<0 /* Tuple */>(id_1540) };
                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1542 { id_1541[id_1539] };
                  Size id_1543 { fun1486(id_1542) };
                  Size id_1544 { Size(id_1537 + id_1543) };
                  Void id_1545 { ((void)(sz_ref_1164[id_1535] = id_1544), ::dessser::Void()) };
                  (void)id_1545;
                  uint8_t id_1546 { 0 };
                  uint8_t id_1547 { 0 };
                  int32_t id_1548 { repeat_n_1165[id_1547] };
                  int32_t id_1549 { 1L };
                  int32_t id_1550 { int32_t(id_1548 + id_1549) };
                  Void id_1551 { ((void)(repeat_n_1165[id_1546] = id_1550), ::dessser::Void()) };
                  (void)id_1551;
                  (void)id_1551;
                }
              } while (while_flag_1527);
              (void)::dessser::Void();
            }
            (void)::dessser::Void();
            uint8_t id_1552 { 0 };
            Size id_1553 { sz_ref_1164[id_1552] };
            let_res_1524 = id_1553;
          }
          choose_res_1494 = let_res_1524;
        } else {
          uint16_t id_1554 { 1 };
          bool id_1555 { bool(id_1554 == label2_1050) };
          Size choose_res_1556;
          if (id_1555) {
            Size id_1557 { 2UL };
            Size id_1558 { Size(sz_1049 + id_1557) };
            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1559 { (*p_0).text };
            Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1560 { std::get<1 /* Record */>(id_1559) };
            uint32_t id_1561 { id_1560.size() };
            Vec<1, uint32_t> id_1562 {  id_1561  };
            Size let_res_1563;
            {
              Vec<1, uint32_t> n_ref_1156 { id_1562 };
              uint32_t id_1564 { 1U };
              Vec<1, uint32_t> id_1565 {  id_1564  };
              Size let_res_1566;
              {
                Vec<1, uint32_t> lebsz_ref_1157 { id_1565 };
                bool while_flag_1567 { true };
                do {
                  uint8_t id_1568 { 0 };
                  uint32_t id_1569 { n_ref_1156[id_1568] };
                  uint8_t id_1570 { 0 };
                  uint32_t id_1571 { lebsz_ref_1157[id_1570] };
                  uint8_t id_1572 { 7 };
                  uint32_t id_1573 { uint32_t(id_1571 << id_1572) };
                  bool id_1574 { bool(id_1569 >= id_1573) };
                  while_flag_1567 = id_1574;
                  if (while_flag_1567) {
                    uint8_t id_1575 { 0 };
                    uint8_t id_1576 { 0 };
                    uint32_t id_1577 { lebsz_ref_1157[id_1576] };
                    uint32_t id_1578 { 1U };
                    uint32_t id_1579 { uint32_t(id_1577 + id_1578) };
                    Void id_1580 { ((void)(lebsz_ref_1157[id_1575] = id_1579), ::dessser::Void()) };
                    (void)id_1580;
                  }
                } while (while_flag_1567);
                (void)::dessser::Void();
                uint8_t id_1581 { 0 };
                uint32_t id_1582 { lebsz_ref_1157[id_1581] };
                Size id_1583 { Size(id_1582) };
                let_res_1566 = id_1583;
              }
              let_res_1563 = let_res_1566;
            }
            Size id_1584 { Size(id_1558 + let_res_1563) };
            Vec<1, Size> id_1585 {  id_1584  };
            Size let_res_1586;
            {
              Vec<1, Size> sz_ref_1158 { id_1585 };
              int32_t id_1587 { 0L };
              Vec<1, int32_t> id_1588 {  id_1587  };
              {
                Vec<1, int32_t> repeat_n_1159 { id_1588 };
                bool while_flag_1589 { true };
                do {
                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1590 { (*p_0).text };
                  Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1591 { std::get<1 /* Record */>(id_1590) };
                  uint32_t id_1592 { id_1591.size() };
                  int32_t id_1593 { int32_t(id_1592) };
                  uint8_t id_1594 { 0 };
                  int32_t id_1595 { repeat_n_1159[id_1594] };
                  bool id_1596 { bool(id_1593 > id_1595) };
                  while_flag_1589 = id_1596;
                  if (while_flag_1589) {
                    uint8_t id_1597 { 0 };
                    uint8_t id_1598 { 0 };
                    Size id_1599 { sz_ref_1158[id_1598] };
                    Size let_res_1600;
                    {
                      Size sz_1160 { id_1599 };
                      auto fun1601 { dessser::gen::field_name::sersize_of_row_binary };
                      uint8_t id_1602 { 0 };
                      int32_t id_1603 { repeat_n_1159[id_1602] };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1604 { (*p_0).text };
                      Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1605 { std::get<1 /* Record */>(id_1604) };
                      ::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 id_1606 { id_1605[id_1603] };
                      dessser::gen::field_name::t_ext id_1607 { std::get<0>(id_1606) };
                      Size id_1608 { fun1601(id_1607) };
                      Size id_1609 { Size(sz_1160 + id_1608) };
                      let_res_1600 = id_1609;
                    }
                    Size let_res_1610;
                    {
                      Size sz_1161 { let_res_1600 };
                      uint8_t id_1611 { 0 };
                      int32_t id_1612 { repeat_n_1159[id_1611] };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1613 { (*p_0).text };
                      Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1614 { std::get<1 /* Record */>(id_1613) };
                      ::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 id_1615 { id_1614[id_1612] };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1616 { std::get<1>(id_1615) };
                      Size id_1617 { fun1486(id_1616) };
                      Size id_1618 { Size(sz_1161 + id_1617) };
                      let_res_1610 = id_1618;
                    }
                    Void id_1619 { ((void)(sz_ref_1158[id_1597] = let_res_1610), ::dessser::Void()) };
                    (void)id_1619;
                    uint8_t id_1620 { 0 };
                    uint8_t id_1621 { 0 };
                    int32_t id_1622 { repeat_n_1159[id_1621] };
                    int32_t id_1623 { 1L };
                    int32_t id_1624 { int32_t(id_1622 + id_1623) };
                    Void id_1625 { ((void)(repeat_n_1159[id_1620] = id_1624), ::dessser::Void()) };
                    (void)id_1625;
                    (void)id_1625;
                  }
                } while (while_flag_1589);
                (void)::dessser::Void();
              }
              (void)::dessser::Void();
              uint8_t id_1626 { 0 };
              Size id_1627 { sz_ref_1158[id_1626] };
              let_res_1586 = id_1627;
            }
            choose_res_1556 = let_res_1586;
          } else {
            uint16_t id_1628 { 2 };
            bool id_1629 { bool(id_1628 == label2_1050) };
            Size choose_res_1630;
            if (id_1629) {
              Size id_1631 { 2UL };
              Size id_1632 { Size(sz_1049 + id_1631) };
              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1633 { (*p_0).text };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1634 { std::get<2 /* Vector */>(id_1633) };
              uint32_t id_1635 { id_1634.size() };
              Vec<1, uint32_t> id_1636 {  id_1635  };
              Size let_res_1637;
              {
                Vec<1, uint32_t> n_ref_1152 { id_1636 };
                uint32_t id_1638 { 1U };
                Vec<1, uint32_t> id_1639 {  id_1638  };
                Size let_res_1640;
                {
                  Vec<1, uint32_t> lebsz_ref_1153 { id_1639 };
                  bool while_flag_1641 { true };
                  do {
                    uint8_t id_1642 { 0 };
                    uint32_t id_1643 { n_ref_1152[id_1642] };
                    uint8_t id_1644 { 0 };
                    uint32_t id_1645 { lebsz_ref_1153[id_1644] };
                    uint8_t id_1646 { 7 };
                    uint32_t id_1647 { uint32_t(id_1645 << id_1646) };
                    bool id_1648 { bool(id_1643 >= id_1647) };
                    while_flag_1641 = id_1648;
                    if (while_flag_1641) {
                      uint8_t id_1649 { 0 };
                      uint8_t id_1650 { 0 };
                      uint32_t id_1651 { lebsz_ref_1153[id_1650] };
                      uint32_t id_1652 { 1U };
                      uint32_t id_1653 { uint32_t(id_1651 + id_1652) };
                      Void id_1654 { ((void)(lebsz_ref_1153[id_1649] = id_1653), ::dessser::Void()) };
                      (void)id_1654;
                    }
                  } while (while_flag_1641);
                  (void)::dessser::Void();
                  uint8_t id_1655 { 0 };
                  uint32_t id_1656 { lebsz_ref_1153[id_1655] };
                  Size id_1657 { Size(id_1656) };
                  let_res_1640 = id_1657;
                }
                let_res_1637 = let_res_1640;
              }
              Size id_1658 { Size(id_1632 + let_res_1637) };
              Vec<1, Size> id_1659 {  id_1658  };
              Size let_res_1660;
              {
                Vec<1, Size> sz_ref_1154 { id_1659 };
                int32_t id_1661 { 0L };
                Vec<1, int32_t> id_1662 {  id_1661  };
                {
                  Vec<1, int32_t> repeat_n_1155 { id_1662 };
                  bool while_flag_1663 { true };
                  do {
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1664 { (*p_0).text };
                    Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1665 { std::get<2 /* Vector */>(id_1664) };
                    uint32_t id_1666 { id_1665.size() };
                    int32_t id_1667 { int32_t(id_1666) };
                    uint8_t id_1668 { 0 };
                    int32_t id_1669 { repeat_n_1155[id_1668] };
                    bool id_1670 { bool(id_1667 > id_1669) };
                    while_flag_1663 = id_1670;
                    if (while_flag_1663) {
                      uint8_t id_1671 { 0 };
                      uint8_t id_1672 { 0 };
                      Size id_1673 { sz_ref_1154[id_1672] };
                      uint8_t id_1674 { 0 };
                      int32_t id_1675 { repeat_n_1155[id_1674] };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1676 { (*p_0).text };
                      Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1677 { std::get<2 /* Vector */>(id_1676) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1678 { id_1677[id_1675] };
                      Size id_1679 { fun1486(id_1678) };
                      Size id_1680 { Size(id_1673 + id_1679) };
                      Void id_1681 { ((void)(sz_ref_1154[id_1671] = id_1680), ::dessser::Void()) };
                      (void)id_1681;
                      uint8_t id_1682 { 0 };
                      uint8_t id_1683 { 0 };
                      int32_t id_1684 { repeat_n_1155[id_1683] };
                      int32_t id_1685 { 1L };
                      int32_t id_1686 { int32_t(id_1684 + id_1685) };
                      Void id_1687 { ((void)(repeat_n_1155[id_1682] = id_1686), ::dessser::Void()) };
                      (void)id_1687;
                      (void)id_1687;
                    }
                  } while (while_flag_1663);
                  (void)::dessser::Void();
                }
                (void)::dessser::Void();
                uint8_t id_1688 { 0 };
                Size id_1689 { sz_ref_1154[id_1688] };
                let_res_1660 = id_1689;
              }
              choose_res_1630 = let_res_1660;
            } else {
              uint16_t id_1690 { 3 };
              bool id_1691 { bool(id_1690 == label2_1050) };
              Size choose_res_1692;
              if (id_1691) {
                Size id_1693 { 2UL };
                Size id_1694 { Size(sz_1049 + id_1693) };
                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1695 { (*p_0).text };
                ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1696 { std::get<3 /* Case */>(id_1695) };
                Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1697 { std::get<0>(id_1696) };
                uint32_t id_1698 { id_1697.size() };
                Vec<1, uint32_t> id_1699 {  id_1698  };
                Size let_res_1700;
                {
                  Vec<1, uint32_t> n_ref_1145 { id_1699 };
                  uint32_t id_1701 { 1U };
                  Vec<1, uint32_t> id_1702 {  id_1701  };
                  Size let_res_1703;
                  {
                    Vec<1, uint32_t> lebsz_ref_1146 { id_1702 };
                    bool while_flag_1704 { true };
                    do {
                      uint8_t id_1705 { 0 };
                      uint32_t id_1706 { n_ref_1145[id_1705] };
                      uint8_t id_1707 { 0 };
                      uint32_t id_1708 { lebsz_ref_1146[id_1707] };
                      uint8_t id_1709 { 7 };
                      uint32_t id_1710 { uint32_t(id_1708 << id_1709) };
                      bool id_1711 { bool(id_1706 >= id_1710) };
                      while_flag_1704 = id_1711;
                      if (while_flag_1704) {
                        uint8_t id_1712 { 0 };
                        uint8_t id_1713 { 0 };
                        uint32_t id_1714 { lebsz_ref_1146[id_1713] };
                        uint32_t id_1715 { 1U };
                        uint32_t id_1716 { uint32_t(id_1714 + id_1715) };
                        Void id_1717 { ((void)(lebsz_ref_1146[id_1712] = id_1716), ::dessser::Void()) };
                        (void)id_1717;
                      }
                    } while (while_flag_1704);
                    (void)::dessser::Void();
                    uint8_t id_1718 { 0 };
                    uint32_t id_1719 { lebsz_ref_1146[id_1718] };
                    Size id_1720 { Size(id_1719) };
                    let_res_1703 = id_1720;
                  }
                  let_res_1700 = let_res_1703;
                }
                Size id_1721 { Size(id_1694 + let_res_1700) };
                Vec<1, Size> id_1722 {  id_1721  };
                Size let_res_1723;
                {
                  Vec<1, Size> sz_ref_1147 { id_1722 };
                  int32_t id_1724 { 0L };
                  Vec<1, int32_t> id_1725 {  id_1724  };
                  {
                    Vec<1, int32_t> repeat_n_1148 { id_1725 };
                    bool while_flag_1726 { true };
                    do {
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1727 { (*p_0).text };
                      ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1728 { std::get<3 /* Case */>(id_1727) };
                      Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1729 { std::get<0>(id_1728) };
                      uint32_t id_1730 { id_1729.size() };
                      int32_t id_1731 { int32_t(id_1730) };
                      uint8_t id_1732 { 0 };
                      int32_t id_1733 { repeat_n_1148[id_1732] };
                      bool id_1734 { bool(id_1731 > id_1733) };
                      while_flag_1726 = id_1734;
                      if (while_flag_1726) {
                        uint8_t id_1735 { 0 };
                        uint8_t id_1736 { 0 };
                        Size id_1737 { sz_ref_1147[id_1736] };
                        uint8_t id_1738 { 0 };
                        int32_t id_1739 { repeat_n_1148[id_1738] };
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1740 { (*p_0).text };
                        ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1741 { std::get<3 /* Case */>(id_1740) };
                        Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1742 { std::get<0>(id_1741) };
                        ::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa id_1743 { id_1742[id_1739] };
                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1744 { id_1743.case_cond };
                        Size id_1745 { fun1486(id_1744) };
                        Size id_1746 { Size(id_1737 + id_1745) };
                        uint8_t id_1747 { 0 };
                        int32_t id_1748 { repeat_n_1148[id_1747] };
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1749 { (*p_0).text };
                        ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1750 { std::get<3 /* Case */>(id_1749) };
                        Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1751 { std::get<0>(id_1750) };
                        ::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa id_1752 { id_1751[id_1748] };
                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1753 { id_1752.case_cons };
                        Size id_1754 { fun1486(id_1753) };
                        Size id_1755 { Size(id_1746 + id_1754) };
                        Void id_1756 { ((void)(sz_ref_1147[id_1735] = id_1755), ::dessser::Void()) };
                        (void)id_1756;
                        uint8_t id_1757 { 0 };
                        uint8_t id_1758 { 0 };
                        int32_t id_1759 { repeat_n_1148[id_1758] };
                        int32_t id_1760 { 1L };
                        int32_t id_1761 { int32_t(id_1759 + id_1760) };
                        Void id_1762 { ((void)(repeat_n_1148[id_1757] = id_1761), ::dessser::Void()) };
                        (void)id_1762;
                        (void)id_1762;
                      }
                    } while (while_flag_1726);
                    (void)::dessser::Void();
                  }
                  (void)::dessser::Void();
                  uint8_t id_1763 { 0 };
                  Size id_1764 { sz_ref_1147[id_1763] };
                  let_res_1723 = id_1764;
                }
                Size let_res_1765;
                {
                  Size sz_1151 { let_res_1723 };
                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1766 { (*p_0).text };
                  ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1767 { std::get<3 /* Case */>(id_1766) };
                  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1768 { std::get<1>(id_1767) };
                  bool id_1769 { !(id_1768.has_value ()) };
                  Size choose_res_1770;
                  if (id_1769) {
                    Size id_1771 { 1UL };
                    Size id_1772 { Size(sz_1151 + id_1771) };
                    choose_res_1770 = id_1772;
                  } else {
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1773 { (*p_0).text };
                    ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1774 { std::get<3 /* Case */>(id_1773) };
                    std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1775 { std::get<1>(id_1774) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1776 { id_1775.value() };
                    Size id_1777 { fun1486(id_1776) };
                    Size id_1778 { Size(sz_1151 + id_1777) };
                    Size id_1779 { 1UL };
                    Size id_1780 { Size(id_1778 + id_1779) };
                    choose_res_1770 = id_1780;
                  }
                  let_res_1765 = choose_res_1770;
                }
                choose_res_1692 = let_res_1765;
              } else {
                uint16_t id_1781 { 4 };
                bool id_1782 { bool(id_1781 == label2_1050) };
                Size choose_res_1783;
                if (id_1782) {
                  uint16_t id_1784 { 0 };
                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1785 { (*p_0).text };
                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1786 { std::get<4 /* Stateless */>(id_1785) };
                  uint16_t id_1787 { uint16_t(id_1786.index()) };
                  bool id_1788 { bool(id_1784 == id_1787) };
                  Size choose_res_1789;
                  if (id_1788) {
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1790 { (*p_0).text };
                    ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1791 { std::get<4 /* Stateless */>(id_1790) };
                    ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1792 { std::get<0 /* SL0 */>(id_1791) };
                    uint16_t id_1793 { uint16_t(id_1792.index()) };
                    Size let_res_1794;
                    {
                      uint16_t label2_1139 { id_1793 };
                      uint16_t id_1795 { 0 };
                      bool id_1796 { bool(id_1795 == label2_1139) };
                      Size choose_res_1797;
                      if (id_1796) {
                        Size id_1798 { 2UL };
                        Size id_1799 { Size(sz_1049 + id_1798) };
                        Size id_1800 { 2UL };
                        Size id_1801 { Size(id_1799 + id_1800) };
                        Size id_1802 { 2UL };
                        Size id_1803 { Size(id_1801 + id_1802) };
                        auto fun1804 { dessser::gen::raql_value::sersize_of_row_binary };
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1805 { (*p_0).text };
                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1806 { std::get<4 /* Stateless */>(id_1805) };
                        ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1807 { std::get<0 /* SL0 */>(id_1806) };
                        dessser::gen::raql_value::t_ext id_1808 { std::get<0 /* Const */>(id_1807) };
                        Size id_1809 { fun1804(id_1808) };
                        Size id_1810 { Size(id_1803 + id_1809) };
                        choose_res_1797 = id_1810;
                      } else {
                        uint16_t id_1811 { 1 };
                        bool id_1812 { bool(id_1811 == label2_1139) };
                        Size choose_res_1813;
                        if (id_1812) {
                          Size id_1814 { 2UL };
                          Size id_1815 { Size(sz_1049 + id_1814) };
                          Size id_1816 { 2UL };
                          Size id_1817 { Size(id_1815 + id_1816) };
                          Size id_1818 { 2UL };
                          Size id_1819 { Size(id_1817 + id_1818) };
                          auto fun1820 { dessser::gen::raql_variable::sersize_of_row_binary };
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1821 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1822 { std::get<4 /* Stateless */>(id_1821) };
                          ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1823 { std::get<0 /* SL0 */>(id_1822) };
                          dessser::gen::raql_variable::t_ext id_1824 { std::get<1 /* Variable */>(id_1823) };
                          Size id_1825 { fun1820(id_1824) };
                          Size id_1826 { Size(id_1819 + id_1825) };
                          choose_res_1813 = id_1826;
                        } else {
                          uint16_t id_1827 { 2 };
                          bool id_1828 { bool(id_1827 == label2_1139) };
                          Size choose_res_1829;
                          if (id_1828) {
                            Size id_1830 { 2UL };
                            Size id_1831 { Size(sz_1049 + id_1830) };
                            Size id_1832 { 2UL };
                            Size id_1833 { Size(id_1831 + id_1832) };
                            Size id_1834 { 2UL };
                            Size id_1835 { Size(id_1833 + id_1834) };
                            auto fun1836 { dessser::gen::raql_binding_key::sersize_of_row_binary };
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1837 { (*p_0).text };
                            ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1838 { std::get<4 /* Stateless */>(id_1837) };
                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1839 { std::get<0 /* SL0 */>(id_1838) };
                            dessser::gen::raql_binding_key::t_ext id_1840 { std::get<2 /* Binding */>(id_1839) };
                            Size id_1841 { fun1836(id_1840) };
                            Size id_1842 { Size(id_1835 + id_1841) };
                            choose_res_1829 = id_1842;
                          } else {
                            uint16_t id_1843 { 3 };
                            bool id_1844 { bool(id_1843 == label2_1139) };
                            Size choose_res_1845;
                            if (id_1844) {
                              Size id_1846 { 2UL };
                              Size id_1847 { Size(sz_1049 + id_1846) };
                              Size id_1848 { 2UL };
                              Size id_1849 { Size(id_1847 + id_1848) };
                              Size id_1850 { 2UL };
                              Size id_1851 { Size(id_1849 + id_1850) };
                              choose_res_1845 = id_1851;
                            } else {
                              uint16_t id_1852 { 4 };
                              bool id_1853 { bool(id_1852 == label2_1139) };
                              Size choose_res_1854;
                              if (id_1853) {
                                Size id_1855 { 2UL };
                                Size id_1856 { Size(sz_1049 + id_1855) };
                                Size id_1857 { 2UL };
                                Size id_1858 { Size(id_1856 + id_1857) };
                                Size id_1859 { 2UL };
                                Size id_1860 { Size(id_1858 + id_1859) };
                                choose_res_1854 = id_1860;
                              } else {
                                uint16_t id_1861 { 5 };
                                bool id_1862 { bool(id_1861 == label2_1139) };
                                Size choose_res_1863;
                                if (id_1862) {
                                  Size id_1864 { 2UL };
                                  Size id_1865 { Size(sz_1049 + id_1864) };
                                  Size id_1866 { 2UL };
                                  Size id_1867 { Size(id_1865 + id_1866) };
                                  Size id_1868 { 2UL };
                                  Size id_1869 { Size(id_1867 + id_1868) };
                                  choose_res_1863 = id_1869;
                                } else {
                                  uint16_t id_1870 { 6 };
                                  bool id_1871 { bool(id_1870 == label2_1139) };
                                  Size choose_res_1872;
                                  if (id_1871) {
                                    Size id_1873 { 2UL };
                                    Size id_1874 { Size(sz_1049 + id_1873) };
                                    Size id_1875 { 2UL };
                                    Size id_1876 { Size(id_1874 + id_1875) };
                                    Size id_1877 { 2UL };
                                    Size id_1878 { Size(id_1876 + id_1877) };
                                    choose_res_1872 = id_1878;
                                  } else {
                                    uint16_t id_1879 { 7 };
                                    bool id_1880 { bool(id_1879 == label2_1139) };
                                    Size choose_res_1881;
                                    if (id_1880) {
                                      Size id_1882 { 2UL };
                                      Size id_1883 { Size(sz_1049 + id_1882) };
                                      Size id_1884 { 2UL };
                                      Size id_1885 { Size(id_1883 + id_1884) };
                                      Size id_1886 { 2UL };
                                      Size id_1887 { Size(id_1885 + id_1886) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1888 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1889 { std::get<4 /* Stateless */>(id_1888) };
                                      ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1890 { std::get<0 /* SL0 */>(id_1889) };
                                      Lst<dessser::gen::raql_path_comp::t_ext> id_1891 { std::get<7 /* Path */>(id_1890) };
                                      uint32_t id_1892 { id_1891.size() };
                                      Vec<1, uint32_t> id_1893 {  id_1892  };
                                      Size let_res_1894;
                                      {
                                        Vec<1, uint32_t> n_ref_1140 { id_1893 };
                                        uint32_t id_1895 { 1U };
                                        Vec<1, uint32_t> id_1896 {  id_1895  };
                                        Size let_res_1897;
                                        {
                                          Vec<1, uint32_t> lebsz_ref_1141 { id_1896 };
                                          bool while_flag_1898 { true };
                                          do {
                                            uint8_t id_1899 { 0 };
                                            uint32_t id_1900 { n_ref_1140[id_1899] };
                                            uint8_t id_1901 { 0 };
                                            uint32_t id_1902 { lebsz_ref_1141[id_1901] };
                                            uint8_t id_1903 { 7 };
                                            uint32_t id_1904 { uint32_t(id_1902 << id_1903) };
                                            bool id_1905 { bool(id_1900 >= id_1904) };
                                            while_flag_1898 = id_1905;
                                            if (while_flag_1898) {
                                              uint8_t id_1906 { 0 };
                                              uint8_t id_1907 { 0 };
                                              uint32_t id_1908 { lebsz_ref_1141[id_1907] };
                                              uint32_t id_1909 { 1U };
                                              uint32_t id_1910 { uint32_t(id_1908 + id_1909) };
                                              Void id_1911 { ((void)(lebsz_ref_1141[id_1906] = id_1910), ::dessser::Void()) };
                                              (void)id_1911;
                                            }
                                          } while (while_flag_1898);
                                          (void)::dessser::Void();
                                          uint8_t id_1912 { 0 };
                                          uint32_t id_1913 { lebsz_ref_1141[id_1912] };
                                          Size id_1914 { Size(id_1913) };
                                          let_res_1897 = id_1914;
                                        }
                                        let_res_1894 = let_res_1897;
                                      }
                                      Size id_1915 { Size(id_1887 + let_res_1894) };
                                      Vec<1, Size> id_1916 {  id_1915  };
                                      Size let_res_1917;
                                      {
                                        Vec<1, Size> sz_ref_1142 { id_1916 };
                                        int32_t id_1918 { 0L };
                                        Vec<1, int32_t> id_1919 {  id_1918  };
                                        {
                                          Vec<1, int32_t> repeat_n_1143 { id_1919 };
                                          bool while_flag_1920 { true };
                                          do {
                                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1921 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1922 { std::get<4 /* Stateless */>(id_1921) };
                                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1923 { std::get<0 /* SL0 */>(id_1922) };
                                            Lst<dessser::gen::raql_path_comp::t_ext> id_1924 { std::get<7 /* Path */>(id_1923) };
                                            uint32_t id_1925 { id_1924.size() };
                                            int32_t id_1926 { int32_t(id_1925) };
                                            uint8_t id_1927 { 0 };
                                            int32_t id_1928 { repeat_n_1143[id_1927] };
                                            bool id_1929 { bool(id_1926 > id_1928) };
                                            while_flag_1920 = id_1929;
                                            if (while_flag_1920) {
                                              uint8_t id_1930 { 0 };
                                              uint8_t id_1931 { 0 };
                                              Size id_1932 { sz_ref_1142[id_1931] };
                                              auto fun1933 { dessser::gen::raql_path_comp::sersize_of_row_binary };
                                              uint8_t id_1934 { 0 };
                                              int32_t id_1935 { repeat_n_1143[id_1934] };
                                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1936 { (*p_0).text };
                                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1937 { std::get<4 /* Stateless */>(id_1936) };
                                              ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1938 { std::get<0 /* SL0 */>(id_1937) };
                                              Lst<dessser::gen::raql_path_comp::t_ext> id_1939 { std::get<7 /* Path */>(id_1938) };
                                              dessser::gen::raql_path_comp::t_ext id_1940 { id_1939[id_1935] };
                                              Size id_1941 { fun1933(id_1940) };
                                              Size id_1942 { Size(id_1932 + id_1941) };
                                              Void id_1943 { ((void)(sz_ref_1142[id_1930] = id_1942), ::dessser::Void()) };
                                              (void)id_1943;
                                              uint8_t id_1944 { 0 };
                                              uint8_t id_1945 { 0 };
                                              int32_t id_1946 { repeat_n_1143[id_1945] };
                                              int32_t id_1947 { 1L };
                                              int32_t id_1948 { int32_t(id_1946 + id_1947) };
                                              Void id_1949 { ((void)(repeat_n_1143[id_1944] = id_1948), ::dessser::Void()) };
                                              (void)id_1949;
                                              (void)id_1949;
                                            }
                                          } while (while_flag_1920);
                                          (void)::dessser::Void();
                                        }
                                        (void)::dessser::Void();
                                        uint8_t id_1950 { 0 };
                                        Size id_1951 { sz_ref_1142[id_1950] };
                                        let_res_1917 = id_1951;
                                      }
                                      choose_res_1881 = let_res_1917;
                                    } else {
                                      uint16_t id_1952 { 8 };
                                      bool id_1953 { bool(label2_1139 == id_1952) };
                                      Void id_1954 { ((void)(assert(id_1953)), ::dessser::Void()) };
                                      (void)id_1954;
                                      Size id_1955 { 2UL };
                                      Size id_1956 { Size(sz_1049 + id_1955) };
                                      Size id_1957 { 2UL };
                                      Size id_1958 { Size(id_1956 + id_1957) };
                                      Size id_1959 { 2UL };
                                      Size id_1960 { Size(id_1958 + id_1959) };
                                      choose_res_1881 = id_1960;
                                    }
                                    choose_res_1872 = choose_res_1881;
                                  }
                                  choose_res_1863 = choose_res_1872;
                                }
                                choose_res_1854 = choose_res_1863;
                              }
                              choose_res_1845 = choose_res_1854;
                            }
                            choose_res_1829 = choose_res_1845;
                          }
                          choose_res_1813 = choose_res_1829;
                        }
                        choose_res_1797 = choose_res_1813;
                      }
                      let_res_1794 = choose_res_1797;
                    }
                    choose_res_1789 = let_res_1794;
                  } else {
                    uint16_t id_1961 { 1 };
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1962 { (*p_0).text };
                    ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1963 { std::get<4 /* Stateless */>(id_1962) };
                    uint16_t id_1964 { uint16_t(id_1963.index()) };
                    bool id_1965 { bool(id_1961 == id_1964) };
                    Size choose_res_1966;
                    if (id_1965) {
                      Size id_1967 { 2UL };
                      Size id_1968 { Size(sz_1049 + id_1967) };
                      Size id_1969 { 2UL };
                      Size id_1970 { Size(id_1968 + id_1969) };
                      Size let_res_1971;
                      {
                        Size sz_1130 { id_1970 };
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1972 { (*p_0).text };
                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1973 { std::get<4 /* Stateless */>(id_1972) };
                        ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_1974 { std::get<1 /* SL1 */>(id_1973) };
                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_1975 { std::get<0>(id_1974) };
                        uint16_t id_1976 { uint16_t(id_1975.index()) };
                        Size let_res_1977;
                        {
                          uint16_t label2_1131 { id_1976 };
                          uint16_t id_1978 { 0 };
                          bool id_1979 { bool(id_1978 == label2_1131) };
                          Size choose_res_1980;
                          if (id_1979) {
                            Size id_1981 { 2UL };
                            Size id_1982 { Size(sz_1130 + id_1981) };
                            choose_res_1980 = id_1982;
                          } else {
                            uint16_t id_1983 { 1 };
                            bool id_1984 { bool(id_1983 == label2_1131) };
                            Size choose_res_1985;
                            if (id_1984) {
                              Size id_1986 { 2UL };
                              Size id_1987 { Size(sz_1130 + id_1986) };
                              auto fun1988 { dessser::gen::raql_type::sersize_of_row_binary };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_1989 { (*p_0).text };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_1990 { std::get<4 /* Stateless */>(id_1989) };
                              ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_1991 { std::get<1 /* SL1 */>(id_1990) };
                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_1992 { std::get<0>(id_1991) };
                              dessser::gen::raql_type::t_ext id_1993 { std::get<1 /* Cast */>(id_1992) };
                              Size id_1994 { fun1988(id_1993) };
                              Size id_1995 { Size(id_1987 + id_1994) };
                              choose_res_1985 = id_1995;
                            } else {
                              uint16_t id_1996 { 2 };
                              bool id_1997 { bool(id_1996 == label2_1131) };
                              Size choose_res_1998;
                              if (id_1997) {
                                Size id_1999 { 2UL };
                                Size id_2000 { Size(sz_1130 + id_1999) };
                                choose_res_1998 = id_2000;
                              } else {
                                uint16_t id_2001 { 3 };
                                bool id_2002 { bool(id_2001 == label2_1131) };
                                Size choose_res_2003;
                                if (id_2002) {
                                  Size id_2004 { 2UL };
                                  Size id_2005 { Size(sz_1130 + id_2004) };
                                  auto fun2006 { dessser::gen::raql_type::sersize_of_row_binary };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2007 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2008 { std::get<4 /* Stateless */>(id_2007) };
                                  ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_2009 { std::get<1 /* SL1 */>(id_2008) };
                                  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_2010 { std::get<0>(id_2009) };
                                  ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_2011 { std::get<3 /* Peek */>(id_2010) };
                                  dessser::gen::raql_type::t_ext id_2012 { std::get<0>(id_2011) };
                                  Size id_2013 { fun2006(id_2012) };
                                  Size id_2014 { Size(id_2005 + id_2013) };
                                  Size let_res_2015;
                                  {
                                    Size sz_1136 { id_2014 };
                                    uint16_t id_2016 { 0 };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2017 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2018 { std::get<4 /* Stateless */>(id_2017) };
                                    ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_2019 { std::get<1 /* SL1 */>(id_2018) };
                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_2020 { std::get<0>(id_2019) };
                                    ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_2021 { std::get<3 /* Peek */>(id_2020) };
                                    ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051 id_2022 { std::get<1>(id_2021) };
                                    uint16_t id_2023 { uint16_t(id_2022) };
                                    bool id_2024 { bool(id_2016 == id_2023) };
                                    Size choose_res_2025;
                                    if (id_2024) {
                                      Size id_2026 { 2UL };
                                      Size id_2027 { Size(sz_1136 + id_2026) };
                                      choose_res_2025 = id_2027;
                                    } else {
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2028 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2029 { std::get<4 /* Stateless */>(id_2028) };
                                      ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_2030 { std::get<1 /* SL1 */>(id_2029) };
                                      ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_2031 { std::get<0>(id_2030) };
                                      ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_2032 { std::get<3 /* Peek */>(id_2031) };
                                      ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051 id_2033 { std::get<1>(id_2032) };
                                      uint16_t id_2034 { uint16_t(id_2033) };
                                      uint16_t id_2035 { 1 };
                                      bool id_2036 { bool(id_2034 == id_2035) };
                                      Void id_2037 { ((void)(assert(id_2036)), ::dessser::Void()) };
                                      (void)id_2037;
                                      Size id_2038 { 2UL };
                                      Size id_2039 { Size(sz_1136 + id_2038) };
                                      choose_res_2025 = id_2039;
                                    }
                                    let_res_2015 = choose_res_2025;
                                  }
                                  choose_res_2003 = let_res_2015;
                                } else {
                                  uint16_t id_2040 { 4 };
                                  bool id_2041 { bool(id_2040 == label2_1131) };
                                  Size choose_res_2042;
                                  if (id_2041) {
                                    Size id_2043 { 2UL };
                                    Size id_2044 { Size(sz_1130 + id_2043) };
                                    choose_res_2042 = id_2044;
                                  } else {
                                    uint16_t id_2045 { 5 };
                                    bool id_2046 { bool(id_2045 == label2_1131) };
                                    Size choose_res_2047;
                                    if (id_2046) {
                                      Size id_2048 { 2UL };
                                      Size id_2049 { Size(sz_1130 + id_2048) };
                                      choose_res_2047 = id_2049;
                                    } else {
                                      uint16_t id_2050 { 6 };
                                      bool id_2051 { bool(id_2050 == label2_1131) };
                                      Size choose_res_2052;
                                      if (id_2051) {
                                        Size id_2053 { 2UL };
                                        Size id_2054 { Size(sz_1130 + id_2053) };
                                        choose_res_2052 = id_2054;
                                      } else {
                                        uint16_t id_2055 { 7 };
                                        bool id_2056 { bool(id_2055 == label2_1131) };
                                        Size choose_res_2057;
                                        if (id_2056) {
                                          Size id_2058 { 2UL };
                                          Size id_2059 { Size(sz_1130 + id_2058) };
                                          choose_res_2057 = id_2059;
                                        } else {
                                          uint16_t id_2060 { 8 };
                                          bool id_2061 { bool(id_2060 == label2_1131) };
                                          Size choose_res_2062;
                                          if (id_2061) {
                                            Size id_2063 { 2UL };
                                            Size id_2064 { Size(sz_1130 + id_2063) };
                                            choose_res_2062 = id_2064;
                                          } else {
                                            uint16_t id_2065 { 9 };
                                            bool id_2066 { bool(id_2065 == label2_1131) };
                                            Size choose_res_2067;
                                            if (id_2066) {
                                              Size id_2068 { 2UL };
                                              Size id_2069 { Size(sz_1130 + id_2068) };
                                              choose_res_2067 = id_2069;
                                            } else {
                                              uint16_t id_2070 { 10 };
                                              bool id_2071 { bool(id_2070 == label2_1131) };
                                              Size choose_res_2072;
                                              if (id_2071) {
                                                Size id_2073 { 2UL };
                                                Size id_2074 { Size(sz_1130 + id_2073) };
                                                choose_res_2072 = id_2074;
                                              } else {
                                                uint16_t id_2075 { 11 };
                                                bool id_2076 { bool(id_2075 == label2_1131) };
                                                Size choose_res_2077;
                                                if (id_2076) {
                                                  Size id_2078 { 2UL };
                                                  Size id_2079 { Size(sz_1130 + id_2078) };
                                                  choose_res_2077 = id_2079;
                                                } else {
                                                  uint16_t id_2080 { 12 };
                                                  bool id_2081 { bool(id_2080 == label2_1131) };
                                                  Size choose_res_2082;
                                                  if (id_2081) {
                                                    Size id_2083 { 2UL };
                                                    Size id_2084 { Size(sz_1130 + id_2083) };
                                                    choose_res_2082 = id_2084;
                                                  } else {
                                                    uint16_t id_2085 { 13 };
                                                    bool id_2086 { bool(id_2085 == label2_1131) };
                                                    Size choose_res_2087;
                                                    if (id_2086) {
                                                      Size id_2088 { 2UL };
                                                      Size id_2089 { Size(sz_1130 + id_2088) };
                                                      choose_res_2087 = id_2089;
                                                    } else {
                                                      uint16_t id_2090 { 14 };
                                                      bool id_2091 { bool(id_2090 == label2_1131) };
                                                      Size choose_res_2092;
                                                      if (id_2091) {
                                                        Size id_2093 { 2UL };
                                                        Size id_2094 { Size(sz_1130 + id_2093) };
                                                        choose_res_2092 = id_2094;
                                                      } else {
                                                        uint16_t id_2095 { 15 };
                                                        bool id_2096 { bool(id_2095 == label2_1131) };
                                                        Size choose_res_2097;
                                                        if (id_2096) {
                                                          Size id_2098 { 2UL };
                                                          Size id_2099 { Size(sz_1130 + id_2098) };
                                                          choose_res_2097 = id_2099;
                                                        } else {
                                                          uint16_t id_2100 { 16 };
                                                          bool id_2101 { bool(id_2100 == label2_1131) };
                                                          Size choose_res_2102;
                                                          if (id_2101) {
                                                            Size id_2103 { 2UL };
                                                            Size id_2104 { Size(sz_1130 + id_2103) };
                                                            choose_res_2102 = id_2104;
                                                          } else {
                                                            uint16_t id_2105 { 17 };
                                                            bool id_2106 { bool(id_2105 == label2_1131) };
                                                            Size choose_res_2107;
                                                            if (id_2106) {
                                                              Size id_2108 { 2UL };
                                                              Size id_2109 { Size(sz_1130 + id_2108) };
                                                              choose_res_2107 = id_2109;
                                                            } else {
                                                              uint16_t id_2110 { 18 };
                                                              bool id_2111 { bool(id_2110 == label2_1131) };
                                                              Size choose_res_2112;
                                                              if (id_2111) {
                                                                Size id_2113 { 2UL };
                                                                Size id_2114 { Size(sz_1130 + id_2113) };
                                                                choose_res_2112 = id_2114;
                                                              } else {
                                                                uint16_t id_2115 { 19 };
                                                                bool id_2116 { bool(id_2115 == label2_1131) };
                                                                Size choose_res_2117;
                                                                if (id_2116) {
                                                                  Size id_2118 { 2UL };
                                                                  Size id_2119 { Size(sz_1130 + id_2118) };
                                                                  choose_res_2117 = id_2119;
                                                                } else {
                                                                  uint16_t id_2120 { 20 };
                                                                  bool id_2121 { bool(id_2120 == label2_1131) };
                                                                  Size choose_res_2122;
                                                                  if (id_2121) {
                                                                    Size id_2123 { 2UL };
                                                                    Size id_2124 { Size(sz_1130 + id_2123) };
                                                                    choose_res_2122 = id_2124;
                                                                  } else {
                                                                    uint16_t id_2125 { 21 };
                                                                    bool id_2126 { bool(id_2125 == label2_1131) };
                                                                    Size choose_res_2127;
                                                                    if (id_2126) {
                                                                      Size id_2128 { 2UL };
                                                                      Size id_2129 { Size(sz_1130 + id_2128) };
                                                                      choose_res_2127 = id_2129;
                                                                    } else {
                                                                      uint16_t id_2130 { 22 };
                                                                      bool id_2131 { bool(id_2130 == label2_1131) };
                                                                      Size choose_res_2132;
                                                                      if (id_2131) {
                                                                        Size id_2133 { 2UL };
                                                                        Size id_2134 { Size(sz_1130 + id_2133) };
                                                                        choose_res_2132 = id_2134;
                                                                      } else {
                                                                        uint16_t id_2135 { 23 };
                                                                        bool id_2136 { bool(id_2135 == label2_1131) };
                                                                        Size choose_res_2137;
                                                                        if (id_2136) {
                                                                          Size id_2138 { 2UL };
                                                                          Size id_2139 { Size(sz_1130 + id_2138) };
                                                                          choose_res_2137 = id_2139;
                                                                        } else {
                                                                          uint16_t id_2140 { 24 };
                                                                          bool id_2141 { bool(id_2140 == label2_1131) };
                                                                          Size choose_res_2142;
                                                                          if (id_2141) {
                                                                            Size id_2143 { 2UL };
                                                                            Size id_2144 { Size(sz_1130 + id_2143) };
                                                                            choose_res_2142 = id_2144;
                                                                          } else {
                                                                            uint16_t id_2145 { 25 };
                                                                            bool id_2146 { bool(id_2145 == label2_1131) };
                                                                            Size choose_res_2147;
                                                                            if (id_2146) {
                                                                              Size id_2148 { 2UL };
                                                                              Size id_2149 { Size(sz_1130 + id_2148) };
                                                                              choose_res_2147 = id_2149;
                                                                            } else {
                                                                              uint16_t id_2150 { 26 };
                                                                              bool id_2151 { bool(id_2150 == label2_1131) };
                                                                              Size choose_res_2152;
                                                                              if (id_2151) {
                                                                                Size id_2153 { 2UL };
                                                                                Size id_2154 { Size(sz_1130 + id_2153) };
                                                                                choose_res_2152 = id_2154;
                                                                              } else {
                                                                                uint16_t id_2155 { 27 };
                                                                                bool id_2156 { bool(id_2155 == label2_1131) };
                                                                                Size choose_res_2157;
                                                                                if (id_2156) {
                                                                                  Size id_2158 { 2UL };
                                                                                  Size id_2159 { Size(sz_1130 + id_2158) };
                                                                                  choose_res_2157 = id_2159;
                                                                                } else {
                                                                                  uint16_t id_2160 { 28 };
                                                                                  bool id_2161 { bool(id_2160 == label2_1131) };
                                                                                  Size choose_res_2162;
                                                                                  if (id_2161) {
                                                                                    Size id_2163 { 2UL };
                                                                                    Size id_2164 { Size(sz_1130 + id_2163) };
                                                                                    choose_res_2162 = id_2164;
                                                                                  } else {
                                                                                    uint16_t id_2165 { 29 };
                                                                                    bool id_2166 { bool(id_2165 == label2_1131) };
                                                                                    Size choose_res_2167;
                                                                                    if (id_2166) {
                                                                                      Size id_2168 { 2UL };
                                                                                      Size id_2169 { Size(sz_1130 + id_2168) };
                                                                                      choose_res_2167 = id_2169;
                                                                                    } else {
                                                                                      uint16_t id_2170 { 30 };
                                                                                      bool id_2171 { bool(id_2170 == label2_1131) };
                                                                                      Size choose_res_2172;
                                                                                      if (id_2171) {
                                                                                        Size id_2173 { 2UL };
                                                                                        Size id_2174 { Size(sz_1130 + id_2173) };
                                                                                        choose_res_2172 = id_2174;
                                                                                      } else {
                                                                                        uint16_t id_2175 { 31 };
                                                                                        bool id_2176 { bool(id_2175 == label2_1131) };
                                                                                        Size choose_res_2177;
                                                                                        if (id_2176) {
                                                                                          Size id_2178 { 2UL };
                                                                                          Size id_2179 { Size(sz_1130 + id_2178) };
                                                                                          choose_res_2177 = id_2179;
                                                                                        } else {
                                                                                          uint16_t id_2180 { 32 };
                                                                                          bool id_2181 { bool(id_2180 == label2_1131) };
                                                                                          Size choose_res_2182;
                                                                                          if (id_2181) {
                                                                                            Size id_2183 { 2UL };
                                                                                            Size id_2184 { Size(sz_1130 + id_2183) };
                                                                                            choose_res_2182 = id_2184;
                                                                                          } else {
                                                                                            uint16_t id_2185 { 33 };
                                                                                            bool id_2186 { bool(id_2185 == label2_1131) };
                                                                                            Size choose_res_2187;
                                                                                            if (id_2186) {
                                                                                              Size id_2188 { 2UL };
                                                                                              Size id_2189 { Size(sz_1130 + id_2188) };
                                                                                              choose_res_2187 = id_2189;
                                                                                            } else {
                                                                                              uint16_t id_2190 { 34 };
                                                                                              bool id_2191 { bool(id_2190 == label2_1131) };
                                                                                              Size choose_res_2192;
                                                                                              if (id_2191) {
                                                                                                Size id_2193 { 2UL };
                                                                                                Size id_2194 { Size(sz_1130 + id_2193) };
                                                                                                choose_res_2192 = id_2194;
                                                                                              } else {
                                                                                                uint16_t id_2195 { 35 };
                                                                                                bool id_2196 { bool(id_2195 == label2_1131) };
                                                                                                Size choose_res_2197;
                                                                                                if (id_2196) {
                                                                                                  Size id_2198 { 2UL };
                                                                                                  Size id_2199 { Size(sz_1130 + id_2198) };
                                                                                                  choose_res_2197 = id_2199;
                                                                                                } else {
                                                                                                  uint16_t id_2200 { 36 };
                                                                                                  bool id_2201 { bool(id_2200 == label2_1131) };
                                                                                                  Size choose_res_2202;
                                                                                                  if (id_2201) {
                                                                                                    Size id_2203 { 2UL };
                                                                                                    Size id_2204 { Size(sz_1130 + id_2203) };
                                                                                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2205 { (*p_0).text };
                                                                                                    ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2206 { std::get<4 /* Stateless */>(id_2205) };
                                                                                                    ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_2207 { std::get<1 /* SL1 */>(id_2206) };
                                                                                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_2208 { std::get<0>(id_2207) };
                                                                                                    std::string id_2209 { std::get<36 /* Like */>(id_2208) };
                                                                                                    uint32_t id_2210 { (uint32_t)id_2209.size() };
                                                                                                    Vec<1, uint32_t> id_2211 {  id_2210  };
                                                                                                    Size let_res_2212;
                                                                                                    {
                                                                                                      Vec<1, uint32_t> n_ref_1133 { id_2211 };
                                                                                                      uint32_t id_2213 { 1U };
                                                                                                      Vec<1, uint32_t> id_2214 {  id_2213  };
                                                                                                      Size let_res_2215;
                                                                                                      {
                                                                                                        Vec<1, uint32_t> lebsz_ref_1134 { id_2214 };
                                                                                                        bool while_flag_2216 { true };
                                                                                                        do {
                                                                                                          uint8_t id_2217 { 0 };
                                                                                                          uint32_t id_2218 { n_ref_1133[id_2217] };
                                                                                                          uint8_t id_2219 { 0 };
                                                                                                          uint32_t id_2220 { lebsz_ref_1134[id_2219] };
                                                                                                          uint8_t id_2221 { 7 };
                                                                                                          uint32_t id_2222 { uint32_t(id_2220 << id_2221) };
                                                                                                          bool id_2223 { bool(id_2218 >= id_2222) };
                                                                                                          while_flag_2216 = id_2223;
                                                                                                          if (while_flag_2216) {
                                                                                                            uint8_t id_2224 { 0 };
                                                                                                            uint8_t id_2225 { 0 };
                                                                                                            uint32_t id_2226 { lebsz_ref_1134[id_2225] };
                                                                                                            uint32_t id_2227 { 1U };
                                                                                                            uint32_t id_2228 { uint32_t(id_2226 + id_2227) };
                                                                                                            Void id_2229 { ((void)(lebsz_ref_1134[id_2224] = id_2228), ::dessser::Void()) };
                                                                                                            (void)id_2229;
                                                                                                          }
                                                                                                        } while (while_flag_2216);
                                                                                                        (void)::dessser::Void();
                                                                                                        uint8_t id_2230 { 0 };
                                                                                                        uint32_t id_2231 { lebsz_ref_1134[id_2230] };
                                                                                                        Size id_2232 { Size(id_2231) };
                                                                                                        let_res_2215 = id_2232;
                                                                                                      }
                                                                                                      let_res_2212 = let_res_2215;
                                                                                                    }
                                                                                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2233 { (*p_0).text };
                                                                                                    ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2234 { std::get<4 /* Stateless */>(id_2233) };
                                                                                                    ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_2235 { std::get<1 /* SL1 */>(id_2234) };
                                                                                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_2236 { std::get<0>(id_2235) };
                                                                                                    std::string id_2237 { std::get<36 /* Like */>(id_2236) };
                                                                                                    uint32_t id_2238 { (uint32_t)id_2237.size() };
                                                                                                    Size id_2239 { Size(id_2238) };
                                                                                                    Size id_2240 { Size(let_res_2212 + id_2239) };
                                                                                                    Size id_2241 { Size(id_2204 + id_2240) };
                                                                                                    choose_res_2202 = id_2241;
                                                                                                  } else {
                                                                                                    uint16_t id_2242 { 37 };
                                                                                                    bool id_2243 { bool(id_2242 == label2_1131) };
                                                                                                    Size choose_res_2244;
                                                                                                    if (id_2243) {
                                                                                                      Size id_2245 { 2UL };
                                                                                                      Size id_2246 { Size(sz_1130 + id_2245) };
                                                                                                      choose_res_2244 = id_2246;
                                                                                                    } else {
                                                                                                      uint16_t id_2247 { 38 };
                                                                                                      bool id_2248 { bool(id_2247 == label2_1131) };
                                                                                                      Size choose_res_2249;
                                                                                                      if (id_2248) {
                                                                                                        Size id_2250 { 2UL };
                                                                                                        Size id_2251 { Size(sz_1130 + id_2250) };
                                                                                                        choose_res_2249 = id_2251;
                                                                                                      } else {
                                                                                                        uint16_t id_2252 { 39 };
                                                                                                        bool id_2253 { bool(id_2252 == label2_1131) };
                                                                                                        Size choose_res_2254;
                                                                                                        if (id_2253) {
                                                                                                          Size id_2255 { 2UL };
                                                                                                          Size id_2256 { Size(sz_1130 + id_2255) };
                                                                                                          choose_res_2254 = id_2256;
                                                                                                        } else {
                                                                                                          uint16_t id_2257 { 40 };
                                                                                                          bool id_2258 { bool(label2_1131 == id_2257) };
                                                                                                          Void id_2259 { ((void)(assert(id_2258)), ::dessser::Void()) };
                                                                                                          (void)id_2259;
                                                                                                          Size id_2260 { 2UL };
                                                                                                          Size id_2261 { Size(sz_1130 + id_2260) };
                                                                                                          choose_res_2254 = id_2261;
                                                                                                        }
                                                                                                        choose_res_2249 = choose_res_2254;
                                                                                                      }
                                                                                                      choose_res_2244 = choose_res_2249;
                                                                                                    }
                                                                                                    choose_res_2202 = choose_res_2244;
                                                                                                  }
                                                                                                  choose_res_2197 = choose_res_2202;
                                                                                                }
                                                                                                choose_res_2192 = choose_res_2197;
                                                                                              }
                                                                                              choose_res_2187 = choose_res_2192;
                                                                                            }
                                                                                            choose_res_2182 = choose_res_2187;
                                                                                          }
                                                                                          choose_res_2177 = choose_res_2182;
                                                                                        }
                                                                                        choose_res_2172 = choose_res_2177;
                                                                                      }
                                                                                      choose_res_2167 = choose_res_2172;
                                                                                    }
                                                                                    choose_res_2162 = choose_res_2167;
                                                                                  }
                                                                                  choose_res_2157 = choose_res_2162;
                                                                                }
                                                                                choose_res_2152 = choose_res_2157;
                                                                              }
                                                                              choose_res_2147 = choose_res_2152;
                                                                            }
                                                                            choose_res_2142 = choose_res_2147;
                                                                          }
                                                                          choose_res_2137 = choose_res_2142;
                                                                        }
                                                                        choose_res_2132 = choose_res_2137;
                                                                      }
                                                                      choose_res_2127 = choose_res_2132;
                                                                    }
                                                                    choose_res_2122 = choose_res_2127;
                                                                  }
                                                                  choose_res_2117 = choose_res_2122;
                                                                }
                                                                choose_res_2112 = choose_res_2117;
                                                              }
                                                              choose_res_2107 = choose_res_2112;
                                                            }
                                                            choose_res_2102 = choose_res_2107;
                                                          }
                                                          choose_res_2097 = choose_res_2102;
                                                        }
                                                        choose_res_2092 = choose_res_2097;
                                                      }
                                                      choose_res_2087 = choose_res_2092;
                                                    }
                                                    choose_res_2082 = choose_res_2087;
                                                  }
                                                  choose_res_2077 = choose_res_2082;
                                                }
                                                choose_res_2072 = choose_res_2077;
                                              }
                                              choose_res_2067 = choose_res_2072;
                                            }
                                            choose_res_2062 = choose_res_2067;
                                          }
                                          choose_res_2057 = choose_res_2062;
                                        }
                                        choose_res_2052 = choose_res_2057;
                                      }
                                      choose_res_2047 = choose_res_2052;
                                    }
                                    choose_res_2042 = choose_res_2047;
                                  }
                                  choose_res_2003 = choose_res_2042;
                                }
                                choose_res_1998 = choose_res_2003;
                              }
                              choose_res_1985 = choose_res_1998;
                            }
                            choose_res_1980 = choose_res_1985;
                          }
                          let_res_1977 = choose_res_1980;
                        }
                        let_res_1971 = let_res_1977;
                      }
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2262 { (*p_0).text };
                      ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2263 { std::get<4 /* Stateless */>(id_2262) };
                      ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_2264 { std::get<1 /* SL1 */>(id_2263) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_2265 { std::get<1>(id_2264) };
                      Size id_2266 { fun1486(id_2265) };
                      Size id_2267 { Size(let_res_1971 + id_2266) };
                      choose_res_1966 = id_2267;
                    } else {
                      uint16_t id_2268 { 2 };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2269 { (*p_0).text };
                      ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2270 { std::get<4 /* Stateless */>(id_2269) };
                      uint16_t id_2271 { uint16_t(id_2270.index()) };
                      bool id_2272 { bool(id_2268 == id_2271) };
                      Size choose_res_2273;
                      if (id_2272) {
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2274 { (*p_0).text };
                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2275 { std::get<4 /* Stateless */>(id_2274) };
                        ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_2276 { std::get<2 /* SL1s */>(id_2275) };
                        ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036 id_2277 { std::get<0>(id_2276) };
                        uint16_t id_2278 { uint16_t(id_2277) };
                        Size let_res_2279;
                        {
                          uint16_t label2_1124 { id_2278 };
                          uint16_t id_2280 { 0 };
                          bool id_2281 { bool(id_2280 == label2_1124) };
                          Size choose_res_2282;
                          if (id_2281) {
                            Size id_2283 { 2UL };
                            Size id_2284 { Size(sz_1049 + id_2283) };
                            Size id_2285 { 2UL };
                            Size id_2286 { Size(id_2284 + id_2285) };
                            Size id_2287 { 2UL };
                            Size id_2288 { Size(id_2286 + id_2287) };
                            choose_res_2282 = id_2288;
                          } else {
                            uint16_t id_2289 { 1 };
                            bool id_2290 { bool(id_2289 == label2_1124) };
                            Size choose_res_2291;
                            if (id_2290) {
                              Size id_2292 { 2UL };
                              Size id_2293 { Size(sz_1049 + id_2292) };
                              Size id_2294 { 2UL };
                              Size id_2295 { Size(id_2293 + id_2294) };
                              Size id_2296 { 2UL };
                              Size id_2297 { Size(id_2295 + id_2296) };
                              choose_res_2291 = id_2297;
                            } else {
                              uint16_t id_2298 { 2 };
                              bool id_2299 { bool(id_2298 == label2_1124) };
                              Size choose_res_2300;
                              if (id_2299) {
                                Size id_2301 { 2UL };
                                Size id_2302 { Size(sz_1049 + id_2301) };
                                Size id_2303 { 2UL };
                                Size id_2304 { Size(id_2302 + id_2303) };
                                Size id_2305 { 2UL };
                                Size id_2306 { Size(id_2304 + id_2305) };
                                choose_res_2300 = id_2306;
                              } else {
                                uint16_t id_2307 { 3 };
                                bool id_2308 { bool(label2_1124 == id_2307) };
                                Void id_2309 { ((void)(assert(id_2308)), ::dessser::Void()) };
                                (void)id_2309;
                                Size id_2310 { 2UL };
                                Size id_2311 { Size(sz_1049 + id_2310) };
                                Size id_2312 { 2UL };
                                Size id_2313 { Size(id_2311 + id_2312) };
                                Size id_2314 { 2UL };
                                Size id_2315 { Size(id_2313 + id_2314) };
                                choose_res_2300 = id_2315;
                              }
                              choose_res_2291 = choose_res_2300;
                            }
                            choose_res_2282 = choose_res_2291;
                          }
                          let_res_2279 = choose_res_2282;
                        }
                        Size let_res_2316;
                        {
                          Size sz_1125 { let_res_2279 };
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2317 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2318 { std::get<4 /* Stateless */>(id_2317) };
                          ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_2319 { std::get<2 /* SL1s */>(id_2318) };
                          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2320 { std::get<1>(id_2319) };
                          uint32_t id_2321 { id_2320.size() };
                          Vec<1, uint32_t> id_2322 {  id_2321  };
                          Size let_res_2323;
                          {
                            Vec<1, uint32_t> n_ref_1126 { id_2322 };
                            uint32_t id_2324 { 1U };
                            Vec<1, uint32_t> id_2325 {  id_2324  };
                            Size let_res_2326;
                            {
                              Vec<1, uint32_t> lebsz_ref_1127 { id_2325 };
                              bool while_flag_2327 { true };
                              do {
                                uint8_t id_2328 { 0 };
                                uint32_t id_2329 { n_ref_1126[id_2328] };
                                uint8_t id_2330 { 0 };
                                uint32_t id_2331 { lebsz_ref_1127[id_2330] };
                                uint8_t id_2332 { 7 };
                                uint32_t id_2333 { uint32_t(id_2331 << id_2332) };
                                bool id_2334 { bool(id_2329 >= id_2333) };
                                while_flag_2327 = id_2334;
                                if (while_flag_2327) {
                                  uint8_t id_2335 { 0 };
                                  uint8_t id_2336 { 0 };
                                  uint32_t id_2337 { lebsz_ref_1127[id_2336] };
                                  uint32_t id_2338 { 1U };
                                  uint32_t id_2339 { uint32_t(id_2337 + id_2338) };
                                  Void id_2340 { ((void)(lebsz_ref_1127[id_2335] = id_2339), ::dessser::Void()) };
                                  (void)id_2340;
                                }
                              } while (while_flag_2327);
                              (void)::dessser::Void();
                              uint8_t id_2341 { 0 };
                              uint32_t id_2342 { lebsz_ref_1127[id_2341] };
                              Size id_2343 { Size(id_2342) };
                              let_res_2326 = id_2343;
                            }
                            let_res_2323 = let_res_2326;
                          }
                          Size id_2344 { Size(sz_1125 + let_res_2323) };
                          Vec<1, Size> id_2345 {  id_2344  };
                          Size let_res_2346;
                          {
                            Vec<1, Size> sz_ref_1128 { id_2345 };
                            int32_t id_2347 { 0L };
                            Vec<1, int32_t> id_2348 {  id_2347  };
                            {
                              Vec<1, int32_t> repeat_n_1129 { id_2348 };
                              bool while_flag_2349 { true };
                              do {
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2350 { (*p_0).text };
                                ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2351 { std::get<4 /* Stateless */>(id_2350) };
                                ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_2352 { std::get<2 /* SL1s */>(id_2351) };
                                Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2353 { std::get<1>(id_2352) };
                                uint32_t id_2354 { id_2353.size() };
                                int32_t id_2355 { int32_t(id_2354) };
                                uint8_t id_2356 { 0 };
                                int32_t id_2357 { repeat_n_1129[id_2356] };
                                bool id_2358 { bool(id_2355 > id_2357) };
                                while_flag_2349 = id_2358;
                                if (while_flag_2349) {
                                  uint8_t id_2359 { 0 };
                                  uint8_t id_2360 { 0 };
                                  Size id_2361 { sz_ref_1128[id_2360] };
                                  uint8_t id_2362 { 0 };
                                  int32_t id_2363 { repeat_n_1129[id_2362] };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2364 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2365 { std::get<4 /* Stateless */>(id_2364) };
                                  ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_2366 { std::get<2 /* SL1s */>(id_2365) };
                                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2367 { std::get<1>(id_2366) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2368 { id_2367[id_2363] };
                                  Size id_2369 { fun1486(id_2368) };
                                  Size id_2370 { Size(id_2361 + id_2369) };
                                  Void id_2371 { ((void)(sz_ref_1128[id_2359] = id_2370), ::dessser::Void()) };
                                  (void)id_2371;
                                  uint8_t id_2372 { 0 };
                                  uint8_t id_2373 { 0 };
                                  int32_t id_2374 { repeat_n_1129[id_2373] };
                                  int32_t id_2375 { 1L };
                                  int32_t id_2376 { int32_t(id_2374 + id_2375) };
                                  Void id_2377 { ((void)(repeat_n_1129[id_2372] = id_2376), ::dessser::Void()) };
                                  (void)id_2377;
                                  (void)id_2377;
                                }
                              } while (while_flag_2349);
                              (void)::dessser::Void();
                            }
                            (void)::dessser::Void();
                            uint8_t id_2378 { 0 };
                            Size id_2379 { sz_ref_1128[id_2378] };
                            let_res_2346 = id_2379;
                          }
                          let_res_2316 = let_res_2346;
                        }
                        choose_res_2273 = let_res_2316;
                      } else {
                        uint16_t id_2380 { 3 };
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2381 { (*p_0).text };
                        ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2382 { std::get<4 /* Stateless */>(id_2381) };
                        uint16_t id_2383 { uint16_t(id_2382.index()) };
                        bool id_2384 { bool(id_2380 == id_2383) };
                        Size choose_res_2385;
                        if (id_2384) {
                          Size id_2386 { 2UL };
                          Size id_2387 { Size(sz_1049 + id_2386) };
                          Size id_2388 { 2UL };
                          Size id_2389 { Size(id_2387 + id_2388) };
                          Size let_res_2390;
                          {
                            Size sz_1119 { id_2389 };
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2391 { (*p_0).text };
                            ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2392 { std::get<4 /* Stateless */>(id_2391) };
                            ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76 id_2393 { std::get<3 /* SL2 */>(id_2392) };
                            ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_2394 { std::get<0>(id_2393) };
                            uint16_t id_2395 { uint16_t(id_2394) };
                            Size let_res_2396;
                            {
                              uint16_t label2_1120 { id_2395 };
                              uint16_t id_2397 { 0 };
                              bool id_2398 { bool(id_2397 == label2_1120) };
                              Size choose_res_2399;
                              if (id_2398) {
                                Size id_2400 { 2UL };
                                Size id_2401 { Size(sz_1119 + id_2400) };
                                choose_res_2399 = id_2401;
                              } else {
                                uint16_t id_2402 { 1 };
                                bool id_2403 { bool(id_2402 == label2_1120) };
                                Size choose_res_2404;
                                if (id_2403) {
                                  Size id_2405 { 2UL };
                                  Size id_2406 { Size(sz_1119 + id_2405) };
                                  choose_res_2404 = id_2406;
                                } else {
                                  uint16_t id_2407 { 2 };
                                  bool id_2408 { bool(id_2407 == label2_1120) };
                                  Size choose_res_2409;
                                  if (id_2408) {
                                    Size id_2410 { 2UL };
                                    Size id_2411 { Size(sz_1119 + id_2410) };
                                    choose_res_2409 = id_2411;
                                  } else {
                                    uint16_t id_2412 { 3 };
                                    bool id_2413 { bool(id_2412 == label2_1120) };
                                    Size choose_res_2414;
                                    if (id_2413) {
                                      Size id_2415 { 2UL };
                                      Size id_2416 { Size(sz_1119 + id_2415) };
                                      choose_res_2414 = id_2416;
                                    } else {
                                      uint16_t id_2417 { 4 };
                                      bool id_2418 { bool(id_2417 == label2_1120) };
                                      Size choose_res_2419;
                                      if (id_2418) {
                                        Size id_2420 { 2UL };
                                        Size id_2421 { Size(sz_1119 + id_2420) };
                                        choose_res_2419 = id_2421;
                                      } else {
                                        uint16_t id_2422 { 5 };
                                        bool id_2423 { bool(id_2422 == label2_1120) };
                                        Size choose_res_2424;
                                        if (id_2423) {
                                          Size id_2425 { 2UL };
                                          Size id_2426 { Size(sz_1119 + id_2425) };
                                          choose_res_2424 = id_2426;
                                        } else {
                                          uint16_t id_2427 { 6 };
                                          bool id_2428 { bool(id_2427 == label2_1120) };
                                          Size choose_res_2429;
                                          if (id_2428) {
                                            Size id_2430 { 2UL };
                                            Size id_2431 { Size(sz_1119 + id_2430) };
                                            choose_res_2429 = id_2431;
                                          } else {
                                            uint16_t id_2432 { 7 };
                                            bool id_2433 { bool(id_2432 == label2_1120) };
                                            Size choose_res_2434;
                                            if (id_2433) {
                                              Size id_2435 { 2UL };
                                              Size id_2436 { Size(sz_1119 + id_2435) };
                                              choose_res_2434 = id_2436;
                                            } else {
                                              uint16_t id_2437 { 8 };
                                              bool id_2438 { bool(id_2437 == label2_1120) };
                                              Size choose_res_2439;
                                              if (id_2438) {
                                                Size id_2440 { 2UL };
                                                Size id_2441 { Size(sz_1119 + id_2440) };
                                                choose_res_2439 = id_2441;
                                              } else {
                                                uint16_t id_2442 { 9 };
                                                bool id_2443 { bool(id_2442 == label2_1120) };
                                                Size choose_res_2444;
                                                if (id_2443) {
                                                  Size id_2445 { 2UL };
                                                  Size id_2446 { Size(sz_1119 + id_2445) };
                                                  choose_res_2444 = id_2446;
                                                } else {
                                                  uint16_t id_2447 { 10 };
                                                  bool id_2448 { bool(id_2447 == label2_1120) };
                                                  Size choose_res_2449;
                                                  if (id_2448) {
                                                    Size id_2450 { 2UL };
                                                    Size id_2451 { Size(sz_1119 + id_2450) };
                                                    choose_res_2449 = id_2451;
                                                  } else {
                                                    uint16_t id_2452 { 11 };
                                                    bool id_2453 { bool(id_2452 == label2_1120) };
                                                    Size choose_res_2454;
                                                    if (id_2453) {
                                                      Size id_2455 { 2UL };
                                                      Size id_2456 { Size(sz_1119 + id_2455) };
                                                      choose_res_2454 = id_2456;
                                                    } else {
                                                      uint16_t id_2457 { 12 };
                                                      bool id_2458 { bool(id_2457 == label2_1120) };
                                                      Size choose_res_2459;
                                                      if (id_2458) {
                                                        Size id_2460 { 2UL };
                                                        Size id_2461 { Size(sz_1119 + id_2460) };
                                                        choose_res_2459 = id_2461;
                                                      } else {
                                                        uint16_t id_2462 { 13 };
                                                        bool id_2463 { bool(id_2462 == label2_1120) };
                                                        Size choose_res_2464;
                                                        if (id_2463) {
                                                          Size id_2465 { 2UL };
                                                          Size id_2466 { Size(sz_1119 + id_2465) };
                                                          choose_res_2464 = id_2466;
                                                        } else {
                                                          uint16_t id_2467 { 14 };
                                                          bool id_2468 { bool(id_2467 == label2_1120) };
                                                          Size choose_res_2469;
                                                          if (id_2468) {
                                                            Size id_2470 { 2UL };
                                                            Size id_2471 { Size(sz_1119 + id_2470) };
                                                            choose_res_2469 = id_2471;
                                                          } else {
                                                            uint16_t id_2472 { 15 };
                                                            bool id_2473 { bool(id_2472 == label2_1120) };
                                                            Size choose_res_2474;
                                                            if (id_2473) {
                                                              Size id_2475 { 2UL };
                                                              Size id_2476 { Size(sz_1119 + id_2475) };
                                                              choose_res_2474 = id_2476;
                                                            } else {
                                                              uint16_t id_2477 { 16 };
                                                              bool id_2478 { bool(id_2477 == label2_1120) };
                                                              Size choose_res_2479;
                                                              if (id_2478) {
                                                                Size id_2480 { 2UL };
                                                                Size id_2481 { Size(sz_1119 + id_2480) };
                                                                choose_res_2479 = id_2481;
                                                              } else {
                                                                uint16_t id_2482 { 17 };
                                                                bool id_2483 { bool(id_2482 == label2_1120) };
                                                                Size choose_res_2484;
                                                                if (id_2483) {
                                                                  Size id_2485 { 2UL };
                                                                  Size id_2486 { Size(sz_1119 + id_2485) };
                                                                  choose_res_2484 = id_2486;
                                                                } else {
                                                                  uint16_t id_2487 { 18 };
                                                                  bool id_2488 { bool(id_2487 == label2_1120) };
                                                                  Size choose_res_2489;
                                                                  if (id_2488) {
                                                                    Size id_2490 { 2UL };
                                                                    Size id_2491 { Size(sz_1119 + id_2490) };
                                                                    choose_res_2489 = id_2491;
                                                                  } else {
                                                                    uint16_t id_2492 { 19 };
                                                                    bool id_2493 { bool(id_2492 == label2_1120) };
                                                                    Size choose_res_2494;
                                                                    if (id_2493) {
                                                                      Size id_2495 { 2UL };
                                                                      Size id_2496 { Size(sz_1119 + id_2495) };
                                                                      choose_res_2494 = id_2496;
                                                                    } else {
                                                                      uint16_t id_2497 { 20 };
                                                                      bool id_2498 { bool(id_2497 == label2_1120) };
                                                                      Size choose_res_2499;
                                                                      if (id_2498) {
                                                                        Size id_2500 { 2UL };
                                                                        Size id_2501 { Size(sz_1119 + id_2500) };
                                                                        choose_res_2499 = id_2501;
                                                                      } else {
                                                                        uint16_t id_2502 { 21 };
                                                                        bool id_2503 { bool(id_2502 == label2_1120) };
                                                                        Size choose_res_2504;
                                                                        if (id_2503) {
                                                                          Size id_2505 { 2UL };
                                                                          Size id_2506 { Size(sz_1119 + id_2505) };
                                                                          choose_res_2504 = id_2506;
                                                                        } else {
                                                                          uint16_t id_2507 { 22 };
                                                                          bool id_2508 { bool(id_2507 == label2_1120) };
                                                                          Size choose_res_2509;
                                                                          if (id_2508) {
                                                                            Size id_2510 { 2UL };
                                                                            Size id_2511 { Size(sz_1119 + id_2510) };
                                                                            choose_res_2509 = id_2511;
                                                                          } else {
                                                                            uint16_t id_2512 { 23 };
                                                                            bool id_2513 { bool(id_2512 == label2_1120) };
                                                                            Size choose_res_2514;
                                                                            if (id_2513) {
                                                                              Size id_2515 { 2UL };
                                                                              Size id_2516 { Size(sz_1119 + id_2515) };
                                                                              choose_res_2514 = id_2516;
                                                                            } else {
                                                                              uint16_t id_2517 { 24 };
                                                                              bool id_2518 { bool(id_2517 == label2_1120) };
                                                                              Size choose_res_2519;
                                                                              if (id_2518) {
                                                                                Size id_2520 { 2UL };
                                                                                Size id_2521 { Size(sz_1119 + id_2520) };
                                                                                choose_res_2519 = id_2521;
                                                                              } else {
                                                                                uint16_t id_2522 { 25 };
                                                                                bool id_2523 { bool(label2_1120 == id_2522) };
                                                                                Void id_2524 { ((void)(assert(id_2523)), ::dessser::Void()) };
                                                                                (void)id_2524;
                                                                                Size id_2525 { 2UL };
                                                                                Size id_2526 { Size(sz_1119 + id_2525) };
                                                                                choose_res_2519 = id_2526;
                                                                              }
                                                                              choose_res_2514 = choose_res_2519;
                                                                            }
                                                                            choose_res_2509 = choose_res_2514;
                                                                          }
                                                                          choose_res_2504 = choose_res_2509;
                                                                        }
                                                                        choose_res_2499 = choose_res_2504;
                                                                      }
                                                                      choose_res_2494 = choose_res_2499;
                                                                    }
                                                                    choose_res_2489 = choose_res_2494;
                                                                  }
                                                                  choose_res_2484 = choose_res_2489;
                                                                }
                                                                choose_res_2479 = choose_res_2484;
                                                              }
                                                              choose_res_2474 = choose_res_2479;
                                                            }
                                                            choose_res_2469 = choose_res_2474;
                                                          }
                                                          choose_res_2464 = choose_res_2469;
                                                        }
                                                        choose_res_2459 = choose_res_2464;
                                                      }
                                                      choose_res_2454 = choose_res_2459;
                                                    }
                                                    choose_res_2449 = choose_res_2454;
                                                  }
                                                  choose_res_2444 = choose_res_2449;
                                                }
                                                choose_res_2439 = choose_res_2444;
                                              }
                                              choose_res_2434 = choose_res_2439;
                                            }
                                            choose_res_2429 = choose_res_2434;
                                          }
                                          choose_res_2424 = choose_res_2429;
                                        }
                                        choose_res_2419 = choose_res_2424;
                                      }
                                      choose_res_2414 = choose_res_2419;
                                    }
                                    choose_res_2409 = choose_res_2414;
                                  }
                                  choose_res_2404 = choose_res_2409;
                                }
                                choose_res_2399 = choose_res_2404;
                              }
                              let_res_2396 = choose_res_2399;
                            }
                            let_res_2390 = let_res_2396;
                          }
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2527 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2528 { std::get<4 /* Stateless */>(id_2527) };
                          ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76 id_2529 { std::get<3 /* SL2 */>(id_2528) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2530 { std::get<1>(id_2529) };
                          Size id_2531 { fun1486(id_2530) };
                          Size id_2532 { Size(let_res_2390 + id_2531) };
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2533 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2534 { std::get<4 /* Stateless */>(id_2533) };
                          ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76 id_2535 { std::get<3 /* SL2 */>(id_2534) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2536 { std::get<2>(id_2535) };
                          Size id_2537 { fun1486(id_2536) };
                          Size id_2538 { Size(id_2532 + id_2537) };
                          choose_res_2385 = id_2538;
                        } else {
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2539 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2540 { std::get<4 /* Stateless */>(id_2539) };
                          uint16_t id_2541 { uint16_t(id_2540.index()) };
                          uint16_t id_2542 { 4 };
                          bool id_2543 { bool(id_2541 == id_2542) };
                          Void id_2544 { ((void)(assert(id_2543)), ::dessser::Void()) };
                          (void)id_2544;
                          uint16_t id_2545 { 0 };
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2546 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2547 { std::get<4 /* Stateless */>(id_2546) };
                          ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_2548 { std::get<4 /* SL3 */>(id_2547) };
                          ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035 id_2549 { std::get<0>(id_2548) };
                          uint16_t id_2550 { uint16_t(id_2549) };
                          bool id_2551 { bool(id_2545 == id_2550) };
                          Size choose_res_2552;
                          if (id_2551) {
                            Size id_2553 { 2UL };
                            Size id_2554 { Size(sz_1049 + id_2553) };
                            Size id_2555 { 2UL };
                            Size id_2556 { Size(id_2554 + id_2555) };
                            Size id_2557 { 2UL };
                            Size id_2558 { Size(id_2556 + id_2557) };
                            choose_res_2552 = id_2558;
                          } else {
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2559 { (*p_0).text };
                            ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2560 { std::get<4 /* Stateless */>(id_2559) };
                            ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_2561 { std::get<4 /* SL3 */>(id_2560) };
                            ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035 id_2562 { std::get<0>(id_2561) };
                            uint16_t id_2563 { uint16_t(id_2562) };
                            uint16_t id_2564 { 1 };
                            bool id_2565 { bool(id_2563 == id_2564) };
                            Void id_2566 { ((void)(assert(id_2565)), ::dessser::Void()) };
                            (void)id_2566;
                            Size id_2567 { 2UL };
                            Size id_2568 { Size(sz_1049 + id_2567) };
                            Size id_2569 { 2UL };
                            Size id_2570 { Size(id_2568 + id_2569) };
                            Size id_2571 { 2UL };
                            Size id_2572 { Size(id_2570 + id_2571) };
                            choose_res_2552 = id_2572;
                          }
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2573 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2574 { std::get<4 /* Stateless */>(id_2573) };
                          ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_2575 { std::get<4 /* SL3 */>(id_2574) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2576 { std::get<1>(id_2575) };
                          Size id_2577 { fun1486(id_2576) };
                          Size id_2578 { Size(choose_res_2552 + id_2577) };
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2579 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2580 { std::get<4 /* Stateless */>(id_2579) };
                          ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_2581 { std::get<4 /* SL3 */>(id_2580) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2582 { std::get<2>(id_2581) };
                          Size id_2583 { fun1486(id_2582) };
                          Size id_2584 { Size(id_2578 + id_2583) };
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2585 { (*p_0).text };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_2586 { std::get<4 /* Stateless */>(id_2585) };
                          ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_2587 { std::get<4 /* SL3 */>(id_2586) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2588 { std::get<3>(id_2587) };
                          Size id_2589 { fun1486(id_2588) };
                          Size id_2590 { Size(id_2584 + id_2589) };
                          choose_res_2385 = id_2590;
                        }
                        choose_res_2273 = choose_res_2385;
                      }
                      choose_res_1966 = choose_res_2273;
                    }
                    choose_res_1789 = choose_res_1966;
                  }
                  choose_res_1783 = choose_res_1789;
                } else {
                  uint16_t id_2591 { 5 };
                  bool id_2592 { bool(id_2591 == label2_1050) };
                  Size choose_res_2593;
                  if (id_2592) {
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2594 { (*p_0).text };
                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2595 { std::get<5 /* Stateful */>(id_2594) };
                    std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_2596 { id_2595.lifespan };
                    bool id_2597 { !(id_2596.has_value ()) };
                    Size choose_res_2598;
                    if (id_2597) {
                      Size id_2599 { 2UL };
                      Size id_2600 { Size(sz_1049 + id_2599) };
                      Size id_2601 { 1UL };
                      Size id_2602 { Size(id_2600 + id_2601) };
                      choose_res_2598 = id_2602;
                    } else {
                      uint16_t id_2603 { 0 };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2604 { (*p_0).text };
                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2605 { std::get<5 /* Stateful */>(id_2604) };
                      std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_2606 { id_2605.lifespan };
                      ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042 id_2607 { id_2606.value() };
                      uint16_t id_2608 { uint16_t(id_2607) };
                      bool id_2609 { bool(id_2603 == id_2608) };
                      Size choose_res_2610;
                      if (id_2609) {
                        Size id_2611 { 2UL };
                        Size id_2612 { Size(sz_1049 + id_2611) };
                        Size id_2613 { 2UL };
                        Size id_2614 { Size(id_2612 + id_2613) };
                        choose_res_2610 = id_2614;
                      } else {
                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2615 { (*p_0).text };
                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2616 { std::get<5 /* Stateful */>(id_2615) };
                        std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_2617 { id_2616.lifespan };
                        ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042 id_2618 { id_2617.value() };
                        uint16_t id_2619 { uint16_t(id_2618) };
                        uint16_t id_2620 { 1 };
                        bool id_2621 { bool(id_2619 == id_2620) };
                        Void id_2622 { ((void)(assert(id_2621)), ::dessser::Void()) };
                        (void)id_2622;
                        Size id_2623 { 2UL };
                        Size id_2624 { Size(sz_1049 + id_2623) };
                        Size id_2625 { 2UL };
                        Size id_2626 { Size(id_2624 + id_2625) };
                        choose_res_2610 = id_2626;
                      }
                      Size id_2627 { 1UL };
                      Size id_2628 { Size(choose_res_2610 + id_2627) };
                      choose_res_2598 = id_2628;
                    }
                    Size id_2629 { 1UL };
                    Size id_2630 { Size(choose_res_2598 + id_2629) };
                    Size let_res_2631;
                    {
                      Size sz_1057 { id_2630 };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2632 { (*p_0).text };
                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2633 { std::get<5 /* Stateful */>(id_2632) };
                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2634 { id_2633.operation };
                      uint16_t id_2635 { uint16_t(id_2634.index()) };
                      Size let_res_2636;
                      {
                        uint16_t label2_1058 { id_2635 };
                        uint16_t id_2637 { 0 };
                        bool id_2638 { bool(id_2637 == label2_1058) };
                        Size choose_res_2639;
                        if (id_2638) {
                          Size id_2640 { 2UL };
                          Size id_2641 { Size(sz_1057 + id_2640) };
                          Size let_res_2642;
                          {
                            Size sz_1107 { id_2641 };
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2643 { (*p_0).text };
                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2644 { std::get<5 /* Stateful */>(id_2643) };
                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2645 { id_2644.operation };
                            ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_2646 { std::get<0 /* SF1 */>(id_2645) };
                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_2647 { std::get<0>(id_2646) };
                            uint16_t id_2648 { uint16_t(id_2647.index()) };
                            Size let_res_2649;
                            {
                              uint16_t label2_1108 { id_2648 };
                              uint16_t id_2650 { 0 };
                              bool id_2651 { bool(id_2650 == label2_1108) };
                              Size choose_res_2652;
                              if (id_2651) {
                                Size id_2653 { 2UL };
                                Size id_2654 { Size(sz_1107 + id_2653) };
                                choose_res_2652 = id_2654;
                              } else {
                                uint16_t id_2655 { 1 };
                                bool id_2656 { bool(id_2655 == label2_1108) };
                                Size choose_res_2657;
                                if (id_2656) {
                                  Size id_2658 { 2UL };
                                  Size id_2659 { Size(sz_1107 + id_2658) };
                                  choose_res_2657 = id_2659;
                                } else {
                                  uint16_t id_2660 { 2 };
                                  bool id_2661 { bool(id_2660 == label2_1108) };
                                  Size choose_res_2662;
                                  if (id_2661) {
                                    Size id_2663 { 2UL };
                                    Size id_2664 { Size(sz_1107 + id_2663) };
                                    choose_res_2662 = id_2664;
                                  } else {
                                    uint16_t id_2665 { 3 };
                                    bool id_2666 { bool(id_2665 == label2_1108) };
                                    Size choose_res_2667;
                                    if (id_2666) {
                                      Size id_2668 { 2UL };
                                      Size id_2669 { Size(sz_1107 + id_2668) };
                                      choose_res_2667 = id_2669;
                                    } else {
                                      uint16_t id_2670 { 4 };
                                      bool id_2671 { bool(id_2670 == label2_1108) };
                                      Size choose_res_2672;
                                      if (id_2671) {
                                        Size id_2673 { 2UL };
                                        Size id_2674 { Size(sz_1107 + id_2673) };
                                        choose_res_2672 = id_2674;
                                      } else {
                                        uint16_t id_2675 { 5 };
                                        bool id_2676 { bool(id_2675 == label2_1108) };
                                        Size choose_res_2677;
                                        if (id_2676) {
                                          Size id_2678 { 2UL };
                                          Size id_2679 { Size(sz_1107 + id_2678) };
                                          choose_res_2677 = id_2679;
                                        } else {
                                          uint16_t id_2680 { 6 };
                                          bool id_2681 { bool(id_2680 == label2_1108) };
                                          Size choose_res_2682;
                                          if (id_2681) {
                                            Size id_2683 { 2UL };
                                            Size id_2684 { Size(sz_1107 + id_2683) };
                                            choose_res_2682 = id_2684;
                                          } else {
                                            uint16_t id_2685 { 7 };
                                            bool id_2686 { bool(id_2685 == label2_1108) };
                                            Size choose_res_2687;
                                            if (id_2686) {
                                              Size id_2688 { 2UL };
                                              Size id_2689 { Size(sz_1107 + id_2688) };
                                              choose_res_2687 = id_2689;
                                            } else {
                                              uint16_t id_2690 { 8 };
                                              bool id_2691 { bool(id_2690 == label2_1108) };
                                              Size choose_res_2692;
                                              if (id_2691) {
                                                Size id_2693 { 2UL };
                                                Size id_2694 { Size(sz_1107 + id_2693) };
                                                choose_res_2692 = id_2694;
                                              } else {
                                                uint16_t id_2695 { 9 };
                                                bool id_2696 { bool(id_2695 == label2_1108) };
                                                Size choose_res_2697;
                                                if (id_2696) {
                                                  Size id_2698 { 2UL };
                                                  Size id_2699 { Size(sz_1107 + id_2698) };
                                                  choose_res_2697 = id_2699;
                                                } else {
                                                  uint16_t id_2700 { 10 };
                                                  bool id_2701 { bool(id_2700 == label2_1108) };
                                                  Size choose_res_2702;
                                                  if (id_2701) {
                                                    Size id_2703 { 2UL };
                                                    Size id_2704 { Size(sz_1107 + id_2703) };
                                                    choose_res_2702 = id_2704;
                                                  } else {
                                                    uint16_t id_2705 { 11 };
                                                    bool id_2706 { bool(id_2705 == label2_1108) };
                                                    Size choose_res_2707;
                                                    if (id_2706) {
                                                      Size id_2708 { 2UL };
                                                      Size id_2709 { Size(sz_1107 + id_2708) };
                                                      Size id_2710 { 8UL };
                                                      Size id_2711 { Size(id_2709 + id_2710) };
                                                      Size id_2712 { 8UL };
                                                      Size id_2713 { Size(id_2711 + id_2712) };
                                                      Size id_2714 { 4UL };
                                                      Size id_2715 { Size(id_2713 + id_2714) };
                                                      choose_res_2707 = id_2715;
                                                    } else {
                                                      uint16_t id_2716 { 12 };
                                                      bool id_2717 { bool(id_2716 == label2_1108) };
                                                      Size choose_res_2718;
                                                      if (id_2717) {
                                                        Size id_2719 { 2UL };
                                                        Size id_2720 { Size(sz_1107 + id_2719) };
                                                        choose_res_2718 = id_2720;
                                                      } else {
                                                        uint16_t id_2721 { 13 };
                                                        bool id_2722 { bool(id_2721 == label2_1108) };
                                                        Size choose_res_2723;
                                                        if (id_2722) {
                                                          Size id_2724 { 2UL };
                                                          Size id_2725 { Size(sz_1107 + id_2724) };
                                                          choose_res_2723 = id_2725;
                                                        } else {
                                                          uint16_t id_2726 { 14 };
                                                          bool id_2727 { bool(label2_1108 == id_2726) };
                                                          Void id_2728 { ((void)(assert(id_2727)), ::dessser::Void()) };
                                                          (void)id_2728;
                                                          Size id_2729 { 2UL };
                                                          Size id_2730 { Size(sz_1107 + id_2729) };
                                                          choose_res_2723 = id_2730;
                                                        }
                                                        choose_res_2718 = choose_res_2723;
                                                      }
                                                      choose_res_2707 = choose_res_2718;
                                                    }
                                                    choose_res_2702 = choose_res_2707;
                                                  }
                                                  choose_res_2697 = choose_res_2702;
                                                }
                                                choose_res_2692 = choose_res_2697;
                                              }
                                              choose_res_2687 = choose_res_2692;
                                            }
                                            choose_res_2682 = choose_res_2687;
                                          }
                                          choose_res_2677 = choose_res_2682;
                                        }
                                        choose_res_2672 = choose_res_2677;
                                      }
                                      choose_res_2667 = choose_res_2672;
                                    }
                                    choose_res_2662 = choose_res_2667;
                                  }
                                  choose_res_2657 = choose_res_2662;
                                }
                                choose_res_2652 = choose_res_2657;
                              }
                              let_res_2649 = choose_res_2652;
                            }
                            let_res_2642 = let_res_2649;
                          }
                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2731 { (*p_0).text };
                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2732 { std::get<5 /* Stateful */>(id_2731) };
                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2733 { id_2732.operation };
                          ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_2734 { std::get<0 /* SF1 */>(id_2733) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2735 { std::get<1>(id_2734) };
                          Size id_2736 { fun1486(id_2735) };
                          Size id_2737 { Size(let_res_2642 + id_2736) };
                          choose_res_2639 = id_2737;
                        } else {
                          uint16_t id_2738 { 1 };
                          bool id_2739 { bool(id_2738 == label2_1058) };
                          Size choose_res_2740;
                          if (id_2739) {
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2741 { (*p_0).text };
                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2742 { std::get<5 /* Stateful */>(id_2741) };
                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2743 { id_2742.operation };
                            ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78 id_2744 { std::get<1 /* SF2 */>(id_2743) };
                            ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d id_2745 { std::get<0>(id_2744) };
                            uint16_t id_2746 { uint16_t(id_2745) };
                            Size let_res_2747;
                            {
                              uint16_t label2_1104 { id_2746 };
                              uint16_t id_2748 { 0 };
                              bool id_2749 { bool(id_2748 == label2_1104) };
                              Size choose_res_2750;
                              if (id_2749) {
                                Size id_2751 { 2UL };
                                Size id_2752 { Size(sz_1057 + id_2751) };
                                Size id_2753 { 2UL };
                                Size id_2754 { Size(id_2752 + id_2753) };
                                choose_res_2750 = id_2754;
                              } else {
                                uint16_t id_2755 { 1 };
                                bool id_2756 { bool(id_2755 == label2_1104) };
                                Size choose_res_2757;
                                if (id_2756) {
                                  Size id_2758 { 2UL };
                                  Size id_2759 { Size(sz_1057 + id_2758) };
                                  Size id_2760 { 2UL };
                                  Size id_2761 { Size(id_2759 + id_2760) };
                                  choose_res_2757 = id_2761;
                                } else {
                                  uint16_t id_2762 { 2 };
                                  bool id_2763 { bool(id_2762 == label2_1104) };
                                  Size choose_res_2764;
                                  if (id_2763) {
                                    Size id_2765 { 2UL };
                                    Size id_2766 { Size(sz_1057 + id_2765) };
                                    Size id_2767 { 2UL };
                                    Size id_2768 { Size(id_2766 + id_2767) };
                                    choose_res_2764 = id_2768;
                                  } else {
                                    uint16_t id_2769 { 3 };
                                    bool id_2770 { bool(label2_1104 == id_2769) };
                                    Void id_2771 { ((void)(assert(id_2770)), ::dessser::Void()) };
                                    (void)id_2771;
                                    Size id_2772 { 2UL };
                                    Size id_2773 { Size(sz_1057 + id_2772) };
                                    Size id_2774 { 2UL };
                                    Size id_2775 { Size(id_2773 + id_2774) };
                                    choose_res_2764 = id_2775;
                                  }
                                  choose_res_2757 = choose_res_2764;
                                }
                                choose_res_2750 = choose_res_2757;
                              }
                              let_res_2747 = choose_res_2750;
                            }
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2776 { (*p_0).text };
                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2777 { std::get<5 /* Stateful */>(id_2776) };
                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2778 { id_2777.operation };
                            ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78 id_2779 { std::get<1 /* SF2 */>(id_2778) };
                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_2780 { std::get<1>(id_2779) };
                            Size id_2781 { fun1486(id_2780) };
                            Size id_2782 { Size(let_res_2747 + id_2781) };
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2783 { (*p_0).text };
                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2784 { std::get<5 /* Stateful */>(id_2783) };
                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2785 { id_2784.operation };
                            ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78 id_2786 { std::get<1 /* SF2 */>(id_2785) };
                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_2787 { std::get<2>(id_2786) };
                            Size id_2788 { fun1486(id_2787) };
                            Size id_2789 { Size(id_2782 + id_2788) };
                            choose_res_2740 = id_2789;
                          } else {
                            uint16_t id_2790 { 2 };
                            bool id_2791 { bool(id_2790 == label2_1058) };
                            Size choose_res_2792;
                            if (id_2791) {
                              uint16_t id_2793 { 0 };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2794 { (*p_0).text };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2795 { std::get<5 /* Stateful */>(id_2794) };
                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2796 { id_2795.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2797 { std::get<2 /* SF3 */>(id_2796) };
                              ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_2798 { std::get<0>(id_2797) };
                              uint16_t id_2799 { uint16_t(id_2798.index()) };
                              bool id_2800 { bool(id_2793 == id_2799) };
                              Size choose_res_2801;
                              if (id_2800) {
                                Size id_2802 { 2UL };
                                Size id_2803 { Size(sz_1057 + id_2802) };
                                Size id_2804 { 2UL };
                                Size id_2805 { Size(id_2803 + id_2804) };
                                choose_res_2801 = id_2805;
                              } else {
                                uint16_t id_2806 { 1 };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2807 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2808 { std::get<5 /* Stateful */>(id_2807) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2809 { id_2808.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2810 { std::get<2 /* SF3 */>(id_2809) };
                                ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_2811 { std::get<0>(id_2810) };
                                uint16_t id_2812 { uint16_t(id_2811.index()) };
                                bool id_2813 { bool(id_2806 == id_2812) };
                                Size choose_res_2814;
                                if (id_2813) {
                                  Size id_2815 { 2UL };
                                  Size id_2816 { Size(sz_1057 + id_2815) };
                                  Size id_2817 { 2UL };
                                  Size id_2818 { Size(id_2816 + id_2817) };
                                  choose_res_2814 = id_2818;
                                } else {
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2819 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2820 { std::get<5 /* Stateful */>(id_2819) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2821 { id_2820.operation };
                                  ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2822 { std::get<2 /* SF3 */>(id_2821) };
                                  ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_2823 { std::get<0>(id_2822) };
                                  uint16_t id_2824 { uint16_t(id_2823.index()) };
                                  uint16_t id_2825 { 2 };
                                  bool id_2826 { bool(id_2824 == id_2825) };
                                  Void id_2827 { ((void)(assert(id_2826)), ::dessser::Void()) };
                                  (void)id_2827;
                                  Size id_2828 { 2UL };
                                  Size id_2829 { Size(sz_1057 + id_2828) };
                                  Size id_2830 { 2UL };
                                  Size id_2831 { Size(id_2829 + id_2830) };
                                  Size id_2832 { 1UL };
                                  Size id_2833 { Size(id_2831 + id_2832) };
                                  choose_res_2814 = id_2833;
                                }
                                choose_res_2801 = choose_res_2814;
                              }
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2834 { (*p_0).text };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2835 { std::get<5 /* Stateful */>(id_2834) };
                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2836 { id_2835.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2837 { std::get<2 /* SF3 */>(id_2836) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_2838 { std::get<1>(id_2837) };
                              Size id_2839 { fun1486(id_2838) };
                              Size id_2840 { Size(choose_res_2801 + id_2839) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2841 { (*p_0).text };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2842 { std::get<5 /* Stateful */>(id_2841) };
                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2843 { id_2842.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2844 { std::get<2 /* SF3 */>(id_2843) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_2845 { std::get<2>(id_2844) };
                              Size id_2846 { fun1486(id_2845) };
                              Size id_2847 { Size(id_2840 + id_2846) };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2848 { (*p_0).text };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2849 { std::get<5 /* Stateful */>(id_2848) };
                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2850 { id_2849.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2851 { std::get<2 /* SF3 */>(id_2850) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_2852 { std::get<3>(id_2851) };
                              Size id_2853 { fun1486(id_2852) };
                              Size id_2854 { Size(id_2847 + id_2853) };
                              choose_res_2792 = id_2854;
                            } else {
                              uint16_t id_2855 { 3 };
                              bool id_2856 { bool(id_2855 == label2_1058) };
                              Size choose_res_2857;
                              if (id_2856) {
                                uint16_t id_2858 { 0 };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2859 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2860 { std::get<5 /* Stateful */>(id_2859) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2861 { id_2860.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2862 { std::get<3 /* SF4 */>(id_2861) };
                                ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_2863 { std::get<0>(id_2862) };
                                uint16_t id_2864 { uint16_t(id_2863.index()) };
                                bool id_2865 { bool(id_2858 == id_2864) };
                                Size choose_res_2866;
                                if (id_2865) {
                                  Size id_2867 { 2UL };
                                  Size id_2868 { Size(sz_1057 + id_2867) };
                                  Size id_2869 { 2UL };
                                  Size id_2870 { Size(id_2868 + id_2869) };
                                  choose_res_2866 = id_2870;
                                } else {
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2871 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2872 { std::get<5 /* Stateful */>(id_2871) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2873 { id_2872.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2874 { std::get<3 /* SF4 */>(id_2873) };
                                  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_2875 { std::get<0>(id_2874) };
                                  uint16_t id_2876 { uint16_t(id_2875.index()) };
                                  uint16_t id_2877 { 1 };
                                  bool id_2878 { bool(id_2876 == id_2877) };
                                  Void id_2879 { ((void)(assert(id_2878)), ::dessser::Void()) };
                                  (void)id_2879;
                                  Size id_2880 { 2UL };
                                  Size id_2881 { Size(sz_1057 + id_2880) };
                                  Size id_2882 { 2UL };
                                  Size id_2883 { Size(id_2881 + id_2882) };
                                  Size id_2884 { 1UL };
                                  Size id_2885 { Size(id_2883 + id_2884) };
                                  choose_res_2866 = id_2885;
                                }
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2886 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2887 { std::get<5 /* Stateful */>(id_2886) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2888 { id_2887.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2889 { std::get<3 /* SF4 */>(id_2888) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2890 { std::get<1>(id_2889) };
                                Size id_2891 { fun1486(id_2890) };
                                Size id_2892 { Size(choose_res_2866 + id_2891) };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2893 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2894 { std::get<5 /* Stateful */>(id_2893) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2895 { id_2894.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2896 { std::get<3 /* SF4 */>(id_2895) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2897 { std::get<2>(id_2896) };
                                Size id_2898 { fun1486(id_2897) };
                                Size id_2899 { Size(id_2892 + id_2898) };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2900 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2901 { std::get<5 /* Stateful */>(id_2900) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2902 { id_2901.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2903 { std::get<3 /* SF4 */>(id_2902) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2904 { std::get<3>(id_2903) };
                                Size id_2905 { fun1486(id_2904) };
                                Size id_2906 { Size(id_2899 + id_2905) };
                                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2907 { (*p_0).text };
                                ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2908 { std::get<5 /* Stateful */>(id_2907) };
                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2909 { id_2908.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2910 { std::get<3 /* SF4 */>(id_2909) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2911 { std::get<4>(id_2910) };
                                Size id_2912 { fun1486(id_2911) };
                                Size id_2913 { Size(id_2906 + id_2912) };
                                choose_res_2857 = id_2913;
                              } else {
                                uint16_t id_2914 { 4 };
                                bool id_2915 { bool(id_2914 == label2_1058) };
                                Size choose_res_2916;
                                if (id_2915) {
                                  uint16_t id_2917 { 0 };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2918 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2919 { std::get<5 /* Stateful */>(id_2918) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2920 { id_2919.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2921 { std::get<4 /* SF4s */>(id_2920) };
                                  ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_2922 { std::get<0>(id_2921) };
                                  uint16_t id_2923 { uint16_t(id_2922.index()) };
                                  bool id_2924 { bool(id_2917 == id_2923) };
                                  Size choose_res_2925;
                                  if (id_2924) {
                                    Size id_2926 { 2UL };
                                    Size id_2927 { Size(sz_1057 + id_2926) };
                                    Size id_2928 { 2UL };
                                    Size id_2929 { Size(id_2927 + id_2928) };
                                    choose_res_2925 = id_2929;
                                  } else {
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2930 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2931 { std::get<5 /* Stateful */>(id_2930) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2932 { id_2931.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2933 { std::get<4 /* SF4s */>(id_2932) };
                                    ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_2934 { std::get<0>(id_2933) };
                                    uint16_t id_2935 { uint16_t(id_2934.index()) };
                                    uint16_t id_2936 { 1 };
                                    bool id_2937 { bool(id_2935 == id_2936) };
                                    Void id_2938 { ((void)(assert(id_2937)), ::dessser::Void()) };
                                    (void)id_2938;
                                    Size id_2939 { 2UL };
                                    Size id_2940 { Size(sz_1057 + id_2939) };
                                    Size id_2941 { 2UL };
                                    Size id_2942 { Size(id_2940 + id_2941) };
                                    Size id_2943 { 1UL };
                                    Size id_2944 { Size(id_2942 + id_2943) };
                                    Size id_2945 { 1UL };
                                    Size id_2946 { Size(id_2944 + id_2945) };
                                    choose_res_2925 = id_2946;
                                  }
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2947 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2948 { std::get<5 /* Stateful */>(id_2947) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2949 { id_2948.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2950 { std::get<4 /* SF4s */>(id_2949) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2951 { std::get<1>(id_2950) };
                                  Size id_2952 { fun1486(id_2951) };
                                  Size id_2953 { Size(choose_res_2925 + id_2952) };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2954 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2955 { std::get<5 /* Stateful */>(id_2954) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2956 { id_2955.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2957 { std::get<4 /* SF4s */>(id_2956) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2958 { std::get<2>(id_2957) };
                                  Size id_2959 { fun1486(id_2958) };
                                  Size id_2960 { Size(id_2953 + id_2959) };
                                  ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2961 { (*p_0).text };
                                  ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2962 { std::get<5 /* Stateful */>(id_2961) };
                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2963 { id_2962.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2964 { std::get<4 /* SF4s */>(id_2963) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2965 { std::get<3>(id_2964) };
                                  Size id_2966 { fun1486(id_2965) };
                                  Size id_2967 { Size(id_2960 + id_2966) };
                                  Size let_res_2968;
                                  {
                                    Size sz_1087 { id_2967 };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_2969 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_2970 { std::get<5 /* Stateful */>(id_2969) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_2971 { id_2970.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2972 { std::get<4 /* SF4s */>(id_2971) };
                                    Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2973 { std::get<4>(id_2972) };
                                    uint32_t id_2974 { id_2973.size() };
                                    Vec<1, uint32_t> id_2975 {  id_2974  };
                                    Size let_res_2976;
                                    {
                                      Vec<1, uint32_t> n_ref_1088 { id_2975 };
                                      uint32_t id_2977 { 1U };
                                      Vec<1, uint32_t> id_2978 {  id_2977  };
                                      Size let_res_2979;
                                      {
                                        Vec<1, uint32_t> lebsz_ref_1089 { id_2978 };
                                        bool while_flag_2980 { true };
                                        do {
                                          uint8_t id_2981 { 0 };
                                          uint32_t id_2982 { n_ref_1088[id_2981] };
                                          uint8_t id_2983 { 0 };
                                          uint32_t id_2984 { lebsz_ref_1089[id_2983] };
                                          uint8_t id_2985 { 7 };
                                          uint32_t id_2986 { uint32_t(id_2984 << id_2985) };
                                          bool id_2987 { bool(id_2982 >= id_2986) };
                                          while_flag_2980 = id_2987;
                                          if (while_flag_2980) {
                                            uint8_t id_2988 { 0 };
                                            uint8_t id_2989 { 0 };
                                            uint32_t id_2990 { lebsz_ref_1089[id_2989] };
                                            uint32_t id_2991 { 1U };
                                            uint32_t id_2992 { uint32_t(id_2990 + id_2991) };
                                            Void id_2993 { ((void)(lebsz_ref_1089[id_2988] = id_2992), ::dessser::Void()) };
                                            (void)id_2993;
                                          }
                                        } while (while_flag_2980);
                                        (void)::dessser::Void();
                                        uint8_t id_2994 { 0 };
                                        uint32_t id_2995 { lebsz_ref_1089[id_2994] };
                                        Size id_2996 { Size(id_2995) };
                                        let_res_2979 = id_2996;
                                      }
                                      let_res_2976 = let_res_2979;
                                    }
                                    Size id_2997 { Size(sz_1087 + let_res_2976) };
                                    Vec<1, Size> id_2998 {  id_2997  };
                                    Size let_res_2999;
                                    {
                                      Vec<1, Size> sz_ref_1090 { id_2998 };
                                      int32_t id_3000 { 0L };
                                      Vec<1, int32_t> id_3001 {  id_3000  };
                                      {
                                        Vec<1, int32_t> repeat_n_1091 { id_3001 };
                                        bool while_flag_3002 { true };
                                        do {
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3003 { (*p_0).text };
                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3004 { std::get<5 /* Stateful */>(id_3003) };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3005 { id_3004.operation };
                                          ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_3006 { std::get<4 /* SF4s */>(id_3005) };
                                          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3007 { std::get<4>(id_3006) };
                                          uint32_t id_3008 { id_3007.size() };
                                          int32_t id_3009 { int32_t(id_3008) };
                                          uint8_t id_3010 { 0 };
                                          int32_t id_3011 { repeat_n_1091[id_3010] };
                                          bool id_3012 { bool(id_3009 > id_3011) };
                                          while_flag_3002 = id_3012;
                                          if (while_flag_3002) {
                                            uint8_t id_3013 { 0 };
                                            uint8_t id_3014 { 0 };
                                            Size id_3015 { sz_ref_1090[id_3014] };
                                            uint8_t id_3016 { 0 };
                                            int32_t id_3017 { repeat_n_1091[id_3016] };
                                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3018 { (*p_0).text };
                                            ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3019 { std::get<5 /* Stateful */>(id_3018) };
                                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3020 { id_3019.operation };
                                            ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_3021 { std::get<4 /* SF4s */>(id_3020) };
                                            Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3022 { std::get<4>(id_3021) };
                                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_3023 { id_3022[id_3017] };
                                            Size id_3024 { fun1486(id_3023) };
                                            Size id_3025 { Size(id_3015 + id_3024) };
                                            Void id_3026 { ((void)(sz_ref_1090[id_3013] = id_3025), ::dessser::Void()) };
                                            (void)id_3026;
                                            uint8_t id_3027 { 0 };
                                            uint8_t id_3028 { 0 };
                                            int32_t id_3029 { repeat_n_1091[id_3028] };
                                            int32_t id_3030 { 1L };
                                            int32_t id_3031 { int32_t(id_3029 + id_3030) };
                                            Void id_3032 { ((void)(repeat_n_1091[id_3027] = id_3031), ::dessser::Void()) };
                                            (void)id_3032;
                                            (void)id_3032;
                                          }
                                        } while (while_flag_3002);
                                        (void)::dessser::Void();
                                      }
                                      (void)::dessser::Void();
                                      uint8_t id_3033 { 0 };
                                      Size id_3034 { sz_ref_1090[id_3033] };
                                      let_res_2999 = id_3034;
                                    }
                                    let_res_2968 = let_res_2999;
                                  }
                                  choose_res_2916 = let_res_2968;
                                } else {
                                  uint16_t id_3035 { 5 };
                                  bool id_3036 { bool(id_3035 == label2_1058) };
                                  Size choose_res_3037;
                                  if (id_3036) {
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3038 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3039 { std::get<5 /* Stateful */>(id_3038) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3040 { id_3039.operation };
                                    ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_3041 { std::get<5 /* SF6 */>(id_3040) };
                                    ::dessser::gen::raql_expr::t7ca40b2395ae0931861f2a365208f839 id_3042 { std::get<0>(id_3041) };
                                    uint16_t id_3043 { uint16_t(id_3042) };
                                    uint16_t id_3044 { 0 };
                                    bool id_3045 { bool(id_3043 == id_3044) };
                                    Void id_3046 { ((void)(assert(id_3045)), ::dessser::Void()) };
                                    (void)id_3046;
                                    Size id_3047 { 2UL };
                                    Size id_3048 { Size(sz_1057 + id_3047) };
                                    Size id_3049 { 2UL };
                                    Size id_3050 { Size(id_3048 + id_3049) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3051 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3052 { std::get<5 /* Stateful */>(id_3051) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3053 { id_3052.operation };
                                    ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_3054 { std::get<5 /* SF6 */>(id_3053) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3055 { std::get<1>(id_3054) };
                                    Size id_3056 { fun1486(id_3055) };
                                    Size id_3057 { Size(id_3050 + id_3056) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3058 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3059 { std::get<5 /* Stateful */>(id_3058) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3060 { id_3059.operation };
                                    ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_3061 { std::get<5 /* SF6 */>(id_3060) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3062 { std::get<2>(id_3061) };
                                    Size id_3063 { fun1486(id_3062) };
                                    Size id_3064 { Size(id_3057 + id_3063) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3065 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3066 { std::get<5 /* Stateful */>(id_3065) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3067 { id_3066.operation };
                                    ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_3068 { std::get<5 /* SF6 */>(id_3067) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3069 { std::get<3>(id_3068) };
                                    Size id_3070 { fun1486(id_3069) };
                                    Size id_3071 { Size(id_3064 + id_3070) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3072 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3073 { std::get<5 /* Stateful */>(id_3072) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3074 { id_3073.operation };
                                    ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_3075 { std::get<5 /* SF6 */>(id_3074) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3076 { std::get<4>(id_3075) };
                                    Size id_3077 { fun1486(id_3076) };
                                    Size id_3078 { Size(id_3071 + id_3077) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3079 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3080 { std::get<5 /* Stateful */>(id_3079) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3081 { id_3080.operation };
                                    ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_3082 { std::get<5 /* SF6 */>(id_3081) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3083 { std::get<5>(id_3082) };
                                    Size id_3084 { fun1486(id_3083) };
                                    Size id_3085 { Size(id_3078 + id_3084) };
                                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3086 { (*p_0).text };
                                    ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3087 { std::get<5 /* Stateful */>(id_3086) };
                                    ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3088 { id_3087.operation };
                                    ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_3089 { std::get<5 /* SF6 */>(id_3088) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3090 { std::get<6>(id_3089) };
                                    Size id_3091 { fun1486(id_3090) };
                                    Size id_3092 { Size(id_3085 + id_3091) };
                                    choose_res_3037 = id_3092;
                                  } else {
                                    uint16_t id_3093 { 6 };
                                    bool id_3094 { bool(id_3093 == label2_1058) };
                                    Size choose_res_3095;
                                    if (id_3094) {
                                      Size id_3096 { 2UL };
                                      Size id_3097 { Size(sz_1057 + id_3096) };
                                      auto fun3098 { dessser::gen::raql_top_output::sersize_of_row_binary };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3099 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3100 { std::get<5 /* Stateful */>(id_3099) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3101 { id_3100.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3102 { std::get<6 /* Top */>(id_3101) };
                                      dessser::gen::raql_top_output::t_ext id_3103 { id_3102.output };
                                      Size id_3104 { fun3098(id_3103) };
                                      Size id_3105 { Size(id_3097 + id_3104) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3106 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3107 { std::get<5 /* Stateful */>(id_3106) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3108 { id_3107.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3109 { std::get<6 /* Top */>(id_3108) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3110 { id_3109.size };
                                      Size id_3111 { fun1486(id_3110) };
                                      Size id_3112 { Size(id_3105 + id_3111) };
                                      Size let_res_3113;
                                      {
                                        Size sz_1066 { id_3112 };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3114 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3115 { std::get<5 /* Stateful */>(id_3114) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3116 { id_3115.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3117 { std::get<6 /* Top */>(id_3116) };
                                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3118 { id_3117.max_size };
                                        bool id_3119 { !(id_3118.has_value ()) };
                                        Size choose_res_3120;
                                        if (id_3119) {
                                          Size id_3121 { 1UL };
                                          Size id_3122 { Size(sz_1066 + id_3121) };
                                          choose_res_3120 = id_3122;
                                        } else {
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3123 { (*p_0).text };
                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3124 { std::get<5 /* Stateful */>(id_3123) };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3125 { id_3124.operation };
                                          ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3126 { std::get<6 /* Top */>(id_3125) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3127 { id_3126.max_size };
                                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_3128 { id_3127.value() };
                                          Size id_3129 { fun1486(id_3128) };
                                          Size id_3130 { Size(sz_1066 + id_3129) };
                                          Size id_3131 { 1UL };
                                          Size id_3132 { Size(id_3130 + id_3131) };
                                          choose_res_3120 = id_3132;
                                        }
                                        let_res_3113 = choose_res_3120;
                                      }
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3133 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3134 { std::get<5 /* Stateful */>(id_3133) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3135 { id_3134.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3136 { std::get<6 /* Top */>(id_3135) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3137 { id_3136.Top_what };
                                      Size id_3138 { fun1486(id_3137) };
                                      Size id_3139 { Size(let_res_3113 + id_3138) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3140 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3141 { std::get<5 /* Stateful */>(id_3140) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3142 { id_3141.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3143 { std::get<6 /* Top */>(id_3142) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3144 { id_3143.by };
                                      Size id_3145 { fun1486(id_3144) };
                                      Size id_3146 { Size(id_3139 + id_3145) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3147 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3148 { std::get<5 /* Stateful */>(id_3147) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3149 { id_3148.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3150 { std::get<6 /* Top */>(id_3149) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3151 { id_3150.Top_time };
                                      Size id_3152 { fun1486(id_3151) };
                                      Size id_3153 { Size(id_3146 + id_3152) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3154 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3155 { std::get<5 /* Stateful */>(id_3154) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3156 { id_3155.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3157 { std::get<6 /* Top */>(id_3156) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3158 { id_3157.duration };
                                      Size id_3159 { fun1486(id_3158) };
                                      Size id_3160 { Size(id_3153 + id_3159) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3161 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3162 { std::get<5 /* Stateful */>(id_3161) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3163 { id_3162.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3164 { std::get<6 /* Top */>(id_3163) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3165 { id_3164.sigmas };
                                      Size id_3166 { fun1486(id_3165) };
                                      Size id_3167 { Size(id_3160 + id_3166) };
                                      choose_res_3095 = id_3167;
                                    } else {
                                      uint16_t id_3168 { 7 };
                                      bool id_3169 { bool(label2_1058 == id_3168) };
                                      Void id_3170 { ((void)(assert(id_3169)), ::dessser::Void()) };
                                      (void)id_3170;
                                      Size id_3171 { 2UL };
                                      Size id_3172 { Size(sz_1057 + id_3171) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3173 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3174 { std::get<5 /* Stateful */>(id_3173) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3175 { id_3174.operation };
                                      ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3176 { std::get<7 /* Past */>(id_3175) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3177 { id_3176.what };
                                      Size id_3178 { fun1486(id_3177) };
                                      Size id_3179 { Size(id_3172 + id_3178) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3180 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3181 { std::get<5 /* Stateful */>(id_3180) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3182 { id_3181.operation };
                                      ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3183 { std::get<7 /* Past */>(id_3182) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3184 { id_3183.time };
                                      Size id_3185 { fun1486(id_3184) };
                                      Size id_3186 { Size(id_3179 + id_3185) };
                                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3187 { (*p_0).text };
                                      ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3188 { std::get<5 /* Stateful */>(id_3187) };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3189 { id_3188.operation };
                                      ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3190 { std::get<7 /* Past */>(id_3189) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3191 { id_3190.max_age };
                                      Size id_3192 { fun1486(id_3191) };
                                      Size id_3193 { Size(id_3186 + id_3192) };
                                      Size id_3194 { 1UL };
                                      Size id_3195 { Size(id_3193 + id_3194) };
                                      Size let_res_3196;
                                      {
                                        Size sz_1063 { id_3195 };
                                        ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3197 { (*p_0).text };
                                        ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3198 { std::get<5 /* Stateful */>(id_3197) };
                                        ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3199 { id_3198.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3200 { std::get<7 /* Past */>(id_3199) };
                                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3201 { id_3200.sample_size };
                                        bool id_3202 { !(id_3201.has_value ()) };
                                        Size choose_res_3203;
                                        if (id_3202) {
                                          Size id_3204 { 1UL };
                                          Size id_3205 { Size(sz_1063 + id_3204) };
                                          choose_res_3203 = id_3205;
                                        } else {
                                          ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3206 { (*p_0).text };
                                          ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_3207 { std::get<5 /* Stateful */>(id_3206) };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_3208 { id_3207.operation };
                                          ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3209 { std::get<7 /* Past */>(id_3208) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3210 { id_3209.sample_size };
                                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_3211 { id_3210.value() };
                                          Size id_3212 { fun1486(id_3211) };
                                          Size id_3213 { Size(sz_1063 + id_3212) };
                                          Size id_3214 { 1UL };
                                          Size id_3215 { Size(id_3213 + id_3214) };
                                          choose_res_3203 = id_3215;
                                        }
                                        let_res_3196 = choose_res_3203;
                                      }
                                      choose_res_3095 = let_res_3196;
                                    }
                                    choose_res_3037 = choose_res_3095;
                                  }
                                  choose_res_2916 = choose_res_3037;
                                }
                                choose_res_2857 = choose_res_2916;
                              }
                              choose_res_2792 = choose_res_2857;
                            }
                            choose_res_2740 = choose_res_2792;
                          }
                          choose_res_2639 = choose_res_2740;
                        }
                        let_res_2636 = choose_res_2639;
                      }
                      let_res_2631 = let_res_2636;
                    }
                    choose_res_2593 = let_res_2631;
                  } else {
                    uint16_t id_3216 { 6 };
                    bool id_3217 { bool(label2_1050 == id_3216) };
                    Void id_3218 { ((void)(assert(id_3217)), ::dessser::Void()) };
                    (void)id_3218;
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3219 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_3220 { std::get<6 /* Generator */>(id_3219) };
                    uint16_t id_3221 { uint16_t(id_3220.index()) };
                    uint16_t id_3222 { 0 };
                    bool id_3223 { bool(id_3221 == id_3222) };
                    Void id_3224 { ((void)(assert(id_3223)), ::dessser::Void()) };
                    (void)id_3224;
                    Size id_3225 { 2UL };
                    Size id_3226 { Size(sz_1049 + id_3225) };
                    Size id_3227 { 2UL };
                    Size id_3228 { Size(id_3226 + id_3227) };
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3229 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_3230 { std::get<6 /* Generator */>(id_3229) };
                    ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_3231 { std::get<0 /* Split */>(id_3230) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3232 { std::get<0>(id_3231) };
                    Size id_3233 { fun1486(id_3232) };
                    Size id_3234 { Size(id_3228 + id_3233) };
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3235 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_3236 { std::get<6 /* Generator */>(id_3235) };
                    ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_3237 { std::get<0 /* Split */>(id_3236) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3238 { std::get<1>(id_3237) };
                    Size id_3239 { fun1486(id_3238) };
                    Size id_3240 { Size(id_3234 + id_3239) };
                    choose_res_2593 = id_3240;
                  }
                  choose_res_1783 = choose_res_2593;
                }
                choose_res_1692 = choose_res_1783;
              }
              choose_res_1630 = choose_res_1692;
            }
            choose_res_1556 = choose_res_1630;
          }
          choose_res_1494 = choose_res_1556;
        }
        let_res_1491 = choose_res_1494;
      }
      let_res_1488 = let_res_1491;
    }
    Size id_3241 { 4UL };
    Size id_3242 { Size(let_res_1488 + id_3241) };
    Size let_res_3243;
    {
      Size sz_1167 { id_3242 };
      auto fun3244 { dessser::gen::raql_type::sersize_of_row_binary };
      dessser::gen::raql_type::t_ext id_3245 { (*p_0).typ };
      Size id_3246 { fun3244(id_3245) };
      Size id_3247 { Size(sz_1167 + id_3246) };
      let_res_3243 = id_3247;
    }
    Size let_res_3248;
    {
      Size sz_1168 { let_res_3243 };
      std::optional<dessser::gen::units::t_ext> id_3249 { (*p_0).units };
      bool id_3250 { !(id_3249.has_value ()) };
      Size choose_res_3251;
      if (id_3250) {
        Size id_3252 { 1UL };
        Size id_3253 { Size(sz_1168 + id_3252) };
        choose_res_3251 = id_3253;
      } else {
        auto fun3254 { dessser::gen::units::sersize_of_row_binary };
        std::optional<dessser::gen::units::t_ext> id_3255 { (*p_0).units };
        dessser::gen::units::t_ext id_3256 { id_3255.value() };
        Size id_3257 { fun3254(id_3256) };
        Size id_3258 { Size(sz_1168 + id_3257) };
        Size id_3259 { 1UL };
        Size id_3260 { Size(id_3258 + id_3259) };
        choose_res_3251 = id_3260;
      }
      let_res_3248 = choose_res_3251;
    }
    return let_res_3248;
  }
   };
  return fun1486;
}
std::function<Size(std::shared_ptr<::dessser::gen::raql_expr::t>  &)> sersize_of_row_binary(sersize_of_row_binary_init());

/* 
    (fun ("Ptr")
      (let "drec_1028"
        (let "dsum1_63" (let-pair "du16_fst_58" "du16_snd_59" (read-u16 little-endian (param 0)) (make-tup (identifier "du16_fst_58") (identifier "du16_snd_59")))
          (let-pair "dsum1_fst_64" "dsum1_snd_65" (identifier "dsum1_63")
            (if (eq (u16 0) (identifier "dsum1_fst_64"))
              (let-pair "dlist4_fst_1023" "dlist4_snd_1024"
                (let "dlist1_1011"
                  (let "leb_ref_1002" (make-vec (u32 0))
                    (let "shft_ref_1003" (make-vec (u8 0))
                      (let "p_ref_1004" (make-vec (identifier "dsum1_snd_65"))
                        (seq
                          (while
                            (let "leb128_1005" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_1004")))
                              (let-pair "leb128_fst_1006" "leb128_snd_1007" 
                                (identifier "leb128_1005")
                                (seq (set-vec (u8 0) (identifier "p_ref_1004") (identifier "leb128_snd_1007"))
                                  (set-vec (u8 0) (identifier "leb_ref_1002")
                                    (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_1006") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_1003"))) (unsafe-nth (u8 0) (identifier "leb_ref_1002"))))
                                  (set-vec (u8 0) (identifier "shft_ref_1003") (add (unsafe-nth (u8 0) (identifier "shft_ref_1003")) (u8 7))) 
                                  (ge (identifier "leb128_fst_1006") (u8 128))))) 
                            (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_1002")) (unsafe-nth (u8 0) (identifier "p_ref_1004")))))))
                  (let-pair "dlist1_fst_1012" "dlist1_snd_1013" (identifier "dlist1_1011")
                    (let "inits_src_ref_1014" (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_1013")))
                      (seq
                        (let "repeat_n_1015" (make-vec (i32 0))
                          (while (gt (to-i32 (identifier "dlist1_fst_1012")) (unsafe-nth (u8 0) (identifier "repeat_n_1015")))
                            (seq
                              (let "dlist2_1016" (unsafe-nth (u8 0) (identifier "inits_src_ref_1014"))
                                (let-pair "dlist2_fst_1017" "dlist2_snd_1018" 
                                  (identifier "dlist2_1016")
                                  (set-vec (u8 0) (identifier "inits_src_ref_1014")
                                    (let-pair "dlist3_fst_1020" "dlist3_snd_1021" 
                                      (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_1018")) 
                                      (make-tup (cons (identifier "dlist3_fst_1020") (identifier "dlist2_fst_1017")) (identifier "dlist3_snd_1021"))))))
                              (set-vec (u8 0) (identifier "repeat_n_1015") (add (unsafe-nth (u8 0) (identifier "repeat_n_1015")) (i32 1)))))) 
                        (unsafe-nth (u8 0) (identifier "inits_src_ref_1014"))))))
                (make-tup
                  (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 0
                    (identity (identifier "dlist4_fst_1023"))) (identifier "dlist4_snd_1024")))
              (if (eq (u16 1) (identifier "dsum1_fst_64"))
                (let-pair "dlist4_fst_997" "dlist4_snd_998"
                  (let "dlist1_979"
                    (let "leb_ref_970" (make-vec (u32 0))
                      (let "shft_ref_971" (make-vec (u8 0))
                        (let "p_ref_972" (make-vec (identifier "dsum1_snd_65"))
                          (seq
                            (while
                              (let "leb128_973" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_972")))
                                (let-pair "leb128_fst_974" "leb128_snd_975" 
                                  (identifier "leb128_973")
                                  (seq (set-vec (u8 0) (identifier "p_ref_972") (identifier "leb128_snd_975"))
                                    (set-vec (u8 0) (identifier "leb_ref_970")
                                      (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_974") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_971"))) (unsafe-nth (u8 0) (identifier "leb_ref_970"))))
                                    (set-vec (u8 0) (identifier "shft_ref_971") (add (unsafe-nth (u8 0) (identifier "shft_ref_971")) (u8 7))) 
                                    (ge (identifier "leb128_fst_974") (u8 128))))) 
                              (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_970")) (unsafe-nth (u8 0) (identifier "p_ref_972")))))))
                    (let-pair "dlist1_fst_980" "dlist1_snd_981" (identifier "dlist1_979")
                      (let "inits_src_ref_982" (make-vec (make-tup (end-of-list "($field_name; THIS)") (identifier "dlist1_snd_981")))
                        (seq
                          (let "repeat_n_983" (make-vec (i32 0))
                            (while (gt (to-i32 (identifier "dlist1_fst_980")) (unsafe-nth (u8 0) (identifier "repeat_n_983")))
                              (seq
                                (let "dlist2_984" (unsafe-nth (u8 0) (identifier "inits_src_ref_982"))
                                  (let-pair "dlist2_fst_985" "dlist2_snd_986" 
                                    (identifier "dlist2_984")
                                    (set-vec (u8 0) (identifier "inits_src_ref_982")
                                      (let-pair "dtup_fst_988" "dtup_snd_989" 
                                        (apply (ext-identifier field_name of-row-binary) (identifier "dlist2_snd_986"))
                                        (let-pair "dtup_fst_991" "dtup_snd_992" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_989"))
                                          (make-tup (cons (make-tup (identifier "dtup_fst_988") (identifier "dtup_fst_991")) (identifier "dlist2_fst_985")) (identifier "dtup_snd_992")))))))
                                (set-vec (u8 0) (identifier "repeat_n_983") (add (unsafe-nth (u8 0) (identifier "repeat_n_983")) (i32 1)))))) 
                          (unsafe-nth (u8 0) (identifier "inits_src_ref_982"))))))
                  (make-tup
                    (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 1
                      (identity (identifier "dlist4_fst_997"))) (identifier "dlist4_snd_998")))
                (if (eq (u16 2) (identifier "dsum1_fst_64"))
                  (let-pair "dlist4_fst_965" "dlist4_snd_966"
                    (let "dlist1_953"
                      (let "leb_ref_944" (make-vec (u32 0))
                        (let "shft_ref_945" (make-vec (u8 0))
                          (let "p_ref_946" (make-vec (identifier "dsum1_snd_65"))
                            (seq
                              (while
                                (let "leb128_947" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_946")))
                                  (let-pair "leb128_fst_948" "leb128_snd_949" 
                                    (identifier "leb128_947")
                                    (seq (set-vec (u8 0) (identifier "p_ref_946") (identifier "leb128_snd_949"))
                                      (set-vec (u8 0) (identifier "leb_ref_944")
                                        (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_948") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_945"))) (unsafe-nth (u8 0) (identifier "leb_ref_944"))))
                                      (set-vec (u8 0) (identifier "shft_ref_945") (add (unsafe-nth (u8 0) (identifier "shft_ref_945")) (u8 7))) 
                                      (ge (identifier "leb128_fst_948") (u8 128))))) 
                                (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_944")) (unsafe-nth (u8 0) (identifier "p_ref_946")))))))
                      (let-pair "dlist1_fst_954" "dlist1_snd_955" (identifier "dlist1_953")
                        (let "inits_src_ref_956" (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_955")))
                          (seq
                            (let "repeat_n_957" (make-vec (i32 0))
                              (while (gt (to-i32 (identifier "dlist1_fst_954")) (unsafe-nth (u8 0) (identifier "repeat_n_957")))
                                (seq
                                  (let "dlist2_958" (unsafe-nth (u8 0) (identifier "inits_src_ref_956"))
                                    (let-pair "dlist2_fst_959" "dlist2_snd_960" 
                                      (identifier "dlist2_958")
                                      (set-vec (u8 0) (identifier "inits_src_ref_956")
                                        (let-pair "dlist3_fst_962" "dlist3_snd_963" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_960")) 
                                          (make-tup (cons (identifier "dlist3_fst_962") (identifier "dlist2_fst_959")) (identifier "dlist3_snd_963"))))))
                                  (set-vec (u8 0) (identifier "repeat_n_957") (add (unsafe-nth (u8 0) (identifier "repeat_n_957")) (i32 1)))))) 
                            (unsafe-nth (u8 0) (identifier "inits_src_ref_956"))))))
                    (make-tup
                      (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 2
                        (identity (identifier "dlist4_fst_965"))) (identifier "dlist4_snd_966")))
                  (if (eq (u16 3) (identifier "dsum1_fst_64"))
                    (let "dtup_932"
                      (let-pair "dlist4_fst_930" "dlist4_snd_931"
                        (let "dlist1_912"
                          (let "leb_ref_903" (make-vec (u32 0))
                            (let "shft_ref_904" (make-vec (u8 0))
                              (let "p_ref_905" (make-vec (identifier "dsum1_snd_65"))
                                (seq
                                  (while
                                    (let "leb128_906" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_905")))
                                      (let-pair "leb128_fst_907" "leb128_snd_908" 
                                        (identifier "leb128_906")
                                        (seq (set-vec (u8 0) (identifier "p_ref_905") (identifier "leb128_snd_908"))
                                          (set-vec (u8 0) (identifier "leb_ref_903")
                                            (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_907") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_904"))) (unsafe-nth (u8 0) (identifier "leb_ref_903"))))
                                          (set-vec (u8 0) (identifier "shft_ref_904") (add (unsafe-nth (u8 0) (identifier "shft_ref_904")) (u8 7))) 
                                          (ge (identifier "leb128_fst_907") (u8 128))))) 
                                    (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_903")) (unsafe-nth (u8 0) (identifier "p_ref_905")))))))
                          (let-pair "dlist1_fst_913" "dlist1_snd_914" 
                            (identifier "dlist1_912")
                            (let "inits_src_ref_915" (make-vec (make-tup (end-of-list "{case_cond: THIS; case_cons: THIS}") (identifier "dlist1_snd_914")))
                              (seq
                                (let "repeat_n_916" (make-vec (i32 0))
                                  (while (gt (to-i32 (identifier "dlist1_fst_913")) (unsafe-nth (u8 0) (identifier "repeat_n_916")))
                                    (seq
                                      (let "dlist2_917" (unsafe-nth (u8 0) (identifier "inits_src_ref_915"))
                                        (let-pair "dlist2_fst_918" "dlist2_snd_919" 
                                          (identifier "dlist2_917")
                                          (set-vec (u8 0) (identifier "inits_src_ref_915")
                                            (let-pair "drec_fst_921" "drec_snd_922" 
                                              (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_919"))
                                              (let-pair "drec_fst_924" "drec_snd_925" 
                                                (apply (myself "(THIS; Ptr)") (identifier "drec_snd_922"))
                                                (make-tup (cons (make-rec (string "case_cons") (identifier "drec_fst_924") (string "case_cond") (identifier "drec_fst_921")) (identifier "dlist2_fst_918"))
                                                  (identifier "drec_snd_925"))))))) 
                                      (set-vec (u8 0) (identifier "repeat_n_916") (add (unsafe-nth (u8 0) (identifier "repeat_n_916")) (i32 1)))))) 
                                (unsafe-nth (u8 0) (identifier "inits_src_ref_915")))))) 
                        (make-tup (identity (identifier "dlist4_fst_930")) (identifier "dlist4_snd_931")))
                      (let-pair "dtup_fst_933" "dtup_snd_934" (identifier "dtup_932")
                        (let-pair "dtup_fst_939" "dtup_snd_940"
                          (if (eq (peek-u8 (identifier "dtup_snd_934") (size 0)) (u8 1)) 
                            (make-tup (null "THIS") (ptr-add (identifier "dtup_snd_934") (size 1)))
                            (let-pair "make1_1_fst_936" "make1_1_snd_937" 
                              (apply (myself "(THIS; Ptr)") (ptr-add (identifier "dtup_snd_934") (size 1))) 
                              (make-tup (not-null (identifier "make1_1_fst_936")) (identifier "make1_1_snd_937"))))
                          (make-tup
                            (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 3
                              (make-tup (identifier "dtup_fst_933") (identifier "dtup_fst_939"))) 
                            (identifier "dtup_snd_940")))))
                    (if (eq (u16 4) (identifier "dsum1_fst_64"))
                      (let-pair "dsum2_fst_901" "dsum2_snd_902"
                        (let "dsum1_479" (let-pair "du16_fst_474" "du16_snd_475" (read-u16 little-endian (identifier "dsum1_snd_65")) (make-tup (identifier "du16_fst_474") (identifier "du16_snd_475")))
                          (let-pair "dsum1_fst_480" "dsum1_snd_481" (identifier "dsum1_479")
                            (if (eq (u16 0) (identifier "dsum1_fst_480"))
                              (let-pair "dsum2_fst_898" "dsum2_snd_899"
                                (let "dsum1_844" (let-pair "du16_fst_839" "du16_snd_840" (read-u16 little-endian (identifier "dsum1_snd_481")) (make-tup (identifier "du16_fst_839") (identifier "du16_snd_840")))
                                  (let-pair "dsum1_fst_845" "dsum1_snd_846" 
                                    (identifier "dsum1_844")
                                    (if (eq (u16 0) (identifier "dsum1_fst_845"))
                                      (let-pair "dsum2_fst_895" "dsum2_snd_896" 
                                        (apply (ext-identifier raql_value of-row-binary) (identifier "dsum1_snd_846"))
                                        (make-tup
                                          (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 0
                                            (identifier "dsum2_fst_895")) 
                                          (identifier "dsum2_snd_896")))
                                      (if (eq (u16 1) (identifier "dsum1_fst_845"))
                                        (let-pair "dsum2_fst_892" "dsum2_snd_893" 
                                          (apply (ext-identifier raql_variable of-row-binary) (identifier "dsum1_snd_846"))
                                          (make-tup
                                            (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 1
                                              (identifier "dsum2_fst_892")) 
                                            (identifier "dsum2_snd_893")))
                                        (if (eq (u16 2) (identifier "dsum1_fst_845"))
                                          (let-pair "dsum2_fst_889" "dsum2_snd_890" 
                                            (apply (ext-identifier raql_binding_key of-row-binary) (identifier "dsum1_snd_846"))
                                            (make-tup
                                              (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 2
                                                (identifier "dsum2_fst_889")) 
                                              (identifier "dsum2_snd_890")))
                                          (if (eq (u16 3) (identifier "dsum1_fst_845"))
                                            (make-tup
                                              (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 3
                                                (nop)) (identifier "dsum1_snd_846"))
                                            (if (eq (u16 4) (identifier "dsum1_fst_845"))
                                              (make-tup
                                                (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 4
                                                  (nop)) (identifier "dsum1_snd_846"))
                                              (if (eq (u16 5) (identifier "dsum1_fst_845"))
                                                (make-tup
                                                  (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 5
                                                    (nop)) (identifier "dsum1_snd_846"))
                                                (if (eq (u16 6) (identifier "dsum1_fst_845"))
                                                  (make-tup
                                                    (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 6
                                                      (nop)) (identifier "dsum1_snd_846"))
                                                  (if (eq (u16 7) (identifier "dsum1_fst_845"))
                                                    (let-pair "dlist4_fst_871" "dlist4_snd_872"
                                                      (let "dlist1_859"
                                                        (let "leb_ref_850" 
                                                          (make-vec (u32 0))
                                                          (let "shft_ref_851" 
                                                            (make-vec (u8 0))
                                                            (let "p_ref_852" 
                                                              (make-vec (identifier "dsum1_snd_846"))
                                                              (seq
                                                                (while
                                                                  (let "leb128_853" 
                                                                    (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_852")))
                                                                    (let-pair "leb128_fst_854" "leb128_snd_855" 
                                                                    (identifier "leb128_853")
                                                                    (seq 
                                                                    (set-vec (u8 0) (identifier "p_ref_852") (identifier "leb128_snd_855"))
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb_ref_850")
                                                                    (bit-or 
                                                                    (left-shift (to-u32 (bit-and (identifier "leb128_fst_854") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_851")))
                                                                    (unsafe-nth (u8 0) (identifier "leb_ref_850")))) 
                                                                    (set-vec (u8 0) (identifier "shft_ref_851") (add (unsafe-nth (u8 0) (identifier "shft_ref_851")) (u8 7))) 
                                                                    (ge (identifier "leb128_fst_854") (u8 128))))) 
                                                                  (nop)) 
                                                                (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_850")) (unsafe-nth (u8 0) (identifier "p_ref_852")))))))
                                                        (let-pair "dlist1_fst_860" "dlist1_snd_861" 
                                                          (identifier "dlist1_859")
                                                          (let "inits_src_ref_862" 
                                                            (make-vec (make-tup (end-of-list "$raql_path_comp") (identifier "dlist1_snd_861")))
                                                            (seq
                                                              (let "repeat_n_863" 
                                                                (make-vec (i32 0))
                                                                (while 
                                                                  (gt (to-i32 (identifier "dlist1_fst_860")) (unsafe-nth (u8 0) (identifier "repeat_n_863")))
                                                                  (seq
                                                                    (let "dlist2_864" 
                                                                    (unsafe-nth (u8 0) (identifier "inits_src_ref_862"))
                                                                    (let-pair "dlist2_fst_865" "dlist2_snd_866" 
                                                                    (identifier "dlist2_864")
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "inits_src_ref_862")
                                                                    (let-pair "dlist3_fst_868" "dlist3_snd_869" 
                                                                    (apply (ext-identifier raql_path_comp of-row-binary) (identifier "dlist2_snd_866"))
                                                                    (make-tup (cons (identifier "dlist3_fst_868") (identifier "dlist2_fst_865")) (identifier "dlist3_snd_869"))))))
                                                                    (set-vec (u8 0) (identifier "repeat_n_863") (add (unsafe-nth (u8 0) (identifier "repeat_n_863")) (i32 1))))))
                                                              (unsafe-nth (u8 0) (identifier "inits_src_ref_862"))))))
                                                      (make-tup
                                                        (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 7
                                                          (identity (identifier "dlist4_fst_871"))) 
                                                        (identifier "dlist4_snd_872")))
                                                    (seq (assert (eq (identifier "dsum1_fst_845") (u16 8)))
                                                      (make-tup
                                                        (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 8
                                                          (nop)) (identifier "dsum1_snd_846")))))))))))))
                                (make-tup
                                  (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 0
                                    (identifier "dsum2_fst_898")) (identifier "dsum2_snd_899")))
                              (if (eq (u16 1) (identifier "dsum1_fst_480"))
                                (let-pair "dtup_fst_830" "dtup_snd_831"
                                  (let "dsum1_670" (let-pair "du16_fst_665" "du16_snd_666" (read-u16 little-endian (identifier "dsum1_snd_481")) (make-tup (identifier "du16_fst_665") (identifier "du16_snd_666")))
                                    (let-pair "dsum1_fst_671" "dsum1_snd_672" 
                                      (identifier "dsum1_670")
                                      (if (eq (u16 0) (identifier "dsum1_fst_671"))
                                        (make-tup
                                          (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 0
                                            (nop)) (identifier "dsum1_snd_672"))
                                        (if (eq (u16 1) (identifier "dsum1_fst_671"))
                                          (let-pair "dsum2_fst_824" "dsum2_snd_825" 
                                            (apply (ext-identifier raql_type of-row-binary) (identifier "dsum1_snd_672"))
                                            (make-tup
                                              (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 1
                                                (identifier "dsum2_fst_824")) 
                                              (identifier "dsum2_snd_825")))
                                          (if (eq (u16 2) (identifier "dsum1_fst_671"))
                                            (make-tup
                                              (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 2
                                                (nop)) (identifier "dsum1_snd_672"))
                                            (if (eq (u16 3) (identifier "dsum1_fst_671"))
                                              (let "dtup_796" (apply (ext-identifier raql_type of-row-binary) (identifier "dsum1_snd_672"))
                                                (let-pair "dtup_fst_797" "dtup_snd_798" 
                                                  (identifier "dtup_796")
                                                  (let-pair "dtup_fst_815" "dtup_snd_816"
                                                    (let "dsum1_805" 
                                                      (let-pair "du16_fst_800" "du16_snd_801" (read-u16 little-endian (identifier "dtup_snd_798")) (make-tup (identifier "du16_fst_800") (identifier "du16_snd_801")))
                                                      (let-pair "dsum1_fst_806" "dsum1_snd_807" 
                                                        (identifier "dsum1_805")
                                                        (if (eq (u16 0) (identifier "dsum1_fst_806")) 
                                                          (make-tup (construct "[LittleEndian Void | BigEndian Void]" 0 (nop)) (identifier "dsum1_snd_807"))
                                                          (seq (assert (eq (identifier "dsum1_fst_806") (u16 1))) (make-tup (construct "[LittleEndian Void | BigEndian Void]" 1 (nop)) (identifier "dsum1_snd_807"))))))
                                                    (make-tup
                                                      (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 3
                                                        (make-tup (identifier "dtup_fst_797") (identifier "dtup_fst_815"))) 
                                                      (identifier "dtup_snd_816")))))
                                              (if (eq (u16 4) (identifier "dsum1_fst_671"))
                                                (make-tup
                                                  (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 4
                                                    (nop)) (identifier "dsum1_snd_672"))
                                                (if (eq (u16 5) (identifier "dsum1_fst_671"))
                                                  (make-tup
                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 5
                                                      (nop)) (identifier "dsum1_snd_672"))
                                                  (if (eq (u16 6) (identifier "dsum1_fst_671"))
                                                    (make-tup
                                                      (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 6
                                                        (nop)) (identifier "dsum1_snd_672"))
                                                    (if (eq (u16 7) (identifier "dsum1_fst_671"))
                                                      (make-tup
                                                        (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 7
                                                          (nop)) (identifier "dsum1_snd_672"))
                                                      (if (eq (u16 8) (identifier "dsum1_fst_671"))
                                                        (make-tup
                                                          (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 8
                                                            (nop)) (identifier "dsum1_snd_672"))
                                                        (if (eq (u16 9) (identifier "dsum1_fst_671"))
                                                          (make-tup
                                                            (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 9
                                                              (nop)) 
                                                            (identifier "dsum1_snd_672"))
                                                          (if (eq (u16 10) (identifier "dsum1_fst_671"))
                                                            (make-tup
                                                              (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 10
                                                                (nop)) 
                                                              (identifier "dsum1_snd_672"))
                                                            (if (eq (u16 11) (identifier "dsum1_fst_671"))
                                                              (make-tup
                                                                (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 11
                                                                  (nop)) 
                                                                (identifier "dsum1_snd_672"))
                                                              (if (eq (u16 12) (identifier "dsum1_fst_671"))
                                                                (make-tup
                                                                  (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 12
                                                                    (nop)) 
                                                                  (identifier "dsum1_snd_672"))
                                                                (if (eq (u16 13) (identifier "dsum1_fst_671"))
                                                                  (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 13
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                  (if 
                                                                    (eq (u16 14) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 14
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 15) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 15
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 16
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 17
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 18
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 19
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 20
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 21
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 22
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 23
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 24
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 25) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 25
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 26) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 26
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 27) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 27
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 28) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 28
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 29) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 29
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 30) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 30
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 31) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 31
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 32) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 32
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 33) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 33
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 34) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 34
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 35) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 35
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 36) (identifier "dsum1_fst_671"))
                                                                    (let "dstring1_691"
                                                                    (let "leb_ref_685" 
                                                                    (make-vec (u32 0))
                                                                    (let "shft_ref_686" 
                                                                    (make-vec (u8 0))
                                                                    (let "p_ref_687" 
                                                                    (make-vec (identifier "dsum1_snd_672"))
                                                                    (seq
                                                                    (while
                                                                    (let "leb128_688" 
                                                                    (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_687")))
                                                                    (let-pair "leb128_fst_689" "leb128_snd_690" 
                                                                    (identifier "leb128_688")
                                                                    (seq 
                                                                    (set-vec (u8 0) (identifier "p_ref_687") (identifier "leb128_snd_690"))
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb_ref_685")
                                                                    (bit-or 
                                                                    (left-shift (to-u32 (bit-and (identifier "leb128_fst_689") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_686")))
                                                                    (unsafe-nth (u8 0) (identifier "leb_ref_685")))) 
                                                                    (set-vec (u8 0) (identifier "shft_ref_686") (add (unsafe-nth (u8 0) (identifier "shft_ref_686")) (u8 7))) 
                                                                    (ge (identifier "leb128_fst_689") (u8 128))))) 
                                                                    (nop)) 
                                                                    (make-tup (size-of-u32 (unsafe-nth (u8 0) (identifier "leb_ref_685"))) (unsafe-nth (u8 0) (identifier "p_ref_687")))))))
                                                                    (let-pair "dstring1_fst_692" "dstring1_snd_693" 
                                                                    (identifier "dstring1_691")
                                                                    (let-pair "dstring2_fst_695" "dstring2_snd_696" 
                                                                    (read-bytes (identifier "dstring1_snd_693") (identifier "dstring1_fst_692"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 36
                                                                    (string-of-bytes (identifier "dstring2_fst_695"))) 
                                                                    (identifier "dstring2_snd_696")))))
                                                                    (if 
                                                                    (eq (u16 37) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 37
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 38) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 38
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (if 
                                                                    (eq (u16 39) (identifier "dsum1_fst_671"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 39
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672"))
                                                                    (seq 
                                                                    (assert (eq (identifier "dsum1_fst_671") (u16 40)))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 40
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_672")))))))))))))))))))))))))))))))))))))))))))))
                                  (let-pair "dtup_fst_833" "dtup_snd_834" 
                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_831"))
                                    (make-tup
                                      (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 1
                                        (make-tup (identifier "dtup_fst_830") (identifier "dtup_fst_833"))) 
                                      (identifier "dtup_snd_834"))))
                                (if (eq (u16 2) (identifier "dsum1_fst_480"))
                                  (let "dtup_632"
                                    (let "dsum1_617" (let-pair "du16_fst_612" "du16_snd_613" (read-u16 little-endian (identifier "dsum1_snd_481")) (make-tup (identifier "du16_fst_612") (identifier "du16_snd_613")))
                                      (let-pair "dsum1_fst_618" "dsum1_snd_619" 
                                        (identifier "dsum1_617")
                                        (if (eq (u16 0) (identifier "dsum1_fst_618")) 
                                          (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 0 (nop)) (identifier "dsum1_snd_619"))
                                          (if (eq (u16 1) (identifier "dsum1_fst_618")) 
                                            (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 1 (nop)) (identifier "dsum1_snd_619"))
                                            (if (eq (u16 2) (identifier "dsum1_fst_618")) 
                                              (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 2 (nop)) (identifier "dsum1_snd_619"))
                                              (seq (assert (eq (identifier "dsum1_fst_618") (u16 3))) (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 3 (nop)) (identifier "dsum1_snd_619"))))))))
                                    (let-pair "dtup_fst_633" "dtup_snd_634" 
                                      (identifier "dtup_632")
                                      (let-pair "dlist4_fst_656" "dlist4_snd_657"
                                        (let "dlist1_644"
                                          (let "leb_ref_635" (make-vec (u32 0))
                                            (let "shft_ref_636" (make-vec (u8 0))
                                              (let "p_ref_637" (make-vec (identifier "dtup_snd_634"))
                                                (seq
                                                  (while
                                                    (let "leb128_638" 
                                                      (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_637")))
                                                      (let-pair "leb128_fst_639" "leb128_snd_640" 
                                                        (identifier "leb128_638")
                                                        (seq (set-vec (u8 0) (identifier "p_ref_637") (identifier "leb128_snd_640"))
                                                          (set-vec (u8 0) 
                                                            (identifier "leb_ref_635")
                                                            (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_639") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_636")))
                                                              (unsafe-nth (u8 0) (identifier "leb_ref_635")))) 
                                                          (set-vec (u8 0) (identifier "shft_ref_636") (add (unsafe-nth (u8 0) (identifier "shft_ref_636")) (u8 7))) 
                                                          (ge (identifier "leb128_fst_639") (u8 128))))) 
                                                    (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_635")) (unsafe-nth (u8 0) (identifier "p_ref_637")))))))
                                          (let-pair "dlist1_fst_645" "dlist1_snd_646" 
                                            (identifier "dlist1_644")
                                            (let "inits_src_ref_647" 
                                              (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_646")))
                                              (seq
                                                (let "repeat_n_648" (make-vec (i32 0))
                                                  (while (gt (to-i32 (identifier "dlist1_fst_645")) (unsafe-nth (u8 0) (identifier "repeat_n_648")))
                                                    (seq
                                                      (let "dlist2_649" 
                                                        (unsafe-nth (u8 0) (identifier "inits_src_ref_647"))
                                                        (let-pair "dlist2_fst_650" "dlist2_snd_651" 
                                                          (identifier "dlist2_649")
                                                          (set-vec (u8 0) 
                                                            (identifier "inits_src_ref_647")
                                                            (let-pair "dlist3_fst_653" "dlist3_snd_654" 
                                                              (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_651"))
                                                              (make-tup (cons (identifier "dlist3_fst_653") (identifier "dlist2_fst_650")) (identifier "dlist3_snd_654"))))))
                                                      (set-vec (u8 0) (identifier "repeat_n_648") (add (unsafe-nth (u8 0) (identifier "repeat_n_648")) (i32 1)))))) 
                                                (unsafe-nth (u8 0) (identifier "inits_src_ref_647"))))))
                                        (make-tup
                                          (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 2
                                            (make-tup (identifier "dtup_fst_633") (identity (identifier "dlist4_fst_656")))) 
                                          (identifier "dlist4_snd_657")))))
                                  (if (eq (u16 3) (identifier "dsum1_fst_480"))
                                    (let-pair "dtup_fst_600" "dtup_snd_601"
                                      (let "dsum1_518" (let-pair "du16_fst_513" "du16_snd_514" (read-u16 little-endian (identifier "dsum1_snd_481")) (make-tup (identifier "du16_fst_513") (identifier "du16_snd_514")))
                                        (let-pair "dsum1_fst_519" "dsum1_snd_520" 
                                          (identifier "dsum1_518")
                                          (if (eq (u16 0) (identifier "dsum1_fst_519"))
                                            (make-tup
                                              (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 0
                                                (nop)) (identifier "dsum1_snd_520"))
                                            (if (eq (u16 1) (identifier "dsum1_fst_519"))
                                              (make-tup
                                                (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 1
                                                  (nop)) (identifier "dsum1_snd_520"))
                                              (if (eq (u16 2) (identifier "dsum1_fst_519"))
                                                (make-tup
                                                  (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 2
                                                    (nop)) (identifier "dsum1_snd_520"))
                                                (if (eq (u16 3) (identifier "dsum1_fst_519"))
                                                  (make-tup
                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 3
                                                      (nop)) (identifier "dsum1_snd_520"))
                                                  (if (eq (u16 4) (identifier "dsum1_fst_519"))
                                                    (make-tup
                                                      (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 4
                                                        (nop)) (identifier "dsum1_snd_520"))
                                                    (if (eq (u16 5) (identifier "dsum1_fst_519"))
                                                      (make-tup
                                                        (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 5
                                                          (nop)) (identifier "dsum1_snd_520"))
                                                      (if (eq (u16 6) (identifier "dsum1_fst_519"))
                                                        (make-tup
                                                          (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 6
                                                            (nop)) (identifier "dsum1_snd_520"))
                                                        (if (eq (u16 7) (identifier "dsum1_fst_519"))
                                                          (make-tup
                                                            (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 7
                                                              (nop)) 
                                                            (identifier "dsum1_snd_520"))
                                                          (if (eq (u16 8) (identifier "dsum1_fst_519"))
                                                            (make-tup
                                                              (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 8
                                                                (nop)) 
                                                              (identifier "dsum1_snd_520"))
                                                            (if (eq (u16 9) (identifier "dsum1_fst_519"))
                                                              (make-tup
                                                                (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 9
                                                                  (nop)) 
                                                                (identifier "dsum1_snd_520"))
                                                              (if (eq (u16 10) (identifier "dsum1_fst_519"))
                                                                (make-tup
                                                                  (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 10
                                                                    (nop)) 
                                                                  (identifier "dsum1_snd_520"))
                                                                (if (eq (u16 11) (identifier "dsum1_fst_519"))
                                                                  (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 11
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                  (if 
                                                                    (eq (u16 12) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 12
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 13) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 13
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 14) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 14
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 15) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 15
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 16
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 17
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 18
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 19
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 20
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 21
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 22
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 23
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "dsum1_fst_519"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 24
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))
                                                                    (seq 
                                                                    (assert (eq (identifier "dsum1_fst_519") (u16 25)))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]" 25
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_520"))))))))))))))))))))))))))))))
                                      (let-pair "dtup_fst_603" "dtup_snd_604" 
                                        (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_601"))
                                        (let-pair "dtup_fst_606" "dtup_snd_607" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_604"))
                                          (make-tup
                                            (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 3
                                              (make-tup (identifier "dtup_fst_600") (identifier "dtup_fst_603") (identifier "dtup_fst_606"))) 
                                            (identifier "dtup_snd_607")))))
                                    (seq (assert (eq (identifier "dsum1_fst_480") (u16 4)))
                                      (let-pair "dtup_fst_498" "dtup_snd_499"
                                        (let "dsum1_488" (let-pair "du16_fst_483" "du16_snd_484" (read-u16 little-endian (identifier "dsum1_snd_481")) (make-tup (identifier "du16_fst_483") (identifier "du16_snd_484")))
                                          (let-pair "dsum1_fst_489" "dsum1_snd_490" 
                                            (identifier "dsum1_488")
                                            (if (eq (u16 0) (identifier "dsum1_fst_489")) 
                                              (make-tup (construct "[SubString Void | MapSet Void]" 0 (nop)) (identifier "dsum1_snd_490"))
                                              (seq (assert (eq (identifier "dsum1_fst_489") (u16 1))) (make-tup (construct "[SubString Void | MapSet Void]" 1 (nop)) (identifier "dsum1_snd_490"))))))
                                        (let-pair "dtup_fst_501" "dtup_snd_502" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_499"))
                                          (let-pair "dtup_fst_504" "dtup_snd_505" 
                                            (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_502"))
                                            (let-pair "dtup_fst_507" "dtup_snd_508" 
                                              (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_505"))
                                              (make-tup
                                                (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 4
                                                  (make-tup (identifier "dtup_fst_498") (identifier "dtup_fst_501") (identifier "dtup_fst_504") (identifier "dtup_fst_507"))) 
                                                (identifier "dtup_snd_508")))))))))))))
                        (make-tup
                          (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 4
                            (identifier "dsum2_fst_901")) (identifier "dsum2_snd_902")))
                      (if (eq (u16 5) (identifier "dsum1_fst_64"))
                        (let "drec_105"
                          (if (eq (peek-u8 (identifier "dsum1_snd_65") (size 0)) (u8 1)) 
                            (make-tup (null "[LocalState Void | GlobalState Void]") (ptr-add (identifier "dsum1_snd_65") (size 1)))
                            (let-pair "make1_1_fst_103" "make1_1_snd_104"
                              (let "dsum1_93" (let-pair "du16_fst_88" "du16_snd_89" (read-u16 little-endian (ptr-add (identifier "dsum1_snd_65") (size 1))) (make-tup (identifier "du16_fst_88") (identifier "du16_snd_89")))
                                (let-pair "dsum1_fst_94" "dsum1_snd_95" 
                                  (identifier "dsum1_93")
                                  (if (eq (u16 0) (identifier "dsum1_fst_94")) 
                                    (make-tup (construct "[LocalState Void | GlobalState Void]" 0 (nop)) (identifier "dsum1_snd_95"))
                                    (seq (assert (eq (identifier "dsum1_fst_94") (u16 1))) (make-tup (construct "[LocalState Void | GlobalState Void]" 1 (nop)) (identifier "dsum1_snd_95"))))))
                              (make-tup (not-null (identifier "make1_1_fst_103")) (identifier "make1_1_snd_104"))))
                          (let-pair "drec_fst_106" "drec_snd_107" (identifier "drec_105")
                            (let "drec_111" (let-pair "dbool_fst_109" "dbool_snd_110" (read-u8 (identifier "drec_snd_107")) (make-tup (not (eq (identifier "dbool_fst_109") (u8 0))) (identifier "dbool_snd_110")))
                              (let-pair "drec_fst_112" "drec_snd_113" 
                                (identifier "drec_111")
                                (let-pair "drec_fst_468" "drec_snd_469"
                                  (let "dsum1_120" (let-pair "du16_fst_115" "du16_snd_116" (read-u16 little-endian (identifier "drec_snd_113")) (make-tup (identifier "du16_fst_115") (identifier "du16_snd_116")))
                                    (let-pair "dsum1_fst_121" "dsum1_snd_122" 
                                      (identifier "dsum1_120")
                                      (if (eq (u16 0) (identifier "dsum1_fst_121"))
                                        (let-pair "dtup_fst_459" "dtup_snd_460"
                                          (let "dsum1_392" (let-pair "du16_fst_387" "du16_snd_388" (read-u16 little-endian (identifier "dsum1_snd_122")) (make-tup (identifier "du16_fst_387") (identifier "du16_snd_388")))
                                            (let-pair "dsum1_fst_393" "dsum1_snd_394" 
                                              (identifier "dsum1_392")
                                              (if (eq (u16 0) (identifier "dsum1_fst_393"))
                                                (make-tup
                                                  (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 0
                                                    (nop)) (identifier "dsum1_snd_394"))
                                                (if (eq (u16 1) (identifier "dsum1_fst_393"))
                                                  (make-tup
                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 1
                                                      (nop)) (identifier "dsum1_snd_394"))
                                                  (if (eq (u16 2) (identifier "dsum1_fst_393"))
                                                    (make-tup
                                                      (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 2
                                                        (nop)) (identifier "dsum1_snd_394"))
                                                    (if (eq (u16 3) (identifier "dsum1_fst_393"))
                                                      (make-tup
                                                        (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 3
                                                          (nop)) (identifier "dsum1_snd_394"))
                                                      (if (eq (u16 4) (identifier "dsum1_fst_393"))
                                                        (make-tup
                                                          (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 4
                                                            (nop)) (identifier "dsum1_snd_394"))
                                                        (if (eq (u16 5) (identifier "dsum1_fst_393"))
                                                          (make-tup
                                                            (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 5
                                                              (nop)) 
                                                            (identifier "dsum1_snd_394"))
                                                          (if (eq (u16 6) (identifier "dsum1_fst_393"))
                                                            (make-tup
                                                              (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 6
                                                                (nop)) 
                                                              (identifier "dsum1_snd_394"))
                                                            (if (eq (u16 7) (identifier "dsum1_fst_393"))
                                                              (make-tup
                                                                (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 7
                                                                  (nop)) 
                                                                (identifier "dsum1_snd_394"))
                                                              (if (eq (u16 8) (identifier "dsum1_fst_393"))
                                                                (make-tup
                                                                  (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 8
                                                                    (nop)) 
                                                                  (identifier "dsum1_snd_394"))
                                                                (if (eq (u16 9) (identifier "dsum1_fst_393"))
                                                                  (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 9
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_394"))
                                                                  (if 
                                                                    (eq (u16 10) (identifier "dsum1_fst_393"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 10
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_394"))
                                                                    (if 
                                                                    (eq (u16 11) (identifier "dsum1_fst_393"))
                                                                    (let "dtup_407"
                                                                    (let-pair "dfloat_fst_405" "dfloat_snd_406" 
                                                                    (read-u64 little-endian (identifier "dsum1_snd_394")) 
                                                                    (make-tup (float-of-u64 (identifier "dfloat_fst_405")) (identifier "dfloat_snd_406")))
                                                                    (let-pair "dtup_fst_408" "dtup_snd_409" 
                                                                    (identifier "dtup_407")
                                                                    (let "dtup_413"
                                                                    (let-pair "dfloat_fst_411" "dfloat_snd_412" 
                                                                    (read-u64 little-endian (identifier "dtup_snd_409")) 
                                                                    (make-tup (float-of-u64 (identifier "dfloat_fst_411")) (identifier "dfloat_snd_412")))
                                                                    (let-pair "dtup_fst_414" "dtup_snd_415" 
                                                                    (identifier "dtup_413")
                                                                    (let-pair "du32_fst_417" "du32_snd_418" 
                                                                    (read-u32 little-endian (identifier "dtup_snd_415"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 11
                                                                    (make-tup (identifier "dtup_fst_408") (identifier "dtup_fst_414") (identifier "du32_fst_417"))) 
                                                                    (identifier "du32_snd_418")))))))
                                                                    (if 
                                                                    (eq (u16 12) (identifier "dsum1_fst_393"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 12
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_394"))
                                                                    (if 
                                                                    (eq (u16 13) (identifier "dsum1_fst_393"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 13
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_394"))
                                                                    (seq 
                                                                    (assert (eq (identifier "dsum1_fst_393") (u16 14)))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 14
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_394")))))))))))))))))))
                                          (let-pair "dtup_fst_462" "dtup_snd_463" 
                                            (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_460"))
                                            (make-tup
                                              (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 0
                                                (make-tup (identifier "dtup_fst_459") (identifier "dtup_fst_462"))) 
                                              (identifier "dtup_snd_463"))))
                                        (if (eq (u16 1) (identifier "dsum1_fst_121"))
                                          (let-pair "dtup_fst_375" "dtup_snd_376"
                                            (let "dsum1_359" (let-pair "du16_fst_354" "du16_snd_355" (read-u16 little-endian (identifier "dsum1_snd_122")) (make-tup (identifier "du16_fst_354") (identifier "du16_snd_355")))
                                              (let-pair "dsum1_fst_360" "dsum1_snd_361" 
                                                (identifier "dsum1_359")
                                                (if (eq (u16 0) (identifier "dsum1_fst_360")) 
                                                  (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 0 (nop)) (identifier "dsum1_snd_361"))
                                                  (if (eq (u16 1) (identifier "dsum1_fst_360")) 
                                                    (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 1 (nop)) (identifier "dsum1_snd_361"))
                                                    (if (eq (u16 2) (identifier "dsum1_fst_360")) 
                                                      (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 2 (nop)) (identifier "dsum1_snd_361"))
                                                      (seq (assert (eq (identifier "dsum1_fst_360") (u16 3)))
                                                        (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 3 (nop)) (identifier "dsum1_snd_361"))))))))
                                            (let-pair "dtup_fst_378" "dtup_snd_379" 
                                              (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_376"))
                                              (let-pair "dtup_fst_381" "dtup_snd_382" 
                                                (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_379"))
                                                (make-tup
                                                  (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 1
                                                    (make-tup (identifier "dtup_fst_375") (identifier "dtup_fst_378") (identifier "dtup_fst_381"))) 
                                                  (identifier "dtup_snd_382")))))
                                          (if (eq (u16 2) (identifier "dsum1_fst_121"))
                                            (let-pair "dtup_fst_339" "dtup_snd_340"
                                              (let "dsum1_323" (let-pair "du16_fst_318" "du16_snd_319" (read-u16 little-endian (identifier "dsum1_snd_122")) (make-tup (identifier "du16_fst_318") (identifier "du16_snd_319")))
                                                (let-pair "dsum1_fst_324" "dsum1_snd_325" 
                                                  (identifier "dsum1_323")
                                                  (if (eq (u16 0) (identifier "dsum1_fst_324")) 
                                                    (make-tup (construct "[MovingAvg Void | Hysteresis Void | OnceEvery BOOL]" 0 (nop)) (identifier "dsum1_snd_325"))
                                                    (if (eq (u16 1) (identifier "dsum1_fst_324")) 
                                                      (make-tup (construct "[MovingAvg Void | Hysteresis Void | OnceEvery BOOL]" 1 (nop)) (identifier "dsum1_snd_325"))
                                                      (seq (assert (eq (identifier "dsum1_fst_324") (u16 2)))
                                                        (let-pair "dbool_fst_327" "dbool_snd_328" 
                                                          (read-u8 (identifier "dsum1_snd_325"))
                                                          (make-tup (construct "[MovingAvg Void | Hysteresis Void | OnceEvery BOOL]" 2 (not (eq (identifier "dbool_fst_327") (u8 0)))) (identifier "dbool_snd_328"))))))))
                                              (let-pair "dtup_fst_342" "dtup_snd_343" 
                                                (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_340"))
                                                (let-pair "dtup_fst_345" "dtup_snd_346" 
                                                  (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_343"))
                                                  (let-pair "dtup_fst_348" "dtup_snd_349" 
                                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_346"))
                                                    (make-tup
                                                      (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 2
                                                        (make-tup (identifier "dtup_fst_339") (identifier "dtup_fst_342") (identifier "dtup_fst_345") (identifier "dtup_fst_348"))) 
                                                      (identifier "dtup_snd_349"))))))
                                            (if (eq (u16 3) (identifier "dsum1_fst_121"))
                                              (let-pair "dtup_fst_300" "dtup_snd_301"
                                                (let "dsum1_287" (let-pair "du16_fst_282" "du16_snd_283" (read-u16 little-endian (identifier "dsum1_snd_122")) (make-tup (identifier "du16_fst_282") (identifier "du16_snd_283")))
                                                  (let-pair "dsum1_fst_288" "dsum1_snd_289" 
                                                    (identifier "dsum1_287")
                                                    (if (eq (u16 0) (identifier "dsum1_fst_288")) 
                                                      (make-tup (construct "[DampedHolt Void | Remember BOOL]" 0 (nop)) (identifier "dsum1_snd_289"))
                                                      (seq (assert (eq (identifier "dsum1_fst_288") (u16 1)))
                                                        (let-pair "dbool_fst_291" "dbool_snd_292" 
                                                          (read-u8 (identifier "dsum1_snd_289"))
                                                          (make-tup (construct "[DampedHolt Void | Remember BOOL]" 1 (not (eq (identifier "dbool_fst_291") (u8 0)))) (identifier "dbool_snd_292")))))))
                                                (let-pair "dtup_fst_303" "dtup_snd_304" 
                                                  (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_301"))
                                                  (let-pair "dtup_fst_306" "dtup_snd_307" 
                                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_304"))
                                                    (let-pair "dtup_fst_309" "dtup_snd_310" 
                                                      (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_307"))
                                                      (let-pair "dtup_fst_312" "dtup_snd_313" 
                                                        (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_310"))
                                                        (make-tup
                                                          (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 3
                                                            (make-tup (identifier "dtup_fst_300") (identifier "dtup_fst_303") (identifier "dtup_fst_306") (identifier "dtup_fst_309") (identifier "dtup_fst_312")))
                                                          (identifier "dtup_snd_313")))))))
                                              (if (eq (u16 4) (identifier "dsum1_fst_121"))
                                                (let "dtup_240"
                                                  (let "dsum1_219" (let-pair "du16_fst_214" "du16_snd_215" (read-u16 little-endian (identifier "dsum1_snd_122")) (make-tup (identifier "du16_fst_214") (identifier "du16_snd_215")))
                                                    (let-pair "dsum1_fst_220" "dsum1_snd_221" 
                                                      (identifier "dsum1_219")
                                                      (if (eq (u16 0) (identifier "dsum1_fst_220")) 
                                                        (make-tup (construct "[MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]" 0 (nop)) (identifier "dsum1_snd_221"))
                                                        (seq (assert (eq (identifier "dsum1_fst_220") (u16 1)))
                                                          (let "drec_225"
                                                            (let-pair "dbool_fst_223" "dbool_snd_224" (read-u8 (identifier "dsum1_snd_221")) (make-tup (not (eq (identifier "dbool_fst_223") (u8 0))) (identifier "dbool_snd_224")))
                                                            (let-pair "drec_fst_226" "drec_snd_227" 
                                                              (identifier "drec_225")
                                                              (let-pair "dbool_fst_229" "dbool_snd_230" 
                                                                (read-u8 (identifier "drec_snd_227"))
                                                                (make-tup
                                                                  (construct "[MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]" 1
                                                                    (make-rec (string "up_to") (not (eq (identifier "dbool_fst_229") (u8 0))) (string "inv") (identifier "drec_fst_226"))) 
                                                                  (identifier "dbool_snd_230")))))))))
                                                  (let-pair "dtup_fst_241" "dtup_snd_242" 
                                                    (identifier "dtup_240")
                                                    (let-pair "dtup_fst_244" "dtup_snd_245" 
                                                      (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_242"))
                                                      (let-pair "dtup_fst_247" "dtup_snd_248" 
                                                        (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_245"))
                                                        (let-pair "dtup_fst_250" "dtup_snd_251" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_248"))
                                                          (let-pair "dlist4_fst_273" "dlist4_snd_274"
                                                            (let "dlist1_261"
                                                              (let "leb_ref_252" 
                                                                (make-vec (u32 0))
                                                                (let "shft_ref_253" 
                                                                  (make-vec (u8 0))
                                                                  (let "p_ref_254" 
                                                                    (make-vec (identifier "dtup_snd_251"))
                                                                    (seq
                                                                    (while
                                                                    (let "leb128_255" 
                                                                    (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_254")))
                                                                    (let-pair "leb128_fst_256" "leb128_snd_257" 
                                                                    (identifier "leb128_255")
                                                                    (seq 
                                                                    (set-vec (u8 0) (identifier "p_ref_254") (identifier "leb128_snd_257"))
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb_ref_252")
                                                                    (bit-or 
                                                                    (left-shift (to-u32 (bit-and (identifier "leb128_fst_256") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_253")))
                                                                    (unsafe-nth (u8 0) (identifier "leb_ref_252")))) 
                                                                    (set-vec (u8 0) (identifier "shft_ref_253") (add (unsafe-nth (u8 0) (identifier "shft_ref_253")) (u8 7))) 
                                                                    (ge (identifier "leb128_fst_256") (u8 128))))) 
                                                                    (nop)) 
                                                                    (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_252")) (unsafe-nth (u8 0) (identifier "p_ref_254")))))))
                                                              (let-pair "dlist1_fst_262" "dlist1_snd_263" 
                                                                (identifier "dlist1_261")
                                                                (let "inits_src_ref_264" 
                                                                  (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_263")))
                                                                  (seq
                                                                    (let "repeat_n_265" 
                                                                    (make-vec (i32 0))
                                                                    (while 
                                                                    (gt (to-i32 (identifier "dlist1_fst_262")) (unsafe-nth (u8 0) (identifier "repeat_n_265")))
                                                                    (seq
                                                                    (let "dlist2_266" 
                                                                    (unsafe-nth (u8 0) (identifier "inits_src_ref_264"))
                                                                    (let-pair "dlist2_fst_267" "dlist2_snd_268" 
                                                                    (identifier "dlist2_266")
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "inits_src_ref_264")
                                                                    (let-pair "dlist3_fst_270" "dlist3_snd_271" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_268"))
                                                                    (make-tup (cons (identifier "dlist3_fst_270") (identifier "dlist2_fst_267")) (identifier "dlist3_snd_271"))))))
                                                                    (set-vec (u8 0) (identifier "repeat_n_265") (add (unsafe-nth (u8 0) (identifier "repeat_n_265")) (i32 1))))))
                                                                    (unsafe-nth (u8 0) (identifier "inits_src_ref_264"))))))
                                                            (make-tup
                                                              (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 4
                                                                (make-tup (identifier "dtup_fst_241") (identifier "dtup_fst_244") (identifier "dtup_fst_247") (identifier "dtup_fst_250") (identity (identifier "dlist4_fst_273"))))
                                                              (identifier "dlist4_snd_274"))))))))
                                                (if (eq (u16 5) (identifier "dsum1_fst_121"))
                                                  (let "dsum1_183" (let-pair "du16_fst_178" "du16_snd_179" (read-u16 little-endian (identifier "dsum1_snd_122")) (make-tup (identifier "du16_fst_178") (identifier "du16_snd_179")))
                                                    (let-pair "dsum1_fst_184" "dsum1_snd_185" 
                                                      (identifier "dsum1_183")
                                                      (seq (assert (eq (identifier "dsum1_fst_184") (u16 0)))
                                                        (let-pair "dtup_fst_193" "dtup_snd_194" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "dsum1_snd_185"))
                                                          (let-pair "dtup_fst_196" "dtup_snd_197" 
                                                            (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_194"))
                                                            (let-pair "dtup_fst_199" "dtup_snd_200" 
                                                              (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_197"))
                                                              (let-pair "dtup_fst_202" "dtup_snd_203" 
                                                                (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_200"))
                                                                (let-pair "dtup_fst_205" "dtup_snd_206" 
                                                                  (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_203"))
                                                                  (let-pair "dtup_fst_208" "dtup_snd_209" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_206"))
                                                                    (make-tup
                                                                    (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 5
                                                                    (make-tup 
                                                                    (construct "[DampedHoltWinter Void]" 0 (nop)) 
                                                                    (identifier "dtup_fst_193") 
                                                                    (identifier "dtup_fst_196") 
                                                                    (identifier "dtup_fst_199") 
                                                                    (identifier "dtup_fst_202") 
                                                                    (identifier "dtup_fst_205") 
                                                                    (identifier "dtup_fst_208"))) 
                                                                    (identifier "dtup_snd_209")))))))))))
                                                  (if (eq (u16 6) (identifier "dsum1_fst_121"))
                                                    (let "drec_147" (apply (ext-identifier raql_top_output of-row-binary) (identifier "dsum1_snd_122"))
                                                      (let-pair "drec_fst_148" "drec_snd_149" 
                                                        (identifier "drec_147")
                                                        (let-pair "drec_fst_151" "drec_snd_152" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "drec_snd_149"))
                                                          (let-pair "drec_fst_157" "drec_snd_158"
                                                            (if (eq (peek-u8 (identifier "drec_snd_152") (size 0)) (u8 1)) 
                                                              (make-tup (null "THIS") (ptr-add (identifier "drec_snd_152") (size 1)))
                                                              (let-pair "make1_1_fst_154" "make1_1_snd_155" 
                                                                (apply (myself "(THIS; Ptr)") (ptr-add (identifier "drec_snd_152") (size 1))) 
                                                                (make-tup (not-null (identifier "make1_1_fst_154")) (identifier "make1_1_snd_155"))))
                                                            (let-pair "drec_fst_160" "drec_snd_161" 
                                                              (apply (myself "(THIS; Ptr)") (identifier "drec_snd_158"))
                                                              (let-pair "drec_fst_163" "drec_snd_164" 
                                                                (apply (myself "(THIS; Ptr)") (identifier "drec_snd_161"))
                                                                (let-pair "drec_fst_166" "drec_snd_167" 
                                                                  (apply (myself "(THIS; Ptr)") (identifier "drec_snd_164"))
                                                                  (let-pair "drec_fst_169" "drec_snd_170" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "drec_snd_167"))
                                                                    (let-pair "drec_fst_172" "drec_snd_173" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "drec_snd_170"))
                                                                    (make-tup
                                                                    (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 6
                                                                    (make-rec 
                                                                    (string "sigmas") 
                                                                    (identifier "drec_fst_172") 
                                                                    (string "duration") 
                                                                    (identifier "drec_fst_169") 
                                                                    (string "time") 
                                                                    (identifier "drec_fst_166") 
                                                                    (string "by") 
                                                                    (identifier "drec_fst_163") 
                                                                    (string "what") 
                                                                    (identifier "drec_fst_160") 
                                                                    (string "max_size") 
                                                                    (identifier "drec_fst_157") 
                                                                    (string "size") 
                                                                    (identifier "drec_fst_151") 
                                                                    (string "output") 
                                                                    (identifier "drec_fst_148"))) 
                                                                    (identifier "drec_snd_173")))))))))))
                                                    (seq (assert (eq (identifier "dsum1_fst_121") (u16 7)))
                                                      (let-pair "drec_fst_124" "drec_snd_125" 
                                                        (apply (myself "(THIS; Ptr)") (identifier "dsum1_snd_122"))
                                                        (let-pair "drec_fst_127" "drec_snd_128" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "drec_snd_125"))
                                                          (let-pair "drec_fst_130" "drec_snd_131" 
                                                            (apply (myself "(THIS; Ptr)") (identifier "drec_snd_128"))
                                                            (let "drec_135"
                                                              (let-pair "dbool_fst_133" "dbool_snd_134" (read-u8 (identifier "drec_snd_131")) (make-tup (not (eq (identifier "dbool_fst_133") (u8 0))) (identifier "dbool_snd_134")))
                                                              (let-pair "drec_fst_136" "drec_snd_137" 
                                                                (identifier "drec_135")
                                                                (let-pair "drec_fst_142" "drec_snd_143"
                                                                  (if 
                                                                    (eq (peek-u8 (identifier "drec_snd_137") (size 0)) (u8 1)) 
                                                                    (make-tup (null "THIS") (ptr-add (identifier "drec_snd_137") (size 1)))
                                                                    (let-pair "make1_1_fst_139" "make1_1_snd_140" 
                                                                    (apply (myself "(THIS; Ptr)") (ptr-add (identifier "drec_snd_137") (size 1)))
                                                                    (make-tup (not-null (identifier "make1_1_fst_139")) (identifier "make1_1_snd_140"))))
                                                                  (make-tup
                                                                    (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 7
                                                                    (make-rec 
                                                                    (string "sample_size") 
                                                                    (identifier "drec_fst_142") 
                                                                    (string "tumbling") 
                                                                    (identifier "drec_fst_136") 
                                                                    (string "max_age") 
                                                                    (identifier "drec_fst_130") 
                                                                    (string "time") 
                                                                    (identifier "drec_fst_127") 
                                                                    (string "what") 
                                                                    (identifier "drec_fst_124"))) 
                                                                    (identifier "drec_snd_143"))))))))))))))))))
                                  (make-tup
                                    (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 5
                                      (make-rec (string "operation") (identifier "drec_fst_468") (string "skip_nulls") (identifier "drec_fst_112") (string "lifespan") (identifier "drec_fst_106"))) 
                                    (identifier "drec_snd_469")))))))
                        (seq (assert (eq (identifier "dsum1_fst_64") (u16 6)))
                          (let "dsum1_72" (let-pair "du16_fst_67" "du16_snd_68" (read-u16 little-endian (identifier "dsum1_snd_65")) (make-tup (identifier "du16_fst_67") (identifier "du16_snd_68")))
                            (let-pair "dsum1_fst_73" "dsum1_snd_74" (identifier "dsum1_72")
                              (seq (assert (eq (identifier "dsum1_fst_73") (u16 0)))
                                (let-pair "dtup_fst_76" "dtup_snd_77" 
                                  (apply (myself "(THIS; Ptr)") (identifier "dsum1_snd_74"))
                                  (let-pair "dtup_fst_79" "dtup_snd_80" 
                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_77"))
                                    (make-tup
                                      (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 6
                                        (construct "[Split (THIS; THIS)]" 0 (make-tup (identifier "dtup_fst_76") (identifier "dtup_fst_79")))) 
                                      (identifier "dtup_snd_80"))))))))))))))))
        (let-pair "drec_fst_1029" "drec_snd_1030" (identifier "drec_1028")
          (let "drec_1034" (let-pair "du32_fst_1032" "du32_snd_1033" (read-u32 little-endian (identifier "drec_snd_1030")) (make-tup (identifier "du32_fst_1032") (identifier "du32_snd_1033")))
            (let-pair "drec_fst_1035" "drec_snd_1036" (identifier "drec_1034")
              (let "drec_1037" (apply (ext-identifier raql_type of-row-binary) (identifier "drec_snd_1036"))
                (let-pair "drec_fst_1038" "drec_snd_1039" (identifier "drec_1037")
                  (let-pair "drec_fst_1044" "drec_snd_1045"
                    (if (eq (peek-u8 (identifier "drec_snd_1039") (size 0)) (u8 1)) 
                      (make-tup (null "$units") (ptr-add (identifier "drec_snd_1039") (size 1)))
                      (let-pair "make1_1_fst_1041" "make1_1_snd_1042" 
                        (apply (ext-identifier units of-row-binary) (ptr-add (identifier "drec_snd_1039") (size 1))) 
                        (make-tup (not-null (identifier "make1_1_fst_1041")) (identifier "make1_1_snd_1042"))))
                    (make-tup (make-rec (string "units") (identifier "drec_fst_1044") (string "typ") (identifier "drec_fst_1038") (string "uniq_num") (identifier "drec_fst_1035") (string "text") (identifier "drec_fst_1029"))
                      (identifier "drec_snd_1045"))))))))))
 */
static std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> of_row_binary_init()
{
  std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> fun3261 { [&](Pointer p_0) {
    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3262 { p_0.readU16Le() };
    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3263;
    {
      auto du16_fst_58 { std::get<0>(id_3262) };
      auto du16_snd_59 { std::get<1>(id_3262) };
      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3264 { du16_fst_58, du16_snd_59 };
      letpair_res_3263 = id_3264;
    }
    ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 let_res_3265;
    {
      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_63 { letpair_res_3263 };
      ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_3266;
      {
        auto dsum1_fst_64 { std::get<0>(dsum1_63) };
        auto dsum1_snd_65 { std::get<1>(dsum1_63) };
        uint16_t id_3267 { 0 };
        bool id_3268 { bool(id_3267 == dsum1_fst_64) };
        ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 choose_res_3269;
        if (id_3268) {
          uint32_t id_3270 { 0U };
          Vec<1, uint32_t> id_3271 {  id_3270  };
          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3272;
          {
            Vec<1, uint32_t> leb_ref_1002 { id_3271 };
            uint8_t id_3273 { 0 };
            Vec<1, uint8_t> id_3274 {  id_3273  };
            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3275;
            {
              Vec<1, uint8_t> shft_ref_1003 { id_3274 };
              Vec<1, Pointer> id_3276 {  dsum1_snd_65  };
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3277;
              {
                Vec<1, Pointer> p_ref_1004 { id_3276 };
                bool while_flag_3278 { true };
                do {
                  uint8_t id_3279 { 0 };
                  Pointer id_3280 { p_ref_1004[id_3279] };
                  ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3281 { id_3280.readU8() };
                  bool let_res_3282;
                  {
                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_1005 { id_3281 };
                    bool letpair_res_3283;
                    {
                      auto leb128_fst_1006 { std::get<0>(leb128_1005) };
                      auto leb128_snd_1007 { std::get<1>(leb128_1005) };
                      uint8_t id_3284 { 0 };
                      Void id_3285 { ((void)(p_ref_1004[id_3284] = leb128_snd_1007), ::dessser::Void()) };
                      (void)id_3285;
                      uint8_t id_3286 { 0 };
                      uint8_t id_3287 { 127 };
                      uint8_t id_3288 { uint8_t(leb128_fst_1006 & id_3287) };
                      uint32_t id_3289 { uint32_t(id_3288) };
                      uint8_t id_3290 { 0 };
                      uint8_t id_3291 { shft_ref_1003[id_3290] };
                      uint32_t id_3292 { uint32_t(id_3289 << id_3291) };
                      uint8_t id_3293 { 0 };
                      uint32_t id_3294 { leb_ref_1002[id_3293] };
                      uint32_t id_3295 { uint32_t(id_3292 | id_3294) };
                      Void id_3296 { ((void)(leb_ref_1002[id_3286] = id_3295), ::dessser::Void()) };
                      (void)id_3296;
                      uint8_t id_3297 { 0 };
                      uint8_t id_3298 { 0 };
                      uint8_t id_3299 { shft_ref_1003[id_3298] };
                      uint8_t id_3300 { 7 };
                      uint8_t id_3301 { uint8_t(id_3299 + id_3300) };
                      Void id_3302 { ((void)(shft_ref_1003[id_3297] = id_3301), ::dessser::Void()) };
                      (void)id_3302;
                      uint8_t id_3303 { 128 };
                      bool id_3304 { bool(leb128_fst_1006 >= id_3303) };
                      letpair_res_3283 = id_3304;
                    }
                    let_res_3282 = letpair_res_3283;
                  }
                  while_flag_3278 = let_res_3282;
                  if (while_flag_3278) {
                    (void)::dessser::Void();
                  }
                } while (while_flag_3278);
                (void)::dessser::Void();
                uint8_t id_3305 { 0 };
                uint32_t id_3306 { leb_ref_1002[id_3305] };
                uint8_t id_3307 { 0 };
                Pointer id_3308 { p_ref_1004[id_3307] };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3309 { id_3306, id_3308 };
                let_res_3277 = id_3309;
              }
              let_res_3275 = let_res_3277;
            }
            let_res_3272 = let_res_3275;
          }
          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3310;
          {
            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_1011 { let_res_3272 };
            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3311;
            {
              auto dlist1_fst_1012 { std::get<0>(dlist1_1011) };
              auto dlist1_snd_1013 { std::get<1>(dlist1_1011) };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_3312;
              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3313 { endoflist_3312, dlist1_snd_1013 };
              Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_3314 {  id_3313  };
              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3315;
              {
                Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_1014 { id_3314 };
                int32_t id_3316 { 0L };
                Vec<1, int32_t> id_3317 {  id_3316  };
                {
                  Vec<1, int32_t> repeat_n_1015 { id_3317 };
                  bool while_flag_3318 { true };
                  do {
                    int32_t id_3319 { int32_t(dlist1_fst_1012) };
                    uint8_t id_3320 { 0 };
                    int32_t id_3321 { repeat_n_1015[id_3320] };
                    bool id_3322 { bool(id_3319 > id_3321) };
                    while_flag_3318 = id_3322;
                    if (while_flag_3318) {
                      uint8_t id_3323 { 0 };
                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3324 { inits_src_ref_1014[id_3323] };
                      {
                        ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_1016 { id_3324 };
                        {
                          auto dlist2_fst_1017 { std::get<0>(dlist2_1016) };
                          auto dlist2_snd_1018 { std::get<1>(dlist2_1016) };
                          uint8_t id_3325 { 0 };
                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3326 { fun3261(dlist2_snd_1018) };
                          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3327;
                          {
                            auto dlist3_fst_1020 { std::get<0>(id_3326) };
                            auto dlist3_snd_1021 { std::get<1>(id_3326) };
                            Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3328 { dlist3_fst_1020, dlist2_fst_1017 };
                            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3329 { id_3328, dlist3_snd_1021 };
                            letpair_res_3327 = id_3329;
                          }
                          Void id_3330 { ((void)(inits_src_ref_1014[id_3325] = letpair_res_3327), ::dessser::Void()) };
                          (void)id_3330;
                        }
                        (void)::dessser::Void();
                      }
                      (void)::dessser::Void();
                      uint8_t id_3331 { 0 };
                      uint8_t id_3332 { 0 };
                      int32_t id_3333 { repeat_n_1015[id_3332] };
                      int32_t id_3334 { 1L };
                      int32_t id_3335 { int32_t(id_3333 + id_3334) };
                      Void id_3336 { ((void)(repeat_n_1015[id_3331] = id_3335), ::dessser::Void()) };
                      (void)id_3336;
                      (void)id_3336;
                    }
                  } while (while_flag_3318);
                  (void)::dessser::Void();
                }
                (void)::dessser::Void();
                uint8_t id_3337 { 0 };
                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3338 { inits_src_ref_1014[id_3337] };
                let_res_3315 = id_3338;
              }
              letpair_res_3311 = let_res_3315;
            }
            let_res_3310 = letpair_res_3311;
          }
          ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_3339;
          {
            auto dlist4_fst_1023 { std::get<0>(let_res_3310) };
            auto dlist4_snd_1024 { std::get<1>(let_res_3310) };
            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3340 { std::in_place_index<0>, dlist4_fst_1023 };
            ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 id_3341 { id_3340, dlist4_snd_1024 };
            letpair_res_3339 = id_3341;
          }
          choose_res_3269 = letpair_res_3339;
        } else {
          uint16_t id_3342 { 1 };
          bool id_3343 { bool(id_3342 == dsum1_fst_64) };
          ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 choose_res_3344;
          if (id_3343) {
            uint32_t id_3345 { 0U };
            Vec<1, uint32_t> id_3346 {  id_3345  };
            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3347;
            {
              Vec<1, uint32_t> leb_ref_970 { id_3346 };
              uint8_t id_3348 { 0 };
              Vec<1, uint8_t> id_3349 {  id_3348  };
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3350;
              {
                Vec<1, uint8_t> shft_ref_971 { id_3349 };
                Vec<1, Pointer> id_3351 {  dsum1_snd_65  };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3352;
                {
                  Vec<1, Pointer> p_ref_972 { id_3351 };
                  bool while_flag_3353 { true };
                  do {
                    uint8_t id_3354 { 0 };
                    Pointer id_3355 { p_ref_972[id_3354] };
                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3356 { id_3355.readU8() };
                    bool let_res_3357;
                    {
                      ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_973 { id_3356 };
                      bool letpair_res_3358;
                      {
                        auto leb128_fst_974 { std::get<0>(leb128_973) };
                        auto leb128_snd_975 { std::get<1>(leb128_973) };
                        uint8_t id_3359 { 0 };
                        Void id_3360 { ((void)(p_ref_972[id_3359] = leb128_snd_975), ::dessser::Void()) };
                        (void)id_3360;
                        uint8_t id_3361 { 0 };
                        uint8_t id_3362 { 127 };
                        uint8_t id_3363 { uint8_t(leb128_fst_974 & id_3362) };
                        uint32_t id_3364 { uint32_t(id_3363) };
                        uint8_t id_3365 { 0 };
                        uint8_t id_3366 { shft_ref_971[id_3365] };
                        uint32_t id_3367 { uint32_t(id_3364 << id_3366) };
                        uint8_t id_3368 { 0 };
                        uint32_t id_3369 { leb_ref_970[id_3368] };
                        uint32_t id_3370 { uint32_t(id_3367 | id_3369) };
                        Void id_3371 { ((void)(leb_ref_970[id_3361] = id_3370), ::dessser::Void()) };
                        (void)id_3371;
                        uint8_t id_3372 { 0 };
                        uint8_t id_3373 { 0 };
                        uint8_t id_3374 { shft_ref_971[id_3373] };
                        uint8_t id_3375 { 7 };
                        uint8_t id_3376 { uint8_t(id_3374 + id_3375) };
                        Void id_3377 { ((void)(shft_ref_971[id_3372] = id_3376), ::dessser::Void()) };
                        (void)id_3377;
                        uint8_t id_3378 { 128 };
                        bool id_3379 { bool(leb128_fst_974 >= id_3378) };
                        letpair_res_3358 = id_3379;
                      }
                      let_res_3357 = letpair_res_3358;
                    }
                    while_flag_3353 = let_res_3357;
                    if (while_flag_3353) {
                      (void)::dessser::Void();
                    }
                  } while (while_flag_3353);
                  (void)::dessser::Void();
                  uint8_t id_3380 { 0 };
                  uint32_t id_3381 { leb_ref_970[id_3380] };
                  uint8_t id_3382 { 0 };
                  Pointer id_3383 { p_ref_972[id_3382] };
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3384 { id_3381, id_3383 };
                  let_res_3352 = id_3384;
                }
                let_res_3350 = let_res_3352;
              }
              let_res_3347 = let_res_3350;
            }
            ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 let_res_3385;
            {
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_979 { let_res_3347 };
              ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 letpair_res_3386;
              {
                auto dlist1_fst_980 { std::get<0>(dlist1_979) };
                auto dlist1_snd_981 { std::get<1>(dlist1_979) };
                Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> endoflist_3387;
                ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3388 { endoflist_3387, dlist1_snd_981 };
                Vec<1, ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4> id_3389 {  id_3388  };
                ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 let_res_3390;
                {
                  Vec<1, ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4> inits_src_ref_982 { id_3389 };
                  int32_t id_3391 { 0L };
                  Vec<1, int32_t> id_3392 {  id_3391  };
                  {
                    Vec<1, int32_t> repeat_n_983 { id_3392 };
                    bool while_flag_3393 { true };
                    do {
                      int32_t id_3394 { int32_t(dlist1_fst_980) };
                      uint8_t id_3395 { 0 };
                      int32_t id_3396 { repeat_n_983[id_3395] };
                      bool id_3397 { bool(id_3394 > id_3396) };
                      while_flag_3393 = id_3397;
                      if (while_flag_3393) {
                        uint8_t id_3398 { 0 };
                        ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3399 { inits_src_ref_982[id_3398] };
                        {
                          ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 dlist2_984 { id_3399 };
                          {
                            auto dlist2_fst_985 { std::get<0>(dlist2_984) };
                            auto dlist2_snd_986 { std::get<1>(dlist2_984) };
                            uint8_t id_3400 { 0 };
                            auto fun3401 { dessser::gen::field_name::of_row_binary };
                            ::dessser::gen::raql_expr::t18cecf882d7ac80cef37dfe6b22279d4 id_3402 { fun3401(dlist2_snd_986) };
                            ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 letpair_res_3403;
                            {
                              auto dtup_fst_988 { std::get<0>(id_3402) };
                              auto dtup_snd_989 { std::get<1>(id_3402) };
                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3404 { fun3261(dtup_snd_989) };
                              ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 letpair_res_3405;
                              {
                                auto dtup_fst_991 { std::get<0>(id_3404) };
                                auto dtup_snd_992 { std::get<1>(id_3404) };
                                ::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 id_3406 { dtup_fst_988, dtup_fst_991 };
                                Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_3407 { id_3406, dlist2_fst_985 };
                                ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3408 { id_3407, dtup_snd_992 };
                                letpair_res_3405 = id_3408;
                              }
                              letpair_res_3403 = letpair_res_3405;
                            }
                            Void id_3409 { ((void)(inits_src_ref_982[id_3400] = letpair_res_3403), ::dessser::Void()) };
                            (void)id_3409;
                          }
                          (void)::dessser::Void();
                        }
                        (void)::dessser::Void();
                        uint8_t id_3410 { 0 };
                        uint8_t id_3411 { 0 };
                        int32_t id_3412 { repeat_n_983[id_3411] };
                        int32_t id_3413 { 1L };
                        int32_t id_3414 { int32_t(id_3412 + id_3413) };
                        Void id_3415 { ((void)(repeat_n_983[id_3410] = id_3414), ::dessser::Void()) };
                        (void)id_3415;
                        (void)id_3415;
                      }
                    } while (while_flag_3393);
                    (void)::dessser::Void();
                  }
                  (void)::dessser::Void();
                  uint8_t id_3416 { 0 };
                  ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3417 { inits_src_ref_982[id_3416] };
                  let_res_3390 = id_3417;
                }
                letpair_res_3386 = let_res_3390;
              }
              let_res_3385 = letpair_res_3386;
            }
            ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_3418;
            {
              auto dlist4_fst_997 { std::get<0>(let_res_3385) };
              auto dlist4_snd_998 { std::get<1>(let_res_3385) };
              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3419 { std::in_place_index<1>, dlist4_fst_997 };
              ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 id_3420 { id_3419, dlist4_snd_998 };
              letpair_res_3418 = id_3420;
            }
            choose_res_3344 = letpair_res_3418;
          } else {
            uint16_t id_3421 { 2 };
            bool id_3422 { bool(id_3421 == dsum1_fst_64) };
            ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 choose_res_3423;
            if (id_3422) {
              uint32_t id_3424 { 0U };
              Vec<1, uint32_t> id_3425 {  id_3424  };
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3426;
              {
                Vec<1, uint32_t> leb_ref_944 { id_3425 };
                uint8_t id_3427 { 0 };
                Vec<1, uint8_t> id_3428 {  id_3427  };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3429;
                {
                  Vec<1, uint8_t> shft_ref_945 { id_3428 };
                  Vec<1, Pointer> id_3430 {  dsum1_snd_65  };
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3431;
                  {
                    Vec<1, Pointer> p_ref_946 { id_3430 };
                    bool while_flag_3432 { true };
                    do {
                      uint8_t id_3433 { 0 };
                      Pointer id_3434 { p_ref_946[id_3433] };
                      ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3435 { id_3434.readU8() };
                      bool let_res_3436;
                      {
                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_947 { id_3435 };
                        bool letpair_res_3437;
                        {
                          auto leb128_fst_948 { std::get<0>(leb128_947) };
                          auto leb128_snd_949 { std::get<1>(leb128_947) };
                          uint8_t id_3438 { 0 };
                          Void id_3439 { ((void)(p_ref_946[id_3438] = leb128_snd_949), ::dessser::Void()) };
                          (void)id_3439;
                          uint8_t id_3440 { 0 };
                          uint8_t id_3441 { 127 };
                          uint8_t id_3442 { uint8_t(leb128_fst_948 & id_3441) };
                          uint32_t id_3443 { uint32_t(id_3442) };
                          uint8_t id_3444 { 0 };
                          uint8_t id_3445 { shft_ref_945[id_3444] };
                          uint32_t id_3446 { uint32_t(id_3443 << id_3445) };
                          uint8_t id_3447 { 0 };
                          uint32_t id_3448 { leb_ref_944[id_3447] };
                          uint32_t id_3449 { uint32_t(id_3446 | id_3448) };
                          Void id_3450 { ((void)(leb_ref_944[id_3440] = id_3449), ::dessser::Void()) };
                          (void)id_3450;
                          uint8_t id_3451 { 0 };
                          uint8_t id_3452 { 0 };
                          uint8_t id_3453 { shft_ref_945[id_3452] };
                          uint8_t id_3454 { 7 };
                          uint8_t id_3455 { uint8_t(id_3453 + id_3454) };
                          Void id_3456 { ((void)(shft_ref_945[id_3451] = id_3455), ::dessser::Void()) };
                          (void)id_3456;
                          uint8_t id_3457 { 128 };
                          bool id_3458 { bool(leb128_fst_948 >= id_3457) };
                          letpair_res_3437 = id_3458;
                        }
                        let_res_3436 = letpair_res_3437;
                      }
                      while_flag_3432 = let_res_3436;
                      if (while_flag_3432) {
                        (void)::dessser::Void();
                      }
                    } while (while_flag_3432);
                    (void)::dessser::Void();
                    uint8_t id_3459 { 0 };
                    uint32_t id_3460 { leb_ref_944[id_3459] };
                    uint8_t id_3461 { 0 };
                    Pointer id_3462 { p_ref_946[id_3461] };
                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3463 { id_3460, id_3462 };
                    let_res_3431 = id_3463;
                  }
                  let_res_3429 = let_res_3431;
                }
                let_res_3426 = let_res_3429;
              }
              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3464;
              {
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_953 { let_res_3426 };
                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3465;
                {
                  auto dlist1_fst_954 { std::get<0>(dlist1_953) };
                  auto dlist1_snd_955 { std::get<1>(dlist1_953) };
                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_3466;
                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3467 { endoflist_3466, dlist1_snd_955 };
                  Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_3468 {  id_3467  };
                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3469;
                  {
                    Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_956 { id_3468 };
                    int32_t id_3470 { 0L };
                    Vec<1, int32_t> id_3471 {  id_3470  };
                    {
                      Vec<1, int32_t> repeat_n_957 { id_3471 };
                      bool while_flag_3472 { true };
                      do {
                        int32_t id_3473 { int32_t(dlist1_fst_954) };
                        uint8_t id_3474 { 0 };
                        int32_t id_3475 { repeat_n_957[id_3474] };
                        bool id_3476 { bool(id_3473 > id_3475) };
                        while_flag_3472 = id_3476;
                        if (while_flag_3472) {
                          uint8_t id_3477 { 0 };
                          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3478 { inits_src_ref_956[id_3477] };
                          {
                            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_958 { id_3478 };
                            {
                              auto dlist2_fst_959 { std::get<0>(dlist2_958) };
                              auto dlist2_snd_960 { std::get<1>(dlist2_958) };
                              uint8_t id_3479 { 0 };
                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3480 { fun3261(dlist2_snd_960) };
                              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3481;
                              {
                                auto dlist3_fst_962 { std::get<0>(id_3480) };
                                auto dlist3_snd_963 { std::get<1>(id_3480) };
                                Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3482 { dlist3_fst_962, dlist2_fst_959 };
                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3483 { id_3482, dlist3_snd_963 };
                                letpair_res_3481 = id_3483;
                              }
                              Void id_3484 { ((void)(inits_src_ref_956[id_3479] = letpair_res_3481), ::dessser::Void()) };
                              (void)id_3484;
                            }
                            (void)::dessser::Void();
                          }
                          (void)::dessser::Void();
                          uint8_t id_3485 { 0 };
                          uint8_t id_3486 { 0 };
                          int32_t id_3487 { repeat_n_957[id_3486] };
                          int32_t id_3488 { 1L };
                          int32_t id_3489 { int32_t(id_3487 + id_3488) };
                          Void id_3490 { ((void)(repeat_n_957[id_3485] = id_3489), ::dessser::Void()) };
                          (void)id_3490;
                          (void)id_3490;
                        }
                      } while (while_flag_3472);
                      (void)::dessser::Void();
                    }
                    (void)::dessser::Void();
                    uint8_t id_3491 { 0 };
                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3492 { inits_src_ref_956[id_3491] };
                    let_res_3469 = id_3492;
                  }
                  letpair_res_3465 = let_res_3469;
                }
                let_res_3464 = letpair_res_3465;
              }
              ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_3493;
              {
                auto dlist4_fst_965 { std::get<0>(let_res_3464) };
                auto dlist4_snd_966 { std::get<1>(let_res_3464) };
                ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3494 { std::in_place_index<2>, dlist4_fst_965 };
                ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 id_3495 { id_3494, dlist4_snd_966 };
                letpair_res_3493 = id_3495;
              }
              choose_res_3423 = letpair_res_3493;
            } else {
              uint16_t id_3496 { 3 };
              bool id_3497 { bool(id_3496 == dsum1_fst_64) };
              ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 choose_res_3498;
              if (id_3497) {
                uint32_t id_3499 { 0U };
                Vec<1, uint32_t> id_3500 {  id_3499  };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3501;
                {
                  Vec<1, uint32_t> leb_ref_903 { id_3500 };
                  uint8_t id_3502 { 0 };
                  Vec<1, uint8_t> id_3503 {  id_3502  };
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3504;
                  {
                    Vec<1, uint8_t> shft_ref_904 { id_3503 };
                    Vec<1, Pointer> id_3505 {  dsum1_snd_65  };
                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3506;
                    {
                      Vec<1, Pointer> p_ref_905 { id_3505 };
                      bool while_flag_3507 { true };
                      do {
                        uint8_t id_3508 { 0 };
                        Pointer id_3509 { p_ref_905[id_3508] };
                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3510 { id_3509.readU8() };
                        bool let_res_3511;
                        {
                          ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_906 { id_3510 };
                          bool letpair_res_3512;
                          {
                            auto leb128_fst_907 { std::get<0>(leb128_906) };
                            auto leb128_snd_908 { std::get<1>(leb128_906) };
                            uint8_t id_3513 { 0 };
                            Void id_3514 { ((void)(p_ref_905[id_3513] = leb128_snd_908), ::dessser::Void()) };
                            (void)id_3514;
                            uint8_t id_3515 { 0 };
                            uint8_t id_3516 { 127 };
                            uint8_t id_3517 { uint8_t(leb128_fst_907 & id_3516) };
                            uint32_t id_3518 { uint32_t(id_3517) };
                            uint8_t id_3519 { 0 };
                            uint8_t id_3520 { shft_ref_904[id_3519] };
                            uint32_t id_3521 { uint32_t(id_3518 << id_3520) };
                            uint8_t id_3522 { 0 };
                            uint32_t id_3523 { leb_ref_903[id_3522] };
                            uint32_t id_3524 { uint32_t(id_3521 | id_3523) };
                            Void id_3525 { ((void)(leb_ref_903[id_3515] = id_3524), ::dessser::Void()) };
                            (void)id_3525;
                            uint8_t id_3526 { 0 };
                            uint8_t id_3527 { 0 };
                            uint8_t id_3528 { shft_ref_904[id_3527] };
                            uint8_t id_3529 { 7 };
                            uint8_t id_3530 { uint8_t(id_3528 + id_3529) };
                            Void id_3531 { ((void)(shft_ref_904[id_3526] = id_3530), ::dessser::Void()) };
                            (void)id_3531;
                            uint8_t id_3532 { 128 };
                            bool id_3533 { bool(leb128_fst_907 >= id_3532) };
                            letpair_res_3512 = id_3533;
                          }
                          let_res_3511 = letpair_res_3512;
                        }
                        while_flag_3507 = let_res_3511;
                        if (while_flag_3507) {
                          (void)::dessser::Void();
                        }
                      } while (while_flag_3507);
                      (void)::dessser::Void();
                      uint8_t id_3534 { 0 };
                      uint32_t id_3535 { leb_ref_903[id_3534] };
                      uint8_t id_3536 { 0 };
                      Pointer id_3537 { p_ref_905[id_3536] };
                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3538 { id_3535, id_3537 };
                      let_res_3506 = id_3538;
                    }
                    let_res_3504 = let_res_3506;
                  }
                  let_res_3501 = let_res_3504;
                }
                ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 let_res_3539;
                {
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_912 { let_res_3501 };
                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3540;
                  {
                    auto dlist1_fst_913 { std::get<0>(dlist1_912) };
                    auto dlist1_snd_914 { std::get<1>(dlist1_912) };
                    Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> endoflist_3541;
                    ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3542 { endoflist_3541, dlist1_snd_914 };
                    Vec<1, ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2> id_3543 {  id_3542  };
                    ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 let_res_3544;
                    {
                      Vec<1, ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2> inits_src_ref_915 { id_3543 };
                      int32_t id_3545 { 0L };
                      Vec<1, int32_t> id_3546 {  id_3545  };
                      {
                        Vec<1, int32_t> repeat_n_916 { id_3546 };
                        bool while_flag_3547 { true };
                        do {
                          int32_t id_3548 { int32_t(dlist1_fst_913) };
                          uint8_t id_3549 { 0 };
                          int32_t id_3550 { repeat_n_916[id_3549] };
                          bool id_3551 { bool(id_3548 > id_3550) };
                          while_flag_3547 = id_3551;
                          if (while_flag_3547) {
                            uint8_t id_3552 { 0 };
                            ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3553 { inits_src_ref_915[id_3552] };
                            {
                              ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 dlist2_917 { id_3553 };
                              {
                                auto dlist2_fst_918 { std::get<0>(dlist2_917) };
                                auto dlist2_snd_919 { std::get<1>(dlist2_917) };
                                uint8_t id_3554 { 0 };
                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3555 { fun3261(dlist2_snd_919) };
                                ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3556;
                                {
                                  auto drec_fst_921 { std::get<0>(id_3555) };
                                  auto drec_snd_922 { std::get<1>(id_3555) };
                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3557 { fun3261(drec_snd_922) };
                                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3558;
                                  {
                                    auto drec_fst_924 { std::get<0>(id_3557) };
                                    auto drec_snd_925 { std::get<1>(id_3557) };
                                    ::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa id_3559 { drec_fst_921, drec_fst_924 };
                                    Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_3560 { id_3559, dlist2_fst_918 };
                                    ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3561 { id_3560, drec_snd_925 };
                                    letpair_res_3558 = id_3561;
                                  }
                                  letpair_res_3556 = letpair_res_3558;
                                }
                                Void id_3562 { ((void)(inits_src_ref_915[id_3554] = letpair_res_3556), ::dessser::Void()) };
                                (void)id_3562;
                              }
                              (void)::dessser::Void();
                            }
                            (void)::dessser::Void();
                            uint8_t id_3563 { 0 };
                            uint8_t id_3564 { 0 };
                            int32_t id_3565 { repeat_n_916[id_3564] };
                            int32_t id_3566 { 1L };
                            int32_t id_3567 { int32_t(id_3565 + id_3566) };
                            Void id_3568 { ((void)(repeat_n_916[id_3563] = id_3567), ::dessser::Void()) };
                            (void)id_3568;
                            (void)id_3568;
                          }
                        } while (while_flag_3547);
                        (void)::dessser::Void();
                      }
                      (void)::dessser::Void();
                      uint8_t id_3569 { 0 };
                      ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3570 { inits_src_ref_915[id_3569] };
                      let_res_3544 = id_3570;
                    }
                    letpair_res_3540 = let_res_3544;
                  }
                  let_res_3539 = letpair_res_3540;
                }
                ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3571;
                {
                  auto dlist4_fst_930 { std::get<0>(let_res_3539) };
                  auto dlist4_snd_931 { std::get<1>(let_res_3539) };
                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3572 { dlist4_fst_930, dlist4_snd_931 };
                  letpair_res_3571 = id_3572;
                }
                ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 let_res_3573;
                {
                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 dtup_932 { letpair_res_3571 };
                  ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_3574;
                  {
                    auto dtup_fst_933 { std::get<0>(dtup_932) };
                    auto dtup_snd_934 { std::get<1>(dtup_932) };
                    Size id_3575 { 0UL };
                    uint8_t id_3576 { dtup_snd_934.peekU8(id_3575) };
                    uint8_t id_3577 { 1 };
                    bool id_3578 { bool(id_3576 == id_3577) };
                    ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 choose_res_3579;
                    if (id_3578) {
                      std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3580 { std::nullopt };
                      Size id_3581 { 1UL };
                      Pointer id_3582 { dtup_snd_934.skip(id_3581) };
                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_3583 { id_3580, id_3582 };
                      choose_res_3579 = id_3583;
                    } else {
                      Size id_3584 { 1UL };
                      Pointer id_3585 { dtup_snd_934.skip(id_3584) };
                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3586 { fun3261(id_3585) };
                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 letpair_res_3587;
                      {
                        auto make1_1_fst_936 { std::get<0>(id_3586) };
                        auto make1_1_snd_937 { std::get<1>(id_3586) };
                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3588 { make1_1_fst_936 };
                        ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_3589 { id_3588, make1_1_snd_937 };
                        letpair_res_3587 = id_3589;
                      }
                      choose_res_3579 = letpair_res_3587;
                    }
                    ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_3590;
                    {
                      auto dtup_fst_939 { std::get<0>(choose_res_3579) };
                      auto dtup_snd_940 { std::get<1>(choose_res_3579) };
                      ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_3591 { dtup_fst_933, dtup_fst_939 };
                      ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_3592 { std::in_place_index<3>, id_3591 };
                      ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 id_3593 { id_3592, dtup_snd_940 };
                      letpair_res_3590 = id_3593;
                    }
                    letpair_res_3574 = letpair_res_3590;
                  }
                  let_res_3573 = letpair_res_3574;
                }
                choose_res_3498 = let_res_3573;
              } else {
                uint16_t id_3594 { 4 };
                bool id_3595 { bool(id_3594 == dsum1_fst_64) };
                ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 choose_res_3596;
                if (id_3595) {
                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3597 { dsum1_snd_65.readU16Le() };
                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3598;
                  {
                    auto du16_fst_474 { std::get<0>(id_3597) };
                    auto du16_snd_475 { std::get<1>(id_3597) };
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3599 { du16_fst_474, du16_snd_475 };
                    letpair_res_3598 = id_3599;
                  }
                  ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 let_res_3600;
                  {
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_479 { letpair_res_3598 };
                    ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_3601;
                    {
                      auto dsum1_fst_480 { std::get<0>(dsum1_479) };
                      auto dsum1_snd_481 { std::get<1>(dsum1_479) };
                      uint16_t id_3602 { 0 };
                      bool id_3603 { bool(id_3602 == dsum1_fst_480) };
                      ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 choose_res_3604;
                      if (id_3603) {
                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3605 { dsum1_snd_481.readU16Le() };
                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3606;
                        {
                          auto du16_fst_839 { std::get<0>(id_3605) };
                          auto du16_snd_840 { std::get<1>(id_3605) };
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3607 { du16_fst_839, du16_snd_840 };
                          letpair_res_3606 = id_3607;
                        }
                        ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 let_res_3608;
                        {
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_844 { letpair_res_3606 };
                          ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3609;
                          {
                            auto dsum1_fst_845 { std::get<0>(dsum1_844) };
                            auto dsum1_snd_846 { std::get<1>(dsum1_844) };
                            uint16_t id_3610 { 0 };
                            bool id_3611 { bool(id_3610 == dsum1_fst_845) };
                            ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3612;
                            if (id_3611) {
                              auto fun3613 { dessser::gen::raql_value::of_row_binary };
                              ::dessser::gen::raql_expr::tf3063cfb73e0f06d3ea99ebd15a86d50 id_3614 { fun3613(dsum1_snd_846) };
                              ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3615;
                              {
                                auto dsum2_fst_895 { std::get<0>(id_3614) };
                                auto dsum2_snd_896 { std::get<1>(id_3614) };
                                ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3616 { std::in_place_index<0>, dsum2_fst_895 };
                                ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3617 { id_3616, dsum2_snd_896 };
                                letpair_res_3615 = id_3617;
                              }
                              choose_res_3612 = letpair_res_3615;
                            } else {
                              uint16_t id_3618 { 1 };
                              bool id_3619 { bool(id_3618 == dsum1_fst_845) };
                              ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3620;
                              if (id_3619) {
                                auto fun3621 { dessser::gen::raql_variable::of_row_binary };
                                ::dessser::gen::raql_expr::tc4e06565de85990f3a8300f3d579c5ec id_3622 { fun3621(dsum1_snd_846) };
                                ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3623;
                                {
                                  auto dsum2_fst_892 { std::get<0>(id_3622) };
                                  auto dsum2_snd_893 { std::get<1>(id_3622) };
                                  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3624 { std::in_place_index<1>, dsum2_fst_892 };
                                  ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3625 { id_3624, dsum2_snd_893 };
                                  letpair_res_3623 = id_3625;
                                }
                                choose_res_3620 = letpair_res_3623;
                              } else {
                                uint16_t id_3626 { 2 };
                                bool id_3627 { bool(id_3626 == dsum1_fst_845) };
                                ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3628;
                                if (id_3627) {
                                  auto fun3629 { dessser::gen::raql_binding_key::of_row_binary };
                                  ::dessser::gen::raql_expr::tafafa3f11f4987d5593612447c141adc id_3630 { fun3629(dsum1_snd_846) };
                                  ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3631;
                                  {
                                    auto dsum2_fst_889 { std::get<0>(id_3630) };
                                    auto dsum2_snd_890 { std::get<1>(id_3630) };
                                    ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3632 { std::in_place_index<2>, dsum2_fst_889 };
                                    ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3633 { id_3632, dsum2_snd_890 };
                                    letpair_res_3631 = id_3633;
                                  }
                                  choose_res_3628 = letpair_res_3631;
                                } else {
                                  uint16_t id_3634 { 3 };
                                  bool id_3635 { bool(id_3634 == dsum1_fst_845) };
                                  ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3636;
                                  if (id_3635) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3637 { std::in_place_index<3>, ::dessser::Void() };
                                    ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3638 { id_3637, dsum1_snd_846 };
                                    choose_res_3636 = id_3638;
                                  } else {
                                    uint16_t id_3639 { 4 };
                                    bool id_3640 { bool(id_3639 == dsum1_fst_845) };
                                    ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3641;
                                    if (id_3640) {
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3642 { std::in_place_index<4>, ::dessser::Void() };
                                      ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3643 { id_3642, dsum1_snd_846 };
                                      choose_res_3641 = id_3643;
                                    } else {
                                      uint16_t id_3644 { 5 };
                                      bool id_3645 { bool(id_3644 == dsum1_fst_845) };
                                      ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3646;
                                      if (id_3645) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3647 { std::in_place_index<5>, ::dessser::Void() };
                                        ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3648 { id_3647, dsum1_snd_846 };
                                        choose_res_3646 = id_3648;
                                      } else {
                                        uint16_t id_3649 { 6 };
                                        bool id_3650 { bool(id_3649 == dsum1_fst_845) };
                                        ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3651;
                                        if (id_3650) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3652 { std::in_place_index<6>, ::dessser::Void() };
                                          ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3653 { id_3652, dsum1_snd_846 };
                                          choose_res_3651 = id_3653;
                                        } else {
                                          uint16_t id_3654 { 7 };
                                          bool id_3655 { bool(id_3654 == dsum1_fst_845) };
                                          ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3656;
                                          if (id_3655) {
                                            uint32_t id_3657 { 0U };
                                            Vec<1, uint32_t> id_3658 {  id_3657  };
                                            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3659;
                                            {
                                              Vec<1, uint32_t> leb_ref_850 { id_3658 };
                                              uint8_t id_3660 { 0 };
                                              Vec<1, uint8_t> id_3661 {  id_3660  };
                                              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3662;
                                              {
                                                Vec<1, uint8_t> shft_ref_851 { id_3661 };
                                                Vec<1, Pointer> id_3663 {  dsum1_snd_846  };
                                                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3664;
                                                {
                                                  Vec<1, Pointer> p_ref_852 { id_3663 };
                                                  bool while_flag_3665 { true };
                                                  do {
                                                    uint8_t id_3666 { 0 };
                                                    Pointer id_3667 { p_ref_852[id_3666] };
                                                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3668 { id_3667.readU8() };
                                                    bool let_res_3669;
                                                    {
                                                      ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_853 { id_3668 };
                                                      bool letpair_res_3670;
                                                      {
                                                        auto leb128_fst_854 { std::get<0>(leb128_853) };
                                                        auto leb128_snd_855 { std::get<1>(leb128_853) };
                                                        uint8_t id_3671 { 0 };
                                                        Void id_3672 { ((void)(p_ref_852[id_3671] = leb128_snd_855), ::dessser::Void()) };
                                                        (void)id_3672;
                                                        uint8_t id_3673 { 0 };
                                                        uint8_t id_3674 { 127 };
                                                        uint8_t id_3675 { uint8_t(leb128_fst_854 & id_3674) };
                                                        uint32_t id_3676 { uint32_t(id_3675) };
                                                        uint8_t id_3677 { 0 };
                                                        uint8_t id_3678 { shft_ref_851[id_3677] };
                                                        uint32_t id_3679 { uint32_t(id_3676 << id_3678) };
                                                        uint8_t id_3680 { 0 };
                                                        uint32_t id_3681 { leb_ref_850[id_3680] };
                                                        uint32_t id_3682 { uint32_t(id_3679 | id_3681) };
                                                        Void id_3683 { ((void)(leb_ref_850[id_3673] = id_3682), ::dessser::Void()) };
                                                        (void)id_3683;
                                                        uint8_t id_3684 { 0 };
                                                        uint8_t id_3685 { 0 };
                                                        uint8_t id_3686 { shft_ref_851[id_3685] };
                                                        uint8_t id_3687 { 7 };
                                                        uint8_t id_3688 { uint8_t(id_3686 + id_3687) };
                                                        Void id_3689 { ((void)(shft_ref_851[id_3684] = id_3688), ::dessser::Void()) };
                                                        (void)id_3689;
                                                        uint8_t id_3690 { 128 };
                                                        bool id_3691 { bool(leb128_fst_854 >= id_3690) };
                                                        letpair_res_3670 = id_3691;
                                                      }
                                                      let_res_3669 = letpair_res_3670;
                                                    }
                                                    while_flag_3665 = let_res_3669;
                                                    if (while_flag_3665) {
                                                      (void)::dessser::Void();
                                                    }
                                                  } while (while_flag_3665);
                                                  (void)::dessser::Void();
                                                  uint8_t id_3692 { 0 };
                                                  uint32_t id_3693 { leb_ref_850[id_3692] };
                                                  uint8_t id_3694 { 0 };
                                                  Pointer id_3695 { p_ref_852[id_3694] };
                                                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3696 { id_3693, id_3695 };
                                                  let_res_3664 = id_3696;
                                                }
                                                let_res_3662 = let_res_3664;
                                              }
                                              let_res_3659 = let_res_3662;
                                            }
                                            ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 let_res_3697;
                                            {
                                              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_859 { let_res_3659 };
                                              ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 letpair_res_3698;
                                              {
                                                auto dlist1_fst_860 { std::get<0>(dlist1_859) };
                                                auto dlist1_snd_861 { std::get<1>(dlist1_859) };
                                                Lst<dessser::gen::raql_path_comp::t_ext> endoflist_3699;
                                                ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3700 { endoflist_3699, dlist1_snd_861 };
                                                Vec<1, ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9> id_3701 {  id_3700  };
                                                ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 let_res_3702;
                                                {
                                                  Vec<1, ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9> inits_src_ref_862 { id_3701 };
                                                  int32_t id_3703 { 0L };
                                                  Vec<1, int32_t> id_3704 {  id_3703  };
                                                  {
                                                    Vec<1, int32_t> repeat_n_863 { id_3704 };
                                                    bool while_flag_3705 { true };
                                                    do {
                                                      int32_t id_3706 { int32_t(dlist1_fst_860) };
                                                      uint8_t id_3707 { 0 };
                                                      int32_t id_3708 { repeat_n_863[id_3707] };
                                                      bool id_3709 { bool(id_3706 > id_3708) };
                                                      while_flag_3705 = id_3709;
                                                      if (while_flag_3705) {
                                                        uint8_t id_3710 { 0 };
                                                        ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3711 { inits_src_ref_862[id_3710] };
                                                        {
                                                          ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 dlist2_864 { id_3711 };
                                                          {
                                                            auto dlist2_fst_865 { std::get<0>(dlist2_864) };
                                                            auto dlist2_snd_866 { std::get<1>(dlist2_864) };
                                                            uint8_t id_3712 { 0 };
                                                            auto fun3713 { dessser::gen::raql_path_comp::of_row_binary };
                                                            ::dessser::gen::raql_expr::tdb32a2e5c34c950a3600da6c2ff4f8f3 id_3714 { fun3713(dlist2_snd_866) };
                                                            ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 letpair_res_3715;
                                                            {
                                                              auto dlist3_fst_868 { std::get<0>(id_3714) };
                                                              auto dlist3_snd_869 { std::get<1>(id_3714) };
                                                              Lst<dessser::gen::raql_path_comp::t_ext> id_3716 { dlist3_fst_868, dlist2_fst_865 };
                                                              ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3717 { id_3716, dlist3_snd_869 };
                                                              letpair_res_3715 = id_3717;
                                                            }
                                                            Void id_3718 { ((void)(inits_src_ref_862[id_3712] = letpair_res_3715), ::dessser::Void()) };
                                                            (void)id_3718;
                                                          }
                                                          (void)::dessser::Void();
                                                        }
                                                        (void)::dessser::Void();
                                                        uint8_t id_3719 { 0 };
                                                        uint8_t id_3720 { 0 };
                                                        int32_t id_3721 { repeat_n_863[id_3720] };
                                                        int32_t id_3722 { 1L };
                                                        int32_t id_3723 { int32_t(id_3721 + id_3722) };
                                                        Void id_3724 { ((void)(repeat_n_863[id_3719] = id_3723), ::dessser::Void()) };
                                                        (void)id_3724;
                                                        (void)id_3724;
                                                      }
                                                    } while (while_flag_3705);
                                                    (void)::dessser::Void();
                                                  }
                                                  (void)::dessser::Void();
                                                  uint8_t id_3725 { 0 };
                                                  ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3726 { inits_src_ref_862[id_3725] };
                                                  let_res_3702 = id_3726;
                                                }
                                                letpair_res_3698 = let_res_3702;
                                              }
                                              let_res_3697 = letpair_res_3698;
                                            }
                                            ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3727;
                                            {
                                              auto dlist4_fst_871 { std::get<0>(let_res_3697) };
                                              auto dlist4_snd_872 { std::get<1>(let_res_3697) };
                                              ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3728 { std::in_place_index<7>, dlist4_fst_871 };
                                              ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3729 { id_3728, dlist4_snd_872 };
                                              letpair_res_3727 = id_3729;
                                            }
                                            choose_res_3656 = letpair_res_3727;
                                          } else {
                                            uint16_t id_3730 { 8 };
                                            bool id_3731 { bool(dsum1_fst_845 == id_3730) };
                                            Void id_3732 { ((void)(assert(id_3731)), ::dessser::Void()) };
                                            (void)id_3732;
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3733 { std::in_place_index<8>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3734 { id_3733, dsum1_snd_846 };
                                            choose_res_3656 = id_3734;
                                          }
                                          choose_res_3651 = choose_res_3656;
                                        }
                                        choose_res_3646 = choose_res_3651;
                                      }
                                      choose_res_3641 = choose_res_3646;
                                    }
                                    choose_res_3636 = choose_res_3641;
                                  }
                                  choose_res_3628 = choose_res_3636;
                                }
                                choose_res_3620 = choose_res_3628;
                              }
                              choose_res_3612 = choose_res_3620;
                            }
                            letpair_res_3609 = choose_res_3612;
                          }
                          let_res_3608 = letpair_res_3609;
                        }
                        ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_3735;
                        {
                          auto dsum2_fst_898 { std::get<0>(let_res_3608) };
                          auto dsum2_snd_899 { std::get<1>(let_res_3608) };
                          ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_3736 { std::in_place_index<0>, dsum2_fst_898 };
                          ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 id_3737 { id_3736, dsum2_snd_899 };
                          letpair_res_3735 = id_3737;
                        }
                        choose_res_3604 = letpair_res_3735;
                      } else {
                        uint16_t id_3738 { 1 };
                        bool id_3739 { bool(id_3738 == dsum1_fst_480) };
                        ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 choose_res_3740;
                        if (id_3739) {
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3741 { dsum1_snd_481.readU16Le() };
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3742;
                          {
                            auto du16_fst_665 { std::get<0>(id_3741) };
                            auto du16_snd_666 { std::get<1>(id_3741) };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3743 { du16_fst_665, du16_snd_666 };
                            letpair_res_3742 = id_3743;
                          }
                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 let_res_3744;
                          {
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_670 { letpair_res_3742 };
                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 letpair_res_3745;
                            {
                              auto dsum1_fst_671 { std::get<0>(dsum1_670) };
                              auto dsum1_snd_672 { std::get<1>(dsum1_670) };
                              uint16_t id_3746 { 0 };
                              bool id_3747 { bool(id_3746 == dsum1_fst_671) };
                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3748;
                              if (id_3747) {
                                (void)::dessser::Void();
                                ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3749 { std::in_place_index<0>, ::dessser::Void() };
                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3750 { id_3749, dsum1_snd_672 };
                                choose_res_3748 = id_3750;
                              } else {
                                uint16_t id_3751 { 1 };
                                bool id_3752 { bool(id_3751 == dsum1_fst_671) };
                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3753;
                                if (id_3752) {
                                  auto fun3754 { dessser::gen::raql_type::of_row_binary };
                                  ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 id_3755 { fun3754(dsum1_snd_672) };
                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 letpair_res_3756;
                                  {
                                    auto dsum2_fst_824 { std::get<0>(id_3755) };
                                    auto dsum2_snd_825 { std::get<1>(id_3755) };
                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3757 { std::in_place_index<1>, dsum2_fst_824 };
                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3758 { id_3757, dsum2_snd_825 };
                                    letpair_res_3756 = id_3758;
                                  }
                                  choose_res_3753 = letpair_res_3756;
                                } else {
                                  uint16_t id_3759 { 2 };
                                  bool id_3760 { bool(id_3759 == dsum1_fst_671) };
                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3761;
                                  if (id_3760) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3762 { std::in_place_index<2>, ::dessser::Void() };
                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3763 { id_3762, dsum1_snd_672 };
                                    choose_res_3761 = id_3763;
                                  } else {
                                    uint16_t id_3764 { 3 };
                                    bool id_3765 { bool(id_3764 == dsum1_fst_671) };
                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3766;
                                    if (id_3765) {
                                      auto fun3767 { dessser::gen::raql_type::of_row_binary };
                                      ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 id_3768 { fun3767(dsum1_snd_672) };
                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 let_res_3769;
                                      {
                                        ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 dtup_796 { id_3768 };
                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 letpair_res_3770;
                                        {
                                          auto dtup_fst_797 { std::get<0>(dtup_796) };
                                          auto dtup_snd_798 { std::get<1>(dtup_796) };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3771 { dtup_snd_798.readU16Le() };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3772;
                                          {
                                            auto du16_fst_800 { std::get<0>(id_3771) };
                                            auto du16_snd_801 { std::get<1>(id_3771) };
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3773 { du16_fst_800, du16_snd_801 };
                                            letpair_res_3772 = id_3773;
                                          }
                                          ::dessser::gen::raql_expr::te8dcb493b127a28ebc308edae07a8c7e let_res_3774;
                                          {
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_805 { letpair_res_3772 };
                                            ::dessser::gen::raql_expr::te8dcb493b127a28ebc308edae07a8c7e letpair_res_3775;
                                            {
                                              auto dsum1_fst_806 { std::get<0>(dsum1_805) };
                                              auto dsum1_snd_807 { std::get<1>(dsum1_805) };
                                              uint16_t id_3776 { 0 };
                                              bool id_3777 { bool(id_3776 == dsum1_fst_806) };
                                              ::dessser::gen::raql_expr::te8dcb493b127a28ebc308edae07a8c7e choose_res_3778;
                                              if (id_3777) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051 id_3779 { LittleEndian };
                                                ::dessser::gen::raql_expr::te8dcb493b127a28ebc308edae07a8c7e id_3780 { id_3779, dsum1_snd_807 };
                                                choose_res_3778 = id_3780;
                                              } else {
                                                uint16_t id_3781 { 1 };
                                                bool id_3782 { bool(dsum1_fst_806 == id_3781) };
                                                Void id_3783 { ((void)(assert(id_3782)), ::dessser::Void()) };
                                                (void)id_3783;
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::t33468f773066246b23483d21d37a8051 id_3784 { BigEndian };
                                                ::dessser::gen::raql_expr::te8dcb493b127a28ebc308edae07a8c7e id_3785 { id_3784, dsum1_snd_807 };
                                                choose_res_3778 = id_3785;
                                              }
                                              letpair_res_3775 = choose_res_3778;
                                            }
                                            let_res_3774 = letpair_res_3775;
                                          }
                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 letpair_res_3786;
                                          {
                                            auto dtup_fst_815 { std::get<0>(let_res_3774) };
                                            auto dtup_snd_816 { std::get<1>(let_res_3774) };
                                            ::dessser::gen::raql_expr::tb74caafb8030d46b153cbcb9ef47ad2d id_3787 { dtup_fst_797, dtup_fst_815 };
                                            ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3788 { std::in_place_index<3>, id_3787 };
                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3789 { id_3788, dtup_snd_816 };
                                            letpair_res_3786 = id_3789;
                                          }
                                          letpair_res_3770 = letpair_res_3786;
                                        }
                                        let_res_3769 = letpair_res_3770;
                                      }
                                      choose_res_3766 = let_res_3769;
                                    } else {
                                      uint16_t id_3790 { 4 };
                                      bool id_3791 { bool(id_3790 == dsum1_fst_671) };
                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3792;
                                      if (id_3791) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3793 { std::in_place_index<4>, ::dessser::Void() };
                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3794 { id_3793, dsum1_snd_672 };
                                        choose_res_3792 = id_3794;
                                      } else {
                                        uint16_t id_3795 { 5 };
                                        bool id_3796 { bool(id_3795 == dsum1_fst_671) };
                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3797;
                                        if (id_3796) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3798 { std::in_place_index<5>, ::dessser::Void() };
                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3799 { id_3798, dsum1_snd_672 };
                                          choose_res_3797 = id_3799;
                                        } else {
                                          uint16_t id_3800 { 6 };
                                          bool id_3801 { bool(id_3800 == dsum1_fst_671) };
                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3802;
                                          if (id_3801) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3803 { std::in_place_index<6>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3804 { id_3803, dsum1_snd_672 };
                                            choose_res_3802 = id_3804;
                                          } else {
                                            uint16_t id_3805 { 7 };
                                            bool id_3806 { bool(id_3805 == dsum1_fst_671) };
                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3807;
                                            if (id_3806) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3808 { std::in_place_index<7>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3809 { id_3808, dsum1_snd_672 };
                                              choose_res_3807 = id_3809;
                                            } else {
                                              uint16_t id_3810 { 8 };
                                              bool id_3811 { bool(id_3810 == dsum1_fst_671) };
                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3812;
                                              if (id_3811) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3813 { std::in_place_index<8>, ::dessser::Void() };
                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3814 { id_3813, dsum1_snd_672 };
                                                choose_res_3812 = id_3814;
                                              } else {
                                                uint16_t id_3815 { 9 };
                                                bool id_3816 { bool(id_3815 == dsum1_fst_671) };
                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3817;
                                                if (id_3816) {
                                                  (void)::dessser::Void();
                                                  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3818 { std::in_place_index<9>, ::dessser::Void() };
                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3819 { id_3818, dsum1_snd_672 };
                                                  choose_res_3817 = id_3819;
                                                } else {
                                                  uint16_t id_3820 { 10 };
                                                  bool id_3821 { bool(id_3820 == dsum1_fst_671) };
                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3822;
                                                  if (id_3821) {
                                                    (void)::dessser::Void();
                                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3823 { std::in_place_index<10>, ::dessser::Void() };
                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3824 { id_3823, dsum1_snd_672 };
                                                    choose_res_3822 = id_3824;
                                                  } else {
                                                    uint16_t id_3825 { 11 };
                                                    bool id_3826 { bool(id_3825 == dsum1_fst_671) };
                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3827;
                                                    if (id_3826) {
                                                      (void)::dessser::Void();
                                                      ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3828 { std::in_place_index<11>, ::dessser::Void() };
                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3829 { id_3828, dsum1_snd_672 };
                                                      choose_res_3827 = id_3829;
                                                    } else {
                                                      uint16_t id_3830 { 12 };
                                                      bool id_3831 { bool(id_3830 == dsum1_fst_671) };
                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3832;
                                                      if (id_3831) {
                                                        (void)::dessser::Void();
                                                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3833 { std::in_place_index<12>, ::dessser::Void() };
                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3834 { id_3833, dsum1_snd_672 };
                                                        choose_res_3832 = id_3834;
                                                      } else {
                                                        uint16_t id_3835 { 13 };
                                                        bool id_3836 { bool(id_3835 == dsum1_fst_671) };
                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3837;
                                                        if (id_3836) {
                                                          (void)::dessser::Void();
                                                          ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3838 { std::in_place_index<13>, ::dessser::Void() };
                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3839 { id_3838, dsum1_snd_672 };
                                                          choose_res_3837 = id_3839;
                                                        } else {
                                                          uint16_t id_3840 { 14 };
                                                          bool id_3841 { bool(id_3840 == dsum1_fst_671) };
                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3842;
                                                          if (id_3841) {
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3843 { std::in_place_index<14>, ::dessser::Void() };
                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3844 { id_3843, dsum1_snd_672 };
                                                            choose_res_3842 = id_3844;
                                                          } else {
                                                            uint16_t id_3845 { 15 };
                                                            bool id_3846 { bool(id_3845 == dsum1_fst_671) };
                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3847;
                                                            if (id_3846) {
                                                              (void)::dessser::Void();
                                                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3848 { std::in_place_index<15>, ::dessser::Void() };
                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3849 { id_3848, dsum1_snd_672 };
                                                              choose_res_3847 = id_3849;
                                                            } else {
                                                              uint16_t id_3850 { 16 };
                                                              bool id_3851 { bool(id_3850 == dsum1_fst_671) };
                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3852;
                                                              if (id_3851) {
                                                                (void)::dessser::Void();
                                                                ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3853 { std::in_place_index<16>, ::dessser::Void() };
                                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3854 { id_3853, dsum1_snd_672 };
                                                                choose_res_3852 = id_3854;
                                                              } else {
                                                                uint16_t id_3855 { 17 };
                                                                bool id_3856 { bool(id_3855 == dsum1_fst_671) };
                                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3857;
                                                                if (id_3856) {
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3858 { std::in_place_index<17>, ::dessser::Void() };
                                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3859 { id_3858, dsum1_snd_672 };
                                                                  choose_res_3857 = id_3859;
                                                                } else {
                                                                  uint16_t id_3860 { 18 };
                                                                  bool id_3861 { bool(id_3860 == dsum1_fst_671) };
                                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3862;
                                                                  if (id_3861) {
                                                                    (void)::dessser::Void();
                                                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3863 { std::in_place_index<18>, ::dessser::Void() };
                                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3864 { id_3863, dsum1_snd_672 };
                                                                    choose_res_3862 = id_3864;
                                                                  } else {
                                                                    uint16_t id_3865 { 19 };
                                                                    bool id_3866 { bool(id_3865 == dsum1_fst_671) };
                                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3867;
                                                                    if (id_3866) {
                                                                      (void)::dessser::Void();
                                                                      ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3868 { std::in_place_index<19>, ::dessser::Void() };
                                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3869 { id_3868, dsum1_snd_672 };
                                                                      choose_res_3867 = id_3869;
                                                                    } else {
                                                                      uint16_t id_3870 { 20 };
                                                                      bool id_3871 { bool(id_3870 == dsum1_fst_671) };
                                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3872;
                                                                      if (id_3871) {
                                                                        (void)::dessser::Void();
                                                                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3873 { std::in_place_index<20>, ::dessser::Void() };
                                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3874 { id_3873, dsum1_snd_672 };
                                                                        choose_res_3872 = id_3874;
                                                                      } else {
                                                                        uint16_t id_3875 { 21 };
                                                                        bool id_3876 { bool(id_3875 == dsum1_fst_671) };
                                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3877;
                                                                        if (id_3876) {
                                                                          (void)::dessser::Void();
                                                                          ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3878 { std::in_place_index<21>, ::dessser::Void() };
                                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3879 { id_3878, dsum1_snd_672 };
                                                                          choose_res_3877 = id_3879;
                                                                        } else {
                                                                          uint16_t id_3880 { 22 };
                                                                          bool id_3881 { bool(id_3880 == dsum1_fst_671) };
                                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3882;
                                                                          if (id_3881) {
                                                                            (void)::dessser::Void();
                                                                            ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3883 { std::in_place_index<22>, ::dessser::Void() };
                                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3884 { id_3883, dsum1_snd_672 };
                                                                            choose_res_3882 = id_3884;
                                                                          } else {
                                                                            uint16_t id_3885 { 23 };
                                                                            bool id_3886 { bool(id_3885 == dsum1_fst_671) };
                                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3887;
                                                                            if (id_3886) {
                                                                              (void)::dessser::Void();
                                                                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3888 { std::in_place_index<23>, ::dessser::Void() };
                                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3889 { id_3888, dsum1_snd_672 };
                                                                              choose_res_3887 = id_3889;
                                                                            } else {
                                                                              uint16_t id_3890 { 24 };
                                                                              bool id_3891 { bool(id_3890 == dsum1_fst_671) };
                                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3892;
                                                                              if (id_3891) {
                                                                                (void)::dessser::Void();
                                                                                ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3893 { std::in_place_index<24>, ::dessser::Void() };
                                                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3894 { id_3893, dsum1_snd_672 };
                                                                                choose_res_3892 = id_3894;
                                                                              } else {
                                                                                uint16_t id_3895 { 25 };
                                                                                bool id_3896 { bool(id_3895 == dsum1_fst_671) };
                                                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3897;
                                                                                if (id_3896) {
                                                                                  (void)::dessser::Void();
                                                                                  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3898 { std::in_place_index<25>, ::dessser::Void() };
                                                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3899 { id_3898, dsum1_snd_672 };
                                                                                  choose_res_3897 = id_3899;
                                                                                } else {
                                                                                  uint16_t id_3900 { 26 };
                                                                                  bool id_3901 { bool(id_3900 == dsum1_fst_671) };
                                                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3902;
                                                                                  if (id_3901) {
                                                                                    (void)::dessser::Void();
                                                                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3903 { std::in_place_index<26>, ::dessser::Void() };
                                                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3904 { id_3903, dsum1_snd_672 };
                                                                                    choose_res_3902 = id_3904;
                                                                                  } else {
                                                                                    uint16_t id_3905 { 27 };
                                                                                    bool id_3906 { bool(id_3905 == dsum1_fst_671) };
                                                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3907;
                                                                                    if (id_3906) {
                                                                                      (void)::dessser::Void();
                                                                                      ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3908 { std::in_place_index<27>, ::dessser::Void() };
                                                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3909 { id_3908, dsum1_snd_672 };
                                                                                      choose_res_3907 = id_3909;
                                                                                    } else {
                                                                                      uint16_t id_3910 { 28 };
                                                                                      bool id_3911 { bool(id_3910 == dsum1_fst_671) };
                                                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3912;
                                                                                      if (id_3911) {
                                                                                        (void)::dessser::Void();
                                                                                        ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3913 { std::in_place_index<28>, ::dessser::Void() };
                                                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3914 { id_3913, dsum1_snd_672 };
                                                                                        choose_res_3912 = id_3914;
                                                                                      } else {
                                                                                        uint16_t id_3915 { 29 };
                                                                                        bool id_3916 { bool(id_3915 == dsum1_fst_671) };
                                                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3917;
                                                                                        if (id_3916) {
                                                                                          (void)::dessser::Void();
                                                                                          ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3918 { std::in_place_index<29>, ::dessser::Void() };
                                                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3919 { id_3918, dsum1_snd_672 };
                                                                                          choose_res_3917 = id_3919;
                                                                                        } else {
                                                                                          uint16_t id_3920 { 30 };
                                                                                          bool id_3921 { bool(id_3920 == dsum1_fst_671) };
                                                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3922;
                                                                                          if (id_3921) {
                                                                                            (void)::dessser::Void();
                                                                                            ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3923 { std::in_place_index<30>, ::dessser::Void() };
                                                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3924 { id_3923, dsum1_snd_672 };
                                                                                            choose_res_3922 = id_3924;
                                                                                          } else {
                                                                                            uint16_t id_3925 { 31 };
                                                                                            bool id_3926 { bool(id_3925 == dsum1_fst_671) };
                                                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3927;
                                                                                            if (id_3926) {
                                                                                              (void)::dessser::Void();
                                                                                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3928 { std::in_place_index<31>, ::dessser::Void() };
                                                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3929 { id_3928, dsum1_snd_672 };
                                                                                              choose_res_3927 = id_3929;
                                                                                            } else {
                                                                                              uint16_t id_3930 { 32 };
                                                                                              bool id_3931 { bool(id_3930 == dsum1_fst_671) };
                                                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3932;
                                                                                              if (id_3931) {
                                                                                                (void)::dessser::Void();
                                                                                                ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3933 { std::in_place_index<32>, ::dessser::Void() };
                                                                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3934 { id_3933, dsum1_snd_672 };
                                                                                                choose_res_3932 = id_3934;
                                                                                              } else {
                                                                                                uint16_t id_3935 { 33 };
                                                                                                bool id_3936 { bool(id_3935 == dsum1_fst_671) };
                                                                                                ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3937;
                                                                                                if (id_3936) {
                                                                                                  (void)::dessser::Void();
                                                                                                  ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3938 { std::in_place_index<33>, ::dessser::Void() };
                                                                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3939 { id_3938, dsum1_snd_672 };
                                                                                                  choose_res_3937 = id_3939;
                                                                                                } else {
                                                                                                  uint16_t id_3940 { 34 };
                                                                                                  bool id_3941 { bool(id_3940 == dsum1_fst_671) };
                                                                                                  ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3942;
                                                                                                  if (id_3941) {
                                                                                                    (void)::dessser::Void();
                                                                                                    ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3943 { std::in_place_index<34>, ::dessser::Void() };
                                                                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3944 { id_3943, dsum1_snd_672 };
                                                                                                    choose_res_3942 = id_3944;
                                                                                                  } else {
                                                                                                    uint16_t id_3945 { 35 };
                                                                                                    bool id_3946 { bool(id_3945 == dsum1_fst_671) };
                                                                                                    ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3947;
                                                                                                    if (id_3946) {
                                                                                                      (void)::dessser::Void();
                                                                                                      ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3948 { std::in_place_index<35>, ::dessser::Void() };
                                                                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_3949 { id_3948, dsum1_snd_672 };
                                                                                                      choose_res_3947 = id_3949;
                                                                                                    } else {
                                                                                                      uint16_t id_3950 { 36 };
                                                                                                      bool id_3951 { bool(id_3950 == dsum1_fst_671) };
                                                                                                      ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_3952;
                                                                                                      if (id_3951) {
                                                                                                        uint32_t id_3953 { 0U };
                                                                                                        Vec<1, uint32_t> id_3954 {  id_3953  };
                                                                                                        ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa let_res_3955;
                                                                                                        {
                                                                                                          Vec<1, uint32_t> leb_ref_685 { id_3954 };
                                                                                                          uint8_t id_3956 { 0 };
                                                                                                          Vec<1, uint8_t> id_3957 {  id_3956  };
                                                                                                          ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa let_res_3958;
                                                                                                          {
                                                                                                            Vec<1, uint8_t> shft_ref_686 { id_3957 };
                                                                                                            Vec<1, Pointer> id_3959 {  dsum1_snd_672  };
                                                                                                            ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa let_res_3960;
                                                                                                            {
                                                                                                              Vec<1, Pointer> p_ref_687 { id_3959 };
                                                                                                              bool while_flag_3961 { true };
                                                                                                              do {
                                                                                                                uint8_t id_3962 { 0 };
                                                                                                                Pointer id_3963 { p_ref_687[id_3962] };
                                                                                                                ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3964 { id_3963.readU8() };
                                                                                                                bool let_res_3965;
                                                                                                                {
                                                                                                                  ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_688 { id_3964 };
                                                                                                                  bool letpair_res_3966;
                                                                                                                  {
                                                                                                                    auto leb128_fst_689 { std::get<0>(leb128_688) };
                                                                                                                    auto leb128_snd_690 { std::get<1>(leb128_688) };
                                                                                                                    uint8_t id_3967 { 0 };
                                                                                                                    Void id_3968 { ((void)(p_ref_687[id_3967] = leb128_snd_690), ::dessser::Void()) };
                                                                                                                    (void)id_3968;
                                                                                                                    uint8_t id_3969 { 0 };
                                                                                                                    uint8_t id_3970 { 127 };
                                                                                                                    uint8_t id_3971 { uint8_t(leb128_fst_689 & id_3970) };
                                                                                                                    uint32_t id_3972 { uint32_t(id_3971) };
                                                                                                                    uint8_t id_3973 { 0 };
                                                                                                                    uint8_t id_3974 { shft_ref_686[id_3973] };
                                                                                                                    uint32_t id_3975 { uint32_t(id_3972 << id_3974) };
                                                                                                                    uint8_t id_3976 { 0 };
                                                                                                                    uint32_t id_3977 { leb_ref_685[id_3976] };
                                                                                                                    uint32_t id_3978 { uint32_t(id_3975 | id_3977) };
                                                                                                                    Void id_3979 { ((void)(leb_ref_685[id_3969] = id_3978), ::dessser::Void()) };
                                                                                                                    (void)id_3979;
                                                                                                                    uint8_t id_3980 { 0 };
                                                                                                                    uint8_t id_3981 { 0 };
                                                                                                                    uint8_t id_3982 { shft_ref_686[id_3981] };
                                                                                                                    uint8_t id_3983 { 7 };
                                                                                                                    uint8_t id_3984 { uint8_t(id_3982 + id_3983) };
                                                                                                                    Void id_3985 { ((void)(shft_ref_686[id_3980] = id_3984), ::dessser::Void()) };
                                                                                                                    (void)id_3985;
                                                                                                                    uint8_t id_3986 { 128 };
                                                                                                                    bool id_3987 { bool(leb128_fst_689 >= id_3986) };
                                                                                                                    letpair_res_3966 = id_3987;
                                                                                                                  }
                                                                                                                  let_res_3965 = letpair_res_3966;
                                                                                                                }
                                                                                                                while_flag_3961 = let_res_3965;
                                                                                                                if (while_flag_3961) {
                                                                                                                  (void)::dessser::Void();
                                                                                                                }
                                                                                                              } while (while_flag_3961);
                                                                                                              (void)::dessser::Void();
                                                                                                              uint8_t id_3988 { 0 };
                                                                                                              uint32_t id_3989 { leb_ref_685[id_3988] };
                                                                                                              Size id_3990 { Size(id_3989) };
                                                                                                              uint8_t id_3991 { 0 };
                                                                                                              Pointer id_3992 { p_ref_687[id_3991] };
                                                                                                              ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa id_3993 { id_3990, id_3992 };
                                                                                                              let_res_3960 = id_3993;
                                                                                                            }
                                                                                                            let_res_3958 = let_res_3960;
                                                                                                          }
                                                                                                          let_res_3955 = let_res_3958;
                                                                                                        }
                                                                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 let_res_3994;
                                                                                                        {
                                                                                                          ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa dstring1_691 { let_res_3955 };
                                                                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 letpair_res_3995;
                                                                                                          {
                                                                                                            auto dstring1_fst_692 { std::get<0>(dstring1_691) };
                                                                                                            auto dstring1_snd_693 { std::get<1>(dstring1_691) };
                                                                                                            ::dessser::gen::raql_expr::t9ef6882174ae71a34a3c5ef6b29242fb id_3996 { dstring1_snd_693.readBytes(dstring1_fst_692) };
                                                                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 letpair_res_3997;
                                                                                                            {
                                                                                                              auto dstring2_fst_695 { std::get<0>(id_3996) };
                                                                                                              auto dstring2_snd_696 { std::get<1>(id_3996) };
                                                                                                              std::string id_3998 { dstring2_fst_695.toString() };
                                                                                                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_3999 { std::in_place_index<36>, id_3998 };
                                                                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_4000 { id_3999, dstring2_snd_696 };
                                                                                                              letpair_res_3997 = id_4000;
                                                                                                            }
                                                                                                            letpair_res_3995 = letpair_res_3997;
                                                                                                          }
                                                                                                          let_res_3994 = letpair_res_3995;
                                                                                                        }
                                                                                                        choose_res_3952 = let_res_3994;
                                                                                                      } else {
                                                                                                        uint16_t id_4001 { 37 };
                                                                                                        bool id_4002 { bool(id_4001 == dsum1_fst_671) };
                                                                                                        ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_4003;
                                                                                                        if (id_4002) {
                                                                                                          (void)::dessser::Void();
                                                                                                          ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_4004 { std::in_place_index<37>, ::dessser::Void() };
                                                                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_4005 { id_4004, dsum1_snd_672 };
                                                                                                          choose_res_4003 = id_4005;
                                                                                                        } else {
                                                                                                          uint16_t id_4006 { 38 };
                                                                                                          bool id_4007 { bool(id_4006 == dsum1_fst_671) };
                                                                                                          ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_4008;
                                                                                                          if (id_4007) {
                                                                                                            (void)::dessser::Void();
                                                                                                            ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_4009 { std::in_place_index<38>, ::dessser::Void() };
                                                                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_4010 { id_4009, dsum1_snd_672 };
                                                                                                            choose_res_4008 = id_4010;
                                                                                                          } else {
                                                                                                            uint16_t id_4011 { 39 };
                                                                                                            bool id_4012 { bool(id_4011 == dsum1_fst_671) };
                                                                                                            ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 choose_res_4013;
                                                                                                            if (id_4012) {
                                                                                                              (void)::dessser::Void();
                                                                                                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_4014 { std::in_place_index<39>, ::dessser::Void() };
                                                                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_4015 { id_4014, dsum1_snd_672 };
                                                                                                              choose_res_4013 = id_4015;
                                                                                                            } else {
                                                                                                              uint16_t id_4016 { 40 };
                                                                                                              bool id_4017 { bool(dsum1_fst_671 == id_4016) };
                                                                                                              Void id_4018 { ((void)(assert(id_4017)), ::dessser::Void()) };
                                                                                                              (void)id_4018;
                                                                                                              (void)::dessser::Void();
                                                                                                              ::dessser::gen::raql_expr::ta1361e7c36afcb5ba90129e776bcbf84 id_4019 { std::in_place_index<40>, ::dessser::Void() };
                                                                                                              ::dessser::gen::raql_expr::t556c024f790314c3a0cb755ef8a385e6 id_4020 { id_4019, dsum1_snd_672 };
                                                                                                              choose_res_4013 = id_4020;
                                                                                                            }
                                                                                                            choose_res_4008 = choose_res_4013;
                                                                                                          }
                                                                                                          choose_res_4003 = choose_res_4008;
                                                                                                        }
                                                                                                        choose_res_3952 = choose_res_4003;
                                                                                                      }
                                                                                                      choose_res_3947 = choose_res_3952;
                                                                                                    }
                                                                                                    choose_res_3942 = choose_res_3947;
                                                                                                  }
                                                                                                  choose_res_3937 = choose_res_3942;
                                                                                                }
                                                                                                choose_res_3932 = choose_res_3937;
                                                                                              }
                                                                                              choose_res_3927 = choose_res_3932;
                                                                                            }
                                                                                            choose_res_3922 = choose_res_3927;
                                                                                          }
                                                                                          choose_res_3917 = choose_res_3922;
                                                                                        }
                                                                                        choose_res_3912 = choose_res_3917;
                                                                                      }
                                                                                      choose_res_3907 = choose_res_3912;
                                                                                    }
                                                                                    choose_res_3902 = choose_res_3907;
                                                                                  }
                                                                                  choose_res_3897 = choose_res_3902;
                                                                                }
                                                                                choose_res_3892 = choose_res_3897;
                                                                              }
                                                                              choose_res_3887 = choose_res_3892;
                                                                            }
                                                                            choose_res_3882 = choose_res_3887;
                                                                          }
                                                                          choose_res_3877 = choose_res_3882;
                                                                        }
                                                                        choose_res_3872 = choose_res_3877;
                                                                      }
                                                                      choose_res_3867 = choose_res_3872;
                                                                    }
                                                                    choose_res_3862 = choose_res_3867;
                                                                  }
                                                                  choose_res_3857 = choose_res_3862;
                                                                }
                                                                choose_res_3852 = choose_res_3857;
                                                              }
                                                              choose_res_3847 = choose_res_3852;
                                                            }
                                                            choose_res_3842 = choose_res_3847;
                                                          }
                                                          choose_res_3837 = choose_res_3842;
                                                        }
                                                        choose_res_3832 = choose_res_3837;
                                                      }
                                                      choose_res_3827 = choose_res_3832;
                                                    }
                                                    choose_res_3822 = choose_res_3827;
                                                  }
                                                  choose_res_3817 = choose_res_3822;
                                                }
                                                choose_res_3812 = choose_res_3817;
                                              }
                                              choose_res_3807 = choose_res_3812;
                                            }
                                            choose_res_3802 = choose_res_3807;
                                          }
                                          choose_res_3797 = choose_res_3802;
                                        }
                                        choose_res_3792 = choose_res_3797;
                                      }
                                      choose_res_3766 = choose_res_3792;
                                    }
                                    choose_res_3761 = choose_res_3766;
                                  }
                                  choose_res_3753 = choose_res_3761;
                                }
                                choose_res_3748 = choose_res_3753;
                              }
                              letpair_res_3745 = choose_res_3748;
                            }
                            let_res_3744 = letpair_res_3745;
                          }
                          ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4021;
                          {
                            auto dtup_fst_830 { std::get<0>(let_res_3744) };
                            auto dtup_snd_831 { std::get<1>(let_res_3744) };
                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4022 { fun3261(dtup_snd_831) };
                            ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4023;
                            {
                              auto dtup_fst_833 { std::get<0>(id_4022) };
                              auto dtup_snd_834 { std::get<1>(id_4022) };
                              ::dessser::gen::raql_expr::tdcaebeaea4b518f114e9d5c6a3122d25 id_4024 { dtup_fst_830, dtup_fst_833 };
                              ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_4025 { std::in_place_index<1>, id_4024 };
                              ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 id_4026 { id_4025, dtup_snd_834 };
                              letpair_res_4023 = id_4026;
                            }
                            letpair_res_4021 = letpair_res_4023;
                          }
                          choose_res_3740 = letpair_res_4021;
                        } else {
                          uint16_t id_4027 { 2 };
                          bool id_4028 { bool(id_4027 == dsum1_fst_480) };
                          ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 choose_res_4029;
                          if (id_4028) {
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4030 { dsum1_snd_481.readU16Le() };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4031;
                            {
                              auto du16_fst_612 { std::get<0>(id_4030) };
                              auto du16_snd_613 { std::get<1>(id_4030) };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4032 { du16_fst_612, du16_snd_613 };
                              letpair_res_4031 = id_4032;
                            }
                            ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 let_res_4033;
                            {
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_617 { letpair_res_4031 };
                              ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 letpair_res_4034;
                              {
                                auto dsum1_fst_618 { std::get<0>(dsum1_617) };
                                auto dsum1_snd_619 { std::get<1>(dsum1_617) };
                                uint16_t id_4035 { 0 };
                                bool id_4036 { bool(id_4035 == dsum1_fst_618) };
                                ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 choose_res_4037;
                                if (id_4036) {
                                  (void)::dessser::Void();
                                  ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036 id_4038 { Max };
                                  ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 id_4039 { id_4038, dsum1_snd_619 };
                                  choose_res_4037 = id_4039;
                                } else {
                                  uint16_t id_4040 { 1 };
                                  bool id_4041 { bool(id_4040 == dsum1_fst_618) };
                                  ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 choose_res_4042;
                                  if (id_4041) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036 id_4043 { Min };
                                    ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 id_4044 { id_4043, dsum1_snd_619 };
                                    choose_res_4042 = id_4044;
                                  } else {
                                    uint16_t id_4045 { 2 };
                                    bool id_4046 { bool(id_4045 == dsum1_fst_618) };
                                    ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 choose_res_4047;
                                    if (id_4046) {
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036 id_4048 { Print };
                                      ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 id_4049 { id_4048, dsum1_snd_619 };
                                      choose_res_4047 = id_4049;
                                    } else {
                                      uint16_t id_4050 { 3 };
                                      bool id_4051 { bool(dsum1_fst_618 == id_4050) };
                                      Void id_4052 { ((void)(assert(id_4051)), ::dessser::Void()) };
                                      (void)id_4052;
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::t5cdb95783a680d6980d26fd9ad947036 id_4053 { Coalesce };
                                      ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 id_4054 { id_4053, dsum1_snd_619 };
                                      choose_res_4047 = id_4054;
                                    }
                                    choose_res_4042 = choose_res_4047;
                                  }
                                  choose_res_4037 = choose_res_4042;
                                }
                                letpair_res_4034 = choose_res_4037;
                              }
                              let_res_4033 = letpair_res_4034;
                            }
                            ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 let_res_4055;
                            {
                              ::dessser::gen::raql_expr::t53f6edb28f7db698ddcd7f845431bd86 dtup_632 { let_res_4033 };
                              ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4056;
                              {
                                auto dtup_fst_633 { std::get<0>(dtup_632) };
                                auto dtup_snd_634 { std::get<1>(dtup_632) };
                                uint32_t id_4057 { 0U };
                                Vec<1, uint32_t> id_4058 {  id_4057  };
                                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4059;
                                {
                                  Vec<1, uint32_t> leb_ref_635 { id_4058 };
                                  uint8_t id_4060 { 0 };
                                  Vec<1, uint8_t> id_4061 {  id_4060  };
                                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4062;
                                  {
                                    Vec<1, uint8_t> shft_ref_636 { id_4061 };
                                    Vec<1, Pointer> id_4063 {  dtup_snd_634  };
                                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4064;
                                    {
                                      Vec<1, Pointer> p_ref_637 { id_4063 };
                                      bool while_flag_4065 { true };
                                      do {
                                        uint8_t id_4066 { 0 };
                                        Pointer id_4067 { p_ref_637[id_4066] };
                                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4068 { id_4067.readU8() };
                                        bool let_res_4069;
                                        {
                                          ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_638 { id_4068 };
                                          bool letpair_res_4070;
                                          {
                                            auto leb128_fst_639 { std::get<0>(leb128_638) };
                                            auto leb128_snd_640 { std::get<1>(leb128_638) };
                                            uint8_t id_4071 { 0 };
                                            Void id_4072 { ((void)(p_ref_637[id_4071] = leb128_snd_640), ::dessser::Void()) };
                                            (void)id_4072;
                                            uint8_t id_4073 { 0 };
                                            uint8_t id_4074 { 127 };
                                            uint8_t id_4075 { uint8_t(leb128_fst_639 & id_4074) };
                                            uint32_t id_4076 { uint32_t(id_4075) };
                                            uint8_t id_4077 { 0 };
                                            uint8_t id_4078 { shft_ref_636[id_4077] };
                                            uint32_t id_4079 { uint32_t(id_4076 << id_4078) };
                                            uint8_t id_4080 { 0 };
                                            uint32_t id_4081 { leb_ref_635[id_4080] };
                                            uint32_t id_4082 { uint32_t(id_4079 | id_4081) };
                                            Void id_4083 { ((void)(leb_ref_635[id_4073] = id_4082), ::dessser::Void()) };
                                            (void)id_4083;
                                            uint8_t id_4084 { 0 };
                                            uint8_t id_4085 { 0 };
                                            uint8_t id_4086 { shft_ref_636[id_4085] };
                                            uint8_t id_4087 { 7 };
                                            uint8_t id_4088 { uint8_t(id_4086 + id_4087) };
                                            Void id_4089 { ((void)(shft_ref_636[id_4084] = id_4088), ::dessser::Void()) };
                                            (void)id_4089;
                                            uint8_t id_4090 { 128 };
                                            bool id_4091 { bool(leb128_fst_639 >= id_4090) };
                                            letpair_res_4070 = id_4091;
                                          }
                                          let_res_4069 = letpair_res_4070;
                                        }
                                        while_flag_4065 = let_res_4069;
                                        if (while_flag_4065) {
                                          (void)::dessser::Void();
                                        }
                                      } while (while_flag_4065);
                                      (void)::dessser::Void();
                                      uint8_t id_4092 { 0 };
                                      uint32_t id_4093 { leb_ref_635[id_4092] };
                                      uint8_t id_4094 { 0 };
                                      Pointer id_4095 { p_ref_637[id_4094] };
                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4096 { id_4093, id_4095 };
                                      let_res_4064 = id_4096;
                                    }
                                    let_res_4062 = let_res_4064;
                                  }
                                  let_res_4059 = let_res_4062;
                                }
                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4097;
                                {
                                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_644 { let_res_4059 };
                                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4098;
                                  {
                                    auto dlist1_fst_645 { std::get<0>(dlist1_644) };
                                    auto dlist1_snd_646 { std::get<1>(dlist1_644) };
                                    Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_4099;
                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4100 { endoflist_4099, dlist1_snd_646 };
                                    Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_4101 {  id_4100  };
                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4102;
                                    {
                                      Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_647 { id_4101 };
                                      int32_t id_4103 { 0L };
                                      Vec<1, int32_t> id_4104 {  id_4103  };
                                      {
                                        Vec<1, int32_t> repeat_n_648 { id_4104 };
                                        bool while_flag_4105 { true };
                                        do {
                                          int32_t id_4106 { int32_t(dlist1_fst_645) };
                                          uint8_t id_4107 { 0 };
                                          int32_t id_4108 { repeat_n_648[id_4107] };
                                          bool id_4109 { bool(id_4106 > id_4108) };
                                          while_flag_4105 = id_4109;
                                          if (while_flag_4105) {
                                            uint8_t id_4110 { 0 };
                                            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4111 { inits_src_ref_647[id_4110] };
                                            {
                                              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_649 { id_4111 };
                                              {
                                                auto dlist2_fst_650 { std::get<0>(dlist2_649) };
                                                auto dlist2_snd_651 { std::get<1>(dlist2_649) };
                                                uint8_t id_4112 { 0 };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4113 { fun3261(dlist2_snd_651) };
                                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4114;
                                                {
                                                  auto dlist3_fst_653 { std::get<0>(id_4113) };
                                                  auto dlist3_snd_654 { std::get<1>(id_4113) };
                                                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4115 { dlist3_fst_653, dlist2_fst_650 };
                                                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4116 { id_4115, dlist3_snd_654 };
                                                  letpair_res_4114 = id_4116;
                                                }
                                                Void id_4117 { ((void)(inits_src_ref_647[id_4112] = letpair_res_4114), ::dessser::Void()) };
                                                (void)id_4117;
                                              }
                                              (void)::dessser::Void();
                                            }
                                            (void)::dessser::Void();
                                            uint8_t id_4118 { 0 };
                                            uint8_t id_4119 { 0 };
                                            int32_t id_4120 { repeat_n_648[id_4119] };
                                            int32_t id_4121 { 1L };
                                            int32_t id_4122 { int32_t(id_4120 + id_4121) };
                                            Void id_4123 { ((void)(repeat_n_648[id_4118] = id_4122), ::dessser::Void()) };
                                            (void)id_4123;
                                            (void)id_4123;
                                          }
                                        } while (while_flag_4105);
                                        (void)::dessser::Void();
                                      }
                                      (void)::dessser::Void();
                                      uint8_t id_4124 { 0 };
                                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4125 { inits_src_ref_647[id_4124] };
                                      let_res_4102 = id_4125;
                                    }
                                    letpair_res_4098 = let_res_4102;
                                  }
                                  let_res_4097 = letpair_res_4098;
                                }
                                ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4126;
                                {
                                  auto dlist4_fst_656 { std::get<0>(let_res_4097) };
                                  auto dlist4_snd_657 { std::get<1>(let_res_4097) };
                                  ::dessser::gen::raql_expr::t15592658c87dfdd5b6aa9aea551004da id_4127 { dtup_fst_633, dlist4_fst_656 };
                                  ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_4128 { std::in_place_index<2>, id_4127 };
                                  ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 id_4129 { id_4128, dlist4_snd_657 };
                                  letpair_res_4126 = id_4129;
                                }
                                letpair_res_4056 = letpair_res_4126;
                              }
                              let_res_4055 = letpair_res_4056;
                            }
                            choose_res_4029 = let_res_4055;
                          } else {
                            uint16_t id_4130 { 3 };
                            bool id_4131 { bool(id_4130 == dsum1_fst_480) };
                            ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 choose_res_4132;
                            if (id_4131) {
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4133 { dsum1_snd_481.readU16Le() };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4134;
                              {
                                auto du16_fst_513 { std::get<0>(id_4133) };
                                auto du16_snd_514 { std::get<1>(id_4133) };
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4135 { du16_fst_513, du16_snd_514 };
                                letpair_res_4134 = id_4135;
                              }
                              ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a let_res_4136;
                              {
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_518 { letpair_res_4134 };
                                ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a letpair_res_4137;
                                {
                                  auto dsum1_fst_519 { std::get<0>(dsum1_518) };
                                  auto dsum1_snd_520 { std::get<1>(dsum1_518) };
                                  uint16_t id_4138 { 0 };
                                  bool id_4139 { bool(id_4138 == dsum1_fst_519) };
                                  ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4140;
                                  if (id_4139) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4141 { Add };
                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4142 { id_4141, dsum1_snd_520 };
                                    choose_res_4140 = id_4142;
                                  } else {
                                    uint16_t id_4143 { 1 };
                                    bool id_4144 { bool(id_4143 == dsum1_fst_519) };
                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4145;
                                    if (id_4144) {
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4146 { Sub };
                                      ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4147 { id_4146, dsum1_snd_520 };
                                      choose_res_4145 = id_4147;
                                    } else {
                                      uint16_t id_4148 { 2 };
                                      bool id_4149 { bool(id_4148 == dsum1_fst_519) };
                                      ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4150;
                                      if (id_4149) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4151 { Mul };
                                        ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4152 { id_4151, dsum1_snd_520 };
                                        choose_res_4150 = id_4152;
                                      } else {
                                        uint16_t id_4153 { 3 };
                                        bool id_4154 { bool(id_4153 == dsum1_fst_519) };
                                        ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4155;
                                        if (id_4154) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4156 { Div };
                                          ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4157 { id_4156, dsum1_snd_520 };
                                          choose_res_4155 = id_4157;
                                        } else {
                                          uint16_t id_4158 { 4 };
                                          bool id_4159 { bool(id_4158 == dsum1_fst_519) };
                                          ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4160;
                                          if (id_4159) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4161 { IDiv };
                                            ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4162 { id_4161, dsum1_snd_520 };
                                            choose_res_4160 = id_4162;
                                          } else {
                                            uint16_t id_4163 { 5 };
                                            bool id_4164 { bool(id_4163 == dsum1_fst_519) };
                                            ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4165;
                                            if (id_4164) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4166 { Mod };
                                              ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4167 { id_4166, dsum1_snd_520 };
                                              choose_res_4165 = id_4167;
                                            } else {
                                              uint16_t id_4168 { 6 };
                                              bool id_4169 { bool(id_4168 == dsum1_fst_519) };
                                              ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4170;
                                              if (id_4169) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4171 { Pow };
                                                ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4172 { id_4171, dsum1_snd_520 };
                                                choose_res_4170 = id_4172;
                                              } else {
                                                uint16_t id_4173 { 7 };
                                                bool id_4174 { bool(id_4173 == dsum1_fst_519) };
                                                ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4175;
                                                if (id_4174) {
                                                  (void)::dessser::Void();
                                                  ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4176 { Trunc };
                                                  ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4177 { id_4176, dsum1_snd_520 };
                                                  choose_res_4175 = id_4177;
                                                } else {
                                                  uint16_t id_4178 { 8 };
                                                  bool id_4179 { bool(id_4178 == dsum1_fst_519) };
                                                  ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4180;
                                                  if (id_4179) {
                                                    (void)::dessser::Void();
                                                    ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4181 { Reldiff };
                                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4182 { id_4181, dsum1_snd_520 };
                                                    choose_res_4180 = id_4182;
                                                  } else {
                                                    uint16_t id_4183 { 9 };
                                                    bool id_4184 { bool(id_4183 == dsum1_fst_519) };
                                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4185;
                                                    if (id_4184) {
                                                      (void)::dessser::Void();
                                                      ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4186 { And };
                                                      ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4187 { id_4186, dsum1_snd_520 };
                                                      choose_res_4185 = id_4187;
                                                    } else {
                                                      uint16_t id_4188 { 10 };
                                                      bool id_4189 { bool(id_4188 == dsum1_fst_519) };
                                                      ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4190;
                                                      if (id_4189) {
                                                        (void)::dessser::Void();
                                                        ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4191 { Or };
                                                        ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4192 { id_4191, dsum1_snd_520 };
                                                        choose_res_4190 = id_4192;
                                                      } else {
                                                        uint16_t id_4193 { 11 };
                                                        bool id_4194 { bool(id_4193 == dsum1_fst_519) };
                                                        ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4195;
                                                        if (id_4194) {
                                                          (void)::dessser::Void();
                                                          ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4196 { Ge };
                                                          ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4197 { id_4196, dsum1_snd_520 };
                                                          choose_res_4195 = id_4197;
                                                        } else {
                                                          uint16_t id_4198 { 12 };
                                                          bool id_4199 { bool(id_4198 == dsum1_fst_519) };
                                                          ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4200;
                                                          if (id_4199) {
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4201 { Gt };
                                                            ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4202 { id_4201, dsum1_snd_520 };
                                                            choose_res_4200 = id_4202;
                                                          } else {
                                                            uint16_t id_4203 { 13 };
                                                            bool id_4204 { bool(id_4203 == dsum1_fst_519) };
                                                            ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4205;
                                                            if (id_4204) {
                                                              (void)::dessser::Void();
                                                              ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4206 { Eq };
                                                              ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4207 { id_4206, dsum1_snd_520 };
                                                              choose_res_4205 = id_4207;
                                                            } else {
                                                              uint16_t id_4208 { 14 };
                                                              bool id_4209 { bool(id_4208 == dsum1_fst_519) };
                                                              ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4210;
                                                              if (id_4209) {
                                                                (void)::dessser::Void();
                                                                ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4211 { Concat };
                                                                ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4212 { id_4211, dsum1_snd_520 };
                                                                choose_res_4210 = id_4212;
                                                              } else {
                                                                uint16_t id_4213 { 15 };
                                                                bool id_4214 { bool(id_4213 == dsum1_fst_519) };
                                                                ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4215;
                                                                if (id_4214) {
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4216 { StartsWith };
                                                                  ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4217 { id_4216, dsum1_snd_520 };
                                                                  choose_res_4215 = id_4217;
                                                                } else {
                                                                  uint16_t id_4218 { 16 };
                                                                  bool id_4219 { bool(id_4218 == dsum1_fst_519) };
                                                                  ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4220;
                                                                  if (id_4219) {
                                                                    (void)::dessser::Void();
                                                                    ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4221 { EndsWith };
                                                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4222 { id_4221, dsum1_snd_520 };
                                                                    choose_res_4220 = id_4222;
                                                                  } else {
                                                                    uint16_t id_4223 { 17 };
                                                                    bool id_4224 { bool(id_4223 == dsum1_fst_519) };
                                                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4225;
                                                                    if (id_4224) {
                                                                      (void)::dessser::Void();
                                                                      ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4226 { BitAnd };
                                                                      ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4227 { id_4226, dsum1_snd_520 };
                                                                      choose_res_4225 = id_4227;
                                                                    } else {
                                                                      uint16_t id_4228 { 18 };
                                                                      bool id_4229 { bool(id_4228 == dsum1_fst_519) };
                                                                      ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4230;
                                                                      if (id_4229) {
                                                                        (void)::dessser::Void();
                                                                        ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4231 { BitOr };
                                                                        ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4232 { id_4231, dsum1_snd_520 };
                                                                        choose_res_4230 = id_4232;
                                                                      } else {
                                                                        uint16_t id_4233 { 19 };
                                                                        bool id_4234 { bool(id_4233 == dsum1_fst_519) };
                                                                        ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4235;
                                                                        if (id_4234) {
                                                                          (void)::dessser::Void();
                                                                          ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4236 { BitXor };
                                                                          ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4237 { id_4236, dsum1_snd_520 };
                                                                          choose_res_4235 = id_4237;
                                                                        } else {
                                                                          uint16_t id_4238 { 20 };
                                                                          bool id_4239 { bool(id_4238 == dsum1_fst_519) };
                                                                          ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4240;
                                                                          if (id_4239) {
                                                                            (void)::dessser::Void();
                                                                            ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4241 { BitShift };
                                                                            ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4242 { id_4241, dsum1_snd_520 };
                                                                            choose_res_4240 = id_4242;
                                                                          } else {
                                                                            uint16_t id_4243 { 21 };
                                                                            bool id_4244 { bool(id_4243 == dsum1_fst_519) };
                                                                            ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4245;
                                                                            if (id_4244) {
                                                                              (void)::dessser::Void();
                                                                              ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4246 { Get };
                                                                              ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4247 { id_4246, dsum1_snd_520 };
                                                                              choose_res_4245 = id_4247;
                                                                            } else {
                                                                              uint16_t id_4248 { 22 };
                                                                              bool id_4249 { bool(id_4248 == dsum1_fst_519) };
                                                                              ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4250;
                                                                              if (id_4249) {
                                                                                (void)::dessser::Void();
                                                                                ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4251 { In };
                                                                                ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4252 { id_4251, dsum1_snd_520 };
                                                                                choose_res_4250 = id_4252;
                                                                              } else {
                                                                                uint16_t id_4253 { 23 };
                                                                                bool id_4254 { bool(id_4253 == dsum1_fst_519) };
                                                                                ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4255;
                                                                                if (id_4254) {
                                                                                  (void)::dessser::Void();
                                                                                  ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4256 { Strftime };
                                                                                  ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4257 { id_4256, dsum1_snd_520 };
                                                                                  choose_res_4255 = id_4257;
                                                                                } else {
                                                                                  uint16_t id_4258 { 24 };
                                                                                  bool id_4259 { bool(id_4258 == dsum1_fst_519) };
                                                                                  ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a choose_res_4260;
                                                                                  if (id_4259) {
                                                                                    (void)::dessser::Void();
                                                                                    ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4261 { Index };
                                                                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4262 { id_4261, dsum1_snd_520 };
                                                                                    choose_res_4260 = id_4262;
                                                                                  } else {
                                                                                    uint16_t id_4263 { 25 };
                                                                                    bool id_4264 { bool(dsum1_fst_519 == id_4263) };
                                                                                    Void id_4265 { ((void)(assert(id_4264)), ::dessser::Void()) };
                                                                                    (void)id_4265;
                                                                                    (void)::dessser::Void();
                                                                                    ::dessser::gen::raql_expr::t2ade1f1615a1b24c8e2ee86351d1ee39 id_4266 { Percentile };
                                                                                    ::dessser::gen::raql_expr::t0469c19d1fe04171944ad66599e0de7a id_4267 { id_4266, dsum1_snd_520 };
                                                                                    choose_res_4260 = id_4267;
                                                                                  }
                                                                                  choose_res_4255 = choose_res_4260;
                                                                                }
                                                                                choose_res_4250 = choose_res_4255;
                                                                              }
                                                                              choose_res_4245 = choose_res_4250;
                                                                            }
                                                                            choose_res_4240 = choose_res_4245;
                                                                          }
                                                                          choose_res_4235 = choose_res_4240;
                                                                        }
                                                                        choose_res_4230 = choose_res_4235;
                                                                      }
                                                                      choose_res_4225 = choose_res_4230;
                                                                    }
                                                                    choose_res_4220 = choose_res_4225;
                                                                  }
                                                                  choose_res_4215 = choose_res_4220;
                                                                }
                                                                choose_res_4210 = choose_res_4215;
                                                              }
                                                              choose_res_4205 = choose_res_4210;
                                                            }
                                                            choose_res_4200 = choose_res_4205;
                                                          }
                                                          choose_res_4195 = choose_res_4200;
                                                        }
                                                        choose_res_4190 = choose_res_4195;
                                                      }
                                                      choose_res_4185 = choose_res_4190;
                                                    }
                                                    choose_res_4180 = choose_res_4185;
                                                  }
                                                  choose_res_4175 = choose_res_4180;
                                                }
                                                choose_res_4170 = choose_res_4175;
                                              }
                                              choose_res_4165 = choose_res_4170;
                                            }
                                            choose_res_4160 = choose_res_4165;
                                          }
                                          choose_res_4155 = choose_res_4160;
                                        }
                                        choose_res_4150 = choose_res_4155;
                                      }
                                      choose_res_4145 = choose_res_4150;
                                    }
                                    choose_res_4140 = choose_res_4145;
                                  }
                                  letpair_res_4137 = choose_res_4140;
                                }
                                let_res_4136 = letpair_res_4137;
                              }
                              ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4268;
                              {
                                auto dtup_fst_600 { std::get<0>(let_res_4136) };
                                auto dtup_snd_601 { std::get<1>(let_res_4136) };
                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4269 { fun3261(dtup_snd_601) };
                                ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4270;
                                {
                                  auto dtup_fst_603 { std::get<0>(id_4269) };
                                  auto dtup_snd_604 { std::get<1>(id_4269) };
                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4271 { fun3261(dtup_snd_604) };
                                  ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4272;
                                  {
                                    auto dtup_fst_606 { std::get<0>(id_4271) };
                                    auto dtup_snd_607 { std::get<1>(id_4271) };
                                    ::dessser::gen::raql_expr::te7a4d6eae2f27f87719b7e00a7ae2e76 id_4273 { dtup_fst_600, dtup_fst_603, dtup_fst_606 };
                                    ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_4274 { std::in_place_index<3>, id_4273 };
                                    ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 id_4275 { id_4274, dtup_snd_607 };
                                    letpair_res_4272 = id_4275;
                                  }
                                  letpair_res_4270 = letpair_res_4272;
                                }
                                letpair_res_4268 = letpair_res_4270;
                              }
                              choose_res_4132 = letpair_res_4268;
                            } else {
                              uint16_t id_4276 { 4 };
                              bool id_4277 { bool(dsum1_fst_480 == id_4276) };
                              Void id_4278 { ((void)(assert(id_4277)), ::dessser::Void()) };
                              (void)id_4278;
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4279 { dsum1_snd_481.readU16Le() };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4280;
                              {
                                auto du16_fst_483 { std::get<0>(id_4279) };
                                auto du16_snd_484 { std::get<1>(id_4279) };
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4281 { du16_fst_483, du16_snd_484 };
                                letpair_res_4280 = id_4281;
                              }
                              ::dessser::gen::raql_expr::t499e7f93530e4a340351cd37426efa24 let_res_4282;
                              {
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_488 { letpair_res_4280 };
                                ::dessser::gen::raql_expr::t499e7f93530e4a340351cd37426efa24 letpair_res_4283;
                                {
                                  auto dsum1_fst_489 { std::get<0>(dsum1_488) };
                                  auto dsum1_snd_490 { std::get<1>(dsum1_488) };
                                  uint16_t id_4284 { 0 };
                                  bool id_4285 { bool(id_4284 == dsum1_fst_489) };
                                  ::dessser::gen::raql_expr::t499e7f93530e4a340351cd37426efa24 choose_res_4286;
                                  if (id_4285) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035 id_4287 { SubString };
                                    ::dessser::gen::raql_expr::t499e7f93530e4a340351cd37426efa24 id_4288 { id_4287, dsum1_snd_490 };
                                    choose_res_4286 = id_4288;
                                  } else {
                                    uint16_t id_4289 { 1 };
                                    bool id_4290 { bool(dsum1_fst_489 == id_4289) };
                                    Void id_4291 { ((void)(assert(id_4290)), ::dessser::Void()) };
                                    (void)id_4291;
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::tafe36d3b8e34b0bdb04064c3f4cda035 id_4292 { MapSet };
                                    ::dessser::gen::raql_expr::t499e7f93530e4a340351cd37426efa24 id_4293 { id_4292, dsum1_snd_490 };
                                    choose_res_4286 = id_4293;
                                  }
                                  letpair_res_4283 = choose_res_4286;
                                }
                                let_res_4282 = letpair_res_4283;
                              }
                              ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4294;
                              {
                                auto dtup_fst_498 { std::get<0>(let_res_4282) };
                                auto dtup_snd_499 { std::get<1>(let_res_4282) };
                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4295 { fun3261(dtup_snd_499) };
                                ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4296;
                                {
                                  auto dtup_fst_501 { std::get<0>(id_4295) };
                                  auto dtup_snd_502 { std::get<1>(id_4295) };
                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4297 { fun3261(dtup_snd_502) };
                                  ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4298;
                                  {
                                    auto dtup_fst_504 { std::get<0>(id_4297) };
                                    auto dtup_snd_505 { std::get<1>(id_4297) };
                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4299 { fun3261(dtup_snd_505) };
                                    ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 letpair_res_4300;
                                    {
                                      auto dtup_fst_507 { std::get<0>(id_4299) };
                                      auto dtup_snd_508 { std::get<1>(id_4299) };
                                      ::dessser::gen::raql_expr::t53da299de89588caa86990df40ee157b id_4301 { dtup_fst_498, dtup_fst_501, dtup_fst_504, dtup_fst_507 };
                                      ::dessser::gen::raql_expr::t3267fa899a41f9e0c8db35320b53e6b1 id_4302 { std::in_place_index<4>, id_4301 };
                                      ::dessser::gen::raql_expr::t36e2c6991fbf89e0e7d761537d7323c0 id_4303 { id_4302, dtup_snd_508 };
                                      letpair_res_4300 = id_4303;
                                    }
                                    letpair_res_4298 = letpair_res_4300;
                                  }
                                  letpair_res_4296 = letpair_res_4298;
                                }
                                letpair_res_4294 = letpair_res_4296;
                              }
                              choose_res_4132 = letpair_res_4294;
                            }
                            choose_res_4029 = choose_res_4132;
                          }
                          choose_res_3740 = choose_res_4029;
                        }
                        choose_res_3604 = choose_res_3740;
                      }
                      letpair_res_3601 = choose_res_3604;
                    }
                    let_res_3600 = letpair_res_3601;
                  }
                  ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_4304;
                  {
                    auto dsum2_fst_901 { std::get<0>(let_res_3600) };
                    auto dsum2_snd_902 { std::get<1>(let_res_3600) };
                    ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_4305 { std::in_place_index<4>, dsum2_fst_901 };
                    ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 id_4306 { id_4305, dsum2_snd_902 };
                    letpair_res_4304 = id_4306;
                  }
                  choose_res_3596 = letpair_res_4304;
                } else {
                  uint16_t id_4307 { 5 };
                  bool id_4308 { bool(id_4307 == dsum1_fst_64) };
                  ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 choose_res_4309;
                  if (id_4308) {
                    Size id_4310 { 0UL };
                    uint8_t id_4311 { dsum1_snd_65.peekU8(id_4310) };
                    uint8_t id_4312 { 1 };
                    bool id_4313 { bool(id_4311 == id_4312) };
                    ::dessser::gen::raql_expr::t275f8f4c2f7ef1a9aeb843eadc0fca02 choose_res_4314;
                    if (id_4313) {
                      std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_4315 { std::nullopt };
                      Size id_4316 { 1UL };
                      Pointer id_4317 { dsum1_snd_65.skip(id_4316) };
                      ::dessser::gen::raql_expr::t275f8f4c2f7ef1a9aeb843eadc0fca02 id_4318 { id_4315, id_4317 };
                      choose_res_4314 = id_4318;
                    } else {
                      Size id_4319 { 1UL };
                      Pointer id_4320 { dsum1_snd_65.skip(id_4319) };
                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4321 { id_4320.readU16Le() };
                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4322;
                      {
                        auto du16_fst_88 { std::get<0>(id_4321) };
                        auto du16_snd_89 { std::get<1>(id_4321) };
                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4323 { du16_fst_88, du16_snd_89 };
                        letpair_res_4322 = id_4323;
                      }
                      ::dessser::gen::raql_expr::t3101f9e5733a087ce955507938ed5ee8 let_res_4324;
                      {
                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_93 { letpair_res_4322 };
                        ::dessser::gen::raql_expr::t3101f9e5733a087ce955507938ed5ee8 letpair_res_4325;
                        {
                          auto dsum1_fst_94 { std::get<0>(dsum1_93) };
                          auto dsum1_snd_95 { std::get<1>(dsum1_93) };
                          uint16_t id_4326 { 0 };
                          bool id_4327 { bool(id_4326 == dsum1_fst_94) };
                          ::dessser::gen::raql_expr::t3101f9e5733a087ce955507938ed5ee8 choose_res_4328;
                          if (id_4327) {
                            (void)::dessser::Void();
                            ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042 id_4329 { LocalState };
                            ::dessser::gen::raql_expr::t3101f9e5733a087ce955507938ed5ee8 id_4330 { id_4329, dsum1_snd_95 };
                            choose_res_4328 = id_4330;
                          } else {
                            uint16_t id_4331 { 1 };
                            bool id_4332 { bool(dsum1_fst_94 == id_4331) };
                            Void id_4333 { ((void)(assert(id_4332)), ::dessser::Void()) };
                            (void)id_4333;
                            (void)::dessser::Void();
                            ::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042 id_4334 { GlobalState };
                            ::dessser::gen::raql_expr::t3101f9e5733a087ce955507938ed5ee8 id_4335 { id_4334, dsum1_snd_95 };
                            choose_res_4328 = id_4335;
                          }
                          letpair_res_4325 = choose_res_4328;
                        }
                        let_res_4324 = letpair_res_4325;
                      }
                      ::dessser::gen::raql_expr::t275f8f4c2f7ef1a9aeb843eadc0fca02 letpair_res_4336;
                      {
                        auto make1_1_fst_103 { std::get<0>(let_res_4324) };
                        auto make1_1_snd_104 { std::get<1>(let_res_4324) };
                        std::optional<::dessser::gen::raql_expr::t30db7861170b37de146c6231a87c6042> id_4337 { make1_1_fst_103 };
                        ::dessser::gen::raql_expr::t275f8f4c2f7ef1a9aeb843eadc0fca02 id_4338 { id_4337, make1_1_snd_104 };
                        letpair_res_4336 = id_4338;
                      }
                      choose_res_4314 = letpair_res_4336;
                    }
                    ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 let_res_4339;
                    {
                      ::dessser::gen::raql_expr::t275f8f4c2f7ef1a9aeb843eadc0fca02 drec_105 { choose_res_4314 };
                      ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_4340;
                      {
                        auto drec_fst_106 { std::get<0>(drec_105) };
                        auto drec_snd_107 { std::get<1>(drec_105) };
                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4341 { drec_snd_107.readU8() };
                        ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 letpair_res_4342;
                        {
                          auto dbool_fst_109 { std::get<0>(id_4341) };
                          auto dbool_snd_110 { std::get<1>(id_4341) };
                          uint8_t id_4343 { 0 };
                          bool id_4344 { bool(dbool_fst_109 == id_4343) };
                          bool id_4345 { ! id_4344 };
                          ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 id_4346 { id_4345, dbool_snd_110 };
                          letpair_res_4342 = id_4346;
                        }
                        ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 let_res_4347;
                        {
                          ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 drec_111 { letpair_res_4342 };
                          ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_4348;
                          {
                            auto drec_fst_112 { std::get<0>(drec_111) };
                            auto drec_snd_113 { std::get<1>(drec_111) };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4349 { drec_snd_113.readU16Le() };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4350;
                            {
                              auto du16_fst_115 { std::get<0>(id_4349) };
                              auto du16_snd_116 { std::get<1>(id_4349) };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4351 { du16_fst_115, du16_snd_116 };
                              letpair_res_4350 = id_4351;
                            }
                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c let_res_4352;
                            {
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_120 { letpair_res_4350 };
                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4353;
                              {
                                auto dsum1_fst_121 { std::get<0>(dsum1_120) };
                                auto dsum1_snd_122 { std::get<1>(dsum1_120) };
                                uint16_t id_4354 { 0 };
                                bool id_4355 { bool(id_4354 == dsum1_fst_121) };
                                ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c choose_res_4356;
                                if (id_4355) {
                                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4357 { dsum1_snd_122.readU16Le() };
                                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4358;
                                  {
                                    auto du16_fst_387 { std::get<0>(id_4357) };
                                    auto du16_snd_388 { std::get<1>(id_4357) };
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4359 { du16_fst_387, du16_snd_388 };
                                    letpair_res_4358 = id_4359;
                                  }
                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f let_res_4360;
                                  {
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_392 { letpair_res_4358 };
                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4361;
                                    {
                                      auto dsum1_fst_393 { std::get<0>(dsum1_392) };
                                      auto dsum1_snd_394 { std::get<1>(dsum1_392) };
                                      uint16_t id_4362 { 0 };
                                      bool id_4363 { bool(id_4362 == dsum1_fst_393) };
                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4364;
                                      if (id_4363) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4365 { std::in_place_index<0>, ::dessser::Void() };
                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4366 { id_4365, dsum1_snd_394 };
                                        choose_res_4364 = id_4366;
                                      } else {
                                        uint16_t id_4367 { 1 };
                                        bool id_4368 { bool(id_4367 == dsum1_fst_393) };
                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4369;
                                        if (id_4368) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4370 { std::in_place_index<1>, ::dessser::Void() };
                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4371 { id_4370, dsum1_snd_394 };
                                          choose_res_4369 = id_4371;
                                        } else {
                                          uint16_t id_4372 { 2 };
                                          bool id_4373 { bool(id_4372 == dsum1_fst_393) };
                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4374;
                                          if (id_4373) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4375 { std::in_place_index<2>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4376 { id_4375, dsum1_snd_394 };
                                            choose_res_4374 = id_4376;
                                          } else {
                                            uint16_t id_4377 { 3 };
                                            bool id_4378 { bool(id_4377 == dsum1_fst_393) };
                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4379;
                                            if (id_4378) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4380 { std::in_place_index<3>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4381 { id_4380, dsum1_snd_394 };
                                              choose_res_4379 = id_4381;
                                            } else {
                                              uint16_t id_4382 { 4 };
                                              bool id_4383 { bool(id_4382 == dsum1_fst_393) };
                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4384;
                                              if (id_4383) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4385 { std::in_place_index<4>, ::dessser::Void() };
                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4386 { id_4385, dsum1_snd_394 };
                                                choose_res_4384 = id_4386;
                                              } else {
                                                uint16_t id_4387 { 5 };
                                                bool id_4388 { bool(id_4387 == dsum1_fst_393) };
                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4389;
                                                if (id_4388) {
                                                  (void)::dessser::Void();
                                                  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4390 { std::in_place_index<5>, ::dessser::Void() };
                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4391 { id_4390, dsum1_snd_394 };
                                                  choose_res_4389 = id_4391;
                                                } else {
                                                  uint16_t id_4392 { 6 };
                                                  bool id_4393 { bool(id_4392 == dsum1_fst_393) };
                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4394;
                                                  if (id_4393) {
                                                    (void)::dessser::Void();
                                                    ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4395 { std::in_place_index<6>, ::dessser::Void() };
                                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4396 { id_4395, dsum1_snd_394 };
                                                    choose_res_4394 = id_4396;
                                                  } else {
                                                    uint16_t id_4397 { 7 };
                                                    bool id_4398 { bool(id_4397 == dsum1_fst_393) };
                                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4399;
                                                    if (id_4398) {
                                                      (void)::dessser::Void();
                                                      ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4400 { std::in_place_index<7>, ::dessser::Void() };
                                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4401 { id_4400, dsum1_snd_394 };
                                                      choose_res_4399 = id_4401;
                                                    } else {
                                                      uint16_t id_4402 { 8 };
                                                      bool id_4403 { bool(id_4402 == dsum1_fst_393) };
                                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4404;
                                                      if (id_4403) {
                                                        (void)::dessser::Void();
                                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4405 { std::in_place_index<8>, ::dessser::Void() };
                                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4406 { id_4405, dsum1_snd_394 };
                                                        choose_res_4404 = id_4406;
                                                      } else {
                                                        uint16_t id_4407 { 9 };
                                                        bool id_4408 { bool(id_4407 == dsum1_fst_393) };
                                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4409;
                                                        if (id_4408) {
                                                          (void)::dessser::Void();
                                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4410 { std::in_place_index<9>, ::dessser::Void() };
                                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4411 { id_4410, dsum1_snd_394 };
                                                          choose_res_4409 = id_4411;
                                                        } else {
                                                          uint16_t id_4412 { 10 };
                                                          bool id_4413 { bool(id_4412 == dsum1_fst_393) };
                                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4414;
                                                          if (id_4413) {
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4415 { std::in_place_index<10>, ::dessser::Void() };
                                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4416 { id_4415, dsum1_snd_394 };
                                                            choose_res_4414 = id_4416;
                                                          } else {
                                                            uint16_t id_4417 { 11 };
                                                            bool id_4418 { bool(id_4417 == dsum1_fst_393) };
                                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4419;
                                                            if (id_4418) {
                                                              ::dessser::gen::raql_expr::td2cd337bb3c8bc04d5603393d084985b id_4420 { dsum1_snd_394.readU64Le() };
                                                              ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 letpair_res_4421;
                                                              {
                                                                auto dfloat_fst_405 { std::get<0>(id_4420) };
                                                                auto dfloat_snd_406 { std::get<1>(id_4420) };
                                                                double id_4422 { float_of_qword(dfloat_fst_405) };
                                                                ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 id_4423 { id_4422, dfloat_snd_406 };
                                                                letpair_res_4421 = id_4423;
                                                              }
                                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f let_res_4424;
                                                              {
                                                                ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 dtup_407 { letpair_res_4421 };
                                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4425;
                                                                {
                                                                  auto dtup_fst_408 { std::get<0>(dtup_407) };
                                                                  auto dtup_snd_409 { std::get<1>(dtup_407) };
                                                                  ::dessser::gen::raql_expr::td2cd337bb3c8bc04d5603393d084985b id_4426 { dtup_snd_409.readU64Le() };
                                                                  ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 letpair_res_4427;
                                                                  {
                                                                    auto dfloat_fst_411 { std::get<0>(id_4426) };
                                                                    auto dfloat_snd_412 { std::get<1>(id_4426) };
                                                                    double id_4428 { float_of_qword(dfloat_fst_411) };
                                                                    ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 id_4429 { id_4428, dfloat_snd_412 };
                                                                    letpair_res_4427 = id_4429;
                                                                  }
                                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f let_res_4430;
                                                                  {
                                                                    ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 dtup_413 { letpair_res_4427 };
                                                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4431;
                                                                    {
                                                                      auto dtup_fst_414 { std::get<0>(dtup_413) };
                                                                      auto dtup_snd_415 { std::get<1>(dtup_413) };
                                                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4432 { dtup_snd_415.readU32Le() };
                                                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4433;
                                                                      {
                                                                        auto du32_fst_417 { std::get<0>(id_4432) };
                                                                        auto du32_snd_418 { std::get<1>(id_4432) };
                                                                        ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_4434 { dtup_fst_408, dtup_fst_414, du32_fst_417 };
                                                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4435 { std::in_place_index<11>, id_4434 };
                                                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4436 { id_4435, du32_snd_418 };
                                                                        letpair_res_4433 = id_4436;
                                                                      }
                                                                      letpair_res_4431 = letpair_res_4433;
                                                                    }
                                                                    let_res_4430 = letpair_res_4431;
                                                                  }
                                                                  letpair_res_4425 = let_res_4430;
                                                                }
                                                                let_res_4424 = letpair_res_4425;
                                                              }
                                                              choose_res_4419 = let_res_4424;
                                                            } else {
                                                              uint16_t id_4437 { 12 };
                                                              bool id_4438 { bool(id_4437 == dsum1_fst_393) };
                                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4439;
                                                              if (id_4438) {
                                                                (void)::dessser::Void();
                                                                ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4440 { std::in_place_index<12>, ::dessser::Void() };
                                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4441 { id_4440, dsum1_snd_394 };
                                                                choose_res_4439 = id_4441;
                                                              } else {
                                                                uint16_t id_4442 { 13 };
                                                                bool id_4443 { bool(id_4442 == dsum1_fst_393) };
                                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4444;
                                                                if (id_4443) {
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4445 { std::in_place_index<13>, ::dessser::Void() };
                                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4446 { id_4445, dsum1_snd_394 };
                                                                  choose_res_4444 = id_4446;
                                                                } else {
                                                                  uint16_t id_4447 { 14 };
                                                                  bool id_4448 { bool(dsum1_fst_393 == id_4447) };
                                                                  Void id_4449 { ((void)(assert(id_4448)), ::dessser::Void()) };
                                                                  (void)id_4449;
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4450 { std::in_place_index<14>, ::dessser::Void() };
                                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4451 { id_4450, dsum1_snd_394 };
                                                                  choose_res_4444 = id_4451;
                                                                }
                                                                choose_res_4439 = choose_res_4444;
                                                              }
                                                              choose_res_4419 = choose_res_4439;
                                                            }
                                                            choose_res_4414 = choose_res_4419;
                                                          }
                                                          choose_res_4409 = choose_res_4414;
                                                        }
                                                        choose_res_4404 = choose_res_4409;
                                                      }
                                                      choose_res_4399 = choose_res_4404;
                                                    }
                                                    choose_res_4394 = choose_res_4399;
                                                  }
                                                  choose_res_4389 = choose_res_4394;
                                                }
                                                choose_res_4384 = choose_res_4389;
                                              }
                                              choose_res_4379 = choose_res_4384;
                                            }
                                            choose_res_4374 = choose_res_4379;
                                          }
                                          choose_res_4369 = choose_res_4374;
                                        }
                                        choose_res_4364 = choose_res_4369;
                                      }
                                      letpair_res_4361 = choose_res_4364;
                                    }
                                    let_res_4360 = letpair_res_4361;
                                  }
                                  ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4452;
                                  {
                                    auto dtup_fst_459 { std::get<0>(let_res_4360) };
                                    auto dtup_snd_460 { std::get<1>(let_res_4360) };
                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4453 { fun3261(dtup_snd_460) };
                                    ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4454;
                                    {
                                      auto dtup_fst_462 { std::get<0>(id_4453) };
                                      auto dtup_snd_463 { std::get<1>(id_4453) };
                                      ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_4455 { dtup_fst_459, dtup_fst_462 };
                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4456 { std::in_place_index<0>, id_4455 };
                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4457 { id_4456, dtup_snd_463 };
                                      letpair_res_4454 = id_4457;
                                    }
                                    letpair_res_4452 = letpair_res_4454;
                                  }
                                  choose_res_4356 = letpair_res_4452;
                                } else {
                                  uint16_t id_4458 { 1 };
                                  bool id_4459 { bool(id_4458 == dsum1_fst_121) };
                                  ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c choose_res_4460;
                                  if (id_4459) {
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4461 { dsum1_snd_122.readU16Le() };
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4462;
                                    {
                                      auto du16_fst_354 { std::get<0>(id_4461) };
                                      auto du16_snd_355 { std::get<1>(id_4461) };
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4463 { du16_fst_354, du16_snd_355 };
                                      letpair_res_4462 = id_4463;
                                    }
                                    ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 let_res_4464;
                                    {
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_359 { letpair_res_4462 };
                                      ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 letpair_res_4465;
                                      {
                                        auto dsum1_fst_360 { std::get<0>(dsum1_359) };
                                        auto dsum1_snd_361 { std::get<1>(dsum1_359) };
                                        uint16_t id_4466 { 0 };
                                        bool id_4467 { bool(id_4466 == dsum1_fst_360) };
                                        ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 choose_res_4468;
                                        if (id_4467) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d id_4469 { Lag };
                                          ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 id_4470 { id_4469, dsum1_snd_361 };
                                          choose_res_4468 = id_4470;
                                        } else {
                                          uint16_t id_4471 { 1 };
                                          bool id_4472 { bool(id_4471 == dsum1_fst_360) };
                                          ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 choose_res_4473;
                                          if (id_4472) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d id_4474 { ExpSmooth };
                                            ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 id_4475 { id_4474, dsum1_snd_361 };
                                            choose_res_4473 = id_4475;
                                          } else {
                                            uint16_t id_4476 { 2 };
                                            bool id_4477 { bool(id_4476 == dsum1_fst_360) };
                                            ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 choose_res_4478;
                                            if (id_4477) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d id_4479 { Sample };
                                              ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 id_4480 { id_4479, dsum1_snd_361 };
                                              choose_res_4478 = id_4480;
                                            } else {
                                              uint16_t id_4481 { 3 };
                                              bool id_4482 { bool(dsum1_fst_360 == id_4481) };
                                              Void id_4483 { ((void)(assert(id_4482)), ::dessser::Void()) };
                                              (void)id_4483;
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t638469967f4a441e0e32d7820019314d id_4484 { OneOutOf };
                                              ::dessser::gen::raql_expr::t553735768d089d4c366f6b66481092a2 id_4485 { id_4484, dsum1_snd_361 };
                                              choose_res_4478 = id_4485;
                                            }
                                            choose_res_4473 = choose_res_4478;
                                          }
                                          choose_res_4468 = choose_res_4473;
                                        }
                                        letpair_res_4465 = choose_res_4468;
                                      }
                                      let_res_4464 = letpair_res_4465;
                                    }
                                    ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4486;
                                    {
                                      auto dtup_fst_375 { std::get<0>(let_res_4464) };
                                      auto dtup_snd_376 { std::get<1>(let_res_4464) };
                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4487 { fun3261(dtup_snd_376) };
                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4488;
                                      {
                                        auto dtup_fst_378 { std::get<0>(id_4487) };
                                        auto dtup_snd_379 { std::get<1>(id_4487) };
                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4489 { fun3261(dtup_snd_379) };
                                        ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4490;
                                        {
                                          auto dtup_fst_381 { std::get<0>(id_4489) };
                                          auto dtup_snd_382 { std::get<1>(id_4489) };
                                          ::dessser::gen::raql_expr::tce9a4f76e50a6cfbfc9de64ac8fc6e78 id_4491 { dtup_fst_375, dtup_fst_378, dtup_fst_381 };
                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4492 { std::in_place_index<1>, id_4491 };
                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4493 { id_4492, dtup_snd_382 };
                                          letpair_res_4490 = id_4493;
                                        }
                                        letpair_res_4488 = letpair_res_4490;
                                      }
                                      letpair_res_4486 = letpair_res_4488;
                                    }
                                    choose_res_4460 = letpair_res_4486;
                                  } else {
                                    uint16_t id_4494 { 2 };
                                    bool id_4495 { bool(id_4494 == dsum1_fst_121) };
                                    ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c choose_res_4496;
                                    if (id_4495) {
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4497 { dsum1_snd_122.readU16Le() };
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4498;
                                      {
                                        auto du16_fst_318 { std::get<0>(id_4497) };
                                        auto du16_snd_319 { std::get<1>(id_4497) };
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4499 { du16_fst_318, du16_snd_319 };
                                        letpair_res_4498 = id_4499;
                                      }
                                      ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 let_res_4500;
                                      {
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_323 { letpair_res_4498 };
                                        ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 letpair_res_4501;
                                        {
                                          auto dsum1_fst_324 { std::get<0>(dsum1_323) };
                                          auto dsum1_snd_325 { std::get<1>(dsum1_323) };
                                          uint16_t id_4502 { 0 };
                                          bool id_4503 { bool(id_4502 == dsum1_fst_324) };
                                          ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 choose_res_4504;
                                          if (id_4503) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_4505 { std::in_place_index<0>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 id_4506 { id_4505, dsum1_snd_325 };
                                            choose_res_4504 = id_4506;
                                          } else {
                                            uint16_t id_4507 { 1 };
                                            bool id_4508 { bool(id_4507 == dsum1_fst_324) };
                                            ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 choose_res_4509;
                                            if (id_4508) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_4510 { std::in_place_index<1>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 id_4511 { id_4510, dsum1_snd_325 };
                                              choose_res_4509 = id_4511;
                                            } else {
                                              uint16_t id_4512 { 2 };
                                              bool id_4513 { bool(dsum1_fst_324 == id_4512) };
                                              Void id_4514 { ((void)(assert(id_4513)), ::dessser::Void()) };
                                              (void)id_4514;
                                              ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4515 { dsum1_snd_325.readU8() };
                                              ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 letpair_res_4516;
                                              {
                                                auto dbool_fst_327 { std::get<0>(id_4515) };
                                                auto dbool_snd_328 { std::get<1>(id_4515) };
                                                uint8_t id_4517 { 0 };
                                                bool id_4518 { bool(dbool_fst_327 == id_4517) };
                                                bool id_4519 { ! id_4518 };
                                                ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_4520 { std::in_place_index<2>, id_4519 };
                                                ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 id_4521 { id_4520, dbool_snd_328 };
                                                letpair_res_4516 = id_4521;
                                              }
                                              choose_res_4509 = letpair_res_4516;
                                            }
                                            choose_res_4504 = choose_res_4509;
                                          }
                                          letpair_res_4501 = choose_res_4504;
                                        }
                                        let_res_4500 = letpair_res_4501;
                                      }
                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4522;
                                      {
                                        auto dtup_fst_339 { std::get<0>(let_res_4500) };
                                        auto dtup_snd_340 { std::get<1>(let_res_4500) };
                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4523 { fun3261(dtup_snd_340) };
                                        ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4524;
                                        {
                                          auto dtup_fst_342 { std::get<0>(id_4523) };
                                          auto dtup_snd_343 { std::get<1>(id_4523) };
                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4525 { fun3261(dtup_snd_343) };
                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4526;
                                          {
                                            auto dtup_fst_345 { std::get<0>(id_4525) };
                                            auto dtup_snd_346 { std::get<1>(id_4525) };
                                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4527 { fun3261(dtup_snd_346) };
                                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4528;
                                            {
                                              auto dtup_fst_348 { std::get<0>(id_4527) };
                                              auto dtup_snd_349 { std::get<1>(id_4527) };
                                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_4529 { dtup_fst_339, dtup_fst_342, dtup_fst_345, dtup_fst_348 };
                                              ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4530 { std::in_place_index<2>, id_4529 };
                                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4531 { id_4530, dtup_snd_349 };
                                              letpair_res_4528 = id_4531;
                                            }
                                            letpair_res_4526 = letpair_res_4528;
                                          }
                                          letpair_res_4524 = letpair_res_4526;
                                        }
                                        letpair_res_4522 = letpair_res_4524;
                                      }
                                      choose_res_4496 = letpair_res_4522;
                                    } else {
                                      uint16_t id_4532 { 3 };
                                      bool id_4533 { bool(id_4532 == dsum1_fst_121) };
                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c choose_res_4534;
                                      if (id_4533) {
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4535 { dsum1_snd_122.readU16Le() };
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4536;
                                        {
                                          auto du16_fst_282 { std::get<0>(id_4535) };
                                          auto du16_snd_283 { std::get<1>(id_4535) };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4537 { du16_fst_282, du16_snd_283 };
                                          letpair_res_4536 = id_4537;
                                        }
                                        ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e let_res_4538;
                                        {
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_287 { letpair_res_4536 };
                                          ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e letpair_res_4539;
                                          {
                                            auto dsum1_fst_288 { std::get<0>(dsum1_287) };
                                            auto dsum1_snd_289 { std::get<1>(dsum1_287) };
                                            uint16_t id_4540 { 0 };
                                            bool id_4541 { bool(id_4540 == dsum1_fst_288) };
                                            ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e choose_res_4542;
                                            if (id_4541) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_4543 { std::in_place_index<0>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e id_4544 { id_4543, dsum1_snd_289 };
                                              choose_res_4542 = id_4544;
                                            } else {
                                              uint16_t id_4545 { 1 };
                                              bool id_4546 { bool(dsum1_fst_288 == id_4545) };
                                              Void id_4547 { ((void)(assert(id_4546)), ::dessser::Void()) };
                                              (void)id_4547;
                                              ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4548 { dsum1_snd_289.readU8() };
                                              ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e letpair_res_4549;
                                              {
                                                auto dbool_fst_291 { std::get<0>(id_4548) };
                                                auto dbool_snd_292 { std::get<1>(id_4548) };
                                                uint8_t id_4550 { 0 };
                                                bool id_4551 { bool(dbool_fst_291 == id_4550) };
                                                bool id_4552 { ! id_4551 };
                                                ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_4553 { std::in_place_index<1>, id_4552 };
                                                ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e id_4554 { id_4553, dbool_snd_292 };
                                                letpair_res_4549 = id_4554;
                                              }
                                              choose_res_4542 = letpair_res_4549;
                                            }
                                            letpair_res_4539 = choose_res_4542;
                                          }
                                          let_res_4538 = letpair_res_4539;
                                        }
                                        ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4555;
                                        {
                                          auto dtup_fst_300 { std::get<0>(let_res_4538) };
                                          auto dtup_snd_301 { std::get<1>(let_res_4538) };
                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4556 { fun3261(dtup_snd_301) };
                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4557;
                                          {
                                            auto dtup_fst_303 { std::get<0>(id_4556) };
                                            auto dtup_snd_304 { std::get<1>(id_4556) };
                                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4558 { fun3261(dtup_snd_304) };
                                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4559;
                                            {
                                              auto dtup_fst_306 { std::get<0>(id_4558) };
                                              auto dtup_snd_307 { std::get<1>(id_4558) };
                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4560 { fun3261(dtup_snd_307) };
                                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4561;
                                              {
                                                auto dtup_fst_309 { std::get<0>(id_4560) };
                                                auto dtup_snd_310 { std::get<1>(id_4560) };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4562 { fun3261(dtup_snd_310) };
                                                ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4563;
                                                {
                                                  auto dtup_fst_312 { std::get<0>(id_4562) };
                                                  auto dtup_snd_313 { std::get<1>(id_4562) };
                                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_4564 { dtup_fst_300, dtup_fst_303, dtup_fst_306, dtup_fst_309, dtup_fst_312 };
                                                  ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4565 { std::in_place_index<3>, id_4564 };
                                                  ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4566 { id_4565, dtup_snd_313 };
                                                  letpair_res_4563 = id_4566;
                                                }
                                                letpair_res_4561 = letpair_res_4563;
                                              }
                                              letpair_res_4559 = letpair_res_4561;
                                            }
                                            letpair_res_4557 = letpair_res_4559;
                                          }
                                          letpair_res_4555 = letpair_res_4557;
                                        }
                                        choose_res_4534 = letpair_res_4555;
                                      } else {
                                        uint16_t id_4567 { 4 };
                                        bool id_4568 { bool(id_4567 == dsum1_fst_121) };
                                        ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c choose_res_4569;
                                        if (id_4568) {
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4570 { dsum1_snd_122.readU16Le() };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4571;
                                          {
                                            auto du16_fst_214 { std::get<0>(id_4570) };
                                            auto du16_snd_215 { std::get<1>(id_4570) };
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4572 { du16_fst_214, du16_snd_215 };
                                            letpair_res_4571 = id_4572;
                                          }
                                          ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c let_res_4573;
                                          {
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_219 { letpair_res_4571 };
                                            ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c letpair_res_4574;
                                            {
                                              auto dsum1_fst_220 { std::get<0>(dsum1_219) };
                                              auto dsum1_snd_221 { std::get<1>(dsum1_219) };
                                              uint16_t id_4575 { 0 };
                                              bool id_4576 { bool(id_4575 == dsum1_fst_220) };
                                              ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c choose_res_4577;
                                              if (id_4576) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_4578 { std::in_place_index<0>, ::dessser::Void() };
                                                ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c id_4579 { id_4578, dsum1_snd_221 };
                                                choose_res_4577 = id_4579;
                                              } else {
                                                uint16_t id_4580 { 1 };
                                                bool id_4581 { bool(dsum1_fst_220 == id_4580) };
                                                Void id_4582 { ((void)(assert(id_4581)), ::dessser::Void()) };
                                                (void)id_4582;
                                                ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4583 { dsum1_snd_221.readU8() };
                                                ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 letpair_res_4584;
                                                {
                                                  auto dbool_fst_223 { std::get<0>(id_4583) };
                                                  auto dbool_snd_224 { std::get<1>(id_4583) };
                                                  uint8_t id_4585 { 0 };
                                                  bool id_4586 { bool(dbool_fst_223 == id_4585) };
                                                  bool id_4587 { ! id_4586 };
                                                  ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 id_4588 { id_4587, dbool_snd_224 };
                                                  letpair_res_4584 = id_4588;
                                                }
                                                ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c let_res_4589;
                                                {
                                                  ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 drec_225 { letpair_res_4584 };
                                                  ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c letpair_res_4590;
                                                  {
                                                    auto drec_fst_226 { std::get<0>(drec_225) };
                                                    auto drec_snd_227 { std::get<1>(drec_225) };
                                                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4591 { drec_snd_227.readU8() };
                                                    ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c letpair_res_4592;
                                                    {
                                                      auto dbool_fst_229 { std::get<0>(id_4591) };
                                                      auto dbool_snd_230 { std::get<1>(id_4591) };
                                                      uint8_t id_4593 { 0 };
                                                      bool id_4594 { bool(dbool_fst_229 == id_4593) };
                                                      bool id_4595 { ! id_4594 };
                                                      ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 id_4596 { drec_fst_226, id_4595 };
                                                      ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_4597 { std::in_place_index<1>, id_4596 };
                                                      ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c id_4598 { id_4597, dbool_snd_230 };
                                                      letpair_res_4592 = id_4598;
                                                    }
                                                    letpair_res_4590 = letpair_res_4592;
                                                  }
                                                  let_res_4589 = letpair_res_4590;
                                                }
                                                choose_res_4577 = let_res_4589;
                                              }
                                              letpair_res_4574 = choose_res_4577;
                                            }
                                            let_res_4573 = letpair_res_4574;
                                          }
                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c let_res_4599;
                                          {
                                            ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c dtup_240 { let_res_4573 };
                                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4600;
                                            {
                                              auto dtup_fst_241 { std::get<0>(dtup_240) };
                                              auto dtup_snd_242 { std::get<1>(dtup_240) };
                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4601 { fun3261(dtup_snd_242) };
                                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4602;
                                              {
                                                auto dtup_fst_244 { std::get<0>(id_4601) };
                                                auto dtup_snd_245 { std::get<1>(id_4601) };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4603 { fun3261(dtup_snd_245) };
                                                ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4604;
                                                {
                                                  auto dtup_fst_247 { std::get<0>(id_4603) };
                                                  auto dtup_snd_248 { std::get<1>(id_4603) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4605 { fun3261(dtup_snd_248) };
                                                  ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4606;
                                                  {
                                                    auto dtup_fst_250 { std::get<0>(id_4605) };
                                                    auto dtup_snd_251 { std::get<1>(id_4605) };
                                                    uint32_t id_4607 { 0U };
                                                    Vec<1, uint32_t> id_4608 {  id_4607  };
                                                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4609;
                                                    {
                                                      Vec<1, uint32_t> leb_ref_252 { id_4608 };
                                                      uint8_t id_4610 { 0 };
                                                      Vec<1, uint8_t> id_4611 {  id_4610  };
                                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4612;
                                                      {
                                                        Vec<1, uint8_t> shft_ref_253 { id_4611 };
                                                        Vec<1, Pointer> id_4613 {  dtup_snd_251  };
                                                        ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4614;
                                                        {
                                                          Vec<1, Pointer> p_ref_254 { id_4613 };
                                                          bool while_flag_4615 { true };
                                                          do {
                                                            uint8_t id_4616 { 0 };
                                                            Pointer id_4617 { p_ref_254[id_4616] };
                                                            ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4618 { id_4617.readU8() };
                                                            bool let_res_4619;
                                                            {
                                                              ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_255 { id_4618 };
                                                              bool letpair_res_4620;
                                                              {
                                                                auto leb128_fst_256 { std::get<0>(leb128_255) };
                                                                auto leb128_snd_257 { std::get<1>(leb128_255) };
                                                                uint8_t id_4621 { 0 };
                                                                Void id_4622 { ((void)(p_ref_254[id_4621] = leb128_snd_257), ::dessser::Void()) };
                                                                (void)id_4622;
                                                                uint8_t id_4623 { 0 };
                                                                uint8_t id_4624 { 127 };
                                                                uint8_t id_4625 { uint8_t(leb128_fst_256 & id_4624) };
                                                                uint32_t id_4626 { uint32_t(id_4625) };
                                                                uint8_t id_4627 { 0 };
                                                                uint8_t id_4628 { shft_ref_253[id_4627] };
                                                                uint32_t id_4629 { uint32_t(id_4626 << id_4628) };
                                                                uint8_t id_4630 { 0 };
                                                                uint32_t id_4631 { leb_ref_252[id_4630] };
                                                                uint32_t id_4632 { uint32_t(id_4629 | id_4631) };
                                                                Void id_4633 { ((void)(leb_ref_252[id_4623] = id_4632), ::dessser::Void()) };
                                                                (void)id_4633;
                                                                uint8_t id_4634 { 0 };
                                                                uint8_t id_4635 { 0 };
                                                                uint8_t id_4636 { shft_ref_253[id_4635] };
                                                                uint8_t id_4637 { 7 };
                                                                uint8_t id_4638 { uint8_t(id_4636 + id_4637) };
                                                                Void id_4639 { ((void)(shft_ref_253[id_4634] = id_4638), ::dessser::Void()) };
                                                                (void)id_4639;
                                                                uint8_t id_4640 { 128 };
                                                                bool id_4641 { bool(leb128_fst_256 >= id_4640) };
                                                                letpair_res_4620 = id_4641;
                                                              }
                                                              let_res_4619 = letpair_res_4620;
                                                            }
                                                            while_flag_4615 = let_res_4619;
                                                            if (while_flag_4615) {
                                                              (void)::dessser::Void();
                                                            }
                                                          } while (while_flag_4615);
                                                          (void)::dessser::Void();
                                                          uint8_t id_4642 { 0 };
                                                          uint32_t id_4643 { leb_ref_252[id_4642] };
                                                          uint8_t id_4644 { 0 };
                                                          Pointer id_4645 { p_ref_254[id_4644] };
                                                          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4646 { id_4643, id_4645 };
                                                          let_res_4614 = id_4646;
                                                        }
                                                        let_res_4612 = let_res_4614;
                                                      }
                                                      let_res_4609 = let_res_4612;
                                                    }
                                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4647;
                                                    {
                                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_261 { let_res_4609 };
                                                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4648;
                                                      {
                                                        auto dlist1_fst_262 { std::get<0>(dlist1_261) };
                                                        auto dlist1_snd_263 { std::get<1>(dlist1_261) };
                                                        Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_4649;
                                                        ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4650 { endoflist_4649, dlist1_snd_263 };
                                                        Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_4651 {  id_4650  };
                                                        ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4652;
                                                        {
                                                          Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_264 { id_4651 };
                                                          int32_t id_4653 { 0L };
                                                          Vec<1, int32_t> id_4654 {  id_4653  };
                                                          {
                                                            Vec<1, int32_t> repeat_n_265 { id_4654 };
                                                            bool while_flag_4655 { true };
                                                            do {
                                                              int32_t id_4656 { int32_t(dlist1_fst_262) };
                                                              uint8_t id_4657 { 0 };
                                                              int32_t id_4658 { repeat_n_265[id_4657] };
                                                              bool id_4659 { bool(id_4656 > id_4658) };
                                                              while_flag_4655 = id_4659;
                                                              if (while_flag_4655) {
                                                                uint8_t id_4660 { 0 };
                                                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4661 { inits_src_ref_264[id_4660] };
                                                                {
                                                                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_266 { id_4661 };
                                                                  {
                                                                    auto dlist2_fst_267 { std::get<0>(dlist2_266) };
                                                                    auto dlist2_snd_268 { std::get<1>(dlist2_266) };
                                                                    uint8_t id_4662 { 0 };
                                                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4663 { fun3261(dlist2_snd_268) };
                                                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4664;
                                                                    {
                                                                      auto dlist3_fst_270 { std::get<0>(id_4663) };
                                                                      auto dlist3_snd_271 { std::get<1>(id_4663) };
                                                                      Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4665 { dlist3_fst_270, dlist2_fst_267 };
                                                                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4666 { id_4665, dlist3_snd_271 };
                                                                      letpair_res_4664 = id_4666;
                                                                    }
                                                                    Void id_4667 { ((void)(inits_src_ref_264[id_4662] = letpair_res_4664), ::dessser::Void()) };
                                                                    (void)id_4667;
                                                                  }
                                                                  (void)::dessser::Void();
                                                                }
                                                                (void)::dessser::Void();
                                                                uint8_t id_4668 { 0 };
                                                                uint8_t id_4669 { 0 };
                                                                int32_t id_4670 { repeat_n_265[id_4669] };
                                                                int32_t id_4671 { 1L };
                                                                int32_t id_4672 { int32_t(id_4670 + id_4671) };
                                                                Void id_4673 { ((void)(repeat_n_265[id_4668] = id_4672), ::dessser::Void()) };
                                                                (void)id_4673;
                                                                (void)id_4673;
                                                              }
                                                            } while (while_flag_4655);
                                                            (void)::dessser::Void();
                                                          }
                                                          (void)::dessser::Void();
                                                          uint8_t id_4674 { 0 };
                                                          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4675 { inits_src_ref_264[id_4674] };
                                                          let_res_4652 = id_4675;
                                                        }
                                                        letpair_res_4648 = let_res_4652;
                                                      }
                                                      let_res_4647 = letpair_res_4648;
                                                    }
                                                    ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4676;
                                                    {
                                                      auto dlist4_fst_273 { std::get<0>(let_res_4647) };
                                                      auto dlist4_snd_274 { std::get<1>(let_res_4647) };
                                                      ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_4677 { dtup_fst_241, dtup_fst_244, dtup_fst_247, dtup_fst_250, dlist4_fst_273 };
                                                      ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4678 { std::in_place_index<4>, id_4677 };
                                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4679 { id_4678, dlist4_snd_274 };
                                                      letpair_res_4676 = id_4679;
                                                    }
                                                    letpair_res_4606 = letpair_res_4676;
                                                  }
                                                  letpair_res_4604 = letpair_res_4606;
                                                }
                                                letpair_res_4602 = letpair_res_4604;
                                              }
                                              letpair_res_4600 = letpair_res_4602;
                                            }
                                            let_res_4599 = letpair_res_4600;
                                          }
                                          choose_res_4569 = let_res_4599;
                                        } else {
                                          uint16_t id_4680 { 5 };
                                          bool id_4681 { bool(id_4680 == dsum1_fst_121) };
                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c choose_res_4682;
                                          if (id_4681) {
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4683 { dsum1_snd_122.readU16Le() };
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4684;
                                            {
                                              auto du16_fst_178 { std::get<0>(id_4683) };
                                              auto du16_snd_179 { std::get<1>(id_4683) };
                                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4685 { du16_fst_178, du16_snd_179 };
                                              letpair_res_4684 = id_4685;
                                            }
                                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c let_res_4686;
                                            {
                                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_183 { letpair_res_4684 };
                                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4687;
                                              {
                                                auto dsum1_fst_184 { std::get<0>(dsum1_183) };
                                                auto dsum1_snd_185 { std::get<1>(dsum1_183) };
                                                uint16_t id_4688 { 0 };
                                                bool id_4689 { bool(dsum1_fst_184 == id_4688) };
                                                Void id_4690 { ((void)(assert(id_4689)), ::dessser::Void()) };
                                                (void)id_4690;
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4691 { fun3261(dsum1_snd_185) };
                                                ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4692;
                                                {
                                                  auto dtup_fst_193 { std::get<0>(id_4691) };
                                                  auto dtup_snd_194 { std::get<1>(id_4691) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4693 { fun3261(dtup_snd_194) };
                                                  ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4694;
                                                  {
                                                    auto dtup_fst_196 { std::get<0>(id_4693) };
                                                    auto dtup_snd_197 { std::get<1>(id_4693) };
                                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4695 { fun3261(dtup_snd_197) };
                                                    ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4696;
                                                    {
                                                      auto dtup_fst_199 { std::get<0>(id_4695) };
                                                      auto dtup_snd_200 { std::get<1>(id_4695) };
                                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4697 { fun3261(dtup_snd_200) };
                                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4698;
                                                      {
                                                        auto dtup_fst_202 { std::get<0>(id_4697) };
                                                        auto dtup_snd_203 { std::get<1>(id_4697) };
                                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4699 { fun3261(dtup_snd_203) };
                                                        ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4700;
                                                        {
                                                          auto dtup_fst_205 { std::get<0>(id_4699) };
                                                          auto dtup_snd_206 { std::get<1>(id_4699) };
                                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4701 { fun3261(dtup_snd_206) };
                                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4702;
                                                          {
                                                            auto dtup_fst_208 { std::get<0>(id_4701) };
                                                            auto dtup_snd_209 { std::get<1>(id_4701) };
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::t7ca40b2395ae0931861f2a365208f839 id_4703 { DampedHoltWinter };
                                                            ::dessser::gen::raql_expr::t7a9d88064d123458a7299610e9c50c56 id_4704 { id_4703, dtup_fst_193, dtup_fst_196, dtup_fst_199, dtup_fst_202, dtup_fst_205, dtup_fst_208 };
                                                            ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4705 { std::in_place_index<5>, id_4704 };
                                                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4706 { id_4705, dtup_snd_209 };
                                                            letpair_res_4702 = id_4706;
                                                          }
                                                          letpair_res_4700 = letpair_res_4702;
                                                        }
                                                        letpair_res_4698 = letpair_res_4700;
                                                      }
                                                      letpair_res_4696 = letpair_res_4698;
                                                    }
                                                    letpair_res_4694 = letpair_res_4696;
                                                  }
                                                  letpair_res_4692 = letpair_res_4694;
                                                }
                                                letpair_res_4687 = letpair_res_4692;
                                              }
                                              let_res_4686 = letpair_res_4687;
                                            }
                                            choose_res_4682 = let_res_4686;
                                          } else {
                                            uint16_t id_4707 { 6 };
                                            bool id_4708 { bool(id_4707 == dsum1_fst_121) };
                                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c choose_res_4709;
                                            if (id_4708) {
                                              auto fun4710 { dessser::gen::raql_top_output::of_row_binary };
                                              ::dessser::gen::raql_expr::tcf2bbf57edbf797e26f0528c2c828563 id_4711 { fun4710(dsum1_snd_122) };
                                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c let_res_4712;
                                              {
                                                ::dessser::gen::raql_expr::tcf2bbf57edbf797e26f0528c2c828563 drec_147 { id_4711 };
                                                ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4713;
                                                {
                                                  auto drec_fst_148 { std::get<0>(drec_147) };
                                                  auto drec_snd_149 { std::get<1>(drec_147) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4714 { fun3261(drec_snd_149) };
                                                  ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4715;
                                                  {
                                                    auto drec_fst_151 { std::get<0>(id_4714) };
                                                    auto drec_snd_152 { std::get<1>(id_4714) };
                                                    Size id_4716 { 0UL };
                                                    uint8_t id_4717 { drec_snd_152.peekU8(id_4716) };
                                                    uint8_t id_4718 { 1 };
                                                    bool id_4719 { bool(id_4717 == id_4718) };
                                                    ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 choose_res_4720;
                                                    if (id_4719) {
                                                      std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4721 { std::nullopt };
                                                      Size id_4722 { 1UL };
                                                      Pointer id_4723 { drec_snd_152.skip(id_4722) };
                                                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4724 { id_4721, id_4723 };
                                                      choose_res_4720 = id_4724;
                                                    } else {
                                                      Size id_4725 { 1UL };
                                                      Pointer id_4726 { drec_snd_152.skip(id_4725) };
                                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4727 { fun3261(id_4726) };
                                                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 letpair_res_4728;
                                                      {
                                                        auto make1_1_fst_154 { std::get<0>(id_4727) };
                                                        auto make1_1_snd_155 { std::get<1>(id_4727) };
                                                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4729 { make1_1_fst_154 };
                                                        ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4730 { id_4729, make1_1_snd_155 };
                                                        letpair_res_4728 = id_4730;
                                                      }
                                                      choose_res_4720 = letpair_res_4728;
                                                    }
                                                    ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4731;
                                                    {
                                                      auto drec_fst_157 { std::get<0>(choose_res_4720) };
                                                      auto drec_snd_158 { std::get<1>(choose_res_4720) };
                                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4732 { fun3261(drec_snd_158) };
                                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4733;
                                                      {
                                                        auto drec_fst_160 { std::get<0>(id_4732) };
                                                        auto drec_snd_161 { std::get<1>(id_4732) };
                                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4734 { fun3261(drec_snd_161) };
                                                        ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4735;
                                                        {
                                                          auto drec_fst_163 { std::get<0>(id_4734) };
                                                          auto drec_snd_164 { std::get<1>(id_4734) };
                                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4736 { fun3261(drec_snd_164) };
                                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4737;
                                                          {
                                                            auto drec_fst_166 { std::get<0>(id_4736) };
                                                            auto drec_snd_167 { std::get<1>(id_4736) };
                                                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4738 { fun3261(drec_snd_167) };
                                                            ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4739;
                                                            {
                                                              auto drec_fst_169 { std::get<0>(id_4738) };
                                                              auto drec_snd_170 { std::get<1>(id_4738) };
                                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4740 { fun3261(drec_snd_170) };
                                                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4741;
                                                              {
                                                                auto drec_fst_172 { std::get<0>(id_4740) };
                                                                auto drec_snd_173 { std::get<1>(id_4740) };
                                                                ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_4742 { drec_fst_148, drec_fst_151, drec_fst_157, drec_fst_160, drec_fst_163, drec_fst_166, drec_fst_169, drec_fst_172 };
                                                                ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4743 { std::in_place_index<6>, id_4742 };
                                                                ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4744 { id_4743, drec_snd_173 };
                                                                letpair_res_4741 = id_4744;
                                                              }
                                                              letpair_res_4739 = letpair_res_4741;
                                                            }
                                                            letpair_res_4737 = letpair_res_4739;
                                                          }
                                                          letpair_res_4735 = letpair_res_4737;
                                                        }
                                                        letpair_res_4733 = letpair_res_4735;
                                                      }
                                                      letpair_res_4731 = letpair_res_4733;
                                                    }
                                                    letpair_res_4715 = letpair_res_4731;
                                                  }
                                                  letpair_res_4713 = letpair_res_4715;
                                                }
                                                let_res_4712 = letpair_res_4713;
                                              }
                                              choose_res_4709 = let_res_4712;
                                            } else {
                                              uint16_t id_4745 { 7 };
                                              bool id_4746 { bool(dsum1_fst_121 == id_4745) };
                                              Void id_4747 { ((void)(assert(id_4746)), ::dessser::Void()) };
                                              (void)id_4747;
                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4748 { fun3261(dsum1_snd_122) };
                                              ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4749;
                                              {
                                                auto drec_fst_124 { std::get<0>(id_4748) };
                                                auto drec_snd_125 { std::get<1>(id_4748) };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4750 { fun3261(drec_snd_125) };
                                                ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4751;
                                                {
                                                  auto drec_fst_127 { std::get<0>(id_4750) };
                                                  auto drec_snd_128 { std::get<1>(id_4750) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4752 { fun3261(drec_snd_128) };
                                                  ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4753;
                                                  {
                                                    auto drec_fst_130 { std::get<0>(id_4752) };
                                                    auto drec_snd_131 { std::get<1>(id_4752) };
                                                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4754 { drec_snd_131.readU8() };
                                                    ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 letpair_res_4755;
                                                    {
                                                      auto dbool_fst_133 { std::get<0>(id_4754) };
                                                      auto dbool_snd_134 { std::get<1>(id_4754) };
                                                      uint8_t id_4756 { 0 };
                                                      bool id_4757 { bool(dbool_fst_133 == id_4756) };
                                                      bool id_4758 { ! id_4757 };
                                                      ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 id_4759 { id_4758, dbool_snd_134 };
                                                      letpair_res_4755 = id_4759;
                                                    }
                                                    ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c let_res_4760;
                                                    {
                                                      ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 drec_135 { letpair_res_4755 };
                                                      ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4761;
                                                      {
                                                        auto drec_fst_136 { std::get<0>(drec_135) };
                                                        auto drec_snd_137 { std::get<1>(drec_135) };
                                                        Size id_4762 { 0UL };
                                                        uint8_t id_4763 { drec_snd_137.peekU8(id_4762) };
                                                        uint8_t id_4764 { 1 };
                                                        bool id_4765 { bool(id_4763 == id_4764) };
                                                        ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 choose_res_4766;
                                                        if (id_4765) {
                                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4767 { std::nullopt };
                                                          Size id_4768 { 1UL };
                                                          Pointer id_4769 { drec_snd_137.skip(id_4768) };
                                                          ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4770 { id_4767, id_4769 };
                                                          choose_res_4766 = id_4770;
                                                        } else {
                                                          Size id_4771 { 1UL };
                                                          Pointer id_4772 { drec_snd_137.skip(id_4771) };
                                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4773 { fun3261(id_4772) };
                                                          ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 letpair_res_4774;
                                                          {
                                                            auto make1_1_fst_139 { std::get<0>(id_4773) };
                                                            auto make1_1_snd_140 { std::get<1>(id_4773) };
                                                            std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4775 { make1_1_fst_139 };
                                                            ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4776 { id_4775, make1_1_snd_140 };
                                                            letpair_res_4774 = id_4776;
                                                          }
                                                          choose_res_4766 = letpair_res_4774;
                                                        }
                                                        ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c letpair_res_4777;
                                                        {
                                                          auto drec_fst_142 { std::get<0>(choose_res_4766) };
                                                          auto drec_snd_143 { std::get<1>(choose_res_4766) };
                                                          ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_4778 { drec_fst_124, drec_fst_127, drec_fst_130, drec_fst_136, drec_fst_142 };
                                                          ::dessser::gen::raql_expr::t988dbba8f7f718b94a28d77808883135 id_4779 { std::in_place_index<7>, id_4778 };
                                                          ::dessser::gen::raql_expr::tf96977136b2195e79d540e0390dedf3c id_4780 { id_4779, drec_snd_143 };
                                                          letpair_res_4777 = id_4780;
                                                        }
                                                        letpair_res_4761 = letpair_res_4777;
                                                      }
                                                      let_res_4760 = letpair_res_4761;
                                                    }
                                                    letpair_res_4753 = let_res_4760;
                                                  }
                                                  letpair_res_4751 = letpair_res_4753;
                                                }
                                                letpair_res_4749 = letpair_res_4751;
                                              }
                                              choose_res_4709 = letpair_res_4749;
                                            }
                                            choose_res_4682 = choose_res_4709;
                                          }
                                          choose_res_4569 = choose_res_4682;
                                        }
                                        choose_res_4534 = choose_res_4569;
                                      }
                                      choose_res_4496 = choose_res_4534;
                                    }
                                    choose_res_4460 = choose_res_4496;
                                  }
                                  choose_res_4356 = choose_res_4460;
                                }
                                letpair_res_4353 = choose_res_4356;
                              }
                              let_res_4352 = letpair_res_4353;
                            }
                            ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_4781;
                            {
                              auto drec_fst_468 { std::get<0>(let_res_4352) };
                              auto drec_snd_469 { std::get<1>(let_res_4352) };
                              ::dessser::gen::raql_expr::te911ed7290f60379de95c4e48ca07aa8 id_4782 { drec_fst_106, drec_fst_112, drec_fst_468 };
                              ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_4783 { std::in_place_index<5>, id_4782 };
                              ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 id_4784 { id_4783, drec_snd_469 };
                              letpair_res_4781 = id_4784;
                            }
                            letpair_res_4348 = letpair_res_4781;
                          }
                          let_res_4347 = letpair_res_4348;
                        }
                        letpair_res_4340 = let_res_4347;
                      }
                      let_res_4339 = letpair_res_4340;
                    }
                    choose_res_4309 = let_res_4339;
                  } else {
                    uint16_t id_4785 { 6 };
                    bool id_4786 { bool(dsum1_fst_64 == id_4785) };
                    Void id_4787 { ((void)(assert(id_4786)), ::dessser::Void()) };
                    (void)id_4787;
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4788 { dsum1_snd_65.readU16Le() };
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4789;
                    {
                      auto du16_fst_67 { std::get<0>(id_4788) };
                      auto du16_snd_68 { std::get<1>(id_4788) };
                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4790 { du16_fst_67, du16_snd_68 };
                      letpair_res_4789 = id_4790;
                    }
                    ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 let_res_4791;
                    {
                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_72 { letpair_res_4789 };
                      ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_4792;
                      {
                        auto dsum1_fst_73 { std::get<0>(dsum1_72) };
                        auto dsum1_snd_74 { std::get<1>(dsum1_72) };
                        uint16_t id_4793 { 0 };
                        bool id_4794 { bool(dsum1_fst_73 == id_4793) };
                        Void id_4795 { ((void)(assert(id_4794)), ::dessser::Void()) };
                        (void)id_4795;
                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4796 { fun3261(dsum1_snd_74) };
                        ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_4797;
                        {
                          auto dtup_fst_76 { std::get<0>(id_4796) };
                          auto dtup_snd_77 { std::get<1>(id_4796) };
                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4798 { fun3261(dtup_snd_77) };
                          ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 letpair_res_4799;
                          {
                            auto dtup_fst_79 { std::get<0>(id_4798) };
                            auto dtup_snd_80 { std::get<1>(id_4798) };
                            ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_4800 { dtup_fst_76, dtup_fst_79 };
                            ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_4801 { std::in_place_index<0>, id_4800 };
                            ::dessser::gen::raql_expr::t6c5f9fd1d543de7239bd047f61f528e7 id_4802 { std::in_place_index<6>, id_4801 };
                            ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 id_4803 { id_4802, dtup_snd_80 };
                            letpair_res_4799 = id_4803;
                          }
                          letpair_res_4797 = letpair_res_4799;
                        }
                        letpair_res_4792 = letpair_res_4797;
                      }
                      let_res_4791 = letpair_res_4792;
                    }
                    choose_res_4309 = let_res_4791;
                  }
                  choose_res_3596 = choose_res_4309;
                }
                choose_res_3498 = choose_res_3596;
              }
              choose_res_3423 = choose_res_3498;
            }
            choose_res_3344 = choose_res_3423;
          }
          choose_res_3269 = choose_res_3344;
        }
        letpair_res_3266 = choose_res_3269;
      }
      let_res_3265 = letpair_res_3266;
    }
    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 let_res_4804;
    {
      ::dessser::gen::raql_expr::tdfbb1db4490dff22d6a3c6eddc51a564 drec_1028 { let_res_3265 };
      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4805;
      {
        auto drec_fst_1029 { std::get<0>(drec_1028) };
        auto drec_snd_1030 { std::get<1>(drec_1028) };
        ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4806 { drec_snd_1030.readU32Le() };
        ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 letpair_res_4807;
        {
          auto du32_fst_1032 { std::get<0>(id_4806) };
          auto du32_snd_1033 { std::get<1>(id_4806) };
          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4808 { du32_fst_1032, du32_snd_1033 };
          letpair_res_4807 = id_4808;
        }
        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 let_res_4809;
        {
          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 drec_1034 { letpair_res_4807 };
          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4810;
          {
            auto drec_fst_1035 { std::get<0>(drec_1034) };
            auto drec_snd_1036 { std::get<1>(drec_1034) };
            auto fun4811 { dessser::gen::raql_type::of_row_binary };
            ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 id_4812 { fun4811(drec_snd_1036) };
            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 let_res_4813;
            {
              ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 drec_1037 { id_4812 };
              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4814;
              {
                auto drec_fst_1038 { std::get<0>(drec_1037) };
                auto drec_snd_1039 { std::get<1>(drec_1037) };
                Size id_4815 { 0UL };
                uint8_t id_4816 { drec_snd_1039.peekU8(id_4815) };
                uint8_t id_4817 { 1 };
                bool id_4818 { bool(id_4816 == id_4817) };
                ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b choose_res_4819;
                if (id_4818) {
                  std::optional<dessser::gen::units::t_ext> id_4820 { std::nullopt };
                  Size id_4821 { 1UL };
                  Pointer id_4822 { drec_snd_1039.skip(id_4821) };
                  ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b id_4823 { id_4820, id_4822 };
                  choose_res_4819 = id_4823;
                } else {
                  auto fun4824 { dessser::gen::units::of_row_binary };
                  Size id_4825 { 1UL };
                  Pointer id_4826 { drec_snd_1039.skip(id_4825) };
                  ::dessser::gen::raql_expr::tdcd8238b20249643ff5b5f9a7648e226 id_4827 { fun4824(id_4826) };
                  ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b letpair_res_4828;
                  {
                    auto make1_1_fst_1041 { std::get<0>(id_4827) };
                    auto make1_1_snd_1042 { std::get<1>(id_4827) };
                    std::optional<dessser::gen::units::t_ext> id_4829 { make1_1_fst_1041 };
                    ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b id_4830 { id_4829, make1_1_snd_1042 };
                    letpair_res_4828 = id_4830;
                  }
                  choose_res_4819 = letpair_res_4828;
                }
                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4831;
                {
                  auto drec_fst_1044 { std::get<0>(choose_res_4819) };
                  auto drec_snd_1045 { std::get<1>(choose_res_4819) };
                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_4832 { std::make_shared<::dessser::gen::raql_expr::t>(drec_fst_1029, drec_fst_1035, drec_fst_1038, drec_fst_1044) };
                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4833 { id_4832, drec_snd_1045 };
                  letpair_res_4831 = id_4833;
                }
                letpair_res_4814 = letpair_res_4831;
              }
              let_res_4813 = letpair_res_4814;
            }
            letpair_res_4810 = let_res_4813;
          }
          let_res_4809 = letpair_res_4810;
        }
        letpair_res_4805 = let_res_4809;
      }
      let_res_4804 = letpair_res_4805;
    }
    return let_res_4804;
  }
   };
  return fun3261;
}
std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> of_row_binary(of_row_binary_init());

/* 
    (fun ("Ptr") (let-pair "make_fst_1047" "make_snd_1048" (apply (identifier "of-row-binary") (param 0)) (make-tup (identifier "make_fst_1047") (identifier "make_snd_1048"))))
 */
static std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> wrap_of_row_binary_init()
{
  std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> fun4834 { [&](Pointer p_0) {
    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4835 { of_row_binary(p_0) };
    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4836;
    {
      auto make_fst_1047 { std::get<0>(id_4835) };
      auto make_snd_1048 { std::get<1>(id_4835) };
      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4837 { make_fst_1047, make_snd_1048 };
      letpair_res_4836 = id_4837;
    }
    return letpair_res_4836;
  }
   };
  return fun4834;
}
std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> wrap_of_row_binary(wrap_of_row_binary_init());

/* 
    (fun ("{text: [Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index Void | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: [LocalState Void | GlobalState Void]?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]; uniq_num: U32; typ: $raql_type; units: $units?}" "Ptr")
      (apply (identifier "to-row-binary") (param 0) (param 1)))
 */
static std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> wrap_to_row_binary_init()
{
  std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> fun4838 { [&](std::shared_ptr<::dessser::gen::raql_expr::t>  p_0, Pointer p_1) {
    Pointer id_4839 { to_row_binary(p_0, p_1) };
    return id_4839;
  }
   };
  return fun4838;
}
std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> wrap_to_row_binary(wrap_to_row_binary_init());


}
