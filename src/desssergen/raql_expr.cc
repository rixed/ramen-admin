#include <algorithm>
#include <charconv>  // for from_chars
#include <chrono>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <exception>
#include <fstream>
#include <functional>
#include <iostream>
#include <optional>
#include <random>
#include <tuple>
#include <utility>
#include <variant>
#include <vector>
#include "dessser/runtime.h"
#include "desssergen/units.h"
#include "desssergen/raql_type.h"
#include "desssergen/raql_top_output.h"
#include "desssergen/raql_type.h"
#include "desssergen/raql_type.h"
#include "desssergen/raql_path_comp.h"
#include "desssergen/raql_binding_key.h"
#include "desssergen/raql_variable.h"
#include "desssergen/raql_value.h"
#include "desssergen/field_name.h"

namespace dessser::gen::raql_expr {
using dessser::operator<<;

std::uniform_real_distribution<double> _random_float_(0, 1);
std::uniform_int_distribution<uint8_t> _random_u8_(0);
std::uniform_int_distribution<uint32_t> _random_u32_(0);
std::uniform_int_distribution<uint64_t> _random_u64_(0);
std::default_random_engine _random_engine_;

/* ------------ */
/* Declarations */
/* ------------ */
enum lifespan {
  NoState,
  ImmediateState,
  LocalState,
  GlobalState,
};
constexpr size_t lifespan_size { 4 };
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct t893212699a9dab9c7aae59235cac13d9 : public std::tuple<
  dessser::gen::field_name::t_ext,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t893212699a9dab9c7aae59235cac13d9 const &a, t893212699a9dab9c7aae59235cac13d9 const &b) {
  return ::dessser::gen::field_name::Deref(std::get<0>(a)) == ::dessser::gen::field_name::Deref(std::get<0>(b)) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(t893212699a9dab9c7aae59235cac13d9 const &a, t893212699a9dab9c7aae59235cac13d9 const &b) {
  return !operator==(a, b);
}
struct ta4f782a597a104ffca4e8eb34b1832aa {
  std::shared_ptr<::dessser::gen::raql_expr::t>  case_cond;
  std::shared_ptr<::dessser::gen::raql_expr::t>  case_cons;
  ta4f782a597a104ffca4e8eb34b1832aa(std::shared_ptr<::dessser::gen::raql_expr::t>  case_cond_, std::shared_ptr<::dessser::gen::raql_expr::t>  case_cons_) : case_cond(case_cond_), case_cons(case_cons_) {}
  ta4f782a597a104ffca4e8eb34b1832aa() = default;
};
inline bool operator==(ta4f782a597a104ffca4e8eb34b1832aa const &a, ta4f782a597a104ffca4e8eb34b1832aa const &b) {
  return (*a.case_cond) == (*b.case_cond) && (*a.case_cons) == (*b.case_cons);
}

inline bool operator!=(ta4f782a597a104ffca4e8eb34b1832aa const &a, ta4f782a597a104ffca4e8eb34b1832aa const &b) {
  return !operator==(a, b);
}
struct t7a300b42842ab70bb0c47c946967b5e9 : public std::tuple<
  Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>,
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >
> {
  using tuple::tuple;
};
inline bool operator==(t7a300b42842ab70bb0c47c946967b5e9 const &a, t7a300b42842ab70bb0c47c946967b5e9 const &b) {
  return std::get<0>(a) == std::get<0>(b) && ((std::get<1>(a) && std::get<1>(b) && (*std::get<1>(a).value()) == (*std::get<1>(b).value())) || (!std::get<1>(a) && !std::get<1>(b)));
}
inline bool operator!=(t7a300b42842ab70bb0c47c946967b5e9 const &a, t7a300b42842ab70bb0c47c946967b5e9 const &b) {
  return !operator==(a, b);
}
struct tc12b6657c8a8e014a9c0805fe6c1ffaa : public std::variant<
  dessser::gen::raql_value::t_ext, // Const
  dessser::gen::raql_variable::t_ext, // Variable
  dessser::gen::raql_binding_key::t_ext, // Binding
  Void, // Now
  Void, // Random
  Void, // EventStart
  Void, // EventStop
  Lst<dessser::gen::raql_path_comp::t_ext>, // Path
  Void // Pi
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 9 };
};

inline bool operator==(tc12b6657c8a8e014a9c0805fe6c1ffaa const &a, tc12b6657c8a8e014a9c0805fe6c1ffaa const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return ::dessser::gen::raql_value::Deref(std::get<0>(a)) == ::dessser::gen::raql_value::Deref(std::get<0>(b)); // Const
    case 1: return ::dessser::gen::raql_variable::Deref(std::get<1>(a)) == ::dessser::gen::raql_variable::Deref(std::get<1>(b)); // Variable
    case 2: return ::dessser::gen::raql_binding_key::Deref(std::get<2>(a)) == ::dessser::gen::raql_binding_key::Deref(std::get<2>(b)); // Binding
    case 3: return std::get<3>(a) == std::get<3>(b); // Now
    case 4: return std::get<4>(a) == std::get<4>(b); // Random
    case 5: return std::get<5>(a) == std::get<5>(b); // EventStart
    case 6: return std::get<6>(a) == std::get<6>(b); // EventStop
    case 7: return std::get<7>(a) == std::get<7>(b); // Path
    case 8: return std::get<8>(a) == std::get<8>(b); // Pi
  };
  return false;
}
inline bool operator!=(tc12b6657c8a8e014a9c0805fe6c1ffaa const &a, tc12b6657c8a8e014a9c0805fe6c1ffaa const &b) {
  return !operator==(a, b);
}
enum tda87e7e66ea8965a5a02c25a378e045b {
  LittleEndian,
  BigEndian,
};
constexpr size_t tda87e7e66ea8965a5a02c25a378e045b_size { 2 };
struct t4554edf650b893234c2bebd2f1cc4562 : public std::tuple<
  dessser::gen::raql_type::t_ext,
  ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b
> {
  using tuple::tuple;
};
inline bool operator==(t4554edf650b893234c2bebd2f1cc4562 const &a, t4554edf650b893234c2bebd2f1cc4562 const &b) {
  return ::dessser::gen::raql_type::Deref(std::get<0>(a)) == ::dessser::gen::raql_type::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t4554edf650b893234c2bebd2f1cc4562 const &a, t4554edf650b893234c2bebd2f1cc4562 const &b) {
  return !operator==(a, b);
}
struct t1e698e747432021a9543ab78c0de985f : public std::variant<
  Void, // Age
  dessser::gen::raql_type::t_ext, // Cast
  Void, // Force
  ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562, // Peek
  Void, // Length
  Void, // Lower
  Void, // Upper
  Void, // UuidOfU128
  Void, // Not
  Void, // Abs
  Void, // Minus
  Void, // Defined
  Void, // Exp
  Void, // Log
  Void, // Log10
  Void, // Sqrt
  Void, // Sq
  Void, // Ceil
  Void, // Floor
  Void, // Round
  Void, // Cos
  Void, // Sin
  Void, // Tan
  Void, // ACos
  Void, // ASin
  Void, // ATan
  Void, // CosH
  Void, // SinH
  Void, // TanH
  Void, // Hash
  Void, // BeginOfRange
  Void, // EndOfRange
  Void, // Sparkline
  Void, // Strptime
  Void, // Variant
  Void, // Chr
  std::string, // Like
  Void, // Fit
  Void, // CountryCode
  Void, // IpFamily
  Void // Basename
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 41 };
};

inline bool operator==(t1e698e747432021a9543ab78c0de985f const &a, t1e698e747432021a9543ab78c0de985f const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // Age
    case 1: return ::dessser::gen::raql_type::Deref(std::get<1>(a)) == ::dessser::gen::raql_type::Deref(std::get<1>(b)); // Cast
    case 2: return std::get<2>(a) == std::get<2>(b); // Force
    case 3: return std::get<3>(a) == std::get<3>(b); // Peek
    case 4: return std::get<4>(a) == std::get<4>(b); // Length
    case 5: return std::get<5>(a) == std::get<5>(b); // Lower
    case 6: return std::get<6>(a) == std::get<6>(b); // Upper
    case 7: return std::get<7>(a) == std::get<7>(b); // UuidOfU128
    case 8: return std::get<8>(a) == std::get<8>(b); // Not
    case 9: return std::get<9>(a) == std::get<9>(b); // Abs
    case 10: return std::get<10>(a) == std::get<10>(b); // Minus
    case 11: return std::get<11>(a) == std::get<11>(b); // Defined
    case 12: return std::get<12>(a) == std::get<12>(b); // Exp
    case 13: return std::get<13>(a) == std::get<13>(b); // Log
    case 14: return std::get<14>(a) == std::get<14>(b); // Log10
    case 15: return std::get<15>(a) == std::get<15>(b); // Sqrt
    case 16: return std::get<16>(a) == std::get<16>(b); // Sq
    case 17: return std::get<17>(a) == std::get<17>(b); // Ceil
    case 18: return std::get<18>(a) == std::get<18>(b); // Floor
    case 19: return std::get<19>(a) == std::get<19>(b); // Round
    case 20: return std::get<20>(a) == std::get<20>(b); // Cos
    case 21: return std::get<21>(a) == std::get<21>(b); // Sin
    case 22: return std::get<22>(a) == std::get<22>(b); // Tan
    case 23: return std::get<23>(a) == std::get<23>(b); // ACos
    case 24: return std::get<24>(a) == std::get<24>(b); // ASin
    case 25: return std::get<25>(a) == std::get<25>(b); // ATan
    case 26: return std::get<26>(a) == std::get<26>(b); // CosH
    case 27: return std::get<27>(a) == std::get<27>(b); // SinH
    case 28: return std::get<28>(a) == std::get<28>(b); // TanH
    case 29: return std::get<29>(a) == std::get<29>(b); // Hash
    case 30: return std::get<30>(a) == std::get<30>(b); // BeginOfRange
    case 31: return std::get<31>(a) == std::get<31>(b); // EndOfRange
    case 32: return std::get<32>(a) == std::get<32>(b); // Sparkline
    case 33: return std::get<33>(a) == std::get<33>(b); // Strptime
    case 34: return std::get<34>(a) == std::get<34>(b); // Variant
    case 35: return std::get<35>(a) == std::get<35>(b); // Chr
    case 36: return std::get<36>(a) == std::get<36>(b); // Like
    case 37: return std::get<37>(a) == std::get<37>(b); // Fit
    case 38: return std::get<38>(a) == std::get<38>(b); // CountryCode
    case 39: return std::get<39>(a) == std::get<39>(b); // IpFamily
    case 40: return std::get<40>(a) == std::get<40>(b); // Basename
  };
  return false;
}
inline bool operator!=(t1e698e747432021a9543ab78c0de985f const &a, t1e698e747432021a9543ab78c0de985f const &b) {
  return !operator==(a, b);
}
struct t97690040bdae0cd6dad1d92efad836bd : public std::tuple<
  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t97690040bdae0cd6dad1d92efad836bd const &a, t97690040bdae0cd6dad1d92efad836bd const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(t97690040bdae0cd6dad1d92efad836bd const &a, t97690040bdae0cd6dad1d92efad836bd const &b) {
  return !operator==(a, b);
}
enum t48461ff0cd2afb0094859451a8d8bb25 {
  Max,
  Min,
  Print,
  Coalesce,
};
constexpr size_t t48461ff0cd2afb0094859451a8d8bb25_size { 4 };
struct tc52656a065611d8751e7656ebb533276 : public std::tuple<
  ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25,
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >
> {
  using tuple::tuple;
};
inline bool operator==(tc52656a065611d8751e7656ebb533276 const &a, tc52656a065611d8751e7656ebb533276 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tc52656a065611d8751e7656ebb533276 const &a, tc52656a065611d8751e7656ebb533276 const &b) {
  return !operator==(a, b);
}
struct t74907ce71e551d4dab6a10905ccb811a : public std::variant<
  Void, // Add
  Void, // Sub
  Void, // Mul
  Void, // Div
  Void, // IDiv
  Void, // Mod
  Void, // Pow
  Void, // Trunc
  Void, // Reldiff
  Void, // And
  Void, // Or
  Void, // Ge
  Void, // Gt
  Void, // Eq
  Void, // Concat
  Void, // StartsWith
  Void, // EndsWith
  Void, // BitAnd
  Void, // BitOr
  Void, // BitXor
  Void, // BitShift
  Void, // Get
  Void, // In
  Void, // Strftime
  bool, // Index
  Void // Percentile
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 26 };
};

inline bool operator==(t74907ce71e551d4dab6a10905ccb811a const &a, t74907ce71e551d4dab6a10905ccb811a const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // Add
    case 1: return std::get<1>(a) == std::get<1>(b); // Sub
    case 2: return std::get<2>(a) == std::get<2>(b); // Mul
    case 3: return std::get<3>(a) == std::get<3>(b); // Div
    case 4: return std::get<4>(a) == std::get<4>(b); // IDiv
    case 5: return std::get<5>(a) == std::get<5>(b); // Mod
    case 6: return std::get<6>(a) == std::get<6>(b); // Pow
    case 7: return std::get<7>(a) == std::get<7>(b); // Trunc
    case 8: return std::get<8>(a) == std::get<8>(b); // Reldiff
    case 9: return std::get<9>(a) == std::get<9>(b); // And
    case 10: return std::get<10>(a) == std::get<10>(b); // Or
    case 11: return std::get<11>(a) == std::get<11>(b); // Ge
    case 12: return std::get<12>(a) == std::get<12>(b); // Gt
    case 13: return std::get<13>(a) == std::get<13>(b); // Eq
    case 14: return std::get<14>(a) == std::get<14>(b); // Concat
    case 15: return std::get<15>(a) == std::get<15>(b); // StartsWith
    case 16: return std::get<16>(a) == std::get<16>(b); // EndsWith
    case 17: return std::get<17>(a) == std::get<17>(b); // BitAnd
    case 18: return std::get<18>(a) == std::get<18>(b); // BitOr
    case 19: return std::get<19>(a) == std::get<19>(b); // BitXor
    case 20: return std::get<20>(a) == std::get<20>(b); // BitShift
    case 21: return std::get<21>(a) == std::get<21>(b); // Get
    case 22: return std::get<22>(a) == std::get<22>(b); // In
    case 23: return std::get<23>(a) == std::get<23>(b); // Strftime
    case 24: return std::get<24>(a) == std::get<24>(b); // Index
    case 25: return std::get<25>(a) == std::get<25>(b); // Percentile
  };
  return false;
}
inline bool operator!=(t74907ce71e551d4dab6a10905ccb811a const &a, t74907ce71e551d4dab6a10905ccb811a const &b) {
  return !operator==(a, b);
}
struct t4b90b2b95595682aca23f5c924cf0a83 : public std::tuple<
  ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t4b90b2b95595682aca23f5c924cf0a83 const &a, t4b90b2b95595682aca23f5c924cf0a83 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b));
}
inline bool operator!=(t4b90b2b95595682aca23f5c924cf0a83 const &a, t4b90b2b95595682aca23f5c924cf0a83 const &b) {
  return !operator==(a, b);
}
enum t44061d3bf92748c5e2de2082aefca25c {
  SubString,
  MapSet,
};
constexpr size_t t44061d3bf92748c5e2de2082aefca25c_size { 2 };
struct tb45dee140d83500cc3856864567c24d9 : public std::tuple<
  ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(tb45dee140d83500cc3856864567c24d9 const &a, tb45dee140d83500cc3856864567c24d9 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b));
}
inline bool operator!=(tb45dee140d83500cc3856864567c24d9 const &a, tb45dee140d83500cc3856864567c24d9 const &b) {
  return !operator==(a, b);
}
struct t55b36257c89fe376409ef4914238d8c0 : public std::variant<
  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa, // SL0
  ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd, // SL1
  ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276, // SL1s
  ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83, // SL2
  ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 // SL3
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 5 };
};

inline bool operator==(t55b36257c89fe376409ef4914238d8c0 const &a, t55b36257c89fe376409ef4914238d8c0 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // SL0
    case 1: return std::get<1>(a) == std::get<1>(b); // SL1
    case 2: return std::get<2>(a) == std::get<2>(b); // SL1s
    case 3: return std::get<3>(a) == std::get<3>(b); // SL2
    case 4: return std::get<4>(a) == std::get<4>(b); // SL3
  };
  return false;
}
inline bool operator!=(t55b36257c89fe376409ef4914238d8c0 const &a, t55b36257c89fe376409ef4914238d8c0 const &b) {
  return !operator==(a, b);
}
struct t66cf3f891349e2747678760eec02eb62 : public std::tuple<
  double,
  double,
  uint32_t
> {
  using tuple::tuple;
};
inline bool operator==(t66cf3f891349e2747678760eec02eb62 const &a, t66cf3f891349e2747678760eec02eb62 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b) && std::get<2>(a) == std::get<2>(b);
}
inline bool operator!=(t66cf3f891349e2747678760eec02eb62 const &a, t66cf3f891349e2747678760eec02eb62 const &b) {
  return !operator==(a, b);
}
struct t72c6a286926f82d38f40c2c2d00ebcc6 : public std::variant<
  Void, // AggrMin
  Void, // AggrMax
  Void, // AggrSum
  Void, // AggrAvg
  Void, // AggrAnd
  Void, // AggrOr
  Void, // AggrBitAnd
  Void, // AggrBitOr
  Void, // AggrBitXor
  Void, // AggrFirst
  Void, // AggrLast
  ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62, // AggrHistogram
  Void, // Group
  Void, // Count
  Void // Distinct
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 15 };
};

inline bool operator==(t72c6a286926f82d38f40c2c2d00ebcc6 const &a, t72c6a286926f82d38f40c2c2d00ebcc6 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // AggrMin
    case 1: return std::get<1>(a) == std::get<1>(b); // AggrMax
    case 2: return std::get<2>(a) == std::get<2>(b); // AggrSum
    case 3: return std::get<3>(a) == std::get<3>(b); // AggrAvg
    case 4: return std::get<4>(a) == std::get<4>(b); // AggrAnd
    case 5: return std::get<5>(a) == std::get<5>(b); // AggrOr
    case 6: return std::get<6>(a) == std::get<6>(b); // AggrBitAnd
    case 7: return std::get<7>(a) == std::get<7>(b); // AggrBitOr
    case 8: return std::get<8>(a) == std::get<8>(b); // AggrBitXor
    case 9: return std::get<9>(a) == std::get<9>(b); // AggrFirst
    case 10: return std::get<10>(a) == std::get<10>(b); // AggrLast
    case 11: return std::get<11>(a) == std::get<11>(b); // AggrHistogram
    case 12: return std::get<12>(a) == std::get<12>(b); // Group
    case 13: return std::get<13>(a) == std::get<13>(b); // Count
    case 14: return std::get<14>(a) == std::get<14>(b); // Distinct
  };
  return false;
}
inline bool operator!=(t72c6a286926f82d38f40c2c2d00ebcc6 const &a, t72c6a286926f82d38f40c2c2d00ebcc6 const &b) {
  return !operator==(a, b);
}
struct t33838a2e63bc4895abd013987ee48342 : public std::tuple<
  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t33838a2e63bc4895abd013987ee48342 const &a, t33838a2e63bc4895abd013987ee48342 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(t33838a2e63bc4895abd013987ee48342 const &a, t33838a2e63bc4895abd013987ee48342 const &b) {
  return !operator==(a, b);
}
enum t0b18c71c293bcb822d27e54c405a88b8 {
  Lag,
  ExpSmooth,
  Sample,
  OneOutOf,
};
constexpr size_t t0b18c71c293bcb822d27e54c405a88b8_size { 4 };
struct t9fef09de27c039b367a0c1859727157c : public std::tuple<
  ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t9fef09de27c039b367a0c1859727157c const &a, t9fef09de27c039b367a0c1859727157c const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b));
}
inline bool operator!=(t9fef09de27c039b367a0c1859727157c const &a, t9fef09de27c039b367a0c1859727157c const &b) {
  return !operator==(a, b);
}
struct tde6226ab24e2bde569d940f438b90782 : public std::variant<
  Void, // MovingAvg
  Void, // Hysteresis
  bool // OnceEvery
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 3 };
};

inline bool operator==(tde6226ab24e2bde569d940f438b90782 const &a, tde6226ab24e2bde569d940f438b90782 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // MovingAvg
    case 1: return std::get<1>(a) == std::get<1>(b); // Hysteresis
    case 2: return std::get<2>(a) == std::get<2>(b); // OnceEvery
  };
  return false;
}
inline bool operator!=(tde6226ab24e2bde569d940f438b90782 const &a, tde6226ab24e2bde569d940f438b90782 const &b) {
  return !operator==(a, b);
}
struct t27e357241014cac9c70637dbe763fa46 : public std::tuple<
  ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t27e357241014cac9c70637dbe763fa46 const &a, t27e357241014cac9c70637dbe763fa46 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b));
}
inline bool operator!=(t27e357241014cac9c70637dbe763fa46 const &a, t27e357241014cac9c70637dbe763fa46 const &b) {
  return !operator==(a, b);
}
struct t482aebd3608ffaf2914a7e856b14192b : public std::variant<
  Void, // DampedHolt
  bool // Remember
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 2 };
};

inline bool operator==(t482aebd3608ffaf2914a7e856b14192b const &a, t482aebd3608ffaf2914a7e856b14192b const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // DampedHolt
    case 1: return std::get<1>(a) == std::get<1>(b); // Remember
  };
  return false;
}
inline bool operator!=(t482aebd3608ffaf2914a7e856b14192b const &a, t482aebd3608ffaf2914a7e856b14192b const &b) {
  return !operator==(a, b);
}
struct t2783f1bd5678d740a05f0e7d758a084e : public std::tuple<
  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t2783f1bd5678d740a05f0e7d758a084e const &a, t2783f1bd5678d740a05f0e7d758a084e const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b)) && (*std::get<4>(a)) == (*std::get<4>(b));
}
inline bool operator!=(t2783f1bd5678d740a05f0e7d758a084e const &a, t2783f1bd5678d740a05f0e7d758a084e const &b) {
  return !operator==(a, b);
}
struct t98f65fefde90f21cac9f06d483a57475 {
  bool inv;
  bool up_to;
  t98f65fefde90f21cac9f06d483a57475(bool inv_, bool up_to_) : inv(inv_), up_to(up_to_) {}
  t98f65fefde90f21cac9f06d483a57475() = default;
};
inline bool operator==(t98f65fefde90f21cac9f06d483a57475 const &a, t98f65fefde90f21cac9f06d483a57475 const &b) {
  return a.inv == b.inv && a.up_to == b.up_to;
}

inline bool operator!=(t98f65fefde90f21cac9f06d483a57475 const &a, t98f65fefde90f21cac9f06d483a57475 const &b) {
  return !operator==(a, b);
}
struct tdd3c5c0a7097ddd3d17c28956240cbea : public std::variant<
  Void, // MultiLinReg
  ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 // Largest
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 2 };
};

inline bool operator==(tdd3c5c0a7097ddd3d17c28956240cbea const &a, tdd3c5c0a7097ddd3d17c28956240cbea const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // MultiLinReg
    case 1: return std::get<1>(a) == std::get<1>(b); // Largest
  };
  return false;
}
inline bool operator!=(tdd3c5c0a7097ddd3d17c28956240cbea const &a, tdd3c5c0a7097ddd3d17c28956240cbea const &b) {
  return !operator==(a, b);
}
struct t62a574a444d31b9a476bfa017f081a2b : public std::tuple<
  ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >
> {
  using tuple::tuple;
};
inline bool operator==(t62a574a444d31b9a476bfa017f081a2b const &a, t62a574a444d31b9a476bfa017f081a2b const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b)) && std::get<4>(a) == std::get<4>(b);
}
inline bool operator!=(t62a574a444d31b9a476bfa017f081a2b const &a, t62a574a444d31b9a476bfa017f081a2b const &b) {
  return !operator==(a, b);
}
enum t08ea46bfedc9b7effc1e74e5b51a05ef {
  DampedHoltWinter,
};
constexpr size_t t08ea46bfedc9b7effc1e74e5b51a05ef_size { 1 };
struct tf2c2db7fffde452d30a812e218f245f7 : public std::tuple<
  ::dessser::gen::raql_expr::t08ea46bfedc9b7effc1e74e5b51a05ef,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(tf2c2db7fffde452d30a812e218f245f7 const &a, tf2c2db7fffde452d30a812e218f245f7 const &b) {
  return std::get<0>(a) == std::get<0>(b) && (*std::get<1>(a)) == (*std::get<1>(b)) && (*std::get<2>(a)) == (*std::get<2>(b)) && (*std::get<3>(a)) == (*std::get<3>(b)) && (*std::get<4>(a)) == (*std::get<4>(b)) && (*std::get<5>(a)) == (*std::get<5>(b)) && (*std::get<6>(a)) == (*std::get<6>(b));
}
inline bool operator!=(tf2c2db7fffde452d30a812e218f245f7 const &a, tf2c2db7fffde452d30a812e218f245f7 const &b) {
  return !operator==(a, b);
}
struct t9ff32f6938631a338c8ace99a86c40f3 {
  dessser::gen::raql_top_output::t_ext output;
  std::shared_ptr<::dessser::gen::raql_expr::t>  size;
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > max_size;
  std::shared_ptr<::dessser::gen::raql_expr::t>  Top_what;
  std::shared_ptr<::dessser::gen::raql_expr::t>  by;
  std::shared_ptr<::dessser::gen::raql_expr::t>  Top_time;
  std::shared_ptr<::dessser::gen::raql_expr::t>  duration;
  std::shared_ptr<::dessser::gen::raql_expr::t>  sigmas;
  t9ff32f6938631a338c8ace99a86c40f3(dessser::gen::raql_top_output::t_ext output_, std::shared_ptr<::dessser::gen::raql_expr::t>  size_, std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > max_size_, std::shared_ptr<::dessser::gen::raql_expr::t>  Top_what_, std::shared_ptr<::dessser::gen::raql_expr::t>  by_, std::shared_ptr<::dessser::gen::raql_expr::t>  Top_time_, std::shared_ptr<::dessser::gen::raql_expr::t>  duration_, std::shared_ptr<::dessser::gen::raql_expr::t>  sigmas_) : output(output_), size(size_), max_size(max_size_), Top_what(Top_what_), by(by_), Top_time(Top_time_), duration(duration_), sigmas(sigmas_) {}
  t9ff32f6938631a338c8ace99a86c40f3() = default;
};
inline bool operator==(t9ff32f6938631a338c8ace99a86c40f3 const &a, t9ff32f6938631a338c8ace99a86c40f3 const &b) {
  return ::dessser::gen::raql_top_output::Deref(a.output) == ::dessser::gen::raql_top_output::Deref(b.output) && (*a.size) == (*b.size) && ((a.max_size && b.max_size && (*a.max_size.value()) == (*b.max_size.value())) || (!a.max_size && !b.max_size)) && (*a.Top_what) == (*b.Top_what) && (*a.by) == (*b.by) && (*a.Top_time) == (*b.Top_time) && (*a.duration) == (*b.duration) && (*a.sigmas) == (*b.sigmas);
}

inline bool operator!=(t9ff32f6938631a338c8ace99a86c40f3 const &a, t9ff32f6938631a338c8ace99a86c40f3 const &b) {
  return !operator==(a, b);
}
struct t1444e78faaacd44c5e033d97448c4e87 {
  std::shared_ptr<::dessser::gen::raql_expr::t>  what;
  std::shared_ptr<::dessser::gen::raql_expr::t>  time;
  std::shared_ptr<::dessser::gen::raql_expr::t>  max_age;
  bool tumbling;
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > sample_size;
  t1444e78faaacd44c5e033d97448c4e87(std::shared_ptr<::dessser::gen::raql_expr::t>  what_, std::shared_ptr<::dessser::gen::raql_expr::t>  time_, std::shared_ptr<::dessser::gen::raql_expr::t>  max_age_, bool tumbling_, std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > sample_size_) : what(what_), time(time_), max_age(max_age_), tumbling(tumbling_), sample_size(sample_size_) {}
  t1444e78faaacd44c5e033d97448c4e87() = default;
};
inline bool operator==(t1444e78faaacd44c5e033d97448c4e87 const &a, t1444e78faaacd44c5e033d97448c4e87 const &b) {
  return (*a.what) == (*b.what) && (*a.time) == (*b.time) && (*a.max_age) == (*b.max_age) && a.tumbling == b.tumbling && ((a.sample_size && b.sample_size && (*a.sample_size.value()) == (*b.sample_size.value())) || (!a.sample_size && !b.sample_size));
}

inline bool operator!=(t1444e78faaacd44c5e033d97448c4e87 const &a, t1444e78faaacd44c5e033d97448c4e87 const &b) {
  return !operator==(a, b);
}
struct ta6e43dc0a066d58332d394a7b333feee : public std::variant<
  ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342, // SF1
  ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c, // SF2
  ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46, // SF3
  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e, // SF4
  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b, // SF4s
  ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7, // SF6
  ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3, // Top
  ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 // Past
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 8 };
};

inline bool operator==(ta6e43dc0a066d58332d394a7b333feee const &a, ta6e43dc0a066d58332d394a7b333feee const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // SF1
    case 1: return std::get<1>(a) == std::get<1>(b); // SF2
    case 2: return std::get<2>(a) == std::get<2>(b); // SF3
    case 3: return std::get<3>(a) == std::get<3>(b); // SF4
    case 4: return std::get<4>(a) == std::get<4>(b); // SF4s
    case 5: return std::get<5>(a) == std::get<5>(b); // SF6
    case 6: return std::get<6>(a) == std::get<6>(b); // Top
    case 7: return std::get<7>(a) == std::get<7>(b); // Past
  };
  return false;
}
inline bool operator!=(ta6e43dc0a066d58332d394a7b333feee const &a, ta6e43dc0a066d58332d394a7b333feee const &b) {
  return !operator==(a, b);
}
struct t21552b36d3d1886c23db508637ffd83a {
  std::optional<::dessser::gen::raql_expr::lifespan> lifespan;
  bool skip_nulls;
  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee operation;
  t21552b36d3d1886c23db508637ffd83a(std::optional<::dessser::gen::raql_expr::lifespan> lifespan_, bool skip_nulls_, ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee operation_) : lifespan(lifespan_), skip_nulls(skip_nulls_), operation(operation_) {}
  t21552b36d3d1886c23db508637ffd83a() = default;
};
inline bool operator==(t21552b36d3d1886c23db508637ffd83a const &a, t21552b36d3d1886c23db508637ffd83a const &b) {
  return ((a.lifespan && b.lifespan && a.lifespan.value() == b.lifespan.value()) || (!a.lifespan && !b.lifespan)) && a.skip_nulls == b.skip_nulls && a.operation == b.operation;
}

inline bool operator!=(t21552b36d3d1886c23db508637ffd83a const &a, t21552b36d3d1886c23db508637ffd83a const &b) {
  return !operator==(a, b);
}
struct t09ebe067ef7b13158d058ba3ce6f150c : public std::tuple<
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  std::shared_ptr<::dessser::gen::raql_expr::t> 
> {
  using tuple::tuple;
};
inline bool operator==(t09ebe067ef7b13158d058ba3ce6f150c const &a, t09ebe067ef7b13158d058ba3ce6f150c const &b) {
  return (*std::get<0>(a)) == (*std::get<0>(b)) && (*std::get<1>(a)) == (*std::get<1>(b));
}
inline bool operator!=(t09ebe067ef7b13158d058ba3ce6f150c const &a, t09ebe067ef7b13158d058ba3ce6f150c const &b) {
  return !operator==(a, b);
}
struct t8411610d7f6cfe33697a36943471c946 : public std::variant<
  ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c // Split
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 1 };
};

inline bool operator==(t8411610d7f6cfe33697a36943471c946 const &a, t8411610d7f6cfe33697a36943471c946 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // Split
  };
  return false;
}
inline bool operator!=(t8411610d7f6cfe33697a36943471c946 const &a, t8411610d7f6cfe33697a36943471c946 const &b) {
  return !operator==(a, b);
}
struct t3a6dacc475a53013b3638814d2cc66f8 : public std::variant<
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, // Tuple
  Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>, // Record
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, // Vector
  ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9, // Case
  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0, // Stateless
  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a, // Stateful
  ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 // Generator
> {
  using variant::variant;
  using variant::operator=;
  static constexpr size_t size { 7 };
};

inline bool operator==(t3a6dacc475a53013b3638814d2cc66f8 const &a, t3a6dacc475a53013b3638814d2cc66f8 const &b) {
  if (a.index() != b.index()) return false;
  switch (a.index()) {
    case 0: return std::get<0>(a) == std::get<0>(b); // Tuple
    case 1: return std::get<1>(a) == std::get<1>(b); // Record
    case 2: return std::get<2>(a) == std::get<2>(b); // Vector
    case 3: return std::get<3>(a) == std::get<3>(b); // Case
    case 4: return std::get<4>(a) == std::get<4>(b); // Stateless
    case 5: return std::get<5>(a) == std::get<5>(b); // Stateful
    case 6: return std::get<6>(a) == std::get<6>(b); // Generator
  };
  return false;
}
inline bool operator!=(t3a6dacc475a53013b3638814d2cc66f8 const &a, t3a6dacc475a53013b3638814d2cc66f8 const &b) {
  return !operator==(a, b);
}
struct t {
  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 text;
  uint32_t uniq_num;
  dessser::gen::raql_type::t_ext typ;
  std::optional<dessser::gen::units::t_ext> units;
  t(::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 text_, uint32_t uniq_num_, dessser::gen::raql_type::t_ext typ_, std::optional<dessser::gen::units::t_ext> units_) : text(text_), uniq_num(uniq_num_), typ(typ_), units(units_) {}
  t() = default;
};
inline bool operator==(t const &a, t const &b) {
  return a.text == b.text && a.uniq_num == b.uniq_num && ::dessser::gen::raql_type::Deref(a.typ) == ::dessser::gen::raql_type::Deref(b.typ) && ((a.units && b.units && ::dessser::gen::units::Deref(a.units.value()) == ::dessser::gen::units::Deref(b.units.value())) || (!a.units && !b.units));
}

inline bool operator!=(t const &a, t const &b) {
  return !operator==(a, b);
}
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct t43c513984591dd08f01f493905d45a0f : public std::tuple<
  ::dessser::gen::raql_expr::lifespan,
  Pointer
> {
  using tuple::tuple;
  t43c513984591dd08f01f493905d45a0f(std::tuple<::dessser::gen::raql_expr::lifespan, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::lifespan, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t43c513984591dd08f01f493905d45a0f const &a, t43c513984591dd08f01f493905d45a0f const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t43c513984591dd08f01f493905d45a0f const &a, t43c513984591dd08f01f493905d45a0f const &b) {
  return !operator==(a, b);
}
struct ta97bb48ed75bbda6173555873826c8c6 : public std::tuple<
  uint16_t,
  Pointer
> {
  using tuple::tuple;
  ta97bb48ed75bbda6173555873826c8c6(std::tuple<uint16_t, Pointer> p)
    : std::tuple<uint16_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(ta97bb48ed75bbda6173555873826c8c6 const &a, ta97bb48ed75bbda6173555873826c8c6 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(ta97bb48ed75bbda6173555873826c8c6 const &a, ta97bb48ed75bbda6173555873826c8c6 const &b) {
  return !operator==(a, b);
}
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct tf4faeadcb1d4bc08688cd9dc4070e517 : public std::tuple<
  std::shared_ptr<::dessser::gen::raql_expr::t> ,
  Pointer
> {
  using tuple::tuple;
  tf4faeadcb1d4bc08688cd9dc4070e517(std::tuple<std::shared_ptr<::dessser::gen::raql_expr::t> , Pointer> p)
    : std::tuple<std::shared_ptr<::dessser::gen::raql_expr::t> , Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tf4faeadcb1d4bc08688cd9dc4070e517 const &a, tf4faeadcb1d4bc08688cd9dc4070e517 const &b) {
  return (*std::get<0>(a)) == (*std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tf4faeadcb1d4bc08688cd9dc4070e517 const &a, tf4faeadcb1d4bc08688cd9dc4070e517 const &b) {
  return !operator==(a, b);
}
struct tc4ed1656cf6df554256641048c8d0849 : public std::tuple<
  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8,
  Pointer
> {
  using tuple::tuple;
  tc4ed1656cf6df554256641048c8d0849(std::tuple<::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tc4ed1656cf6df554256641048c8d0849 const &a, tc4ed1656cf6df554256641048c8d0849 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tc4ed1656cf6df554256641048c8d0849 const &a, tc4ed1656cf6df554256641048c8d0849 const &b) {
  return !operator==(a, b);
}
struct t491c44439106a32f896827242e8e76a1 : public std::tuple<
  uint32_t,
  Pointer
> {
  using tuple::tuple;
  t491c44439106a32f896827242e8e76a1(std::tuple<uint32_t, Pointer> p)
    : std::tuple<uint32_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t491c44439106a32f896827242e8e76a1 const &a, t491c44439106a32f896827242e8e76a1 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t491c44439106a32f896827242e8e76a1 const &a, t491c44439106a32f896827242e8e76a1 const &b) {
  return !operator==(a, b);
}
struct t1a5d74abf838df33f185a72a8912f5c9 : public std::tuple<
  uint8_t,
  Pointer
> {
  using tuple::tuple;
  t1a5d74abf838df33f185a72a8912f5c9(std::tuple<uint8_t, Pointer> p)
    : std::tuple<uint8_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t1a5d74abf838df33f185a72a8912f5c9 const &a, t1a5d74abf838df33f185a72a8912f5c9 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t1a5d74abf838df33f185a72a8912f5c9 const &a, t1a5d74abf838df33f185a72a8912f5c9 const &b) {
  return !operator==(a, b);
}
struct t60d2a53484b8e0b6653034ad96861c61 : public std::tuple<
  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >,
  Pointer
> {
  using tuple::tuple;
  t60d2a53484b8e0b6653034ad96861c61(std::tuple<Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer> p)
    : std::tuple<Lst<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t60d2a53484b8e0b6653034ad96861c61 const &a, t60d2a53484b8e0b6653034ad96861c61 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t60d2a53484b8e0b6653034ad96861c61 const &a, t60d2a53484b8e0b6653034ad96861c61 const &b) {
  return !operator==(a, b);
}
struct te61b5292977bf2669de474a297a8d1e4 : public std::tuple<
  Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>,
  Pointer
> {
  using tuple::tuple;
  te61b5292977bf2669de474a297a8d1e4(std::tuple<Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>, Pointer> p)
    : std::tuple<Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(te61b5292977bf2669de474a297a8d1e4 const &a, te61b5292977bf2669de474a297a8d1e4 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(te61b5292977bf2669de474a297a8d1e4 const &a, te61b5292977bf2669de474a297a8d1e4 const &b) {
  return !operator==(a, b);
}
struct t18cecf882d7ac80cef37dfe6b22279d4 : public std::tuple<
  dessser::gen::field_name::t_ext,
  Pointer
> {
  using tuple::tuple;
  t18cecf882d7ac80cef37dfe6b22279d4(std::tuple<dessser::gen::field_name::t_ext, Pointer> p)
    : std::tuple<dessser::gen::field_name::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t18cecf882d7ac80cef37dfe6b22279d4 const &a, t18cecf882d7ac80cef37dfe6b22279d4 const &b) {
  return ::dessser::gen::field_name::Deref(std::get<0>(a)) == ::dessser::gen::field_name::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t18cecf882d7ac80cef37dfe6b22279d4 const &a, t18cecf882d7ac80cef37dfe6b22279d4 const &b) {
  return !operator==(a, b);
}
struct te88211e2a2e61aaae42952aaddf8e9e2 : public std::tuple<
  Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>,
  Pointer
> {
  using tuple::tuple;
  te88211e2a2e61aaae42952aaddf8e9e2(std::tuple<Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>, Pointer> p)
    : std::tuple<Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(te88211e2a2e61aaae42952aaddf8e9e2 const &a, te88211e2a2e61aaae42952aaddf8e9e2 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(te88211e2a2e61aaae42952aaddf8e9e2 const &a, te88211e2a2e61aaae42952aaddf8e9e2 const &b) {
  return !operator==(a, b);
}
struct t0a80625c094043132be3ecb4371c3ca6 : public std::tuple<
  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >,
  Pointer
> {
  using tuple::tuple;
  t0a80625c094043132be3ecb4371c3ca6(std::tuple<std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer> p)
    : std::tuple<std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> >, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t0a80625c094043132be3ecb4371c3ca6 const &a, t0a80625c094043132be3ecb4371c3ca6 const &b) {
  return ((std::get<0>(a) && std::get<0>(b) && (*std::get<0>(a).value()) == (*std::get<0>(b).value())) || (!std::get<0>(a) && !std::get<0>(b))) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t0a80625c094043132be3ecb4371c3ca6 const &a, t0a80625c094043132be3ecb4371c3ca6 const &b) {
  return !operator==(a, b);
}
struct t6ca955fb0c0fc4c8085216b099fa656f : public std::tuple<
  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0,
  Pointer
> {
  using tuple::tuple;
  t6ca955fb0c0fc4c8085216b099fa656f(std::tuple<::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t6ca955fb0c0fc4c8085216b099fa656f const &a, t6ca955fb0c0fc4c8085216b099fa656f const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t6ca955fb0c0fc4c8085216b099fa656f const &a, t6ca955fb0c0fc4c8085216b099fa656f const &b) {
  return !operator==(a, b);
}
struct tadb8577e09b7edb2961f1b2389da22e4 : public std::tuple<
  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa,
  Pointer
> {
  using tuple::tuple;
  tadb8577e09b7edb2961f1b2389da22e4(std::tuple<::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tadb8577e09b7edb2961f1b2389da22e4 const &a, tadb8577e09b7edb2961f1b2389da22e4 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tadb8577e09b7edb2961f1b2389da22e4 const &a, tadb8577e09b7edb2961f1b2389da22e4 const &b) {
  return !operator==(a, b);
}
struct tf3063cfb73e0f06d3ea99ebd15a86d50 : public std::tuple<
  dessser::gen::raql_value::t_ext,
  Pointer
> {
  using tuple::tuple;
  tf3063cfb73e0f06d3ea99ebd15a86d50(std::tuple<dessser::gen::raql_value::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_value::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tf3063cfb73e0f06d3ea99ebd15a86d50 const &a, tf3063cfb73e0f06d3ea99ebd15a86d50 const &b) {
  return ::dessser::gen::raql_value::Deref(std::get<0>(a)) == ::dessser::gen::raql_value::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tf3063cfb73e0f06d3ea99ebd15a86d50 const &a, tf3063cfb73e0f06d3ea99ebd15a86d50 const &b) {
  return !operator==(a, b);
}
struct tc4e06565de85990f3a8300f3d579c5ec : public std::tuple<
  dessser::gen::raql_variable::t_ext,
  Pointer
> {
  using tuple::tuple;
  tc4e06565de85990f3a8300f3d579c5ec(std::tuple<dessser::gen::raql_variable::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_variable::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tc4e06565de85990f3a8300f3d579c5ec const &a, tc4e06565de85990f3a8300f3d579c5ec const &b) {
  return ::dessser::gen::raql_variable::Deref(std::get<0>(a)) == ::dessser::gen::raql_variable::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tc4e06565de85990f3a8300f3d579c5ec const &a, tc4e06565de85990f3a8300f3d579c5ec const &b) {
  return !operator==(a, b);
}
struct tafafa3f11f4987d5593612447c141adc : public std::tuple<
  dessser::gen::raql_binding_key::t_ext,
  Pointer
> {
  using tuple::tuple;
  tafafa3f11f4987d5593612447c141adc(std::tuple<dessser::gen::raql_binding_key::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_binding_key::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tafafa3f11f4987d5593612447c141adc const &a, tafafa3f11f4987d5593612447c141adc const &b) {
  return ::dessser::gen::raql_binding_key::Deref(std::get<0>(a)) == ::dessser::gen::raql_binding_key::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tafafa3f11f4987d5593612447c141adc const &a, tafafa3f11f4987d5593612447c141adc const &b) {
  return !operator==(a, b);
}
struct t6459c10486533027b3ba85d163bef4e9 : public std::tuple<
  Lst<dessser::gen::raql_path_comp::t_ext>,
  Pointer
> {
  using tuple::tuple;
  t6459c10486533027b3ba85d163bef4e9(std::tuple<Lst<dessser::gen::raql_path_comp::t_ext>, Pointer> p)
    : std::tuple<Lst<dessser::gen::raql_path_comp::t_ext>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t6459c10486533027b3ba85d163bef4e9 const &a, t6459c10486533027b3ba85d163bef4e9 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t6459c10486533027b3ba85d163bef4e9 const &a, t6459c10486533027b3ba85d163bef4e9 const &b) {
  return !operator==(a, b);
}
struct tdb32a2e5c34c950a3600da6c2ff4f8f3 : public std::tuple<
  dessser::gen::raql_path_comp::t_ext,
  Pointer
> {
  using tuple::tuple;
  tdb32a2e5c34c950a3600da6c2ff4f8f3(std::tuple<dessser::gen::raql_path_comp::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_path_comp::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tdb32a2e5c34c950a3600da6c2ff4f8f3 const &a, tdb32a2e5c34c950a3600da6c2ff4f8f3 const &b) {
  return ::dessser::gen::raql_path_comp::Deref(std::get<0>(a)) == ::dessser::gen::raql_path_comp::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tdb32a2e5c34c950a3600da6c2ff4f8f3 const &a, tdb32a2e5c34c950a3600da6c2ff4f8f3 const &b) {
  return !operator==(a, b);
}
struct t5aae5cf96cc54eff6123acdd39da1c51 : public std::tuple<
  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f,
  Pointer
> {
  using tuple::tuple;
  t5aae5cf96cc54eff6123acdd39da1c51(std::tuple<::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t5aae5cf96cc54eff6123acdd39da1c51 const &a, t5aae5cf96cc54eff6123acdd39da1c51 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t5aae5cf96cc54eff6123acdd39da1c51 const &a, t5aae5cf96cc54eff6123acdd39da1c51 const &b) {
  return !operator==(a, b);
}
struct t101502ffd7fb38beafe4b49259f92ba1 : public std::tuple<
  dessser::gen::raql_type::t_ext,
  Pointer
> {
  using tuple::tuple;
  t101502ffd7fb38beafe4b49259f92ba1(std::tuple<dessser::gen::raql_type::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_type::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t101502ffd7fb38beafe4b49259f92ba1 const &a, t101502ffd7fb38beafe4b49259f92ba1 const &b) {
  return ::dessser::gen::raql_type::Deref(std::get<0>(a)) == ::dessser::gen::raql_type::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t101502ffd7fb38beafe4b49259f92ba1 const &a, t101502ffd7fb38beafe4b49259f92ba1 const &b) {
  return !operator==(a, b);
}
struct tb856470d2bf18dbfcf9343fbe7dab286 : public std::tuple<
  ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b,
  Pointer
> {
  using tuple::tuple;
  tb856470d2bf18dbfcf9343fbe7dab286(std::tuple<::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tb856470d2bf18dbfcf9343fbe7dab286 const &a, tb856470d2bf18dbfcf9343fbe7dab286 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tb856470d2bf18dbfcf9343fbe7dab286 const &a, tb856470d2bf18dbfcf9343fbe7dab286 const &b) {
  return !operator==(a, b);
}
struct t12fb9c475959b52bf7b17b155a955ffa : public std::tuple<
  Size,
  Pointer
> {
  using tuple::tuple;
  t12fb9c475959b52bf7b17b155a955ffa(std::tuple<Size, Pointer> p)
    : std::tuple<Size, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t12fb9c475959b52bf7b17b155a955ffa const &a, t12fb9c475959b52bf7b17b155a955ffa const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t12fb9c475959b52bf7b17b155a955ffa const &a, t12fb9c475959b52bf7b17b155a955ffa const &b) {
  return !operator==(a, b);
}
struct t9ef6882174ae71a34a3c5ef6b29242fb : public std::tuple<
  Bytes,
  Pointer
> {
  using tuple::tuple;
  t9ef6882174ae71a34a3c5ef6b29242fb(std::tuple<Bytes, Pointer> p)
    : std::tuple<Bytes, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t9ef6882174ae71a34a3c5ef6b29242fb const &a, t9ef6882174ae71a34a3c5ef6b29242fb const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t9ef6882174ae71a34a3c5ef6b29242fb const &a, t9ef6882174ae71a34a3c5ef6b29242fb const &b) {
  return !operator==(a, b);
}
struct taaeb09e09e7b2f3d51af215eff0c9ba8 : public std::tuple<
  ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25,
  Pointer
> {
  using tuple::tuple;
  taaeb09e09e7b2f3d51af215eff0c9ba8(std::tuple<::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(taaeb09e09e7b2f3d51af215eff0c9ba8 const &a, taaeb09e09e7b2f3d51af215eff0c9ba8 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(taaeb09e09e7b2f3d51af215eff0c9ba8 const &a, taaeb09e09e7b2f3d51af215eff0c9ba8 const &b) {
  return !operator==(a, b);
}
struct ta95f2b77581fccc01ac6eada8f2a8610 : public std::tuple<
  ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a,
  Pointer
> {
  using tuple::tuple;
  ta95f2b77581fccc01ac6eada8f2a8610(std::tuple<::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(ta95f2b77581fccc01ac6eada8f2a8610 const &a, ta95f2b77581fccc01ac6eada8f2a8610 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(ta95f2b77581fccc01ac6eada8f2a8610 const &a, ta95f2b77581fccc01ac6eada8f2a8610 const &b) {
  return !operator==(a, b);
}
struct t0b5424d5a61f72e12d141a3056c8cd11 : public std::tuple<
  ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c,
  Pointer
> {
  using tuple::tuple;
  t0b5424d5a61f72e12d141a3056c8cd11(std::tuple<::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t0b5424d5a61f72e12d141a3056c8cd11 const &a, t0b5424d5a61f72e12d141a3056c8cd11 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t0b5424d5a61f72e12d141a3056c8cd11 const &a, t0b5424d5a61f72e12d141a3056c8cd11 const &b) {
  return !operator==(a, b);
}
struct t0f89cc6dc6c3118d1708bd3d50266d64 : public std::tuple<
  std::optional<::dessser::gen::raql_expr::lifespan>,
  Pointer
> {
  using tuple::tuple;
  t0f89cc6dc6c3118d1708bd3d50266d64(std::tuple<std::optional<::dessser::gen::raql_expr::lifespan>, Pointer> p)
    : std::tuple<std::optional<::dessser::gen::raql_expr::lifespan>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t0f89cc6dc6c3118d1708bd3d50266d64 const &a, t0f89cc6dc6c3118d1708bd3d50266d64 const &b) {
  return ((std::get<0>(a) && std::get<0>(b) && std::get<0>(a).value() == std::get<0>(b).value()) || (!std::get<0>(a) && !std::get<0>(b))) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t0f89cc6dc6c3118d1708bd3d50266d64 const &a, t0f89cc6dc6c3118d1708bd3d50266d64 const &b) {
  return !operator==(a, b);
}
struct tf9a0a3fefc87c9e10a93d3a172850c26 : public std::tuple<
  bool,
  Pointer
> {
  using tuple::tuple;
  tf9a0a3fefc87c9e10a93d3a172850c26(std::tuple<bool, Pointer> p)
    : std::tuple<bool, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tf9a0a3fefc87c9e10a93d3a172850c26 const &a, tf9a0a3fefc87c9e10a93d3a172850c26 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tf9a0a3fefc87c9e10a93d3a172850c26 const &a, tf9a0a3fefc87c9e10a93d3a172850c26 const &b) {
  return !operator==(a, b);
}
struct t109794c55a35d10d7d6e6edf6773e0f3 : public std::tuple<
  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee,
  Pointer
> {
  using tuple::tuple;
  t109794c55a35d10d7d6e6edf6773e0f3(std::tuple<::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t109794c55a35d10d7d6e6edf6773e0f3 const &a, t109794c55a35d10d7d6e6edf6773e0f3 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t109794c55a35d10d7d6e6edf6773e0f3 const &a, t109794c55a35d10d7d6e6edf6773e0f3 const &b) {
  return !operator==(a, b);
}
struct tb9364de84f89845fbdcb5e88d743800f : public std::tuple<
  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6,
  Pointer
> {
  using tuple::tuple;
  tb9364de84f89845fbdcb5e88d743800f(std::tuple<::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tb9364de84f89845fbdcb5e88d743800f const &a, tb9364de84f89845fbdcb5e88d743800f const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tb9364de84f89845fbdcb5e88d743800f const &a, tb9364de84f89845fbdcb5e88d743800f const &b) {
  return !operator==(a, b);
}
struct td2cd337bb3c8bc04d5603393d084985b : public std::tuple<
  uint64_t,
  Pointer
> {
  using tuple::tuple;
  td2cd337bb3c8bc04d5603393d084985b(std::tuple<uint64_t, Pointer> p)
    : std::tuple<uint64_t, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(td2cd337bb3c8bc04d5603393d084985b const &a, td2cd337bb3c8bc04d5603393d084985b const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(td2cd337bb3c8bc04d5603393d084985b const &a, td2cd337bb3c8bc04d5603393d084985b const &b) {
  return !operator==(a, b);
}
struct t9a758baeff17224a77e1a522010b4168 : public std::tuple<
  double,
  Pointer
> {
  using tuple::tuple;
  t9a758baeff17224a77e1a522010b4168(std::tuple<double, Pointer> p)
    : std::tuple<double, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t9a758baeff17224a77e1a522010b4168 const &a, t9a758baeff17224a77e1a522010b4168 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t9a758baeff17224a77e1a522010b4168 const &a, t9a758baeff17224a77e1a522010b4168 const &b) {
  return !operator==(a, b);
}
struct t3c346fb25ff8634b127b0bf1e9cdce1b : public std::tuple<
  ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8,
  Pointer
> {
  using tuple::tuple;
  t3c346fb25ff8634b127b0bf1e9cdce1b(std::tuple<::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t3c346fb25ff8634b127b0bf1e9cdce1b const &a, t3c346fb25ff8634b127b0bf1e9cdce1b const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t3c346fb25ff8634b127b0bf1e9cdce1b const &a, t3c346fb25ff8634b127b0bf1e9cdce1b const &b) {
  return !operator==(a, b);
}
struct t3ddb4633a3ccf43793c03838edabfa36 : public std::tuple<
  ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782,
  Pointer
> {
  using tuple::tuple;
  t3ddb4633a3ccf43793c03838edabfa36(std::tuple<::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t3ddb4633a3ccf43793c03838edabfa36 const &a, t3ddb4633a3ccf43793c03838edabfa36 const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t3ddb4633a3ccf43793c03838edabfa36 const &a, t3ddb4633a3ccf43793c03838edabfa36 const &b) {
  return !operator==(a, b);
}
struct t4ccad2556e823529795cd21badd54b9e : public std::tuple<
  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b,
  Pointer
> {
  using tuple::tuple;
  t4ccad2556e823529795cd21badd54b9e(std::tuple<::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t4ccad2556e823529795cd21badd54b9e const &a, t4ccad2556e823529795cd21badd54b9e const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t4ccad2556e823529795cd21badd54b9e const &a, t4ccad2556e823529795cd21badd54b9e const &b) {
  return !operator==(a, b);
}
struct te93c07274cadb39058f1f0ef45b6ad7c : public std::tuple<
  ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea,
  Pointer
> {
  using tuple::tuple;
  te93c07274cadb39058f1f0ef45b6ad7c(std::tuple<::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea, Pointer> p)
    : std::tuple<::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(te93c07274cadb39058f1f0ef45b6ad7c const &a, te93c07274cadb39058f1f0ef45b6ad7c const &b) {
  return std::get<0>(a) == std::get<0>(b) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(te93c07274cadb39058f1f0ef45b6ad7c const &a, te93c07274cadb39058f1f0ef45b6ad7c const &b) {
  return !operator==(a, b);
}
struct tcf2bbf57edbf797e26f0528c2c828563 : public std::tuple<
  dessser::gen::raql_top_output::t_ext,
  Pointer
> {
  using tuple::tuple;
  tcf2bbf57edbf797e26f0528c2c828563(std::tuple<dessser::gen::raql_top_output::t_ext, Pointer> p)
    : std::tuple<dessser::gen::raql_top_output::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tcf2bbf57edbf797e26f0528c2c828563 const &a, tcf2bbf57edbf797e26f0528c2c828563 const &b) {
  return ::dessser::gen::raql_top_output::Deref(std::get<0>(a)) == ::dessser::gen::raql_top_output::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tcf2bbf57edbf797e26f0528c2c828563 const &a, tcf2bbf57edbf797e26f0528c2c828563 const &b) {
  return !operator==(a, b);
}
struct t096d6a0956a2df6dec7d0945ab177a4b : public std::tuple<
  std::optional<dessser::gen::units::t_ext>,
  Pointer
> {
  using tuple::tuple;
  t096d6a0956a2df6dec7d0945ab177a4b(std::tuple<std::optional<dessser::gen::units::t_ext>, Pointer> p)
    : std::tuple<std::optional<dessser::gen::units::t_ext>, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(t096d6a0956a2df6dec7d0945ab177a4b const &a, t096d6a0956a2df6dec7d0945ab177a4b const &b) {
  return ((std::get<0>(a) && std::get<0>(b) && ::dessser::gen::units::Deref(std::get<0>(a).value()) == ::dessser::gen::units::Deref(std::get<0>(b).value())) || (!std::get<0>(a) && !std::get<0>(b))) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(t096d6a0956a2df6dec7d0945ab177a4b const &a, t096d6a0956a2df6dec7d0945ab177a4b const &b) {
  return !operator==(a, b);
}
struct tdcd8238b20249643ff5b5f9a7648e226 : public std::tuple<
  dessser::gen::units::t_ext,
  Pointer
> {
  using tuple::tuple;
  tdcd8238b20249643ff5b5f9a7648e226(std::tuple<dessser::gen::units::t_ext, Pointer> p)
    : std::tuple<dessser::gen::units::t_ext, Pointer>(std::get<0>(p), std::get<1>(p)) {}
};
inline bool operator==(tdcd8238b20249643ff5b5f9a7648e226 const &a, tdcd8238b20249643ff5b5f9a7648e226 const &b) {
  return ::dessser::gen::units::Deref(std::get<0>(a)) == ::dessser::gen::units::Deref(std::get<0>(b)) && std::get<1>(a) == std::get<1>(b);
}
inline bool operator!=(tdcd8238b20249643ff5b5f9a7648e226 const &a, tdcd8238b20249643ff5b5f9a7648e226 const &b) {
  return !operator==(a, b);
}
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
struct t;
inline std::ostream &operator<<(std::ostream &, struct t const &);
inline std::ostream &operator<<(std::ostream &, std::shared_ptr<struct t> const);
inline bool operator==(struct t const &, struct t const &);
inline bool operator!=(struct t const &, struct t const &);
/* ----------- */
/* Definitions */
/* ----------- */
/* 
    (fun ("[NoState Void | ImmediateState Void | LocalState Void | GlobalState Void]" "Ptr")
      (let "ssum_dst_1179" (write-u16 little-endian (param 1) (label-of (param 0)))
        (if (eq (u16 0) (label-of (param 0))) (identifier "ssum_dst_1179")
          (if (eq (u16 1) (label-of (param 0))) (identifier "ssum_dst_1179") (if (eq (u16 2) (label-of (param 0))) (identifier "ssum_dst_1179") (seq (assert (eq (label-of (param 0)) (u16 3))) (identifier "ssum_dst_1179")))))))
 */
static std::function<Pointer(::dessser::gen::raql_expr::lifespan const &,Pointer &)> lifespan_to_row_binary_init()
{
  std::function<Pointer(::dessser::gen::raql_expr::lifespan const &,Pointer &)> fun0 { [&](::dessser::gen::raql_expr::lifespan p_0, Pointer p_1) {
    uint16_t id_1 { uint16_t(p_0) };
    Pointer id_2 { p_1.writeU16Le(id_1) };
    Pointer let_res_3;
    {
      Pointer ssum_dst_1179 { id_2 };
      uint16_t id_4 { 0 };
      uint16_t id_5 { uint16_t(p_0) };
      bool id_6 { bool(id_4 == id_5) };
      Pointer choose_res_7;
      if (id_6) {
        choose_res_7 = ssum_dst_1179;
      } else {
        uint16_t id_8 { 1 };
        uint16_t id_9 { uint16_t(p_0) };
        bool id_10 { bool(id_8 == id_9) };
        Pointer choose_res_11;
        if (id_10) {
          choose_res_11 = ssum_dst_1179;
        } else {
          uint16_t id_12 { 2 };
          uint16_t id_13 { uint16_t(p_0) };
          bool id_14 { bool(id_12 == id_13) };
          Pointer choose_res_15;
          if (id_14) {
            choose_res_15 = ssum_dst_1179;
          } else {
            uint16_t id_16 { uint16_t(p_0) };
            uint16_t id_17 { 3 };
            bool id_18 { bool(id_16 == id_17) };
            Void id_19 { ((void)(assert(id_18)), ::dessser::Void()) };
            (void)id_19;
            choose_res_15 = ssum_dst_1179;
          }
          choose_res_11 = choose_res_15;
        }
        choose_res_7 = choose_res_11;
      }
      let_res_3 = choose_res_7;
    }
    return let_res_3;
  }
   };
  return fun0;
}
std::function<Pointer(::dessser::gen::raql_expr::lifespan const &,Pointer &)> lifespan_to_row_binary(lifespan_to_row_binary_init());

/* 
    (fun ("{text: [Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]; uniq_num: U32; typ: $raql_type; units: $units?}" "Ptr")
      (let "srec_dst_1301"
        (let "srec_dst_1300"
          (let "srec_dst_1299"
            (let "label1_1180" (label-of (get-field "text" (param 0)))
              (let "ssum_dst_1181" (write-u16 little-endian (param 1) (identifier "label1_1180"))
                (if (eq (u16 0) (identifier "label1_1180"))
                  (let "dst_ref_1296"
                    (make-vec
                      (let "leb128_sz_1294" (make-vec (cardinality (get-alt "Tuple" (get-field "text" (param 0)))))
                        (let "leb128_ptr_1295" (make-vec (identifier "ssum_dst_1181"))
                          (seq
                            (while
                              (seq
                                (set-vec (u8 0) (identifier "leb128_ptr_1295")
                                  (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1295"))
                                    (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1294"))) 
                                      (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1294"))) 
                                      (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1294"))) (u8 128)))))
                                (set-vec (u8 0) (identifier "leb128_sz_1294") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1294")) (u8 7))) 
                                (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1294")) (u32 0))) 
                              (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1295"))))))
                    (let "n_ref_1297" (make-vec (i32 0))
                      (seq
                        (for-each "x_1298" (get-alt "Tuple" (get-field "text" (param 0)))
                          (seq (set-vec (u8 0) (identifier "dst_ref_1296") (apply (myself "Ptr") (identifier "x_1298") (unsafe-nth (u8 0) (identifier "dst_ref_1296"))))
                            (set-vec (u8 0) (identifier "n_ref_1297") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1297")))))) 
                        (unsafe-nth (u8 0) (identifier "dst_ref_1296")))))
                  (if (eq (u16 1) (identifier "label1_1180"))
                    (let "dst_ref_1289"
                      (make-vec
                        (let "leb128_sz_1287" (make-vec (cardinality (get-alt "Record" (get-field "text" (param 0)))))
                          (let "leb128_ptr_1288" (make-vec (identifier "ssum_dst_1181"))
                            (seq
                              (while
                                (seq
                                  (set-vec (u8 0) (identifier "leb128_ptr_1288")
                                    (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1288"))
                                      (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1287"))) 
                                        (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1287"))) 
                                        (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1287"))) (u8 128)))))
                                  (set-vec (u8 0) (identifier "leb128_sz_1287") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1287")) (u8 7))) 
                                  (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1287")) (u32 0))) 
                                (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1288"))))))
                      (let "n_ref_1290" (make-vec (i32 0))
                        (seq
                          (for-each "x_1291" (get-alt "Record" (get-field "text" (param 0)))
                            (seq
                              (set-vec (u8 0) (identifier "dst_ref_1289")
                                (apply (myself "Ptr") (get-item 1 (identifier "x_1291"))
                                  (let "stup_dst_1292" (unsafe-nth (u8 0) (identifier "dst_ref_1289")) (apply (ext-identifier field_name to-row-binary) (get-item 0 (identifier "x_1291")) (identifier "stup_dst_1292")))))
                              (set-vec (u8 0) (identifier "n_ref_1290") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1290")))))) 
                          (unsafe-nth (u8 0) (identifier "dst_ref_1289")))))
                    (if (eq (u16 2) (identifier "label1_1180"))
                      (let "dst_ref_1284"
                        (make-vec
                          (let "leb128_sz_1282" (make-vec (cardinality (get-alt "Vector" (get-field "text" (param 0)))))
                            (let "leb128_ptr_1283" (make-vec (identifier "ssum_dst_1181"))
                              (seq
                                (while
                                  (seq
                                    (set-vec (u8 0) (identifier "leb128_ptr_1283")
                                      (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1283"))
                                        (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1282"))) 
                                          (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1282"))) 
                                          (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1282"))) (u8 128)))))
                                    (set-vec (u8 0) (identifier "leb128_sz_1282") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1282")) (u8 7))) 
                                    (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1282")) (u32 0))) 
                                  (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1283"))))))
                        (let "n_ref_1285" (make-vec (i32 0))
                          (seq
                            (for-each "x_1286" (get-alt "Vector" (get-field "text" (param 0)))
                              (seq (set-vec (u8 0) (identifier "dst_ref_1284") (apply (myself "Ptr") (identifier "x_1286") (unsafe-nth (u8 0) (identifier "dst_ref_1284"))))
                                (set-vec (u8 0) (identifier "n_ref_1285") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1285")))))) 
                            (unsafe-nth (u8 0) (identifier "dst_ref_1284")))))
                      (if (eq (u16 3) (identifier "label1_1180"))
                        (let "stup_dst_1281"
                          (let "dst_ref_1276"
                            (make-vec
                              (let "leb128_sz_1274" (make-vec (cardinality (get-item 0 (get-alt "Case" (get-field "text" (param 0))))))
                                (let "leb128_ptr_1275" (make-vec (identifier "ssum_dst_1181"))
                                  (seq
                                    (while
                                      (seq
                                        (set-vec (u8 0) (identifier "leb128_ptr_1275")
                                          (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1275"))
                                            (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1274"))) 
                                              (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1274"))) 
                                              (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1274"))) (u8 128)))))
                                        (set-vec (u8 0) (identifier "leb128_sz_1274") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1274")) (u8 7))) 
                                        (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1274")) (u32 0))) 
                                      (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1275"))))))
                            (let "n_ref_1277" (make-vec (i32 0))
                              (seq
                                (for-each "x_1278" (get-item 0 (get-alt "Case" (get-field "text" (param 0))))
                                  (seq
                                    (set-vec (u8 0) (identifier "dst_ref_1276")
                                      (apply (myself "Ptr") (get-field "case_cons" (identifier "x_1278")) (apply (myself "Ptr") (get-field "case_cond" (identifier "x_1278")) (unsafe-nth (u8 0) (identifier "dst_ref_1276")))))
                                    (set-vec (u8 0) (identifier "n_ref_1277") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1277")))))) 
                                (unsafe-nth (u8 0) (identifier "dst_ref_1276")))))
                          (if (is-null (get-item 1 (get-alt "Case" (get-field "text" (param 0))))) 
                            (write-u8 (identifier "stup_dst_1281") (u8 1)) 
                            (apply (myself "Ptr") (force (get-item 1 (get-alt "Case" (get-field "text" (param 0))))) (write-u8 (identifier "stup_dst_1281") (u8 0)))))
                        (if (eq (u16 4) (identifier "label1_1180"))
                          (let "label1_1240" (label-of (get-alt "Stateless" (get-field "text" (param 0))))
                            (let "ssum_dst_1241" (write-u16 little-endian (identifier "ssum_dst_1181") (identifier "label1_1240"))
                              (if (eq (u16 0) (identifier "label1_1240"))
                                (let "label1_1267" (label-of (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))
                                  (let "ssum_dst_1268" (write-u16 little-endian (identifier "ssum_dst_1241") (identifier "label1_1267"))
                                    (if (eq (u16 0) (identifier "label1_1267"))
                                      (apply (ext-identifier raql_value to-row-binary) (get-alt "Const" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))) (identifier "ssum_dst_1268"))
                                      (if (eq (u16 1) (identifier "label1_1267"))
                                        (apply (ext-identifier raql_variable to-row-binary) (get-alt "Variable" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))) (identifier "ssum_dst_1268"))
                                        (if (eq (u16 2) (identifier "label1_1267"))
                                          (apply (ext-identifier raql_binding_key to-row-binary) (get-alt "Binding" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))) (identifier "ssum_dst_1268"))
                                          (if (eq (u16 3) (identifier "label1_1267")) 
                                            (identifier "ssum_dst_1268")
                                            (if (eq (u16 4) (identifier "label1_1267")) 
                                              (identifier "ssum_dst_1268")
                                              (if (eq (u16 5) (identifier "label1_1267")) 
                                                (identifier "ssum_dst_1268")
                                                (if (eq (u16 6) (identifier "label1_1267")) 
                                                  (identifier "ssum_dst_1268")
                                                  (if (eq (u16 7) (identifier "label1_1267"))
                                                    (let "dst_ref_1271"
                                                      (make-vec
                                                        (let "leb128_sz_1269" 
                                                          (make-vec (cardinality (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                                          (let "leb128_ptr_1270" 
                                                            (make-vec (identifier "ssum_dst_1268"))
                                                            (seq
                                                              (while
                                                                (seq
                                                                  (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb128_ptr_1270")
                                                                    (write-u8 
                                                                    (unsafe-nth (u8 0) (identifier "leb128_ptr_1270"))
                                                                    (if 
                                                                    (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1269"))) 
                                                                    (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1269"))) 
                                                                    (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1269"))) (u8 128)))))
                                                                  (set-vec (u8 0) (identifier "leb128_sz_1269") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1269")) (u8 7)))
                                                                  (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1269")) (u32 0))) 
                                                                (nop)) 
                                                              (unsafe-nth (u8 0) (identifier "leb128_ptr_1270"))))))
                                                      (let "n_ref_1272" 
                                                        (make-vec (i32 0))
                                                        (seq
                                                          (for-each "x_1273" 
                                                            (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))
                                                            (seq
                                                              (set-vec 
                                                                (u8 0) 
                                                                (identifier "dst_ref_1271") 
                                                                (apply (ext-identifier raql_path_comp to-row-binary) (identifier "x_1273") (unsafe-nth (u8 0) (identifier "dst_ref_1271"))))
                                                              (set-vec (u8 0) (identifier "n_ref_1272") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1272")))))) 
                                                          (unsafe-nth (u8 0) (identifier "dst_ref_1271"))))) 
                                                    (seq (assert (eq (identifier "label1_1267") (u16 8))) (identifier "ssum_dst_1268"))))))))))))
                                (if (eq (u16 1) (identifier "label1_1240"))
                                  (apply (myself "Ptr") (get-item 1 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))
                                    (let "label1_1259" (label-of (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))
                                      (let "ssum_dst_1260" (write-u16 little-endian (identifier "ssum_dst_1241") (identifier "label1_1259"))
                                        (if (eq (u16 0) (identifier "label1_1259")) 
                                          (identifier "ssum_dst_1260")
                                          (if (eq (u16 1) (identifier "label1_1259"))
                                            (apply (ext-identifier raql_type to-row-binary) (get-alt "Cast" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))) (identifier "ssum_dst_1260"))
                                            (if (eq (u16 2) (identifier "label1_1259")) 
                                              (identifier "ssum_dst_1260")
                                              (if (eq (u16 3) (identifier "label1_1259"))
                                                (let "stup_dst_1263"
                                                  (apply (ext-identifier raql_type to-row-binary) 
                                                    (get-item 0 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))) 
                                                    (identifier "ssum_dst_1260"))
                                                  (let "ssum_dst_1265"
                                                    (write-u16 little-endian (identifier "stup_dst_1263") (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                                    (if (eq (u16 0) (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))) 
                                                      (identifier "ssum_dst_1265")
                                                      (seq (assert (eq (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))) (u16 1)))
                                                        (identifier "ssum_dst_1265")))))
                                                (if (eq (u16 4) (identifier "label1_1259")) 
                                                  (identifier "ssum_dst_1260")
                                                  (if (eq (u16 5) (identifier "label1_1259")) 
                                                    (identifier "ssum_dst_1260")
                                                    (if (eq (u16 6) (identifier "label1_1259")) 
                                                      (identifier "ssum_dst_1260")
                                                      (if (eq (u16 7) (identifier "label1_1259")) 
                                                        (identifier "ssum_dst_1260")
                                                        (if (eq (u16 8) (identifier "label1_1259")) 
                                                          (identifier "ssum_dst_1260")
                                                          (if (eq (u16 9) (identifier "label1_1259")) 
                                                            (identifier "ssum_dst_1260")
                                                            (if (eq (u16 10) (identifier "label1_1259")) 
                                                              (identifier "ssum_dst_1260")
                                                              (if (eq (u16 11) (identifier "label1_1259")) 
                                                                (identifier "ssum_dst_1260")
                                                                (if (eq (u16 12) (identifier "label1_1259")) 
                                                                  (identifier "ssum_dst_1260")
                                                                  (if 
                                                                    (eq (u16 13) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 14) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 15) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 24) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 25) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 26) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 27) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 28) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 29) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 30) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 31) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 32) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 33) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 34) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 35) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 36) (identifier "label1_1259"))
                                                                    (write-bytes
                                                                    (let "leb128_sz_1261" 
                                                                    (make-vec (string-length (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                                                    (let "leb128_ptr_1262" 
                                                                    (make-vec (identifier "ssum_dst_1260"))
                                                                    (seq
                                                                    (while
                                                                    (seq
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb128_ptr_1262")
                                                                    (write-u8 
                                                                    (unsafe-nth (u8 0) (identifier "leb128_ptr_1262"))
                                                                    (if 
                                                                    (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1261"))) 
                                                                    (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1261"))) 
                                                                    (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1261"))) (u8 128)))))
                                                                    (set-vec (u8 0) (identifier "leb128_sz_1261") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1261")) (u8 7)))
                                                                    (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1261")) (u32 0))) 
                                                                    (nop)) 
                                                                    (unsafe-nth (u8 0) (identifier "leb128_ptr_1262")))))
                                                                    (bytes-of-string (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                                                    (if 
                                                                    (eq (u16 37) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if 
                                                                    (eq (u16 38) (identifier "label1_1259")) 
                                                                    (identifier "ssum_dst_1260")
                                                                    (if (eq (u16 39) (identifier "label1_1259")) (identifier "ssum_dst_1260") (seq (assert (eq (identifier "label1_1259") (u16 40))) (identifier "ssum_dst_1260")))))))))))))))))))))))))))))))))))))))))))))
                                  (if (eq (u16 2) (identifier "label1_1240"))
                                    (let "stup_dst_1253"
                                      (let "label1_1251" (label-of (get-item 0 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0))))))
                                        (let "ssum_dst_1252" (write-u16 little-endian (identifier "ssum_dst_1241") (identifier "label1_1251"))
                                          (if (eq (u16 0) (identifier "label1_1251")) 
                                            (identifier "ssum_dst_1252")
                                            (if (eq (u16 1) (identifier "label1_1251")) 
                                              (identifier "ssum_dst_1252")
                                              (if (eq (u16 2) (identifier "label1_1251")) (identifier "ssum_dst_1252") (seq (assert (eq (identifier "label1_1251") (u16 3))) (identifier "ssum_dst_1252")))))))
                                      (let "dst_ref_1256"
                                        (make-vec
                                          (let "leb128_sz_1254" (make-vec (cardinality (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                            (let "leb128_ptr_1255" (make-vec (identifier "stup_dst_1253"))
                                              (seq
                                                (while
                                                  (seq
                                                    (set-vec (u8 0) (identifier "leb128_ptr_1255")
                                                      (write-u8 (unsafe-nth (u8 0) (identifier "leb128_ptr_1255"))
                                                        (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1254"))) 
                                                          (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1254"))) 
                                                          (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1254"))) (u8 128)))))
                                                    (set-vec (u8 0) (identifier "leb128_sz_1254") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1254")) (u8 7)))
                                                    (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1254")) (u32 0))) 
                                                  (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1255"))))))
                                        (let "n_ref_1257" (make-vec (i32 0))
                                          (seq
                                            (for-each "x_1258" (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))
                                              (seq (set-vec (u8 0) (identifier "dst_ref_1256") (apply (myself "Ptr") (identifier "x_1258") (unsafe-nth (u8 0) (identifier "dst_ref_1256"))))
                                                (set-vec (u8 0) (identifier "n_ref_1257") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1257")))))) 
                                            (unsafe-nth (u8 0) (identifier "dst_ref_1256"))))))
                                    (if (eq (u16 3) (identifier "label1_1240"))
                                      (apply (myself "Ptr") (get-item 2 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))
                                        (apply (myself "Ptr") (get-item 1 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))
                                          (let "label1_1247" (label-of (get-item 0 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0))))))
                                            (let "ssum_dst_1248" (write-u16 little-endian (identifier "ssum_dst_1241") (identifier "label1_1247"))
                                              (if (eq (u16 0) (identifier "label1_1247")) 
                                                (identifier "ssum_dst_1248")
                                                (if (eq (u16 1) (identifier "label1_1247")) 
                                                  (identifier "ssum_dst_1248")
                                                  (if (eq (u16 2) (identifier "label1_1247")) 
                                                    (identifier "ssum_dst_1248")
                                                    (if (eq (u16 3) (identifier "label1_1247")) 
                                                      (identifier "ssum_dst_1248")
                                                      (if (eq (u16 4) (identifier "label1_1247")) 
                                                        (identifier "ssum_dst_1248")
                                                        (if (eq (u16 5) (identifier "label1_1247")) 
                                                          (identifier "ssum_dst_1248")
                                                          (if (eq (u16 6) (identifier "label1_1247")) 
                                                            (identifier "ssum_dst_1248")
                                                            (if (eq (u16 7) (identifier "label1_1247")) 
                                                              (identifier "ssum_dst_1248")
                                                              (if (eq (u16 8) (identifier "label1_1247")) 
                                                                (identifier "ssum_dst_1248")
                                                                (if (eq (u16 9) (identifier "label1_1247")) 
                                                                  (identifier "ssum_dst_1248")
                                                                  (if 
                                                                    (eq (u16 10) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 11) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 12) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 13) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 14) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 15) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label1_1247")) 
                                                                    (identifier "ssum_dst_1248")
                                                                    (if 
                                                                    (eq (u16 24) (identifier "label1_1247"))
                                                                    (write-u8 (identifier "ssum_dst_1248") (u8-of-bool (get-alt "Index" (get-item 0 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                                                    (seq (assert (eq (identifier "label1_1247") (u16 25))) (identifier "ssum_dst_1248")))))))))))))))))))))))))))))))
                                      (seq (assert (eq (identifier "label1_1240") (u16 4)))
                                        (apply (myself "Ptr") (get-item 3 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))
                                          (apply (myself "Ptr") (get-item 2 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))
                                            (apply (myself "Ptr") (get-item 1 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))
                                              (let "ssum_dst_1243" (write-u16 little-endian (identifier "ssum_dst_1241") (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                                (if (eq (u16 0) (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0))))))) 
                                                  (identifier "ssum_dst_1243") 
                                                  (seq (assert (eq (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))) (u16 1))) (identifier "ssum_dst_1243"))))))))))))))
                          (if (eq (u16 5) (identifier "label1_1180"))
                            (let "srec_dst_1186"
                              (let "srec_dst_1185"
                                (if (is-null (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))) 
                                  (write-u8 (identifier "ssum_dst_1181") (u8 1))
                                  (apply (identifier "lifespan-to-row-binary") (force (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))) (write-u8 (identifier "ssum_dst_1181") (u8 0))))
                                (write-u8 (identifier "srec_dst_1185") (u8-of-bool (get-field "skip_nulls" (get-alt "Stateful" (get-field "text" (param 0)))))))
                              (let "label1_1187" (label-of (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))
                                (let "ssum_dst_1188" (write-u16 little-endian (identifier "srec_dst_1186") (identifier "label1_1187"))
                                  (if (eq (u16 0) (identifier "label1_1187"))
                                    (apply (myself "Ptr") (get-item 1 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                      (let "label1_1235" (label-of (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                        (let "ssum_dst_1236" (write-u16 little-endian (identifier "ssum_dst_1188") (identifier "label1_1235"))
                                          (if (eq (u16 0) (identifier "label1_1235")) 
                                            (identifier "ssum_dst_1236")
                                            (if (eq (u16 1) (identifier "label1_1235")) 
                                              (identifier "ssum_dst_1236")
                                              (if (eq (u16 2) (identifier "label1_1235")) 
                                                (identifier "ssum_dst_1236")
                                                (if (eq (u16 3) (identifier "label1_1235")) 
                                                  (identifier "ssum_dst_1236")
                                                  (if (eq (u16 4) (identifier "label1_1235")) 
                                                    (identifier "ssum_dst_1236")
                                                    (if (eq (u16 5) (identifier "label1_1235")) 
                                                      (identifier "ssum_dst_1236")
                                                      (if (eq (u16 6) (identifier "label1_1235")) 
                                                        (identifier "ssum_dst_1236")
                                                        (if (eq (u16 7) (identifier "label1_1235")) 
                                                          (identifier "ssum_dst_1236")
                                                          (if (eq (u16 8) (identifier "label1_1235")) 
                                                            (identifier "ssum_dst_1236")
                                                            (if (eq (u16 9) (identifier "label1_1235")) 
                                                              (identifier "ssum_dst_1236")
                                                              (if (eq (u16 10) (identifier "label1_1235")) 
                                                                (identifier "ssum_dst_1236")
                                                                (if (eq (u16 11) (identifier "label1_1235"))
                                                                  (let "stup_dst_1238"
                                                                    (let "stup_dst_1237"
                                                                    (write-u64 little-endian 
                                                                    (identifier "ssum_dst_1236")
                                                                    (u64-of-float (get-item 0 (get-alt "AggrHistogram" (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                                    (write-u64 little-endian 
                                                                    (identifier "stup_dst_1237")
                                                                    (u64-of-float (get-item 1 (get-alt "AggrHistogram" (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))))))
                                                                    (write-u32 little-endian 
                                                                    (identifier "stup_dst_1238")
                                                                    (get-item 2 (get-alt "AggrHistogram" (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                                  (if 
                                                                    (eq (u16 12) (identifier "label1_1235")) 
                                                                    (identifier "ssum_dst_1236")
                                                                    (if (eq (u16 13) (identifier "label1_1235")) (identifier "ssum_dst_1236") (seq (assert (eq (identifier "label1_1235") (u16 14))) (identifier "ssum_dst_1236")))))))))))))))))))
                                    (if (eq (u16 1) (identifier "label1_1187"))
                                      (apply (myself "Ptr") (get-item 2 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                        (apply (myself "Ptr") (get-item 1 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                          (let "label1_1231" (label-of (get-item 0 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                            (let "ssum_dst_1232" (write-u16 little-endian (identifier "ssum_dst_1188") (identifier "label1_1231"))
                                              (if (eq (u16 0) (identifier "label1_1231")) 
                                                (identifier "ssum_dst_1232")
                                                (if (eq (u16 1) (identifier "label1_1231")) 
                                                  (identifier "ssum_dst_1232")
                                                  (if (eq (u16 2) (identifier "label1_1231")) (identifier "ssum_dst_1232") (seq (assert (eq (identifier "label1_1231") (u16 3))) (identifier "ssum_dst_1232")))))))))
                                      (if (eq (u16 2) (identifier "label1_1187"))
                                        (apply (myself "Ptr") (get-item 3 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                          (apply (myself "Ptr") (get-item 2 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                            (apply (myself "Ptr") (get-item 1 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                              (let "label1_1226" (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                                (let "ssum_dst_1227" 
                                                  (write-u16 little-endian (identifier "ssum_dst_1188") (identifier "label1_1226"))
                                                  (if (eq (u16 0) (identifier "label1_1226")) 
                                                    (identifier "ssum_dst_1227")
                                                    (if (eq (u16 1) (identifier "label1_1226")) 
                                                      (identifier "ssum_dst_1227")
                                                      (seq (assert (eq (identifier "label1_1226") (u16 2)))
                                                        (write-u8 (identifier "ssum_dst_1227")
                                                          (u8-of-bool (get-alt "OnceEvery" (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))))))))))))
                                        (if (eq (u16 3) (identifier "label1_1187"))
                                          (apply (myself "Ptr") (get-item 4 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                            (apply (myself "Ptr") (get-item 3 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                              (apply (myself "Ptr") (get-item 2 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                (apply (myself "Ptr") 
                                                  (get-item 1 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (let "ssum_dst_1221"
                                                    (write-u16 little-endian (identifier "ssum_dst_1188") (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                      (identifier "ssum_dst_1221")
                                                      (seq (assert (eq (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                        (write-u8 (identifier "ssum_dst_1221")
                                                          (u8-of-bool (get-alt "Remember" (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))))))))
                                          (if (eq (u16 4) (identifier "label1_1187"))
                                            (let "stup_dst_1214"
                                              (apply (myself "Ptr") (get-item 3 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                (apply (myself "Ptr") 
                                                  (get-item 2 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (apply (myself "Ptr") 
                                                    (get-item 1 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                    (let "ssum_dst_1209"
                                                      (write-u16 little-endian (identifier "ssum_dst_1188") (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                        (identifier "ssum_dst_1209")
                                                        (seq (assert (eq (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                          (let "srec_dst_1210"
                                                            (write-u8 
                                                              (identifier "ssum_dst_1209")
                                                              (u8-of-bool (get-field "inv" (get-alt "Largest" (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                            (write-u8 
                                                              (identifier "srec_dst_1210")
                                                              (u8-of-bool (get-field "up_to" (get-alt "Largest" (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))))))))))))
                                              (let "dst_ref_1217"
                                                (make-vec
                                                  (let "leb128_sz_1215" 
                                                    (make-vec (cardinality (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (let "leb128_ptr_1216" 
                                                      (make-vec (identifier "stup_dst_1214"))
                                                      (seq
                                                        (while
                                                          (seq
                                                            (set-vec 
                                                              (u8 0) 
                                                              (identifier "leb128_ptr_1216")
                                                              (write-u8 
                                                                (unsafe-nth (u8 0) (identifier "leb128_ptr_1216"))
                                                                (if (gt (u32 128) (unsafe-nth (u8 0) (identifier "leb128_sz_1215"))) 
                                                                  (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1215"))) 
                                                                  (bit-or (to-u8 (unsafe-nth (u8 0) (identifier "leb128_sz_1215"))) (u8 128)))))
                                                            (set-vec (u8 0) (identifier "leb128_sz_1215") (right-shift (unsafe-nth (u8 0) (identifier "leb128_sz_1215")) (u8 7)))
                                                            (gt (unsafe-nth (u8 0) (identifier "leb128_sz_1215")) (u32 0))) 
                                                          (nop)) (unsafe-nth (u8 0) (identifier "leb128_ptr_1216"))))))
                                                (let "n_ref_1218" (make-vec (i32 0))
                                                  (seq
                                                    (for-each "x_1219" 
                                                      (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                      (seq (set-vec (u8 0) (identifier "dst_ref_1217") (apply (myself "Ptr") (identifier "x_1219") (unsafe-nth (u8 0) (identifier "dst_ref_1217"))))
                                                        (set-vec (u8 0) (identifier "n_ref_1218") (add (i32 1) (unsafe-nth (u8 0) (identifier "n_ref_1218")))))) 
                                                    (unsafe-nth (u8 0) (identifier "dst_ref_1217"))))))
                                            (if (eq (u16 5) (identifier "label1_1187"))
                                              (apply (myself "Ptr") (get-item 6 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                (apply (myself "Ptr") 
                                                  (get-item 5 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (apply (myself "Ptr") 
                                                    (get-item 4 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                    (apply (myself "Ptr") 
                                                      (get-item 3 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                      (apply (myself "Ptr") 
                                                        (get-item 2 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                        (apply (myself "Ptr") 
                                                          (get-item 1 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                          (let "ssum_dst_1201"
                                                            (write-u16 little-endian (identifier "ssum_dst_1188") (label-of (get-item 0 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                            (seq (assert (eq (label-of (get-item 0 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 0)))
                                                              (identifier "ssum_dst_1201")))))))))
                                              (if (eq (u16 6) (identifier "label1_1187"))
                                                (apply (myself "Ptr") 
                                                  (get-field "sigmas" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                  (apply (myself "Ptr") 
                                                    (get-field "duration" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                    (apply (myself "Ptr") 
                                                      (get-field "time" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                      (apply (myself "Ptr") 
                                                        (get-field "by" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                        (apply (myself "Ptr") 
                                                          (get-field "what" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                          (let "srec_dst_1194"
                                                            (apply (myself "Ptr") 
                                                              (get-field "size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                              (apply 
                                                                (ext-identifier raql_top_output to-row-binary) 
                                                                (get-field "output" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))) 
                                                                (identifier "ssum_dst_1188")))
                                                            (if (is-null (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                                              (write-u8 (identifier "srec_dst_1194") (u8 1))
                                                              (apply 
                                                                (myself "Ptr") 
                                                                (force (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                                                (write-u8 (identifier "srec_dst_1194") (u8 0))))))))))
                                                (seq (assert (eq (identifier "label1_1187") (u16 7)))
                                                  (let "srec_dst_1192"
                                                    (write-u8
                                                      (apply (myself "Ptr") 
                                                        (get-field "max_age" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                        (apply (myself "Ptr") 
                                                          (get-field "time" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))
                                                          (apply (myself "Ptr") (get-field "what" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))) (identifier "ssum_dst_1188"))))
                                                      (u8-of-bool (get-field "tumbling" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (if (is-null (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                      (write-u8 (identifier "srec_dst_1192") (u8 1))
                                                      (apply (myself "Ptr") 
                                                        (force (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                        (write-u8 (identifier "srec_dst_1192") (u8 0))))))))))))))))
                            (seq (assert (eq (identifier "label1_1180") (u16 6)))
                              (let "ssum_dst_1183" (write-u16 little-endian (identifier "ssum_dst_1181") (label-of (get-alt "Generator" (get-field "text" (param 0)))))
                                (seq (assert (eq (label-of (get-alt "Generator" (get-field "text" (param 0)))) (u16 0)))
                                  (apply (myself "Ptr") (get-item 1 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0)))))
                                    (apply (myself "Ptr") (get-item 0 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0))))) (identifier "ssum_dst_1183"))))))))))))))
            (write-u32 little-endian (identifier "srec_dst_1299") (get-field "uniq_num" (param 0)))) 
          (apply (ext-identifier raql_type to-row-binary) (get-field "typ" (param 0)) (identifier "srec_dst_1300")))
        (if (is-null (get-field "units" (param 0))) (write-u8 (identifier "srec_dst_1301") (u8 1)) (apply (ext-identifier units to-row-binary) (force (get-field "units" (param 0))) (write-u8 (identifier "srec_dst_1301") (u8 0))))))
 */
static std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> to_row_binary_init()
{
  std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> fun20 { [&](std::shared_ptr<::dessser::gen::raql_expr::t>  p_0, Pointer p_1) {
    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_21 { (*p_0).text };
    uint16_t id_22 { uint16_t(id_21.index()) };
    Pointer let_res_23;
    {
      uint16_t label1_1180 { id_22 };
      Pointer id_24 { p_1.writeU16Le(label1_1180) };
      Pointer let_res_25;
      {
        Pointer ssum_dst_1181 { id_24 };
        uint16_t id_26 { 0 };
        bool id_27 { bool(id_26 == label1_1180) };
        Pointer choose_res_28;
        if (id_27) {
          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_29 { (*p_0).text };
          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_30 { std::get<0 /* Tuple */>(id_29) };
          uint32_t id_31 { id_30.size() };
          Vec<1, uint32_t> id_32 {  id_31  };
          Pointer let_res_33;
          {
            Vec<1, uint32_t> leb128_sz_1294 { id_32 };
            Vec<1, Pointer> id_34 {  ssum_dst_1181  };
            Pointer let_res_35;
            {
              Vec<1, Pointer> leb128_ptr_1295 { id_34 };
              bool while_flag_36 { true };
              do {
                uint8_t id_37 { 0 };
                uint8_t id_38 { 0 };
                Pointer id_39 { leb128_ptr_1295[id_38] };
                uint32_t id_40 { 128U };
                uint8_t id_41 { 0 };
                uint32_t id_42 { leb128_sz_1294[id_41] };
                bool id_43 { bool(id_40 > id_42) };
                uint8_t choose_res_44;
                if (id_43) {
                  uint8_t id_45 { 0 };
                  uint32_t id_46 { leb128_sz_1294[id_45] };
                  uint8_t id_47 { uint8_t(id_46) };
                  choose_res_44 = id_47;
                } else {
                  uint8_t id_48 { 0 };
                  uint32_t id_49 { leb128_sz_1294[id_48] };
                  uint8_t id_50 { uint8_t(id_49) };
                  uint8_t id_51 { 128 };
                  uint8_t id_52 { uint8_t(id_50 | id_51) };
                  choose_res_44 = id_52;
                }
                Pointer id_53 { id_39.writeU8(choose_res_44) };
                Void id_54 { ((void)(leb128_ptr_1295[id_37] = id_53), ::dessser::Void()) };
                (void)id_54;
                uint8_t id_55 { 0 };
                uint8_t id_56 { 0 };
                uint32_t id_57 { leb128_sz_1294[id_56] };
                uint8_t id_58 { 7 };
                uint32_t id_59 { uint32_t(id_57 >> id_58) };
                Void id_60 { ((void)(leb128_sz_1294[id_55] = id_59), ::dessser::Void()) };
                (void)id_60;
                uint8_t id_61 { 0 };
                uint32_t id_62 { leb128_sz_1294[id_61] };
                uint32_t id_63 { 0U };
                bool id_64 { bool(id_62 > id_63) };
                while_flag_36 = id_64;
                if (while_flag_36) {
                  (void)::dessser::Void();
                }
              } while (while_flag_36);
              (void)::dessser::Void();
              uint8_t id_65 { 0 };
              Pointer id_66 { leb128_ptr_1295[id_65] };
              let_res_35 = id_66;
            }
            let_res_33 = let_res_35;
          }
          Vec<1, Pointer> id_67 {  let_res_33  };
          Pointer let_res_68;
          {
            Vec<1, Pointer> dst_ref_1296 { id_67 };
            int32_t id_69 { 0L };
            Vec<1, int32_t> id_70 {  id_69  };
            Pointer let_res_71;
            {
              Vec<1, int32_t> n_ref_1297 { id_70 };
              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_72 { (*p_0).text };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_73 { std::get<0 /* Tuple */>(id_72) };
              for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1298 : id_73) {
                uint8_t id_74 { 0 };
                uint8_t id_75 { 0 };
                Pointer id_76 { dst_ref_1296[id_75] };
                Pointer id_77 { fun20(x_1298, id_76) };
                Void id_78 { ((void)(dst_ref_1296[id_74] = id_77), ::dessser::Void()) };
                (void)id_78;
                uint8_t id_79 { 0 };
                int32_t id_80 { 1L };
                uint8_t id_81 { 0 };
                int32_t id_82 { n_ref_1297[id_81] };
                int32_t id_83 { int32_t(id_80 + id_82) };
                Void id_84 { ((void)(n_ref_1297[id_79] = id_83), ::dessser::Void()) };
                (void)id_84;
                (void)id_84;
              }
              (void)::dessser::Void();
              uint8_t id_85 { 0 };
              Pointer id_86 { dst_ref_1296[id_85] };
              let_res_71 = id_86;
            }
            let_res_68 = let_res_71;
          }
          choose_res_28 = let_res_68;
        } else {
          uint16_t id_87 { 1 };
          bool id_88 { bool(id_87 == label1_1180) };
          Pointer choose_res_89;
          if (id_88) {
            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_90 { (*p_0).text };
            Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_91 { std::get<1 /* Record */>(id_90) };
            uint32_t id_92 { id_91.size() };
            Vec<1, uint32_t> id_93 {  id_92  };
            Pointer let_res_94;
            {
              Vec<1, uint32_t> leb128_sz_1287 { id_93 };
              Vec<1, Pointer> id_95 {  ssum_dst_1181  };
              Pointer let_res_96;
              {
                Vec<1, Pointer> leb128_ptr_1288 { id_95 };
                bool while_flag_97 { true };
                do {
                  uint8_t id_98 { 0 };
                  uint8_t id_99 { 0 };
                  Pointer id_100 { leb128_ptr_1288[id_99] };
                  uint32_t id_101 { 128U };
                  uint8_t id_102 { 0 };
                  uint32_t id_103 { leb128_sz_1287[id_102] };
                  bool id_104 { bool(id_101 > id_103) };
                  uint8_t choose_res_105;
                  if (id_104) {
                    uint8_t id_106 { 0 };
                    uint32_t id_107 { leb128_sz_1287[id_106] };
                    uint8_t id_108 { uint8_t(id_107) };
                    choose_res_105 = id_108;
                  } else {
                    uint8_t id_109 { 0 };
                    uint32_t id_110 { leb128_sz_1287[id_109] };
                    uint8_t id_111 { uint8_t(id_110) };
                    uint8_t id_112 { 128 };
                    uint8_t id_113 { uint8_t(id_111 | id_112) };
                    choose_res_105 = id_113;
                  }
                  Pointer id_114 { id_100.writeU8(choose_res_105) };
                  Void id_115 { ((void)(leb128_ptr_1288[id_98] = id_114), ::dessser::Void()) };
                  (void)id_115;
                  uint8_t id_116 { 0 };
                  uint8_t id_117 { 0 };
                  uint32_t id_118 { leb128_sz_1287[id_117] };
                  uint8_t id_119 { 7 };
                  uint32_t id_120 { uint32_t(id_118 >> id_119) };
                  Void id_121 { ((void)(leb128_sz_1287[id_116] = id_120), ::dessser::Void()) };
                  (void)id_121;
                  uint8_t id_122 { 0 };
                  uint32_t id_123 { leb128_sz_1287[id_122] };
                  uint32_t id_124 { 0U };
                  bool id_125 { bool(id_123 > id_124) };
                  while_flag_97 = id_125;
                  if (while_flag_97) {
                    (void)::dessser::Void();
                  }
                } while (while_flag_97);
                (void)::dessser::Void();
                uint8_t id_126 { 0 };
                Pointer id_127 { leb128_ptr_1288[id_126] };
                let_res_96 = id_127;
              }
              let_res_94 = let_res_96;
            }
            Vec<1, Pointer> id_128 {  let_res_94  };
            Pointer let_res_129;
            {
              Vec<1, Pointer> dst_ref_1289 { id_128 };
              int32_t id_130 { 0L };
              Vec<1, int32_t> id_131 {  id_130  };
              Pointer let_res_132;
              {
                Vec<1, int32_t> n_ref_1290 { id_131 };
                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_133 { (*p_0).text };
                Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_134 { std::get<1 /* Record */>(id_133) };
                for (::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 &x_1291 : id_134) {
                  uint8_t id_135 { 0 };
                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_136 { std::get<1>(x_1291) };
                  uint8_t id_137 { 0 };
                  Pointer id_138 { dst_ref_1289[id_137] };
                  Pointer let_res_139;
                  {
                    Pointer stup_dst_1292 { id_138 };
                    auto fun140 { dessser::gen::field_name::to_row_binary };
                    dessser::gen::field_name::t_ext id_141 { std::get<0>(x_1291) };
                    Pointer id_142 { fun140(id_141, stup_dst_1292) };
                    let_res_139 = id_142;
                  }
                  Pointer id_143 { fun20(id_136, let_res_139) };
                  Void id_144 { ((void)(dst_ref_1289[id_135] = id_143), ::dessser::Void()) };
                  (void)id_144;
                  uint8_t id_145 { 0 };
                  int32_t id_146 { 1L };
                  uint8_t id_147 { 0 };
                  int32_t id_148 { n_ref_1290[id_147] };
                  int32_t id_149 { int32_t(id_146 + id_148) };
                  Void id_150 { ((void)(n_ref_1290[id_145] = id_149), ::dessser::Void()) };
                  (void)id_150;
                  (void)id_150;
                }
                (void)::dessser::Void();
                uint8_t id_151 { 0 };
                Pointer id_152 { dst_ref_1289[id_151] };
                let_res_132 = id_152;
              }
              let_res_129 = let_res_132;
            }
            choose_res_89 = let_res_129;
          } else {
            uint16_t id_153 { 2 };
            bool id_154 { bool(id_153 == label1_1180) };
            Pointer choose_res_155;
            if (id_154) {
              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_156 { (*p_0).text };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_157 { std::get<2 /* Vector */>(id_156) };
              uint32_t id_158 { id_157.size() };
              Vec<1, uint32_t> id_159 {  id_158  };
              Pointer let_res_160;
              {
                Vec<1, uint32_t> leb128_sz_1282 { id_159 };
                Vec<1, Pointer> id_161 {  ssum_dst_1181  };
                Pointer let_res_162;
                {
                  Vec<1, Pointer> leb128_ptr_1283 { id_161 };
                  bool while_flag_163 { true };
                  do {
                    uint8_t id_164 { 0 };
                    uint8_t id_165 { 0 };
                    Pointer id_166 { leb128_ptr_1283[id_165] };
                    uint32_t id_167 { 128U };
                    uint8_t id_168 { 0 };
                    uint32_t id_169 { leb128_sz_1282[id_168] };
                    bool id_170 { bool(id_167 > id_169) };
                    uint8_t choose_res_171;
                    if (id_170) {
                      uint8_t id_172 { 0 };
                      uint32_t id_173 { leb128_sz_1282[id_172] };
                      uint8_t id_174 { uint8_t(id_173) };
                      choose_res_171 = id_174;
                    } else {
                      uint8_t id_175 { 0 };
                      uint32_t id_176 { leb128_sz_1282[id_175] };
                      uint8_t id_177 { uint8_t(id_176) };
                      uint8_t id_178 { 128 };
                      uint8_t id_179 { uint8_t(id_177 | id_178) };
                      choose_res_171 = id_179;
                    }
                    Pointer id_180 { id_166.writeU8(choose_res_171) };
                    Void id_181 { ((void)(leb128_ptr_1283[id_164] = id_180), ::dessser::Void()) };
                    (void)id_181;
                    uint8_t id_182 { 0 };
                    uint8_t id_183 { 0 };
                    uint32_t id_184 { leb128_sz_1282[id_183] };
                    uint8_t id_185 { 7 };
                    uint32_t id_186 { uint32_t(id_184 >> id_185) };
                    Void id_187 { ((void)(leb128_sz_1282[id_182] = id_186), ::dessser::Void()) };
                    (void)id_187;
                    uint8_t id_188 { 0 };
                    uint32_t id_189 { leb128_sz_1282[id_188] };
                    uint32_t id_190 { 0U };
                    bool id_191 { bool(id_189 > id_190) };
                    while_flag_163 = id_191;
                    if (while_flag_163) {
                      (void)::dessser::Void();
                    }
                  } while (while_flag_163);
                  (void)::dessser::Void();
                  uint8_t id_192 { 0 };
                  Pointer id_193 { leb128_ptr_1283[id_192] };
                  let_res_162 = id_193;
                }
                let_res_160 = let_res_162;
              }
              Vec<1, Pointer> id_194 {  let_res_160  };
              Pointer let_res_195;
              {
                Vec<1, Pointer> dst_ref_1284 { id_194 };
                int32_t id_196 { 0L };
                Vec<1, int32_t> id_197 {  id_196  };
                Pointer let_res_198;
                {
                  Vec<1, int32_t> n_ref_1285 { id_197 };
                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_199 { (*p_0).text };
                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_200 { std::get<2 /* Vector */>(id_199) };
                  for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1286 : id_200) {
                    uint8_t id_201 { 0 };
                    uint8_t id_202 { 0 };
                    Pointer id_203 { dst_ref_1284[id_202] };
                    Pointer id_204 { fun20(x_1286, id_203) };
                    Void id_205 { ((void)(dst_ref_1284[id_201] = id_204), ::dessser::Void()) };
                    (void)id_205;
                    uint8_t id_206 { 0 };
                    int32_t id_207 { 1L };
                    uint8_t id_208 { 0 };
                    int32_t id_209 { n_ref_1285[id_208] };
                    int32_t id_210 { int32_t(id_207 + id_209) };
                    Void id_211 { ((void)(n_ref_1285[id_206] = id_210), ::dessser::Void()) };
                    (void)id_211;
                    (void)id_211;
                  }
                  (void)::dessser::Void();
                  uint8_t id_212 { 0 };
                  Pointer id_213 { dst_ref_1284[id_212] };
                  let_res_198 = id_213;
                }
                let_res_195 = let_res_198;
              }
              choose_res_155 = let_res_195;
            } else {
              uint16_t id_214 { 3 };
              bool id_215 { bool(id_214 == label1_1180) };
              Pointer choose_res_216;
              if (id_215) {
                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_217 { (*p_0).text };
                ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_218 { std::get<3 /* Case */>(id_217) };
                Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_219 { std::get<0>(id_218) };
                uint32_t id_220 { id_219.size() };
                Vec<1, uint32_t> id_221 {  id_220  };
                Pointer let_res_222;
                {
                  Vec<1, uint32_t> leb128_sz_1274 { id_221 };
                  Vec<1, Pointer> id_223 {  ssum_dst_1181  };
                  Pointer let_res_224;
                  {
                    Vec<1, Pointer> leb128_ptr_1275 { id_223 };
                    bool while_flag_225 { true };
                    do {
                      uint8_t id_226 { 0 };
                      uint8_t id_227 { 0 };
                      Pointer id_228 { leb128_ptr_1275[id_227] };
                      uint32_t id_229 { 128U };
                      uint8_t id_230 { 0 };
                      uint32_t id_231 { leb128_sz_1274[id_230] };
                      bool id_232 { bool(id_229 > id_231) };
                      uint8_t choose_res_233;
                      if (id_232) {
                        uint8_t id_234 { 0 };
                        uint32_t id_235 { leb128_sz_1274[id_234] };
                        uint8_t id_236 { uint8_t(id_235) };
                        choose_res_233 = id_236;
                      } else {
                        uint8_t id_237 { 0 };
                        uint32_t id_238 { leb128_sz_1274[id_237] };
                        uint8_t id_239 { uint8_t(id_238) };
                        uint8_t id_240 { 128 };
                        uint8_t id_241 { uint8_t(id_239 | id_240) };
                        choose_res_233 = id_241;
                      }
                      Pointer id_242 { id_228.writeU8(choose_res_233) };
                      Void id_243 { ((void)(leb128_ptr_1275[id_226] = id_242), ::dessser::Void()) };
                      (void)id_243;
                      uint8_t id_244 { 0 };
                      uint8_t id_245 { 0 };
                      uint32_t id_246 { leb128_sz_1274[id_245] };
                      uint8_t id_247 { 7 };
                      uint32_t id_248 { uint32_t(id_246 >> id_247) };
                      Void id_249 { ((void)(leb128_sz_1274[id_244] = id_248), ::dessser::Void()) };
                      (void)id_249;
                      uint8_t id_250 { 0 };
                      uint32_t id_251 { leb128_sz_1274[id_250] };
                      uint32_t id_252 { 0U };
                      bool id_253 { bool(id_251 > id_252) };
                      while_flag_225 = id_253;
                      if (while_flag_225) {
                        (void)::dessser::Void();
                      }
                    } while (while_flag_225);
                    (void)::dessser::Void();
                    uint8_t id_254 { 0 };
                    Pointer id_255 { leb128_ptr_1275[id_254] };
                    let_res_224 = id_255;
                  }
                  let_res_222 = let_res_224;
                }
                Vec<1, Pointer> id_256 {  let_res_222  };
                Pointer let_res_257;
                {
                  Vec<1, Pointer> dst_ref_1276 { id_256 };
                  int32_t id_258 { 0L };
                  Vec<1, int32_t> id_259 {  id_258  };
                  Pointer let_res_260;
                  {
                    Vec<1, int32_t> n_ref_1277 { id_259 };
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_261 { (*p_0).text };
                    ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_262 { std::get<3 /* Case */>(id_261) };
                    Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_263 { std::get<0>(id_262) };
                    for (::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa &x_1278 : id_263) {
                      uint8_t id_264 { 0 };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_265 { x_1278.case_cons };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_266 { x_1278.case_cond };
                      uint8_t id_267 { 0 };
                      Pointer id_268 { dst_ref_1276[id_267] };
                      Pointer id_269 { fun20(id_266, id_268) };
                      Pointer id_270 { fun20(id_265, id_269) };
                      Void id_271 { ((void)(dst_ref_1276[id_264] = id_270), ::dessser::Void()) };
                      (void)id_271;
                      uint8_t id_272 { 0 };
                      int32_t id_273 { 1L };
                      uint8_t id_274 { 0 };
                      int32_t id_275 { n_ref_1277[id_274] };
                      int32_t id_276 { int32_t(id_273 + id_275) };
                      Void id_277 { ((void)(n_ref_1277[id_272] = id_276), ::dessser::Void()) };
                      (void)id_277;
                      (void)id_277;
                    }
                    (void)::dessser::Void();
                    uint8_t id_278 { 0 };
                    Pointer id_279 { dst_ref_1276[id_278] };
                    let_res_260 = id_279;
                  }
                  let_res_257 = let_res_260;
                }
                Pointer let_res_280;
                {
                  Pointer stup_dst_1281 { let_res_257 };
                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_281 { (*p_0).text };
                  ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_282 { std::get<3 /* Case */>(id_281) };
                  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_283 { std::get<1>(id_282) };
                  bool id_284 { !(id_283.has_value ()) };
                  Pointer choose_res_285;
                  if (id_284) {
                    uint8_t id_286 { 1 };
                    Pointer id_287 { stup_dst_1281.writeU8(id_286) };
                    choose_res_285 = id_287;
                  } else {
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_288 { (*p_0).text };
                    ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_289 { std::get<3 /* Case */>(id_288) };
                    std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_290 { std::get<1>(id_289) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_291 { id_290.value() };
                    uint8_t id_292 { 0 };
                    Pointer id_293 { stup_dst_1281.writeU8(id_292) };
                    Pointer id_294 { fun20(id_291, id_293) };
                    choose_res_285 = id_294;
                  }
                  let_res_280 = choose_res_285;
                }
                choose_res_216 = let_res_280;
              } else {
                uint16_t id_295 { 4 };
                bool id_296 { bool(id_295 == label1_1180) };
                Pointer choose_res_297;
                if (id_296) {
                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_298 { (*p_0).text };
                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_299 { std::get<4 /* Stateless */>(id_298) };
                  uint16_t id_300 { uint16_t(id_299.index()) };
                  Pointer let_res_301;
                  {
                    uint16_t label1_1240 { id_300 };
                    Pointer id_302 { ssum_dst_1181.writeU16Le(label1_1240) };
                    Pointer let_res_303;
                    {
                      Pointer ssum_dst_1241 { id_302 };
                      uint16_t id_304 { 0 };
                      bool id_305 { bool(id_304 == label1_1240) };
                      Pointer choose_res_306;
                      if (id_305) {
                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_307 { (*p_0).text };
                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_308 { std::get<4 /* Stateless */>(id_307) };
                        ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_309 { std::get<0 /* SL0 */>(id_308) };
                        uint16_t id_310 { uint16_t(id_309.index()) };
                        Pointer let_res_311;
                        {
                          uint16_t label1_1267 { id_310 };
                          Pointer id_312 { ssum_dst_1241.writeU16Le(label1_1267) };
                          Pointer let_res_313;
                          {
                            Pointer ssum_dst_1268 { id_312 };
                            uint16_t id_314 { 0 };
                            bool id_315 { bool(id_314 == label1_1267) };
                            Pointer choose_res_316;
                            if (id_315) {
                              auto fun317 { dessser::gen::raql_value::to_row_binary };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_318 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_319 { std::get<4 /* Stateless */>(id_318) };
                              ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_320 { std::get<0 /* SL0 */>(id_319) };
                              dessser::gen::raql_value::t_ext id_321 { std::get<0 /* Const */>(id_320) };
                              Pointer id_322 { fun317(id_321, ssum_dst_1268) };
                              choose_res_316 = id_322;
                            } else {
                              uint16_t id_323 { 1 };
                              bool id_324 { bool(id_323 == label1_1267) };
                              Pointer choose_res_325;
                              if (id_324) {
                                auto fun326 { dessser::gen::raql_variable::to_row_binary };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_327 { (*p_0).text };
                                ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_328 { std::get<4 /* Stateless */>(id_327) };
                                ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_329 { std::get<0 /* SL0 */>(id_328) };
                                dessser::gen::raql_variable::t_ext id_330 { std::get<1 /* Variable */>(id_329) };
                                Pointer id_331 { fun326(id_330, ssum_dst_1268) };
                                choose_res_325 = id_331;
                              } else {
                                uint16_t id_332 { 2 };
                                bool id_333 { bool(id_332 == label1_1267) };
                                Pointer choose_res_334;
                                if (id_333) {
                                  auto fun335 { dessser::gen::raql_binding_key::to_row_binary };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_336 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_337 { std::get<4 /* Stateless */>(id_336) };
                                  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_338 { std::get<0 /* SL0 */>(id_337) };
                                  dessser::gen::raql_binding_key::t_ext id_339 { std::get<2 /* Binding */>(id_338) };
                                  Pointer id_340 { fun335(id_339, ssum_dst_1268) };
                                  choose_res_334 = id_340;
                                } else {
                                  uint16_t id_341 { 3 };
                                  bool id_342 { bool(id_341 == label1_1267) };
                                  Pointer choose_res_343;
                                  if (id_342) {
                                    choose_res_343 = ssum_dst_1268;
                                  } else {
                                    uint16_t id_344 { 4 };
                                    bool id_345 { bool(id_344 == label1_1267) };
                                    Pointer choose_res_346;
                                    if (id_345) {
                                      choose_res_346 = ssum_dst_1268;
                                    } else {
                                      uint16_t id_347 { 5 };
                                      bool id_348 { bool(id_347 == label1_1267) };
                                      Pointer choose_res_349;
                                      if (id_348) {
                                        choose_res_349 = ssum_dst_1268;
                                      } else {
                                        uint16_t id_350 { 6 };
                                        bool id_351 { bool(id_350 == label1_1267) };
                                        Pointer choose_res_352;
                                        if (id_351) {
                                          choose_res_352 = ssum_dst_1268;
                                        } else {
                                          uint16_t id_353 { 7 };
                                          bool id_354 { bool(id_353 == label1_1267) };
                                          Pointer choose_res_355;
                                          if (id_354) {
                                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_356 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_357 { std::get<4 /* Stateless */>(id_356) };
                                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_358 { std::get<0 /* SL0 */>(id_357) };
                                            Lst<dessser::gen::raql_path_comp::t_ext> id_359 { std::get<7 /* Path */>(id_358) };
                                            uint32_t id_360 { id_359.size() };
                                            Vec<1, uint32_t> id_361 {  id_360  };
                                            Pointer let_res_362;
                                            {
                                              Vec<1, uint32_t> leb128_sz_1269 { id_361 };
                                              Vec<1, Pointer> id_363 {  ssum_dst_1268  };
                                              Pointer let_res_364;
                                              {
                                                Vec<1, Pointer> leb128_ptr_1270 { id_363 };
                                                bool while_flag_365 { true };
                                                do {
                                                  uint8_t id_366 { 0 };
                                                  uint8_t id_367 { 0 };
                                                  Pointer id_368 { leb128_ptr_1270[id_367] };
                                                  uint32_t id_369 { 128U };
                                                  uint8_t id_370 { 0 };
                                                  uint32_t id_371 { leb128_sz_1269[id_370] };
                                                  bool id_372 { bool(id_369 > id_371) };
                                                  uint8_t choose_res_373;
                                                  if (id_372) {
                                                    uint8_t id_374 { 0 };
                                                    uint32_t id_375 { leb128_sz_1269[id_374] };
                                                    uint8_t id_376 { uint8_t(id_375) };
                                                    choose_res_373 = id_376;
                                                  } else {
                                                    uint8_t id_377 { 0 };
                                                    uint32_t id_378 { leb128_sz_1269[id_377] };
                                                    uint8_t id_379 { uint8_t(id_378) };
                                                    uint8_t id_380 { 128 };
                                                    uint8_t id_381 { uint8_t(id_379 | id_380) };
                                                    choose_res_373 = id_381;
                                                  }
                                                  Pointer id_382 { id_368.writeU8(choose_res_373) };
                                                  Void id_383 { ((void)(leb128_ptr_1270[id_366] = id_382), ::dessser::Void()) };
                                                  (void)id_383;
                                                  uint8_t id_384 { 0 };
                                                  uint8_t id_385 { 0 };
                                                  uint32_t id_386 { leb128_sz_1269[id_385] };
                                                  uint8_t id_387 { 7 };
                                                  uint32_t id_388 { uint32_t(id_386 >> id_387) };
                                                  Void id_389 { ((void)(leb128_sz_1269[id_384] = id_388), ::dessser::Void()) };
                                                  (void)id_389;
                                                  uint8_t id_390 { 0 };
                                                  uint32_t id_391 { leb128_sz_1269[id_390] };
                                                  uint32_t id_392 { 0U };
                                                  bool id_393 { bool(id_391 > id_392) };
                                                  while_flag_365 = id_393;
                                                  if (while_flag_365) {
                                                    (void)::dessser::Void();
                                                  }
                                                } while (while_flag_365);
                                                (void)::dessser::Void();
                                                uint8_t id_394 { 0 };
                                                Pointer id_395 { leb128_ptr_1270[id_394] };
                                                let_res_364 = id_395;
                                              }
                                              let_res_362 = let_res_364;
                                            }
                                            Vec<1, Pointer> id_396 {  let_res_362  };
                                            Pointer let_res_397;
                                            {
                                              Vec<1, Pointer> dst_ref_1271 { id_396 };
                                              int32_t id_398 { 0L };
                                              Vec<1, int32_t> id_399 {  id_398  };
                                              Pointer let_res_400;
                                              {
                                                Vec<1, int32_t> n_ref_1272 { id_399 };
                                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_401 { (*p_0).text };
                                                ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_402 { std::get<4 /* Stateless */>(id_401) };
                                                ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_403 { std::get<0 /* SL0 */>(id_402) };
                                                Lst<dessser::gen::raql_path_comp::t_ext> id_404 { std::get<7 /* Path */>(id_403) };
                                                for (dessser::gen::raql_path_comp::t_ext &x_1273 : id_404) {
                                                  uint8_t id_405 { 0 };
                                                  auto fun406 { dessser::gen::raql_path_comp::to_row_binary };
                                                  uint8_t id_407 { 0 };
                                                  Pointer id_408 { dst_ref_1271[id_407] };
                                                  Pointer id_409 { fun406(x_1273, id_408) };
                                                  Void id_410 { ((void)(dst_ref_1271[id_405] = id_409), ::dessser::Void()) };
                                                  (void)id_410;
                                                  uint8_t id_411 { 0 };
                                                  int32_t id_412 { 1L };
                                                  uint8_t id_413 { 0 };
                                                  int32_t id_414 { n_ref_1272[id_413] };
                                                  int32_t id_415 { int32_t(id_412 + id_414) };
                                                  Void id_416 { ((void)(n_ref_1272[id_411] = id_415), ::dessser::Void()) };
                                                  (void)id_416;
                                                  (void)id_416;
                                                }
                                                (void)::dessser::Void();
                                                uint8_t id_417 { 0 };
                                                Pointer id_418 { dst_ref_1271[id_417] };
                                                let_res_400 = id_418;
                                              }
                                              let_res_397 = let_res_400;
                                            }
                                            choose_res_355 = let_res_397;
                                          } else {
                                            uint16_t id_419 { 8 };
                                            bool id_420 { bool(label1_1267 == id_419) };
                                            Void id_421 { ((void)(assert(id_420)), ::dessser::Void()) };
                                            (void)id_421;
                                            choose_res_355 = ssum_dst_1268;
                                          }
                                          choose_res_352 = choose_res_355;
                                        }
                                        choose_res_349 = choose_res_352;
                                      }
                                      choose_res_346 = choose_res_349;
                                    }
                                    choose_res_343 = choose_res_346;
                                  }
                                  choose_res_334 = choose_res_343;
                                }
                                choose_res_325 = choose_res_334;
                              }
                              choose_res_316 = choose_res_325;
                            }
                            let_res_313 = choose_res_316;
                          }
                          let_res_311 = let_res_313;
                        }
                        choose_res_306 = let_res_311;
                      } else {
                        uint16_t id_422 { 1 };
                        bool id_423 { bool(id_422 == label1_1240) };
                        Pointer choose_res_424;
                        if (id_423) {
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_425 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_426 { std::get<4 /* Stateless */>(id_425) };
                          ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_427 { std::get<1 /* SL1 */>(id_426) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_428 { std::get<1>(id_427) };
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_429 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_430 { std::get<4 /* Stateless */>(id_429) };
                          ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_431 { std::get<1 /* SL1 */>(id_430) };
                          ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_432 { std::get<0>(id_431) };
                          uint16_t id_433 { uint16_t(id_432.index()) };
                          Pointer let_res_434;
                          {
                            uint16_t label1_1259 { id_433 };
                            Pointer id_435 { ssum_dst_1241.writeU16Le(label1_1259) };
                            Pointer let_res_436;
                            {
                              Pointer ssum_dst_1260 { id_435 };
                              uint16_t id_437 { 0 };
                              bool id_438 { bool(id_437 == label1_1259) };
                              Pointer choose_res_439;
                              if (id_438) {
                                choose_res_439 = ssum_dst_1260;
                              } else {
                                uint16_t id_440 { 1 };
                                bool id_441 { bool(id_440 == label1_1259) };
                                Pointer choose_res_442;
                                if (id_441) {
                                  auto fun443 { dessser::gen::raql_type::to_row_binary };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_444 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_445 { std::get<4 /* Stateless */>(id_444) };
                                  ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_446 { std::get<1 /* SL1 */>(id_445) };
                                  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_447 { std::get<0>(id_446) };
                                  dessser::gen::raql_type::t_ext id_448 { std::get<1 /* Cast */>(id_447) };
                                  Pointer id_449 { fun443(id_448, ssum_dst_1260) };
                                  choose_res_442 = id_449;
                                } else {
                                  uint16_t id_450 { 2 };
                                  bool id_451 { bool(id_450 == label1_1259) };
                                  Pointer choose_res_452;
                                  if (id_451) {
                                    choose_res_452 = ssum_dst_1260;
                                  } else {
                                    uint16_t id_453 { 3 };
                                    bool id_454 { bool(id_453 == label1_1259) };
                                    Pointer choose_res_455;
                                    if (id_454) {
                                      auto fun456 { dessser::gen::raql_type::to_row_binary };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_457 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_458 { std::get<4 /* Stateless */>(id_457) };
                                      ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_459 { std::get<1 /* SL1 */>(id_458) };
                                      ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_460 { std::get<0>(id_459) };
                                      ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_461 { std::get<3 /* Peek */>(id_460) };
                                      dessser::gen::raql_type::t_ext id_462 { std::get<0>(id_461) };
                                      Pointer id_463 { fun456(id_462, ssum_dst_1260) };
                                      Pointer let_res_464;
                                      {
                                        Pointer stup_dst_1263 { id_463 };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_465 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_466 { std::get<4 /* Stateless */>(id_465) };
                                        ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_467 { std::get<1 /* SL1 */>(id_466) };
                                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_468 { std::get<0>(id_467) };
                                        ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_469 { std::get<3 /* Peek */>(id_468) };
                                        ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b id_470 { std::get<1>(id_469) };
                                        uint16_t id_471 { uint16_t(id_470) };
                                        Pointer id_472 { stup_dst_1263.writeU16Le(id_471) };
                                        Pointer let_res_473;
                                        {
                                          Pointer ssum_dst_1265 { id_472 };
                                          uint16_t id_474 { 0 };
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_475 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_476 { std::get<4 /* Stateless */>(id_475) };
                                          ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_477 { std::get<1 /* SL1 */>(id_476) };
                                          ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_478 { std::get<0>(id_477) };
                                          ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_479 { std::get<3 /* Peek */>(id_478) };
                                          ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b id_480 { std::get<1>(id_479) };
                                          uint16_t id_481 { uint16_t(id_480) };
                                          bool id_482 { bool(id_474 == id_481) };
                                          Pointer choose_res_483;
                                          if (id_482) {
                                            choose_res_483 = ssum_dst_1265;
                                          } else {
                                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_484 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_485 { std::get<4 /* Stateless */>(id_484) };
                                            ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_486 { std::get<1 /* SL1 */>(id_485) };
                                            ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_487 { std::get<0>(id_486) };
                                            ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_488 { std::get<3 /* Peek */>(id_487) };
                                            ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b id_489 { std::get<1>(id_488) };
                                            uint16_t id_490 { uint16_t(id_489) };
                                            uint16_t id_491 { 1 };
                                            bool id_492 { bool(id_490 == id_491) };
                                            Void id_493 { ((void)(assert(id_492)), ::dessser::Void()) };
                                            (void)id_493;
                                            choose_res_483 = ssum_dst_1265;
                                          }
                                          let_res_473 = choose_res_483;
                                        }
                                        let_res_464 = let_res_473;
                                      }
                                      choose_res_455 = let_res_464;
                                    } else {
                                      uint16_t id_494 { 4 };
                                      bool id_495 { bool(id_494 == label1_1259) };
                                      Pointer choose_res_496;
                                      if (id_495) {
                                        choose_res_496 = ssum_dst_1260;
                                      } else {
                                        uint16_t id_497 { 5 };
                                        bool id_498 { bool(id_497 == label1_1259) };
                                        Pointer choose_res_499;
                                        if (id_498) {
                                          choose_res_499 = ssum_dst_1260;
                                        } else {
                                          uint16_t id_500 { 6 };
                                          bool id_501 { bool(id_500 == label1_1259) };
                                          Pointer choose_res_502;
                                          if (id_501) {
                                            choose_res_502 = ssum_dst_1260;
                                          } else {
                                            uint16_t id_503 { 7 };
                                            bool id_504 { bool(id_503 == label1_1259) };
                                            Pointer choose_res_505;
                                            if (id_504) {
                                              choose_res_505 = ssum_dst_1260;
                                            } else {
                                              uint16_t id_506 { 8 };
                                              bool id_507 { bool(id_506 == label1_1259) };
                                              Pointer choose_res_508;
                                              if (id_507) {
                                                choose_res_508 = ssum_dst_1260;
                                              } else {
                                                uint16_t id_509 { 9 };
                                                bool id_510 { bool(id_509 == label1_1259) };
                                                Pointer choose_res_511;
                                                if (id_510) {
                                                  choose_res_511 = ssum_dst_1260;
                                                } else {
                                                  uint16_t id_512 { 10 };
                                                  bool id_513 { bool(id_512 == label1_1259) };
                                                  Pointer choose_res_514;
                                                  if (id_513) {
                                                    choose_res_514 = ssum_dst_1260;
                                                  } else {
                                                    uint16_t id_515 { 11 };
                                                    bool id_516 { bool(id_515 == label1_1259) };
                                                    Pointer choose_res_517;
                                                    if (id_516) {
                                                      choose_res_517 = ssum_dst_1260;
                                                    } else {
                                                      uint16_t id_518 { 12 };
                                                      bool id_519 { bool(id_518 == label1_1259) };
                                                      Pointer choose_res_520;
                                                      if (id_519) {
                                                        choose_res_520 = ssum_dst_1260;
                                                      } else {
                                                        uint16_t id_521 { 13 };
                                                        bool id_522 { bool(id_521 == label1_1259) };
                                                        Pointer choose_res_523;
                                                        if (id_522) {
                                                          choose_res_523 = ssum_dst_1260;
                                                        } else {
                                                          uint16_t id_524 { 14 };
                                                          bool id_525 { bool(id_524 == label1_1259) };
                                                          Pointer choose_res_526;
                                                          if (id_525) {
                                                            choose_res_526 = ssum_dst_1260;
                                                          } else {
                                                            uint16_t id_527 { 15 };
                                                            bool id_528 { bool(id_527 == label1_1259) };
                                                            Pointer choose_res_529;
                                                            if (id_528) {
                                                              choose_res_529 = ssum_dst_1260;
                                                            } else {
                                                              uint16_t id_530 { 16 };
                                                              bool id_531 { bool(id_530 == label1_1259) };
                                                              Pointer choose_res_532;
                                                              if (id_531) {
                                                                choose_res_532 = ssum_dst_1260;
                                                              } else {
                                                                uint16_t id_533 { 17 };
                                                                bool id_534 { bool(id_533 == label1_1259) };
                                                                Pointer choose_res_535;
                                                                if (id_534) {
                                                                  choose_res_535 = ssum_dst_1260;
                                                                } else {
                                                                  uint16_t id_536 { 18 };
                                                                  bool id_537 { bool(id_536 == label1_1259) };
                                                                  Pointer choose_res_538;
                                                                  if (id_537) {
                                                                    choose_res_538 = ssum_dst_1260;
                                                                  } else {
                                                                    uint16_t id_539 { 19 };
                                                                    bool id_540 { bool(id_539 == label1_1259) };
                                                                    Pointer choose_res_541;
                                                                    if (id_540) {
                                                                      choose_res_541 = ssum_dst_1260;
                                                                    } else {
                                                                      uint16_t id_542 { 20 };
                                                                      bool id_543 { bool(id_542 == label1_1259) };
                                                                      Pointer choose_res_544;
                                                                      if (id_543) {
                                                                        choose_res_544 = ssum_dst_1260;
                                                                      } else {
                                                                        uint16_t id_545 { 21 };
                                                                        bool id_546 { bool(id_545 == label1_1259) };
                                                                        Pointer choose_res_547;
                                                                        if (id_546) {
                                                                          choose_res_547 = ssum_dst_1260;
                                                                        } else {
                                                                          uint16_t id_548 { 22 };
                                                                          bool id_549 { bool(id_548 == label1_1259) };
                                                                          Pointer choose_res_550;
                                                                          if (id_549) {
                                                                            choose_res_550 = ssum_dst_1260;
                                                                          } else {
                                                                            uint16_t id_551 { 23 };
                                                                            bool id_552 { bool(id_551 == label1_1259) };
                                                                            Pointer choose_res_553;
                                                                            if (id_552) {
                                                                              choose_res_553 = ssum_dst_1260;
                                                                            } else {
                                                                              uint16_t id_554 { 24 };
                                                                              bool id_555 { bool(id_554 == label1_1259) };
                                                                              Pointer choose_res_556;
                                                                              if (id_555) {
                                                                                choose_res_556 = ssum_dst_1260;
                                                                              } else {
                                                                                uint16_t id_557 { 25 };
                                                                                bool id_558 { bool(id_557 == label1_1259) };
                                                                                Pointer choose_res_559;
                                                                                if (id_558) {
                                                                                  choose_res_559 = ssum_dst_1260;
                                                                                } else {
                                                                                  uint16_t id_560 { 26 };
                                                                                  bool id_561 { bool(id_560 == label1_1259) };
                                                                                  Pointer choose_res_562;
                                                                                  if (id_561) {
                                                                                    choose_res_562 = ssum_dst_1260;
                                                                                  } else {
                                                                                    uint16_t id_563 { 27 };
                                                                                    bool id_564 { bool(id_563 == label1_1259) };
                                                                                    Pointer choose_res_565;
                                                                                    if (id_564) {
                                                                                      choose_res_565 = ssum_dst_1260;
                                                                                    } else {
                                                                                      uint16_t id_566 { 28 };
                                                                                      bool id_567 { bool(id_566 == label1_1259) };
                                                                                      Pointer choose_res_568;
                                                                                      if (id_567) {
                                                                                        choose_res_568 = ssum_dst_1260;
                                                                                      } else {
                                                                                        uint16_t id_569 { 29 };
                                                                                        bool id_570 { bool(id_569 == label1_1259) };
                                                                                        Pointer choose_res_571;
                                                                                        if (id_570) {
                                                                                          choose_res_571 = ssum_dst_1260;
                                                                                        } else {
                                                                                          uint16_t id_572 { 30 };
                                                                                          bool id_573 { bool(id_572 == label1_1259) };
                                                                                          Pointer choose_res_574;
                                                                                          if (id_573) {
                                                                                            choose_res_574 = ssum_dst_1260;
                                                                                          } else {
                                                                                            uint16_t id_575 { 31 };
                                                                                            bool id_576 { bool(id_575 == label1_1259) };
                                                                                            Pointer choose_res_577;
                                                                                            if (id_576) {
                                                                                              choose_res_577 = ssum_dst_1260;
                                                                                            } else {
                                                                                              uint16_t id_578 { 32 };
                                                                                              bool id_579 { bool(id_578 == label1_1259) };
                                                                                              Pointer choose_res_580;
                                                                                              if (id_579) {
                                                                                                choose_res_580 = ssum_dst_1260;
                                                                                              } else {
                                                                                                uint16_t id_581 { 33 };
                                                                                                bool id_582 { bool(id_581 == label1_1259) };
                                                                                                Pointer choose_res_583;
                                                                                                if (id_582) {
                                                                                                  choose_res_583 = ssum_dst_1260;
                                                                                                } else {
                                                                                                  uint16_t id_584 { 34 };
                                                                                                  bool id_585 { bool(id_584 == label1_1259) };
                                                                                                  Pointer choose_res_586;
                                                                                                  if (id_585) {
                                                                                                    choose_res_586 = ssum_dst_1260;
                                                                                                  } else {
                                                                                                    uint16_t id_587 { 35 };
                                                                                                    bool id_588 { bool(id_587 == label1_1259) };
                                                                                                    Pointer choose_res_589;
                                                                                                    if (id_588) {
                                                                                                      choose_res_589 = ssum_dst_1260;
                                                                                                    } else {
                                                                                                      uint16_t id_590 { 36 };
                                                                                                      bool id_591 { bool(id_590 == label1_1259) };
                                                                                                      Pointer choose_res_592;
                                                                                                      if (id_591) {
                                                                                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_593 { (*p_0).text };
                                                                                                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_594 { std::get<4 /* Stateless */>(id_593) };
                                                                                                        ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_595 { std::get<1 /* SL1 */>(id_594) };
                                                                                                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_596 { std::get<0>(id_595) };
                                                                                                        std::string id_597 { std::get<36 /* Like */>(id_596) };
                                                                                                        uint32_t id_598 { (uint32_t)id_597.size() };
                                                                                                        Vec<1, uint32_t> id_599 {  id_598  };
                                                                                                        Pointer let_res_600;
                                                                                                        {
                                                                                                          Vec<1, uint32_t> leb128_sz_1261 { id_599 };
                                                                                                          Vec<1, Pointer> id_601 {  ssum_dst_1260  };
                                                                                                          Pointer let_res_602;
                                                                                                          {
                                                                                                            Vec<1, Pointer> leb128_ptr_1262 { id_601 };
                                                                                                            bool while_flag_603 { true };
                                                                                                            do {
                                                                                                              uint8_t id_604 { 0 };
                                                                                                              uint8_t id_605 { 0 };
                                                                                                              Pointer id_606 { leb128_ptr_1262[id_605] };
                                                                                                              uint32_t id_607 { 128U };
                                                                                                              uint8_t id_608 { 0 };
                                                                                                              uint32_t id_609 { leb128_sz_1261[id_608] };
                                                                                                              bool id_610 { bool(id_607 > id_609) };
                                                                                                              uint8_t choose_res_611;
                                                                                                              if (id_610) {
                                                                                                                uint8_t id_612 { 0 };
                                                                                                                uint32_t id_613 { leb128_sz_1261[id_612] };
                                                                                                                uint8_t id_614 { uint8_t(id_613) };
                                                                                                                choose_res_611 = id_614;
                                                                                                              } else {
                                                                                                                uint8_t id_615 { 0 };
                                                                                                                uint32_t id_616 { leb128_sz_1261[id_615] };
                                                                                                                uint8_t id_617 { uint8_t(id_616) };
                                                                                                                uint8_t id_618 { 128 };
                                                                                                                uint8_t id_619 { uint8_t(id_617 | id_618) };
                                                                                                                choose_res_611 = id_619;
                                                                                                              }
                                                                                                              Pointer id_620 { id_606.writeU8(choose_res_611) };
                                                                                                              Void id_621 { ((void)(leb128_ptr_1262[id_604] = id_620), ::dessser::Void()) };
                                                                                                              (void)id_621;
                                                                                                              uint8_t id_622 { 0 };
                                                                                                              uint8_t id_623 { 0 };
                                                                                                              uint32_t id_624 { leb128_sz_1261[id_623] };
                                                                                                              uint8_t id_625 { 7 };
                                                                                                              uint32_t id_626 { uint32_t(id_624 >> id_625) };
                                                                                                              Void id_627 { ((void)(leb128_sz_1261[id_622] = id_626), ::dessser::Void()) };
                                                                                                              (void)id_627;
                                                                                                              uint8_t id_628 { 0 };
                                                                                                              uint32_t id_629 { leb128_sz_1261[id_628] };
                                                                                                              uint32_t id_630 { 0U };
                                                                                                              bool id_631 { bool(id_629 > id_630) };
                                                                                                              while_flag_603 = id_631;
                                                                                                              if (while_flag_603) {
                                                                                                                (void)::dessser::Void();
                                                                                                              }
                                                                                                            } while (while_flag_603);
                                                                                                            (void)::dessser::Void();
                                                                                                            uint8_t id_632 { 0 };
                                                                                                            Pointer id_633 { leb128_ptr_1262[id_632] };
                                                                                                            let_res_602 = id_633;
                                                                                                          }
                                                                                                          let_res_600 = let_res_602;
                                                                                                        }
                                                                                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_634 { (*p_0).text };
                                                                                                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_635 { std::get<4 /* Stateless */>(id_634) };
                                                                                                        ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_636 { std::get<1 /* SL1 */>(id_635) };
                                                                                                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_637 { std::get<0>(id_636) };
                                                                                                        std::string id_638 { std::get<36 /* Like */>(id_637) };
                                                                                                        Bytes id_639 { id_638 };
                                                                                                        Pointer id_640 { let_res_600.writeBytes(id_639) };
                                                                                                        choose_res_592 = id_640;
                                                                                                      } else {
                                                                                                        uint16_t id_641 { 37 };
                                                                                                        bool id_642 { bool(id_641 == label1_1259) };
                                                                                                        Pointer choose_res_643;
                                                                                                        if (id_642) {
                                                                                                          choose_res_643 = ssum_dst_1260;
                                                                                                        } else {
                                                                                                          uint16_t id_644 { 38 };
                                                                                                          bool id_645 { bool(id_644 == label1_1259) };
                                                                                                          Pointer choose_res_646;
                                                                                                          if (id_645) {
                                                                                                            choose_res_646 = ssum_dst_1260;
                                                                                                          } else {
                                                                                                            uint16_t id_647 { 39 };
                                                                                                            bool id_648 { bool(id_647 == label1_1259) };
                                                                                                            Pointer choose_res_649;
                                                                                                            if (id_648) {
                                                                                                              choose_res_649 = ssum_dst_1260;
                                                                                                            } else {
                                                                                                              uint16_t id_650 { 40 };
                                                                                                              bool id_651 { bool(label1_1259 == id_650) };
                                                                                                              Void id_652 { ((void)(assert(id_651)), ::dessser::Void()) };
                                                                                                              (void)id_652;
                                                                                                              choose_res_649 = ssum_dst_1260;
                                                                                                            }
                                                                                                            choose_res_646 = choose_res_649;
                                                                                                          }
                                                                                                          choose_res_643 = choose_res_646;
                                                                                                        }
                                                                                                        choose_res_592 = choose_res_643;
                                                                                                      }
                                                                                                      choose_res_589 = choose_res_592;
                                                                                                    }
                                                                                                    choose_res_586 = choose_res_589;
                                                                                                  }
                                                                                                  choose_res_583 = choose_res_586;
                                                                                                }
                                                                                                choose_res_580 = choose_res_583;
                                                                                              }
                                                                                              choose_res_577 = choose_res_580;
                                                                                            }
                                                                                            choose_res_574 = choose_res_577;
                                                                                          }
                                                                                          choose_res_571 = choose_res_574;
                                                                                        }
                                                                                        choose_res_568 = choose_res_571;
                                                                                      }
                                                                                      choose_res_565 = choose_res_568;
                                                                                    }
                                                                                    choose_res_562 = choose_res_565;
                                                                                  }
                                                                                  choose_res_559 = choose_res_562;
                                                                                }
                                                                                choose_res_556 = choose_res_559;
                                                                              }
                                                                              choose_res_553 = choose_res_556;
                                                                            }
                                                                            choose_res_550 = choose_res_553;
                                                                          }
                                                                          choose_res_547 = choose_res_550;
                                                                        }
                                                                        choose_res_544 = choose_res_547;
                                                                      }
                                                                      choose_res_541 = choose_res_544;
                                                                    }
                                                                    choose_res_538 = choose_res_541;
                                                                  }
                                                                  choose_res_535 = choose_res_538;
                                                                }
                                                                choose_res_532 = choose_res_535;
                                                              }
                                                              choose_res_529 = choose_res_532;
                                                            }
                                                            choose_res_526 = choose_res_529;
                                                          }
                                                          choose_res_523 = choose_res_526;
                                                        }
                                                        choose_res_520 = choose_res_523;
                                                      }
                                                      choose_res_517 = choose_res_520;
                                                    }
                                                    choose_res_514 = choose_res_517;
                                                  }
                                                  choose_res_511 = choose_res_514;
                                                }
                                                choose_res_508 = choose_res_511;
                                              }
                                              choose_res_505 = choose_res_508;
                                            }
                                            choose_res_502 = choose_res_505;
                                          }
                                          choose_res_499 = choose_res_502;
                                        }
                                        choose_res_496 = choose_res_499;
                                      }
                                      choose_res_455 = choose_res_496;
                                    }
                                    choose_res_452 = choose_res_455;
                                  }
                                  choose_res_442 = choose_res_452;
                                }
                                choose_res_439 = choose_res_442;
                              }
                              let_res_436 = choose_res_439;
                            }
                            let_res_434 = let_res_436;
                          }
                          Pointer id_653 { fun20(id_428, let_res_434) };
                          choose_res_424 = id_653;
                        } else {
                          uint16_t id_654 { 2 };
                          bool id_655 { bool(id_654 == label1_1240) };
                          Pointer choose_res_656;
                          if (id_655) {
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_657 { (*p_0).text };
                            ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_658 { std::get<4 /* Stateless */>(id_657) };
                            ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_659 { std::get<2 /* SL1s */>(id_658) };
                            ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25 id_660 { std::get<0>(id_659) };
                            uint16_t id_661 { uint16_t(id_660) };
                            Pointer let_res_662;
                            {
                              uint16_t label1_1251 { id_661 };
                              Pointer id_663 { ssum_dst_1241.writeU16Le(label1_1251) };
                              Pointer let_res_664;
                              {
                                Pointer ssum_dst_1252 { id_663 };
                                uint16_t id_665 { 0 };
                                bool id_666 { bool(id_665 == label1_1251) };
                                Pointer choose_res_667;
                                if (id_666) {
                                  choose_res_667 = ssum_dst_1252;
                                } else {
                                  uint16_t id_668 { 1 };
                                  bool id_669 { bool(id_668 == label1_1251) };
                                  Pointer choose_res_670;
                                  if (id_669) {
                                    choose_res_670 = ssum_dst_1252;
                                  } else {
                                    uint16_t id_671 { 2 };
                                    bool id_672 { bool(id_671 == label1_1251) };
                                    Pointer choose_res_673;
                                    if (id_672) {
                                      choose_res_673 = ssum_dst_1252;
                                    } else {
                                      uint16_t id_674 { 3 };
                                      bool id_675 { bool(label1_1251 == id_674) };
                                      Void id_676 { ((void)(assert(id_675)), ::dessser::Void()) };
                                      (void)id_676;
                                      choose_res_673 = ssum_dst_1252;
                                    }
                                    choose_res_670 = choose_res_673;
                                  }
                                  choose_res_667 = choose_res_670;
                                }
                                let_res_664 = choose_res_667;
                              }
                              let_res_662 = let_res_664;
                            }
                            Pointer let_res_677;
                            {
                              Pointer stup_dst_1253 { let_res_662 };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_678 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_679 { std::get<4 /* Stateless */>(id_678) };
                              ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_680 { std::get<2 /* SL1s */>(id_679) };
                              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_681 { std::get<1>(id_680) };
                              uint32_t id_682 { id_681.size() };
                              Vec<1, uint32_t> id_683 {  id_682  };
                              Pointer let_res_684;
                              {
                                Vec<1, uint32_t> leb128_sz_1254 { id_683 };
                                Vec<1, Pointer> id_685 {  stup_dst_1253  };
                                Pointer let_res_686;
                                {
                                  Vec<1, Pointer> leb128_ptr_1255 { id_685 };
                                  bool while_flag_687 { true };
                                  do {
                                    uint8_t id_688 { 0 };
                                    uint8_t id_689 { 0 };
                                    Pointer id_690 { leb128_ptr_1255[id_689] };
                                    uint32_t id_691 { 128U };
                                    uint8_t id_692 { 0 };
                                    uint32_t id_693 { leb128_sz_1254[id_692] };
                                    bool id_694 { bool(id_691 > id_693) };
                                    uint8_t choose_res_695;
                                    if (id_694) {
                                      uint8_t id_696 { 0 };
                                      uint32_t id_697 { leb128_sz_1254[id_696] };
                                      uint8_t id_698 { uint8_t(id_697) };
                                      choose_res_695 = id_698;
                                    } else {
                                      uint8_t id_699 { 0 };
                                      uint32_t id_700 { leb128_sz_1254[id_699] };
                                      uint8_t id_701 { uint8_t(id_700) };
                                      uint8_t id_702 { 128 };
                                      uint8_t id_703 { uint8_t(id_701 | id_702) };
                                      choose_res_695 = id_703;
                                    }
                                    Pointer id_704 { id_690.writeU8(choose_res_695) };
                                    Void id_705 { ((void)(leb128_ptr_1255[id_688] = id_704), ::dessser::Void()) };
                                    (void)id_705;
                                    uint8_t id_706 { 0 };
                                    uint8_t id_707 { 0 };
                                    uint32_t id_708 { leb128_sz_1254[id_707] };
                                    uint8_t id_709 { 7 };
                                    uint32_t id_710 { uint32_t(id_708 >> id_709) };
                                    Void id_711 { ((void)(leb128_sz_1254[id_706] = id_710), ::dessser::Void()) };
                                    (void)id_711;
                                    uint8_t id_712 { 0 };
                                    uint32_t id_713 { leb128_sz_1254[id_712] };
                                    uint32_t id_714 { 0U };
                                    bool id_715 { bool(id_713 > id_714) };
                                    while_flag_687 = id_715;
                                    if (while_flag_687) {
                                      (void)::dessser::Void();
                                    }
                                  } while (while_flag_687);
                                  (void)::dessser::Void();
                                  uint8_t id_716 { 0 };
                                  Pointer id_717 { leb128_ptr_1255[id_716] };
                                  let_res_686 = id_717;
                                }
                                let_res_684 = let_res_686;
                              }
                              Vec<1, Pointer> id_718 {  let_res_684  };
                              Pointer let_res_719;
                              {
                                Vec<1, Pointer> dst_ref_1256 { id_718 };
                                int32_t id_720 { 0L };
                                Vec<1, int32_t> id_721 {  id_720  };
                                Pointer let_res_722;
                                {
                                  Vec<1, int32_t> n_ref_1257 { id_721 };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_723 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_724 { std::get<4 /* Stateless */>(id_723) };
                                  ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_725 { std::get<2 /* SL1s */>(id_724) };
                                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_726 { std::get<1>(id_725) };
                                  for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1258 : id_726) {
                                    uint8_t id_727 { 0 };
                                    uint8_t id_728 { 0 };
                                    Pointer id_729 { dst_ref_1256[id_728] };
                                    Pointer id_730 { fun20(x_1258, id_729) };
                                    Void id_731 { ((void)(dst_ref_1256[id_727] = id_730), ::dessser::Void()) };
                                    (void)id_731;
                                    uint8_t id_732 { 0 };
                                    int32_t id_733 { 1L };
                                    uint8_t id_734 { 0 };
                                    int32_t id_735 { n_ref_1257[id_734] };
                                    int32_t id_736 { int32_t(id_733 + id_735) };
                                    Void id_737 { ((void)(n_ref_1257[id_732] = id_736), ::dessser::Void()) };
                                    (void)id_737;
                                    (void)id_737;
                                  }
                                  (void)::dessser::Void();
                                  uint8_t id_738 { 0 };
                                  Pointer id_739 { dst_ref_1256[id_738] };
                                  let_res_722 = id_739;
                                }
                                let_res_719 = let_res_722;
                              }
                              let_res_677 = let_res_719;
                            }
                            choose_res_656 = let_res_677;
                          } else {
                            uint16_t id_740 { 3 };
                            bool id_741 { bool(id_740 == label1_1240) };
                            Pointer choose_res_742;
                            if (id_741) {
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_743 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_744 { std::get<4 /* Stateless */>(id_743) };
                              ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_745 { std::get<3 /* SL2 */>(id_744) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_746 { std::get<2>(id_745) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_747 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_748 { std::get<4 /* Stateless */>(id_747) };
                              ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_749 { std::get<3 /* SL2 */>(id_748) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_750 { std::get<1>(id_749) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_751 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_752 { std::get<4 /* Stateless */>(id_751) };
                              ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_753 { std::get<3 /* SL2 */>(id_752) };
                              ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_754 { std::get<0>(id_753) };
                              uint16_t id_755 { uint16_t(id_754.index()) };
                              Pointer let_res_756;
                              {
                                uint16_t label1_1247 { id_755 };
                                Pointer id_757 { ssum_dst_1241.writeU16Le(label1_1247) };
                                Pointer let_res_758;
                                {
                                  Pointer ssum_dst_1248 { id_757 };
                                  uint16_t id_759 { 0 };
                                  bool id_760 { bool(id_759 == label1_1247) };
                                  Pointer choose_res_761;
                                  if (id_760) {
                                    choose_res_761 = ssum_dst_1248;
                                  } else {
                                    uint16_t id_762 { 1 };
                                    bool id_763 { bool(id_762 == label1_1247) };
                                    Pointer choose_res_764;
                                    if (id_763) {
                                      choose_res_764 = ssum_dst_1248;
                                    } else {
                                      uint16_t id_765 { 2 };
                                      bool id_766 { bool(id_765 == label1_1247) };
                                      Pointer choose_res_767;
                                      if (id_766) {
                                        choose_res_767 = ssum_dst_1248;
                                      } else {
                                        uint16_t id_768 { 3 };
                                        bool id_769 { bool(id_768 == label1_1247) };
                                        Pointer choose_res_770;
                                        if (id_769) {
                                          choose_res_770 = ssum_dst_1248;
                                        } else {
                                          uint16_t id_771 { 4 };
                                          bool id_772 { bool(id_771 == label1_1247) };
                                          Pointer choose_res_773;
                                          if (id_772) {
                                            choose_res_773 = ssum_dst_1248;
                                          } else {
                                            uint16_t id_774 { 5 };
                                            bool id_775 { bool(id_774 == label1_1247) };
                                            Pointer choose_res_776;
                                            if (id_775) {
                                              choose_res_776 = ssum_dst_1248;
                                            } else {
                                              uint16_t id_777 { 6 };
                                              bool id_778 { bool(id_777 == label1_1247) };
                                              Pointer choose_res_779;
                                              if (id_778) {
                                                choose_res_779 = ssum_dst_1248;
                                              } else {
                                                uint16_t id_780 { 7 };
                                                bool id_781 { bool(id_780 == label1_1247) };
                                                Pointer choose_res_782;
                                                if (id_781) {
                                                  choose_res_782 = ssum_dst_1248;
                                                } else {
                                                  uint16_t id_783 { 8 };
                                                  bool id_784 { bool(id_783 == label1_1247) };
                                                  Pointer choose_res_785;
                                                  if (id_784) {
                                                    choose_res_785 = ssum_dst_1248;
                                                  } else {
                                                    uint16_t id_786 { 9 };
                                                    bool id_787 { bool(id_786 == label1_1247) };
                                                    Pointer choose_res_788;
                                                    if (id_787) {
                                                      choose_res_788 = ssum_dst_1248;
                                                    } else {
                                                      uint16_t id_789 { 10 };
                                                      bool id_790 { bool(id_789 == label1_1247) };
                                                      Pointer choose_res_791;
                                                      if (id_790) {
                                                        choose_res_791 = ssum_dst_1248;
                                                      } else {
                                                        uint16_t id_792 { 11 };
                                                        bool id_793 { bool(id_792 == label1_1247) };
                                                        Pointer choose_res_794;
                                                        if (id_793) {
                                                          choose_res_794 = ssum_dst_1248;
                                                        } else {
                                                          uint16_t id_795 { 12 };
                                                          bool id_796 { bool(id_795 == label1_1247) };
                                                          Pointer choose_res_797;
                                                          if (id_796) {
                                                            choose_res_797 = ssum_dst_1248;
                                                          } else {
                                                            uint16_t id_798 { 13 };
                                                            bool id_799 { bool(id_798 == label1_1247) };
                                                            Pointer choose_res_800;
                                                            if (id_799) {
                                                              choose_res_800 = ssum_dst_1248;
                                                            } else {
                                                              uint16_t id_801 { 14 };
                                                              bool id_802 { bool(id_801 == label1_1247) };
                                                              Pointer choose_res_803;
                                                              if (id_802) {
                                                                choose_res_803 = ssum_dst_1248;
                                                              } else {
                                                                uint16_t id_804 { 15 };
                                                                bool id_805 { bool(id_804 == label1_1247) };
                                                                Pointer choose_res_806;
                                                                if (id_805) {
                                                                  choose_res_806 = ssum_dst_1248;
                                                                } else {
                                                                  uint16_t id_807 { 16 };
                                                                  bool id_808 { bool(id_807 == label1_1247) };
                                                                  Pointer choose_res_809;
                                                                  if (id_808) {
                                                                    choose_res_809 = ssum_dst_1248;
                                                                  } else {
                                                                    uint16_t id_810 { 17 };
                                                                    bool id_811 { bool(id_810 == label1_1247) };
                                                                    Pointer choose_res_812;
                                                                    if (id_811) {
                                                                      choose_res_812 = ssum_dst_1248;
                                                                    } else {
                                                                      uint16_t id_813 { 18 };
                                                                      bool id_814 { bool(id_813 == label1_1247) };
                                                                      Pointer choose_res_815;
                                                                      if (id_814) {
                                                                        choose_res_815 = ssum_dst_1248;
                                                                      } else {
                                                                        uint16_t id_816 { 19 };
                                                                        bool id_817 { bool(id_816 == label1_1247) };
                                                                        Pointer choose_res_818;
                                                                        if (id_817) {
                                                                          choose_res_818 = ssum_dst_1248;
                                                                        } else {
                                                                          uint16_t id_819 { 20 };
                                                                          bool id_820 { bool(id_819 == label1_1247) };
                                                                          Pointer choose_res_821;
                                                                          if (id_820) {
                                                                            choose_res_821 = ssum_dst_1248;
                                                                          } else {
                                                                            uint16_t id_822 { 21 };
                                                                            bool id_823 { bool(id_822 == label1_1247) };
                                                                            Pointer choose_res_824;
                                                                            if (id_823) {
                                                                              choose_res_824 = ssum_dst_1248;
                                                                            } else {
                                                                              uint16_t id_825 { 22 };
                                                                              bool id_826 { bool(id_825 == label1_1247) };
                                                                              Pointer choose_res_827;
                                                                              if (id_826) {
                                                                                choose_res_827 = ssum_dst_1248;
                                                                              } else {
                                                                                uint16_t id_828 { 23 };
                                                                                bool id_829 { bool(id_828 == label1_1247) };
                                                                                Pointer choose_res_830;
                                                                                if (id_829) {
                                                                                  choose_res_830 = ssum_dst_1248;
                                                                                } else {
                                                                                  uint16_t id_831 { 24 };
                                                                                  bool id_832 { bool(id_831 == label1_1247) };
                                                                                  Pointer choose_res_833;
                                                                                  if (id_832) {
                                                                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_834 { (*p_0).text };
                                                                                    ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_835 { std::get<4 /* Stateless */>(id_834) };
                                                                                    ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_836 { std::get<3 /* SL2 */>(id_835) };
                                                                                    ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_837 { std::get<0>(id_836) };
                                                                                    bool id_838 { std::get<24 /* Index */>(id_837) };
                                                                                    uint8_t id_839 { uint8_t(id_838) };
                                                                                    Pointer id_840 { ssum_dst_1248.writeU8(id_839) };
                                                                                    choose_res_833 = id_840;
                                                                                  } else {
                                                                                    uint16_t id_841 { 25 };
                                                                                    bool id_842 { bool(label1_1247 == id_841) };
                                                                                    Void id_843 { ((void)(assert(id_842)), ::dessser::Void()) };
                                                                                    (void)id_843;
                                                                                    choose_res_833 = ssum_dst_1248;
                                                                                  }
                                                                                  choose_res_830 = choose_res_833;
                                                                                }
                                                                                choose_res_827 = choose_res_830;
                                                                              }
                                                                              choose_res_824 = choose_res_827;
                                                                            }
                                                                            choose_res_821 = choose_res_824;
                                                                          }
                                                                          choose_res_818 = choose_res_821;
                                                                        }
                                                                        choose_res_815 = choose_res_818;
                                                                      }
                                                                      choose_res_812 = choose_res_815;
                                                                    }
                                                                    choose_res_809 = choose_res_812;
                                                                  }
                                                                  choose_res_806 = choose_res_809;
                                                                }
                                                                choose_res_803 = choose_res_806;
                                                              }
                                                              choose_res_800 = choose_res_803;
                                                            }
                                                            choose_res_797 = choose_res_800;
                                                          }
                                                          choose_res_794 = choose_res_797;
                                                        }
                                                        choose_res_791 = choose_res_794;
                                                      }
                                                      choose_res_788 = choose_res_791;
                                                    }
                                                    choose_res_785 = choose_res_788;
                                                  }
                                                  choose_res_782 = choose_res_785;
                                                }
                                                choose_res_779 = choose_res_782;
                                              }
                                              choose_res_776 = choose_res_779;
                                            }
                                            choose_res_773 = choose_res_776;
                                          }
                                          choose_res_770 = choose_res_773;
                                        }
                                        choose_res_767 = choose_res_770;
                                      }
                                      choose_res_764 = choose_res_767;
                                    }
                                    choose_res_761 = choose_res_764;
                                  }
                                  let_res_758 = choose_res_761;
                                }
                                let_res_756 = let_res_758;
                              }
                              Pointer id_844 { fun20(id_750, let_res_756) };
                              Pointer id_845 { fun20(id_746, id_844) };
                              choose_res_742 = id_845;
                            } else {
                              uint16_t id_846 { 4 };
                              bool id_847 { bool(label1_1240 == id_846) };
                              Void id_848 { ((void)(assert(id_847)), ::dessser::Void()) };
                              (void)id_848;
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_849 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_850 { std::get<4 /* Stateless */>(id_849) };
                              ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_851 { std::get<4 /* SL3 */>(id_850) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_852 { std::get<3>(id_851) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_853 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_854 { std::get<4 /* Stateless */>(id_853) };
                              ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_855 { std::get<4 /* SL3 */>(id_854) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_856 { std::get<2>(id_855) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_857 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_858 { std::get<4 /* Stateless */>(id_857) };
                              ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_859 { std::get<4 /* SL3 */>(id_858) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_860 { std::get<1>(id_859) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_861 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_862 { std::get<4 /* Stateless */>(id_861) };
                              ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_863 { std::get<4 /* SL3 */>(id_862) };
                              ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c id_864 { std::get<0>(id_863) };
                              uint16_t id_865 { uint16_t(id_864) };
                              Pointer id_866 { ssum_dst_1241.writeU16Le(id_865) };
                              Pointer let_res_867;
                              {
                                Pointer ssum_dst_1243 { id_866 };
                                uint16_t id_868 { 0 };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_869 { (*p_0).text };
                                ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_870 { std::get<4 /* Stateless */>(id_869) };
                                ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_871 { std::get<4 /* SL3 */>(id_870) };
                                ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c id_872 { std::get<0>(id_871) };
                                uint16_t id_873 { uint16_t(id_872) };
                                bool id_874 { bool(id_868 == id_873) };
                                Pointer choose_res_875;
                                if (id_874) {
                                  choose_res_875 = ssum_dst_1243;
                                } else {
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_876 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_877 { std::get<4 /* Stateless */>(id_876) };
                                  ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_878 { std::get<4 /* SL3 */>(id_877) };
                                  ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c id_879 { std::get<0>(id_878) };
                                  uint16_t id_880 { uint16_t(id_879) };
                                  uint16_t id_881 { 1 };
                                  bool id_882 { bool(id_880 == id_881) };
                                  Void id_883 { ((void)(assert(id_882)), ::dessser::Void()) };
                                  (void)id_883;
                                  choose_res_875 = ssum_dst_1243;
                                }
                                let_res_867 = choose_res_875;
                              }
                              Pointer id_884 { fun20(id_860, let_res_867) };
                              Pointer id_885 { fun20(id_856, id_884) };
                              Pointer id_886 { fun20(id_852, id_885) };
                              choose_res_742 = id_886;
                            }
                            choose_res_656 = choose_res_742;
                          }
                          choose_res_424 = choose_res_656;
                        }
                        choose_res_306 = choose_res_424;
                      }
                      let_res_303 = choose_res_306;
                    }
                    let_res_301 = let_res_303;
                  }
                  choose_res_297 = let_res_301;
                } else {
                  uint16_t id_887 { 5 };
                  bool id_888 { bool(id_887 == label1_1180) };
                  Pointer choose_res_889;
                  if (id_888) {
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_890 { (*p_0).text };
                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_891 { std::get<5 /* Stateful */>(id_890) };
                    std::optional<::dessser::gen::raql_expr::lifespan> id_892 { id_891.lifespan };
                    bool id_893 { !(id_892.has_value ()) };
                    Pointer choose_res_894;
                    if (id_893) {
                      uint8_t id_895 { 1 };
                      Pointer id_896 { ssum_dst_1181.writeU8(id_895) };
                      choose_res_894 = id_896;
                    } else {
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_897 { (*p_0).text };
                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_898 { std::get<5 /* Stateful */>(id_897) };
                      std::optional<::dessser::gen::raql_expr::lifespan> id_899 { id_898.lifespan };
                      ::dessser::gen::raql_expr::lifespan id_900 { id_899.value() };
                      uint8_t id_901 { 0 };
                      Pointer id_902 { ssum_dst_1181.writeU8(id_901) };
                      Pointer id_903 { lifespan_to_row_binary(id_900, id_902) };
                      choose_res_894 = id_903;
                    }
                    Pointer let_res_904;
                    {
                      Pointer srec_dst_1185 { choose_res_894 };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_905 { (*p_0).text };
                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_906 { std::get<5 /* Stateful */>(id_905) };
                      bool id_907 { id_906.skip_nulls };
                      uint8_t id_908 { uint8_t(id_907) };
                      Pointer id_909 { srec_dst_1185.writeU8(id_908) };
                      let_res_904 = id_909;
                    }
                    Pointer let_res_910;
                    {
                      Pointer srec_dst_1186 { let_res_904 };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_911 { (*p_0).text };
                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_912 { std::get<5 /* Stateful */>(id_911) };
                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_913 { id_912.operation };
                      uint16_t id_914 { uint16_t(id_913.index()) };
                      Pointer let_res_915;
                      {
                        uint16_t label1_1187 { id_914 };
                        Pointer id_916 { srec_dst_1186.writeU16Le(label1_1187) };
                        Pointer let_res_917;
                        {
                          Pointer ssum_dst_1188 { id_916 };
                          uint16_t id_918 { 0 };
                          bool id_919 { bool(id_918 == label1_1187) };
                          Pointer choose_res_920;
                          if (id_919) {
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_921 { (*p_0).text };
                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_922 { std::get<5 /* Stateful */>(id_921) };
                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_923 { id_922.operation };
                            ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_924 { std::get<0 /* SF1 */>(id_923) };
                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_925 { std::get<1>(id_924) };
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_926 { (*p_0).text };
                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_927 { std::get<5 /* Stateful */>(id_926) };
                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_928 { id_927.operation };
                            ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_929 { std::get<0 /* SF1 */>(id_928) };
                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_930 { std::get<0>(id_929) };
                            uint16_t id_931 { uint16_t(id_930.index()) };
                            Pointer let_res_932;
                            {
                              uint16_t label1_1235 { id_931 };
                              Pointer id_933 { ssum_dst_1188.writeU16Le(label1_1235) };
                              Pointer let_res_934;
                              {
                                Pointer ssum_dst_1236 { id_933 };
                                uint16_t id_935 { 0 };
                                bool id_936 { bool(id_935 == label1_1235) };
                                Pointer choose_res_937;
                                if (id_936) {
                                  choose_res_937 = ssum_dst_1236;
                                } else {
                                  uint16_t id_938 { 1 };
                                  bool id_939 { bool(id_938 == label1_1235) };
                                  Pointer choose_res_940;
                                  if (id_939) {
                                    choose_res_940 = ssum_dst_1236;
                                  } else {
                                    uint16_t id_941 { 2 };
                                    bool id_942 { bool(id_941 == label1_1235) };
                                    Pointer choose_res_943;
                                    if (id_942) {
                                      choose_res_943 = ssum_dst_1236;
                                    } else {
                                      uint16_t id_944 { 3 };
                                      bool id_945 { bool(id_944 == label1_1235) };
                                      Pointer choose_res_946;
                                      if (id_945) {
                                        choose_res_946 = ssum_dst_1236;
                                      } else {
                                        uint16_t id_947 { 4 };
                                        bool id_948 { bool(id_947 == label1_1235) };
                                        Pointer choose_res_949;
                                        if (id_948) {
                                          choose_res_949 = ssum_dst_1236;
                                        } else {
                                          uint16_t id_950 { 5 };
                                          bool id_951 { bool(id_950 == label1_1235) };
                                          Pointer choose_res_952;
                                          if (id_951) {
                                            choose_res_952 = ssum_dst_1236;
                                          } else {
                                            uint16_t id_953 { 6 };
                                            bool id_954 { bool(id_953 == label1_1235) };
                                            Pointer choose_res_955;
                                            if (id_954) {
                                              choose_res_955 = ssum_dst_1236;
                                            } else {
                                              uint16_t id_956 { 7 };
                                              bool id_957 { bool(id_956 == label1_1235) };
                                              Pointer choose_res_958;
                                              if (id_957) {
                                                choose_res_958 = ssum_dst_1236;
                                              } else {
                                                uint16_t id_959 { 8 };
                                                bool id_960 { bool(id_959 == label1_1235) };
                                                Pointer choose_res_961;
                                                if (id_960) {
                                                  choose_res_961 = ssum_dst_1236;
                                                } else {
                                                  uint16_t id_962 { 9 };
                                                  bool id_963 { bool(id_962 == label1_1235) };
                                                  Pointer choose_res_964;
                                                  if (id_963) {
                                                    choose_res_964 = ssum_dst_1236;
                                                  } else {
                                                    uint16_t id_965 { 10 };
                                                    bool id_966 { bool(id_965 == label1_1235) };
                                                    Pointer choose_res_967;
                                                    if (id_966) {
                                                      choose_res_967 = ssum_dst_1236;
                                                    } else {
                                                      uint16_t id_968 { 11 };
                                                      bool id_969 { bool(id_968 == label1_1235) };
                                                      Pointer choose_res_970;
                                                      if (id_969) {
                                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_971 { (*p_0).text };
                                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_972 { std::get<5 /* Stateful */>(id_971) };
                                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_973 { id_972.operation };
                                                        ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_974 { std::get<0 /* SF1 */>(id_973) };
                                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_975 { std::get<0>(id_974) };
                                                        ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_976 { std::get<11 /* AggrHistogram */>(id_975) };
                                                        double id_977 { std::get<0>(id_976) };
                                                        uint64_t id_978 { qword_of_float(id_977) };
                                                        Pointer id_979 { ssum_dst_1236.writeU64Le(id_978) };
                                                        Pointer let_res_980;
                                                        {
                                                          Pointer stup_dst_1237 { id_979 };
                                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_981 { (*p_0).text };
                                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_982 { std::get<5 /* Stateful */>(id_981) };
                                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_983 { id_982.operation };
                                                          ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_984 { std::get<0 /* SF1 */>(id_983) };
                                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_985 { std::get<0>(id_984) };
                                                          ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_986 { std::get<11 /* AggrHistogram */>(id_985) };
                                                          double id_987 { std::get<1>(id_986) };
                                                          uint64_t id_988 { qword_of_float(id_987) };
                                                          Pointer id_989 { stup_dst_1237.writeU64Le(id_988) };
                                                          let_res_980 = id_989;
                                                        }
                                                        Pointer let_res_990;
                                                        {
                                                          Pointer stup_dst_1238 { let_res_980 };
                                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_991 { (*p_0).text };
                                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_992 { std::get<5 /* Stateful */>(id_991) };
                                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_993 { id_992.operation };
                                                          ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_994 { std::get<0 /* SF1 */>(id_993) };
                                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_995 { std::get<0>(id_994) };
                                                          ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_996 { std::get<11 /* AggrHistogram */>(id_995) };
                                                          uint32_t id_997 { std::get<2>(id_996) };
                                                          Pointer id_998 { stup_dst_1238.writeU32Le(id_997) };
                                                          let_res_990 = id_998;
                                                        }
                                                        choose_res_970 = let_res_990;
                                                      } else {
                                                        uint16_t id_999 { 12 };
                                                        bool id_1000 { bool(id_999 == label1_1235) };
                                                        Pointer choose_res_1001;
                                                        if (id_1000) {
                                                          choose_res_1001 = ssum_dst_1236;
                                                        } else {
                                                          uint16_t id_1002 { 13 };
                                                          bool id_1003 { bool(id_1002 == label1_1235) };
                                                          Pointer choose_res_1004;
                                                          if (id_1003) {
                                                            choose_res_1004 = ssum_dst_1236;
                                                          } else {
                                                            uint16_t id_1005 { 14 };
                                                            bool id_1006 { bool(label1_1235 == id_1005) };
                                                            Void id_1007 { ((void)(assert(id_1006)), ::dessser::Void()) };
                                                            (void)id_1007;
                                                            choose_res_1004 = ssum_dst_1236;
                                                          }
                                                          choose_res_1001 = choose_res_1004;
                                                        }
                                                        choose_res_970 = choose_res_1001;
                                                      }
                                                      choose_res_967 = choose_res_970;
                                                    }
                                                    choose_res_964 = choose_res_967;
                                                  }
                                                  choose_res_961 = choose_res_964;
                                                }
                                                choose_res_958 = choose_res_961;
                                              }
                                              choose_res_955 = choose_res_958;
                                            }
                                            choose_res_952 = choose_res_955;
                                          }
                                          choose_res_949 = choose_res_952;
                                        }
                                        choose_res_946 = choose_res_949;
                                      }
                                      choose_res_943 = choose_res_946;
                                    }
                                    choose_res_940 = choose_res_943;
                                  }
                                  choose_res_937 = choose_res_940;
                                }
                                let_res_934 = choose_res_937;
                              }
                              let_res_932 = let_res_934;
                            }
                            Pointer id_1008 { fun20(id_925, let_res_932) };
                            choose_res_920 = id_1008;
                          } else {
                            uint16_t id_1009 { 1 };
                            bool id_1010 { bool(id_1009 == label1_1187) };
                            Pointer choose_res_1011;
                            if (id_1010) {
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1012 { (*p_0).text };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1013 { std::get<5 /* Stateful */>(id_1012) };
                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1014 { id_1013.operation };
                              ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c id_1015 { std::get<1 /* SF2 */>(id_1014) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_1016 { std::get<2>(id_1015) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1017 { (*p_0).text };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1018 { std::get<5 /* Stateful */>(id_1017) };
                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1019 { id_1018.operation };
                              ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c id_1020 { std::get<1 /* SF2 */>(id_1019) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_1021 { std::get<1>(id_1020) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1022 { (*p_0).text };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1023 { std::get<5 /* Stateful */>(id_1022) };
                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1024 { id_1023.operation };
                              ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c id_1025 { std::get<1 /* SF2 */>(id_1024) };
                              ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8 id_1026 { std::get<0>(id_1025) };
                              uint16_t id_1027 { uint16_t(id_1026) };
                              Pointer let_res_1028;
                              {
                                uint16_t label1_1231 { id_1027 };
                                Pointer id_1029 { ssum_dst_1188.writeU16Le(label1_1231) };
                                Pointer let_res_1030;
                                {
                                  Pointer ssum_dst_1232 { id_1029 };
                                  uint16_t id_1031 { 0 };
                                  bool id_1032 { bool(id_1031 == label1_1231) };
                                  Pointer choose_res_1033;
                                  if (id_1032) {
                                    choose_res_1033 = ssum_dst_1232;
                                  } else {
                                    uint16_t id_1034 { 1 };
                                    bool id_1035 { bool(id_1034 == label1_1231) };
                                    Pointer choose_res_1036;
                                    if (id_1035) {
                                      choose_res_1036 = ssum_dst_1232;
                                    } else {
                                      uint16_t id_1037 { 2 };
                                      bool id_1038 { bool(id_1037 == label1_1231) };
                                      Pointer choose_res_1039;
                                      if (id_1038) {
                                        choose_res_1039 = ssum_dst_1232;
                                      } else {
                                        uint16_t id_1040 { 3 };
                                        bool id_1041 { bool(label1_1231 == id_1040) };
                                        Void id_1042 { ((void)(assert(id_1041)), ::dessser::Void()) };
                                        (void)id_1042;
                                        choose_res_1039 = ssum_dst_1232;
                                      }
                                      choose_res_1036 = choose_res_1039;
                                    }
                                    choose_res_1033 = choose_res_1036;
                                  }
                                  let_res_1030 = choose_res_1033;
                                }
                                let_res_1028 = let_res_1030;
                              }
                              Pointer id_1043 { fun20(id_1021, let_res_1028) };
                              Pointer id_1044 { fun20(id_1016, id_1043) };
                              choose_res_1011 = id_1044;
                            } else {
                              uint16_t id_1045 { 2 };
                              bool id_1046 { bool(id_1045 == label1_1187) };
                              Pointer choose_res_1047;
                              if (id_1046) {
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1048 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1049 { std::get<5 /* Stateful */>(id_1048) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1050 { id_1049.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1051 { std::get<2 /* SF3 */>(id_1050) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_1052 { std::get<3>(id_1051) };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1053 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1054 { std::get<5 /* Stateful */>(id_1053) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1055 { id_1054.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1056 { std::get<2 /* SF3 */>(id_1055) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_1057 { std::get<2>(id_1056) };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1058 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1059 { std::get<5 /* Stateful */>(id_1058) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1060 { id_1059.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1061 { std::get<2 /* SF3 */>(id_1060) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_1062 { std::get<1>(id_1061) };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1063 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1064 { std::get<5 /* Stateful */>(id_1063) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1065 { id_1064.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1066 { std::get<2 /* SF3 */>(id_1065) };
                                ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_1067 { std::get<0>(id_1066) };
                                uint16_t id_1068 { uint16_t(id_1067.index()) };
                                Pointer let_res_1069;
                                {
                                  uint16_t label1_1226 { id_1068 };
                                  Pointer id_1070 { ssum_dst_1188.writeU16Le(label1_1226) };
                                  Pointer let_res_1071;
                                  {
                                    Pointer ssum_dst_1227 { id_1070 };
                                    uint16_t id_1072 { 0 };
                                    bool id_1073 { bool(id_1072 == label1_1226) };
                                    Pointer choose_res_1074;
                                    if (id_1073) {
                                      choose_res_1074 = ssum_dst_1227;
                                    } else {
                                      uint16_t id_1075 { 1 };
                                      bool id_1076 { bool(id_1075 == label1_1226) };
                                      Pointer choose_res_1077;
                                      if (id_1076) {
                                        choose_res_1077 = ssum_dst_1227;
                                      } else {
                                        uint16_t id_1078 { 2 };
                                        bool id_1079 { bool(label1_1226 == id_1078) };
                                        Void id_1080 { ((void)(assert(id_1079)), ::dessser::Void()) };
                                        (void)id_1080;
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1081 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1082 { std::get<5 /* Stateful */>(id_1081) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1083 { id_1082.operation };
                                        ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_1084 { std::get<2 /* SF3 */>(id_1083) };
                                        ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_1085 { std::get<0>(id_1084) };
                                        bool id_1086 { std::get<2 /* OnceEvery */>(id_1085) };
                                        uint8_t id_1087 { uint8_t(id_1086) };
                                        Pointer id_1088 { ssum_dst_1227.writeU8(id_1087) };
                                        choose_res_1077 = id_1088;
                                      }
                                      choose_res_1074 = choose_res_1077;
                                    }
                                    let_res_1071 = choose_res_1074;
                                  }
                                  let_res_1069 = let_res_1071;
                                }
                                Pointer id_1089 { fun20(id_1062, let_res_1069) };
                                Pointer id_1090 { fun20(id_1057, id_1089) };
                                Pointer id_1091 { fun20(id_1052, id_1090) };
                                choose_res_1047 = id_1091;
                              } else {
                                uint16_t id_1092 { 3 };
                                bool id_1093 { bool(id_1092 == label1_1187) };
                                Pointer choose_res_1094;
                                if (id_1093) {
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1095 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1096 { std::get<5 /* Stateful */>(id_1095) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1097 { id_1096.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1098 { std::get<3 /* SF4 */>(id_1097) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1099 { std::get<4>(id_1098) };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1100 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1101 { std::get<5 /* Stateful */>(id_1100) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1102 { id_1101.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1103 { std::get<3 /* SF4 */>(id_1102) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1104 { std::get<3>(id_1103) };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1105 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1106 { std::get<5 /* Stateful */>(id_1105) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1107 { id_1106.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1108 { std::get<3 /* SF4 */>(id_1107) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1109 { std::get<2>(id_1108) };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1110 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1111 { std::get<5 /* Stateful */>(id_1110) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1112 { id_1111.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1113 { std::get<3 /* SF4 */>(id_1112) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1114 { std::get<1>(id_1113) };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1115 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1116 { std::get<5 /* Stateful */>(id_1115) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1117 { id_1116.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1118 { std::get<3 /* SF4 */>(id_1117) };
                                  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1119 { std::get<0>(id_1118) };
                                  uint16_t id_1120 { uint16_t(id_1119.index()) };
                                  Pointer id_1121 { ssum_dst_1188.writeU16Le(id_1120) };
                                  Pointer let_res_1122;
                                  {
                                    Pointer ssum_dst_1221 { id_1121 };
                                    uint16_t id_1123 { 0 };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1124 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1125 { std::get<5 /* Stateful */>(id_1124) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1126 { id_1125.operation };
                                    ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1127 { std::get<3 /* SF4 */>(id_1126) };
                                    ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1128 { std::get<0>(id_1127) };
                                    uint16_t id_1129 { uint16_t(id_1128.index()) };
                                    bool id_1130 { bool(id_1123 == id_1129) };
                                    Pointer choose_res_1131;
                                    if (id_1130) {
                                      choose_res_1131 = ssum_dst_1221;
                                    } else {
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1132 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1133 { std::get<5 /* Stateful */>(id_1132) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1134 { id_1133.operation };
                                      ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1135 { std::get<3 /* SF4 */>(id_1134) };
                                      ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1136 { std::get<0>(id_1135) };
                                      uint16_t id_1137 { uint16_t(id_1136.index()) };
                                      uint16_t id_1138 { 1 };
                                      bool id_1139 { bool(id_1137 == id_1138) };
                                      Void id_1140 { ((void)(assert(id_1139)), ::dessser::Void()) };
                                      (void)id_1140;
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1141 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1142 { std::get<5 /* Stateful */>(id_1141) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1143 { id_1142.operation };
                                      ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_1144 { std::get<3 /* SF4 */>(id_1143) };
                                      ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_1145 { std::get<0>(id_1144) };
                                      bool id_1146 { std::get<1 /* Remember */>(id_1145) };
                                      uint8_t id_1147 { uint8_t(id_1146) };
                                      Pointer id_1148 { ssum_dst_1221.writeU8(id_1147) };
                                      choose_res_1131 = id_1148;
                                    }
                                    let_res_1122 = choose_res_1131;
                                  }
                                  Pointer id_1149 { fun20(id_1114, let_res_1122) };
                                  Pointer id_1150 { fun20(id_1109, id_1149) };
                                  Pointer id_1151 { fun20(id_1104, id_1150) };
                                  Pointer id_1152 { fun20(id_1099, id_1151) };
                                  choose_res_1094 = id_1152;
                                } else {
                                  uint16_t id_1153 { 4 };
                                  bool id_1154 { bool(id_1153 == label1_1187) };
                                  Pointer choose_res_1155;
                                  if (id_1154) {
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1156 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1157 { std::get<5 /* Stateful */>(id_1156) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1158 { id_1157.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1159 { std::get<4 /* SF4s */>(id_1158) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1160 { std::get<3>(id_1159) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1161 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1162 { std::get<5 /* Stateful */>(id_1161) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1163 { id_1162.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1164 { std::get<4 /* SF4s */>(id_1163) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1165 { std::get<2>(id_1164) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1166 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1167 { std::get<5 /* Stateful */>(id_1166) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1168 { id_1167.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1169 { std::get<4 /* SF4s */>(id_1168) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1170 { std::get<1>(id_1169) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1171 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1172 { std::get<5 /* Stateful */>(id_1171) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1173 { id_1172.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1174 { std::get<4 /* SF4s */>(id_1173) };
                                    ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1175 { std::get<0>(id_1174) };
                                    uint16_t id_1176 { uint16_t(id_1175.index()) };
                                    Pointer id_1177 { ssum_dst_1188.writeU16Le(id_1176) };
                                    Pointer let_res_1178;
                                    {
                                      Pointer ssum_dst_1209 { id_1177 };
                                      uint16_t id_1179 { 0 };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1180 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1181 { std::get<5 /* Stateful */>(id_1180) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1182 { id_1181.operation };
                                      ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1183 { std::get<4 /* SF4s */>(id_1182) };
                                      ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1184 { std::get<0>(id_1183) };
                                      uint16_t id_1185 { uint16_t(id_1184.index()) };
                                      bool id_1186 { bool(id_1179 == id_1185) };
                                      Pointer choose_res_1187;
                                      if (id_1186) {
                                        choose_res_1187 = ssum_dst_1209;
                                      } else {
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1188 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1189 { std::get<5 /* Stateful */>(id_1188) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1190 { id_1189.operation };
                                        ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1191 { std::get<4 /* SF4s */>(id_1190) };
                                        ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1192 { std::get<0>(id_1191) };
                                        uint16_t id_1193 { uint16_t(id_1192.index()) };
                                        uint16_t id_1194 { 1 };
                                        bool id_1195 { bool(id_1193 == id_1194) };
                                        Void id_1196 { ((void)(assert(id_1195)), ::dessser::Void()) };
                                        (void)id_1196;
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1197 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1198 { std::get<5 /* Stateful */>(id_1197) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1199 { id_1198.operation };
                                        ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1200 { std::get<4 /* SF4s */>(id_1199) };
                                        ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1201 { std::get<0>(id_1200) };
                                        ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 id_1202 { std::get<1 /* Largest */>(id_1201) };
                                        bool id_1203 { id_1202.inv };
                                        uint8_t id_1204 { uint8_t(id_1203) };
                                        Pointer id_1205 { ssum_dst_1209.writeU8(id_1204) };
                                        Pointer let_res_1206;
                                        {
                                          Pointer srec_dst_1210 { id_1205 };
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1207 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1208 { std::get<5 /* Stateful */>(id_1207) };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1209 { id_1208.operation };
                                          ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1210 { std::get<4 /* SF4s */>(id_1209) };
                                          ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_1211 { std::get<0>(id_1210) };
                                          ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 id_1212 { std::get<1 /* Largest */>(id_1211) };
                                          bool id_1213 { id_1212.up_to };
                                          uint8_t id_1214 { uint8_t(id_1213) };
                                          Pointer id_1215 { srec_dst_1210.writeU8(id_1214) };
                                          let_res_1206 = id_1215;
                                        }
                                        choose_res_1187 = let_res_1206;
                                      }
                                      let_res_1178 = choose_res_1187;
                                    }
                                    Pointer id_1216 { fun20(id_1170, let_res_1178) };
                                    Pointer id_1217 { fun20(id_1165, id_1216) };
                                    Pointer id_1218 { fun20(id_1160, id_1217) };
                                    Pointer let_res_1219;
                                    {
                                      Pointer stup_dst_1214 { id_1218 };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1220 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1221 { std::get<5 /* Stateful */>(id_1220) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1222 { id_1221.operation };
                                      ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1223 { std::get<4 /* SF4s */>(id_1222) };
                                      Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1224 { std::get<4>(id_1223) };
                                      uint32_t id_1225 { id_1224.size() };
                                      Vec<1, uint32_t> id_1226 {  id_1225  };
                                      Pointer let_res_1227;
                                      {
                                        Vec<1, uint32_t> leb128_sz_1215 { id_1226 };
                                        Vec<1, Pointer> id_1228 {  stup_dst_1214  };
                                        Pointer let_res_1229;
                                        {
                                          Vec<1, Pointer> leb128_ptr_1216 { id_1228 };
                                          bool while_flag_1230 { true };
                                          do {
                                            uint8_t id_1231 { 0 };
                                            uint8_t id_1232 { 0 };
                                            Pointer id_1233 { leb128_ptr_1216[id_1232] };
                                            uint32_t id_1234 { 128U };
                                            uint8_t id_1235 { 0 };
                                            uint32_t id_1236 { leb128_sz_1215[id_1235] };
                                            bool id_1237 { bool(id_1234 > id_1236) };
                                            uint8_t choose_res_1238;
                                            if (id_1237) {
                                              uint8_t id_1239 { 0 };
                                              uint32_t id_1240 { leb128_sz_1215[id_1239] };
                                              uint8_t id_1241 { uint8_t(id_1240) };
                                              choose_res_1238 = id_1241;
                                            } else {
                                              uint8_t id_1242 { 0 };
                                              uint32_t id_1243 { leb128_sz_1215[id_1242] };
                                              uint8_t id_1244 { uint8_t(id_1243) };
                                              uint8_t id_1245 { 128 };
                                              uint8_t id_1246 { uint8_t(id_1244 | id_1245) };
                                              choose_res_1238 = id_1246;
                                            }
                                            Pointer id_1247 { id_1233.writeU8(choose_res_1238) };
                                            Void id_1248 { ((void)(leb128_ptr_1216[id_1231] = id_1247), ::dessser::Void()) };
                                            (void)id_1248;
                                            uint8_t id_1249 { 0 };
                                            uint8_t id_1250 { 0 };
                                            uint32_t id_1251 { leb128_sz_1215[id_1250] };
                                            uint8_t id_1252 { 7 };
                                            uint32_t id_1253 { uint32_t(id_1251 >> id_1252) };
                                            Void id_1254 { ((void)(leb128_sz_1215[id_1249] = id_1253), ::dessser::Void()) };
                                            (void)id_1254;
                                            uint8_t id_1255 { 0 };
                                            uint32_t id_1256 { leb128_sz_1215[id_1255] };
                                            uint32_t id_1257 { 0U };
                                            bool id_1258 { bool(id_1256 > id_1257) };
                                            while_flag_1230 = id_1258;
                                            if (while_flag_1230) {
                                              (void)::dessser::Void();
                                            }
                                          } while (while_flag_1230);
                                          (void)::dessser::Void();
                                          uint8_t id_1259 { 0 };
                                          Pointer id_1260 { leb128_ptr_1216[id_1259] };
                                          let_res_1229 = id_1260;
                                        }
                                        let_res_1227 = let_res_1229;
                                      }
                                      Vec<1, Pointer> id_1261 {  let_res_1227  };
                                      Pointer let_res_1262;
                                      {
                                        Vec<1, Pointer> dst_ref_1217 { id_1261 };
                                        int32_t id_1263 { 0L };
                                        Vec<1, int32_t> id_1264 {  id_1263  };
                                        Pointer let_res_1265;
                                        {
                                          Vec<1, int32_t> n_ref_1218 { id_1264 };
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1266 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1267 { std::get<5 /* Stateful */>(id_1266) };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1268 { id_1267.operation };
                                          ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_1269 { std::get<4 /* SF4s */>(id_1268) };
                                          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1270 { std::get<4>(id_1269) };
                                          for (std::shared_ptr<::dessser::gen::raql_expr::t>  &x_1219 : id_1270) {
                                            uint8_t id_1271 { 0 };
                                            uint8_t id_1272 { 0 };
                                            Pointer id_1273 { dst_ref_1217[id_1272] };
                                            Pointer id_1274 { fun20(x_1219, id_1273) };
                                            Void id_1275 { ((void)(dst_ref_1217[id_1271] = id_1274), ::dessser::Void()) };
                                            (void)id_1275;
                                            uint8_t id_1276 { 0 };
                                            int32_t id_1277 { 1L };
                                            uint8_t id_1278 { 0 };
                                            int32_t id_1279 { n_ref_1218[id_1278] };
                                            int32_t id_1280 { int32_t(id_1277 + id_1279) };
                                            Void id_1281 { ((void)(n_ref_1218[id_1276] = id_1280), ::dessser::Void()) };
                                            (void)id_1281;
                                            (void)id_1281;
                                          }
                                          (void)::dessser::Void();
                                          uint8_t id_1282 { 0 };
                                          Pointer id_1283 { dst_ref_1217[id_1282] };
                                          let_res_1265 = id_1283;
                                        }
                                        let_res_1262 = let_res_1265;
                                      }
                                      let_res_1219 = let_res_1262;
                                    }
                                    choose_res_1155 = let_res_1219;
                                  } else {
                                    uint16_t id_1284 { 5 };
                                    bool id_1285 { bool(id_1284 == label1_1187) };
                                    Pointer choose_res_1286;
                                    if (id_1285) {
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1287 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1288 { std::get<5 /* Stateful */>(id_1287) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1289 { id_1288.operation };
                                      ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1290 { std::get<5 /* SF6 */>(id_1289) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1291 { std::get<6>(id_1290) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1292 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1293 { std::get<5 /* Stateful */>(id_1292) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1294 { id_1293.operation };
                                      ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1295 { std::get<5 /* SF6 */>(id_1294) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1296 { std::get<5>(id_1295) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1297 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1298 { std::get<5 /* Stateful */>(id_1297) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1299 { id_1298.operation };
                                      ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1300 { std::get<5 /* SF6 */>(id_1299) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1301 { std::get<4>(id_1300) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1302 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1303 { std::get<5 /* Stateful */>(id_1302) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1304 { id_1303.operation };
                                      ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1305 { std::get<5 /* SF6 */>(id_1304) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1306 { std::get<3>(id_1305) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1307 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1308 { std::get<5 /* Stateful */>(id_1307) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1309 { id_1308.operation };
                                      ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1310 { std::get<5 /* SF6 */>(id_1309) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1311 { std::get<2>(id_1310) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1312 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1313 { std::get<5 /* Stateful */>(id_1312) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1314 { id_1313.operation };
                                      ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1315 { std::get<5 /* SF6 */>(id_1314) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1316 { std::get<1>(id_1315) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1317 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1318 { std::get<5 /* Stateful */>(id_1317) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1319 { id_1318.operation };
                                      ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1320 { std::get<5 /* SF6 */>(id_1319) };
                                      ::dessser::gen::raql_expr::t08ea46bfedc9b7effc1e74e5b51a05ef id_1321 { std::get<0>(id_1320) };
                                      uint16_t id_1322 { uint16_t(id_1321) };
                                      Pointer id_1323 { ssum_dst_1188.writeU16Le(id_1322) };
                                      Pointer let_res_1324;
                                      {
                                        Pointer ssum_dst_1201 { id_1323 };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1325 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1326 { std::get<5 /* Stateful */>(id_1325) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1327 { id_1326.operation };
                                        ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_1328 { std::get<5 /* SF6 */>(id_1327) };
                                        ::dessser::gen::raql_expr::t08ea46bfedc9b7effc1e74e5b51a05ef id_1329 { std::get<0>(id_1328) };
                                        uint16_t id_1330 { uint16_t(id_1329) };
                                        uint16_t id_1331 { 0 };
                                        bool id_1332 { bool(id_1330 == id_1331) };
                                        Void id_1333 { ((void)(assert(id_1332)), ::dessser::Void()) };
                                        (void)id_1333;
                                        let_res_1324 = ssum_dst_1201;
                                      }
                                      Pointer id_1334 { fun20(id_1316, let_res_1324) };
                                      Pointer id_1335 { fun20(id_1311, id_1334) };
                                      Pointer id_1336 { fun20(id_1306, id_1335) };
                                      Pointer id_1337 { fun20(id_1301, id_1336) };
                                      Pointer id_1338 { fun20(id_1296, id_1337) };
                                      Pointer id_1339 { fun20(id_1291, id_1338) };
                                      choose_res_1286 = id_1339;
                                    } else {
                                      uint16_t id_1340 { 6 };
                                      bool id_1341 { bool(id_1340 == label1_1187) };
                                      Pointer choose_res_1342;
                                      if (id_1341) {
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1343 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1344 { std::get<5 /* Stateful */>(id_1343) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1345 { id_1344.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1346 { std::get<6 /* Top */>(id_1345) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1347 { id_1346.sigmas };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1348 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1349 { std::get<5 /* Stateful */>(id_1348) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1350 { id_1349.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1351 { std::get<6 /* Top */>(id_1350) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1352 { id_1351.duration };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1353 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1354 { std::get<5 /* Stateful */>(id_1353) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1355 { id_1354.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1356 { std::get<6 /* Top */>(id_1355) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1357 { id_1356.Top_time };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1358 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1359 { std::get<5 /* Stateful */>(id_1358) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1360 { id_1359.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1361 { std::get<6 /* Top */>(id_1360) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1362 { id_1361.by };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1363 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1364 { std::get<5 /* Stateful */>(id_1363) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1365 { id_1364.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1366 { std::get<6 /* Top */>(id_1365) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1367 { id_1366.Top_what };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1368 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1369 { std::get<5 /* Stateful */>(id_1368) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1370 { id_1369.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1371 { std::get<6 /* Top */>(id_1370) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1372 { id_1371.size };
                                        auto fun1373 { dessser::gen::raql_top_output::to_row_binary };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1374 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1375 { std::get<5 /* Stateful */>(id_1374) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1376 { id_1375.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1377 { std::get<6 /* Top */>(id_1376) };
                                        dessser::gen::raql_top_output::t_ext id_1378 { id_1377.output };
                                        Pointer id_1379 { fun1373(id_1378, ssum_dst_1188) };
                                        Pointer id_1380 { fun20(id_1372, id_1379) };
                                        Pointer let_res_1381;
                                        {
                                          Pointer srec_dst_1194 { id_1380 };
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1382 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1383 { std::get<5 /* Stateful */>(id_1382) };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1384 { id_1383.operation };
                                          ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1385 { std::get<6 /* Top */>(id_1384) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1386 { id_1385.max_size };
                                          bool id_1387 { !(id_1386.has_value ()) };
                                          Pointer choose_res_1388;
                                          if (id_1387) {
                                            uint8_t id_1389 { 1 };
                                            Pointer id_1390 { srec_dst_1194.writeU8(id_1389) };
                                            choose_res_1388 = id_1390;
                                          } else {
                                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1391 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1392 { std::get<5 /* Stateful */>(id_1391) };
                                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1393 { id_1392.operation };
                                            ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_1394 { std::get<6 /* Top */>(id_1393) };
                                            std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1395 { id_1394.max_size };
                                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_1396 { id_1395.value() };
                                            uint8_t id_1397 { 0 };
                                            Pointer id_1398 { srec_dst_1194.writeU8(id_1397) };
                                            Pointer id_1399 { fun20(id_1396, id_1398) };
                                            choose_res_1388 = id_1399;
                                          }
                                          let_res_1381 = choose_res_1388;
                                        }
                                        Pointer id_1400 { fun20(id_1367, let_res_1381) };
                                        Pointer id_1401 { fun20(id_1362, id_1400) };
                                        Pointer id_1402 { fun20(id_1357, id_1401) };
                                        Pointer id_1403 { fun20(id_1352, id_1402) };
                                        Pointer id_1404 { fun20(id_1347, id_1403) };
                                        choose_res_1342 = id_1404;
                                      } else {
                                        uint16_t id_1405 { 7 };
                                        bool id_1406 { bool(label1_1187 == id_1405) };
                                        Void id_1407 { ((void)(assert(id_1406)), ::dessser::Void()) };
                                        (void)id_1407;
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1408 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1409 { std::get<5 /* Stateful */>(id_1408) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1410 { id_1409.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1411 { std::get<7 /* Past */>(id_1410) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1412 { id_1411.max_age };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1413 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1414 { std::get<5 /* Stateful */>(id_1413) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1415 { id_1414.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1416 { std::get<7 /* Past */>(id_1415) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1417 { id_1416.time };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1418 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1419 { std::get<5 /* Stateful */>(id_1418) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1420 { id_1419.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1421 { std::get<7 /* Past */>(id_1420) };
                                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1422 { id_1421.what };
                                        Pointer id_1423 { fun20(id_1422, ssum_dst_1188) };
                                        Pointer id_1424 { fun20(id_1417, id_1423) };
                                        Pointer id_1425 { fun20(id_1412, id_1424) };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1426 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1427 { std::get<5 /* Stateful */>(id_1426) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1428 { id_1427.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1429 { std::get<7 /* Past */>(id_1428) };
                                        bool id_1430 { id_1429.tumbling };
                                        uint8_t id_1431 { uint8_t(id_1430) };
                                        Pointer id_1432 { id_1425.writeU8(id_1431) };
                                        Pointer let_res_1433;
                                        {
                                          Pointer srec_dst_1192 { id_1432 };
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1434 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1435 { std::get<5 /* Stateful */>(id_1434) };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1436 { id_1435.operation };
                                          ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1437 { std::get<7 /* Past */>(id_1436) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1438 { id_1437.sample_size };
                                          bool id_1439 { !(id_1438.has_value ()) };
                                          Pointer choose_res_1440;
                                          if (id_1439) {
                                            uint8_t id_1441 { 1 };
                                            Pointer id_1442 { srec_dst_1192.writeU8(id_1441) };
                                            choose_res_1440 = id_1442;
                                          } else {
                                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1443 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_1444 { std::get<5 /* Stateful */>(id_1443) };
                                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_1445 { id_1444.operation };
                                            ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_1446 { std::get<7 /* Past */>(id_1445) };
                                            std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1447 { id_1446.sample_size };
                                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_1448 { id_1447.value() };
                                            uint8_t id_1449 { 0 };
                                            Pointer id_1450 { srec_dst_1192.writeU8(id_1449) };
                                            Pointer id_1451 { fun20(id_1448, id_1450) };
                                            choose_res_1440 = id_1451;
                                          }
                                          let_res_1433 = choose_res_1440;
                                        }
                                        choose_res_1342 = let_res_1433;
                                      }
                                      choose_res_1286 = choose_res_1342;
                                    }
                                    choose_res_1155 = choose_res_1286;
                                  }
                                  choose_res_1094 = choose_res_1155;
                                }
                                choose_res_1047 = choose_res_1094;
                              }
                              choose_res_1011 = choose_res_1047;
                            }
                            choose_res_920 = choose_res_1011;
                          }
                          let_res_917 = choose_res_920;
                        }
                        let_res_915 = let_res_917;
                      }
                      let_res_910 = let_res_915;
                    }
                    choose_res_889 = let_res_910;
                  } else {
                    uint16_t id_1452 { 6 };
                    bool id_1453 { bool(label1_1180 == id_1452) };
                    Void id_1454 { ((void)(assert(id_1453)), ::dessser::Void()) };
                    (void)id_1454;
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1455 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1456 { std::get<6 /* Generator */>(id_1455) };
                    uint16_t id_1457 { uint16_t(id_1456.index()) };
                    Pointer id_1458 { ssum_dst_1181.writeU16Le(id_1457) };
                    Pointer let_res_1459;
                    {
                      Pointer ssum_dst_1183 { id_1458 };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1460 { (*p_0).text };
                      ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1461 { std::get<6 /* Generator */>(id_1460) };
                      uint16_t id_1462 { uint16_t(id_1461.index()) };
                      uint16_t id_1463 { 0 };
                      bool id_1464 { bool(id_1462 == id_1463) };
                      Void id_1465 { ((void)(assert(id_1464)), ::dessser::Void()) };
                      (void)id_1465;
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1466 { (*p_0).text };
                      ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1467 { std::get<6 /* Generator */>(id_1466) };
                      ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_1468 { std::get<0 /* Split */>(id_1467) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1469 { std::get<1>(id_1468) };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1470 { (*p_0).text };
                      ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_1471 { std::get<6 /* Generator */>(id_1470) };
                      ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_1472 { std::get<0 /* Split */>(id_1471) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1473 { std::get<0>(id_1472) };
                      Pointer id_1474 { fun20(id_1473, ssum_dst_1183) };
                      Pointer id_1475 { fun20(id_1469, id_1474) };
                      let_res_1459 = id_1475;
                    }
                    choose_res_889 = let_res_1459;
                  }
                  choose_res_297 = choose_res_889;
                }
                choose_res_216 = choose_res_297;
              }
              choose_res_155 = choose_res_216;
            }
            choose_res_89 = choose_res_155;
          }
          choose_res_28 = choose_res_89;
        }
        let_res_25 = choose_res_28;
      }
      let_res_23 = let_res_25;
    }
    Pointer let_res_1476;
    {
      Pointer srec_dst_1299 { let_res_23 };
      uint32_t id_1477 { (*p_0).uniq_num };
      Pointer id_1478 { srec_dst_1299.writeU32Le(id_1477) };
      let_res_1476 = id_1478;
    }
    Pointer let_res_1479;
    {
      Pointer srec_dst_1300 { let_res_1476 };
      auto fun1480 { dessser::gen::raql_type::to_row_binary };
      dessser::gen::raql_type::t_ext id_1481 { (*p_0).typ };
      Pointer id_1482 { fun1480(id_1481, srec_dst_1300) };
      let_res_1479 = id_1482;
    }
    Pointer let_res_1483;
    {
      Pointer srec_dst_1301 { let_res_1479 };
      std::optional<dessser::gen::units::t_ext> id_1484 { (*p_0).units };
      bool id_1485 { !(id_1484.has_value ()) };
      Pointer choose_res_1486;
      if (id_1485) {
        uint8_t id_1487 { 1 };
        Pointer id_1488 { srec_dst_1301.writeU8(id_1487) };
        choose_res_1486 = id_1488;
      } else {
        auto fun1489 { dessser::gen::units::to_row_binary };
        std::optional<dessser::gen::units::t_ext> id_1490 { (*p_0).units };
        dessser::gen::units::t_ext id_1491 { id_1490.value() };
        uint8_t id_1492 { 0 };
        Pointer id_1493 { srec_dst_1301.writeU8(id_1492) };
        Pointer id_1494 { fun1489(id_1491, id_1493) };
        choose_res_1486 = id_1494;
      }
      let_res_1483 = choose_res_1486;
    }
    return let_res_1483;
  }
   };
  return fun20;
}
std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> to_row_binary(to_row_binary_init());

/* 
    (fun ("[NoState Void | ImmediateState Void | LocalState Void | GlobalState Void]")
      (if (eq (u16 0) (label-of (param 0))) (size 2) (if (eq (u16 1) (label-of (param 0))) (size 2) (if (eq (u16 2) (label-of (param 0))) (size 2) (seq (assert (eq (label-of (param 0)) (u16 3))) (size 2))))))
 */
static std::function<Size(::dessser::gen::raql_expr::lifespan const &)> lifespan_sersize_of_row_binary_init()
{
  std::function<Size(::dessser::gen::raql_expr::lifespan const &)> fun1495 { [&](::dessser::gen::raql_expr::lifespan p_0) {
    uint16_t id_1496 { 0 };
    uint16_t id_1497 { uint16_t(p_0) };
    bool id_1498 { bool(id_1496 == id_1497) };
    Size choose_res_1499;
    if (id_1498) {
      Size id_1500 { 2UL };
      choose_res_1499 = id_1500;
    } else {
      uint16_t id_1501 { 1 };
      uint16_t id_1502 { uint16_t(p_0) };
      bool id_1503 { bool(id_1501 == id_1502) };
      Size choose_res_1504;
      if (id_1503) {
        Size id_1505 { 2UL };
        choose_res_1504 = id_1505;
      } else {
        uint16_t id_1506 { 2 };
        uint16_t id_1507 { uint16_t(p_0) };
        bool id_1508 { bool(id_1506 == id_1507) };
        Size choose_res_1509;
        if (id_1508) {
          Size id_1510 { 2UL };
          choose_res_1509 = id_1510;
        } else {
          uint16_t id_1511 { uint16_t(p_0) };
          uint16_t id_1512 { 3 };
          bool id_1513 { bool(id_1511 == id_1512) };
          Void id_1514 { ((void)(assert(id_1513)), ::dessser::Void()) };
          (void)id_1514;
          Size id_1515 { 2UL };
          choose_res_1509 = id_1515;
        }
        choose_res_1504 = choose_res_1509;
      }
      choose_res_1499 = choose_res_1504;
    }
    return choose_res_1499;
  }
   };
  return fun1495;
}
std::function<Size(::dessser::gen::raql_expr::lifespan const &)> lifespan_sersize_of_row_binary(lifespan_sersize_of_row_binary_init());

/* 
    (fun ("{text: [Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]; uniq_num: U32; typ: $raql_type; units: $units?}")
      (let "sz_1177"
        (let "sz_1176"
          (add
            (let "sz_1059" (size 0)
              (let "label2_1060" (label-of (get-field "text" (param 0)))
                (if (eq (u16 0) (identifier "label2_1060"))
                  (let "sz_ref_1173"
                    (make-vec
                      (add (add (identifier "sz_1059") (size 2))
                        (let "n_ref_1171" (make-vec (cardinality (get-alt "Tuple" (get-field "text" (param 0)))))
                          (let "lebsz_ref_1172" (make-vec (u32 1))
                            (seq
                              (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1171")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1172")) (u8 7)))
                                (set-vec (u8 0) (identifier "lebsz_ref_1172") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1172")) (u32 1)))) 
                              (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1172"))))))))
                    (seq
                      (let "repeat_n_1174" (make-vec (i32 0))
                        (while (gt (to-i32 (cardinality (get-alt "Tuple" (get-field "text" (param 0))))) (unsafe-nth (u8 0) (identifier "repeat_n_1174")))
                          (seq
                            (set-vec (u8 0) (identifier "sz_ref_1173")
                              (add (unsafe-nth (u8 0) (identifier "sz_ref_1173")) (apply (myself "Size") (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1174")) (get-alt "Tuple" (get-field "text" (param 0)))))))
                            (set-vec (u8 0) (identifier "repeat_n_1174") (add (unsafe-nth (u8 0) (identifier "repeat_n_1174")) (i32 1)))))) 
                      (unsafe-nth (u8 0) (identifier "sz_ref_1173"))))
                  (if (eq (u16 1) (identifier "label2_1060"))
                    (let "sz_ref_1167"
                      (make-vec
                        (add (add (identifier "sz_1059") (size 2))
                          (let "n_ref_1165" (make-vec (cardinality (get-alt "Record" (get-field "text" (param 0)))))
                            (let "lebsz_ref_1166" (make-vec (u32 1))
                              (seq
                                (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1165")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1166")) (u8 7)))
                                  (set-vec (u8 0) (identifier "lebsz_ref_1166") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1166")) (u32 1)))) 
                                (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1166"))))))))
                      (seq
                        (let "repeat_n_1168" (make-vec (i32 0))
                          (while (gt (to-i32 (cardinality (get-alt "Record" (get-field "text" (param 0))))) (unsafe-nth (u8 0) (identifier "repeat_n_1168")))
                            (seq
                              (set-vec (u8 0) (identifier "sz_ref_1167")
                                (let "sz_1170"
                                  (let "sz_1169" (unsafe-nth (u8 0) (identifier "sz_ref_1167"))
                                    (add (identifier "sz_1169")
                                      (apply (ext-identifier field_name sersize-of-row-binary) (get-item 0 (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1168")) (get-alt "Record" (get-field "text" (param 0))))))))
                                  (add (identifier "sz_1170") (apply (myself "Size") (get-item 1 (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1168")) (get-alt "Record" (get-field "text" (param 0)))))))))
                              (set-vec (u8 0) (identifier "repeat_n_1168") (add (unsafe-nth (u8 0) (identifier "repeat_n_1168")) (i32 1)))))) 
                        (unsafe-nth (u8 0) (identifier "sz_ref_1167"))))
                    (if (eq (u16 2) (identifier "label2_1060"))
                      (let "sz_ref_1163"
                        (make-vec
                          (add (add (identifier "sz_1059") (size 2))
                            (let "n_ref_1161" (make-vec (cardinality (get-alt "Vector" (get-field "text" (param 0)))))
                              (let "lebsz_ref_1162" (make-vec (u32 1))
                                (seq
                                  (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1161")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1162")) (u8 7)))
                                    (set-vec (u8 0) (identifier "lebsz_ref_1162") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1162")) (u32 1)))) 
                                  (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1162"))))))))
                        (seq
                          (let "repeat_n_1164" (make-vec (i32 0))
                            (while (gt (to-i32 (cardinality (get-alt "Vector" (get-field "text" (param 0))))) (unsafe-nth (u8 0) (identifier "repeat_n_1164")))
                              (seq
                                (set-vec (u8 0) (identifier "sz_ref_1163")
                                  (add (unsafe-nth (u8 0) (identifier "sz_ref_1163")) (apply (myself "Size") (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1164")) (get-alt "Vector" (get-field "text" (param 0)))))))
                                (set-vec (u8 0) (identifier "repeat_n_1164") (add (unsafe-nth (u8 0) (identifier "repeat_n_1164")) (i32 1)))))) 
                          (unsafe-nth (u8 0) (identifier "sz_ref_1163"))))
                      (if (eq (u16 3) (identifier "label2_1060"))
                        (let "sz_1160"
                          (let "sz_ref_1156"
                            (make-vec
                              (add (add (identifier "sz_1059") (size 2))
                                (let "n_ref_1154" (make-vec (cardinality (get-item 0 (get-alt "Case" (get-field "text" (param 0))))))
                                  (let "lebsz_ref_1155" (make-vec (u32 1))
                                    (seq
                                      (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1154")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1155")) (u8 7)))
                                        (set-vec (u8 0) (identifier "lebsz_ref_1155") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1155")) (u32 1)))) 
                                      (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1155"))))))))
                            (seq
                              (let "repeat_n_1157" (make-vec (i32 0))
                                (while (gt (to-i32 (cardinality (get-item 0 (get-alt "Case" (get-field "text" (param 0)))))) (unsafe-nth (u8 0) (identifier "repeat_n_1157")))
                                  (seq
                                    (set-vec (u8 0) (identifier "sz_ref_1156")
                                      (add
                                        (add (unsafe-nth (u8 0) (identifier "sz_ref_1156"))
                                          (apply (myself "Size") (get-field "case_cond" (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1157")) (get-item 0 (get-alt "Case" (get-field "text" (param 0))))))))
                                        (apply (myself "Size") (get-field "case_cons" (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1157")) (get-item 0 (get-alt "Case" (get-field "text" (param 0)))))))))
                                    (set-vec (u8 0) (identifier "repeat_n_1157") (add (unsafe-nth (u8 0) (identifier "repeat_n_1157")) (i32 1)))))) 
                              (unsafe-nth (u8 0) (identifier "sz_ref_1156"))))
                          (if (is-null (get-item 1 (get-alt "Case" (get-field "text" (param 0))))) 
                            (add (identifier "sz_1160") (size 1)) (add (add (identifier "sz_1160") (apply (myself "Size") (force (get-item 1 (get-alt "Case" (get-field "text" (param 0))))))) (size 1))))
                        (if (eq (u16 4) (identifier "label2_1060"))
                          (if (eq (u16 0) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                            (let "label2_1148" (label-of (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))
                              (if (eq (u16 0) (identifier "label2_1148"))
                                (add (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                  (apply (ext-identifier raql_value sersize-of-row-binary) (get-alt "Const" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                (if (eq (u16 1) (identifier "label2_1148"))
                                  (add (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                    (apply (ext-identifier raql_variable sersize-of-row-binary) (get-alt "Variable" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                  (if (eq (u16 2) (identifier "label2_1148"))
                                    (add (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                      (apply (ext-identifier raql_binding_key sersize-of-row-binary) (get-alt "Binding" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                    (if (eq (u16 3) (identifier "label2_1148")) 
                                      (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                      (if (eq (u16 4) (identifier "label2_1148")) 
                                        (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                        (if (eq (u16 5) (identifier "label2_1148")) 
                                          (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                          (if (eq (u16 6) (identifier "label2_1148")) 
                                            (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                            (if (eq (u16 7) (identifier "label2_1148"))
                                              (let "sz_ref_1151"
                                                (make-vec
                                                  (add (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                                    (let "n_ref_1149" 
                                                      (make-vec (cardinality (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                                      (let "lebsz_ref_1150" 
                                                        (make-vec (u32 1))
                                                        (seq
                                                          (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1149")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1150")) (u8 7)))
                                                            (set-vec (u8 0) (identifier "lebsz_ref_1150") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1150")) (u32 1))))
                                                          (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1150"))))))))
                                                (seq
                                                  (let "repeat_n_1152" 
                                                    (make-vec (i32 0))
                                                    (while (gt (to-i32 (cardinality (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0))))))) (unsafe-nth (u8 0) (identifier "repeat_n_1152")))
                                                      (seq
                                                        (set-vec (u8 0) 
                                                          (identifier "sz_ref_1151")
                                                          (add (unsafe-nth (u8 0) (identifier "sz_ref_1151"))
                                                            (apply (ext-identifier raql_path_comp sersize-of-row-binary)
                                                              (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1152")) (get-alt "Path" (get-alt "SL0" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                                        (set-vec (u8 0) (identifier "repeat_n_1152") (add (unsafe-nth (u8 0) (identifier "repeat_n_1152")) (i32 1)))))) 
                                                  (unsafe-nth (u8 0) (identifier "sz_ref_1151")))) 
                                              (seq (assert (eq (identifier "label2_1148") (u16 8))) (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))))))))))))
                            (if (eq (u16 1) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                              (add
                                (let "sz_1139" (add (add (identifier "sz_1059") (size 2)) (size 2))
                                  (let "label2_1140" (label-of (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))
                                    (if (eq (u16 0) (identifier "label2_1140")) 
                                      (add (identifier "sz_1139") (size 2))
                                      (if (eq (u16 1) (identifier "label2_1140"))
                                        (add (add (identifier "sz_1139") (size 2))
                                          (apply (ext-identifier raql_type sersize-of-row-binary) (get-alt "Cast" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                        (if (eq (u16 2) (identifier "label2_1140")) 
                                          (add (identifier "sz_1139") (size 2))
                                          (if (eq (u16 3) (identifier "label2_1140"))
                                            (let "sz_1145"
                                              (add (add (identifier "sz_1139") (size 2))
                                                (apply (ext-identifier raql_type sersize-of-row-binary) (get-item 0 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                              (if (eq (u16 0) (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))) 
                                                (add (identifier "sz_1145") (size 2))
                                                (seq (assert (eq (label-of (get-item 1 (get-alt "Peek" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))) (u16 1)))
                                                  (add (identifier "sz_1145") (size 2)))))
                                            (if (eq (u16 4) (identifier "label2_1140")) 
                                              (add (identifier "sz_1139") (size 2))
                                              (if (eq (u16 5) (identifier "label2_1140")) 
                                                (add (identifier "sz_1139") (size 2))
                                                (if (eq (u16 6) (identifier "label2_1140")) 
                                                  (add (identifier "sz_1139") (size 2))
                                                  (if (eq (u16 7) (identifier "label2_1140")) 
                                                    (add (identifier "sz_1139") (size 2))
                                                    (if (eq (u16 8) (identifier "label2_1140")) 
                                                      (add (identifier "sz_1139") (size 2))
                                                      (if (eq (u16 9) (identifier "label2_1140")) 
                                                        (add (identifier "sz_1139") (size 2))
                                                        (if (eq (u16 10) (identifier "label2_1140")) 
                                                          (add (identifier "sz_1139") (size 2))
                                                          (if (eq (u16 11) (identifier "label2_1140")) 
                                                            (add (identifier "sz_1139") (size 2))
                                                            (if (eq (u16 12) (identifier "label2_1140")) 
                                                              (add (identifier "sz_1139") (size 2))
                                                              (if (eq (u16 13) (identifier "label2_1140")) 
                                                                (add (identifier "sz_1139") (size 2))
                                                                (if (eq (u16 14) (identifier "label2_1140")) 
                                                                  (add (identifier "sz_1139") (size 2))
                                                                  (if 
                                                                    (eq (u16 15) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 25) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 26) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 27) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 28) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 29) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 30) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 31) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 32) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 33) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 34) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 35) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 36) (identifier "label2_1140"))
                                                                    (add 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (add
                                                                    (let "n_ref_1142" 
                                                                    (make-vec (string-length (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))
                                                                    (let "lebsz_ref_1143" 
                                                                    (make-vec (u32 1))
                                                                    (seq
                                                                    (while 
                                                                    (ge (unsafe-nth (u8 0) (identifier "n_ref_1142")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1143")) (u8 7)))
                                                                    (set-vec (u8 0) (identifier "lebsz_ref_1143") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1143")) (u32 1))))
                                                                    (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1143"))))))
                                                                    (size-of-u32 (string-length (get-alt "Like" (get-item 0 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0))))))))))
                                                                    (if 
                                                                    (eq (u16 37) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 38) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2))
                                                                    (if 
                                                                    (eq (u16 39) (identifier "label2_1140")) 
                                                                    (add (identifier "sz_1139") (size 2)) 
                                                                    (seq (assert (eq (identifier "label2_1140") (u16 40))) (add (identifier "sz_1139") (size 2)))))))))))))))))))))))))))))))))))))))))))))
                                (apply (myself "Size") (get-item 1 (get-alt "SL1" (get-alt "Stateless" (get-field "text" (param 0)))))))
                              (if (eq (u16 2) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                                (let "sz_1134"
                                  (let "label2_1133" (label-of (get-item 0 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0))))))
                                    (if (eq (u16 0) (identifier "label2_1133")) 
                                      (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                      (if (eq (u16 1) (identifier "label2_1133")) 
                                        (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                        (if (eq (u16 2) (identifier "label2_1133")) 
                                          (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                          (seq (assert (eq (identifier "label2_1133") (u16 3))) (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2)))))))
                                  (let "sz_ref_1137"
                                    (make-vec
                                      (add (identifier "sz_1134")
                                        (let "n_ref_1135" (make-vec (cardinality (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                          (let "lebsz_ref_1136" (make-vec (u32 1))
                                            (seq
                                              (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1135")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1136")) (u8 7)))
                                                (set-vec (u8 0) (identifier "lebsz_ref_1136") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1136")) (u32 1)))) 
                                              (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1136"))))))))
                                    (seq
                                      (let "repeat_n_1138" (make-vec (i32 0))
                                        (while (gt (to-i32 (cardinality (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0))))))) (unsafe-nth (u8 0) (identifier "repeat_n_1138")))
                                          (seq
                                            (set-vec (u8 0) (identifier "sz_ref_1137")
                                              (add (unsafe-nth (u8 0) (identifier "sz_ref_1137"))
                                                (apply (myself "Size") (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1138")) (get-item 1 (get-alt "SL1s" (get-alt "Stateless" (get-field "text" (param 0)))))))))
                                            (set-vec (u8 0) (identifier "repeat_n_1138") (add (unsafe-nth (u8 0) (identifier "repeat_n_1138")) (i32 1)))))) 
                                      (unsafe-nth (u8 0) (identifier "sz_ref_1137")))))
                                (if (eq (u16 3) (label-of (get-alt "Stateless" (get-field "text" (param 0)))))
                                  (add
                                    (add
                                      (let "sz_1128" (add (add (identifier "sz_1059") (size 2)) (size 2))
                                        (let "label2_1129" (label-of (get-item 0 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0))))))
                                          (if (eq (u16 0) (identifier "label2_1129")) 
                                            (add (identifier "sz_1128") (size 2))
                                            (if (eq (u16 1) (identifier "label2_1129")) 
                                              (add (identifier "sz_1128") (size 2))
                                              (if (eq (u16 2) (identifier "label2_1129")) 
                                                (add (identifier "sz_1128") (size 2))
                                                (if (eq (u16 3) (identifier "label2_1129")) 
                                                  (add (identifier "sz_1128") (size 2))
                                                  (if (eq (u16 4) (identifier "label2_1129")) 
                                                    (add (identifier "sz_1128") (size 2))
                                                    (if (eq (u16 5) (identifier "label2_1129")) 
                                                      (add (identifier "sz_1128") (size 2))
                                                      (if (eq (u16 6) (identifier "label2_1129")) 
                                                        (add (identifier "sz_1128") (size 2))
                                                        (if (eq (u16 7) (identifier "label2_1129")) 
                                                          (add (identifier "sz_1128") (size 2))
                                                          (if (eq (u16 8) (identifier "label2_1129")) 
                                                            (add (identifier "sz_1128") (size 2))
                                                            (if (eq (u16 9) (identifier "label2_1129")) 
                                                              (add (identifier "sz_1128") (size 2))
                                                              (if (eq (u16 10) (identifier "label2_1129")) 
                                                                (add (identifier "sz_1128") (size 2))
                                                                (if (eq (u16 11) (identifier "label2_1129")) 
                                                                  (add (identifier "sz_1128") (size 2))
                                                                  (if 
                                                                    (eq (u16 12) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 13) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 14) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 15) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "label2_1129")) 
                                                                    (add (identifier "sz_1128") (size 2))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "label2_1129")) 
                                                                    (add (add (identifier "sz_1128") (size 2)) (size 1)) 
                                                                    (seq (assert (eq (identifier "label2_1129") (u16 25))) (add (identifier "sz_1128") (size 2))))))))))))))))))))))))))))))
                                      (apply (myself "Size") (get-item 1 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                    (apply (myself "Size") (get-item 2 (get-alt "SL2" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                  (seq (assert (eq (label-of (get-alt "Stateless" (get-field "text" (param 0)))) (u16 4)))
                                    (add
                                      (add
                                        (add
                                          (if (eq (u16 0) (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0))))))) 
                                            (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2))
                                            (seq (assert (eq (label-of (get-item 0 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))) (u16 1)))
                                              (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (size 2)))) 
                                          (apply (myself "Size") (get-item 1 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                        (apply (myself "Size") (get-item 2 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0)))))))
                                      (apply (myself "Size") (get-item 3 (get-alt "SL3" (get-alt "Stateless" (get-field "text" (param 0))))))))))))
                          (if (eq (u16 5) (identifier "label2_1060"))
                            (let "sz_1066"
                              (add
                                (if (is-null (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))) 
                                  (add (add (identifier "sz_1059") (size 2)) (size 1))
                                  (add (add (add (identifier "sz_1059") (size 2)) (apply (identifier "lifespan-sersize-of-row-binary") (force (get-field "lifespan" (get-alt "Stateful" (get-field "text" (param 0))))))) (size 1)))
                                (size 1))
                              (let "label2_1067" (label-of (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))
                                (if (eq (u16 0) (identifier "label2_1067"))
                                  (add
                                    (let "sz_1116" (add (identifier "sz_1066") (size 2))
                                      (let "label2_1117" (label-of (get-item 0 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                        (if (eq (u16 0) (identifier "label2_1117")) 
                                          (add (identifier "sz_1116") (size 2))
                                          (if (eq (u16 1) (identifier "label2_1117")) 
                                            (add (identifier "sz_1116") (size 2))
                                            (if (eq (u16 2) (identifier "label2_1117")) 
                                              (add (identifier "sz_1116") (size 2))
                                              (if (eq (u16 3) (identifier "label2_1117")) 
                                                (add (identifier "sz_1116") (size 2))
                                                (if (eq (u16 4) (identifier "label2_1117")) 
                                                  (add (identifier "sz_1116") (size 2))
                                                  (if (eq (u16 5) (identifier "label2_1117")) 
                                                    (add (identifier "sz_1116") (size 2))
                                                    (if (eq (u16 6) (identifier "label2_1117")) 
                                                      (add (identifier "sz_1116") (size 2))
                                                      (if (eq (u16 7) (identifier "label2_1117")) 
                                                        (add (identifier "sz_1116") (size 2))
                                                        (if (eq (u16 8) (identifier "label2_1117")) 
                                                          (add (identifier "sz_1116") (size 2))
                                                          (if (eq (u16 9) (identifier "label2_1117")) 
                                                            (add (identifier "sz_1116") (size 2))
                                                            (if (eq (u16 10) (identifier "label2_1117")) 
                                                              (add (identifier "sz_1116") (size 2))
                                                              (if (eq (u16 11) (identifier "label2_1117")) 
                                                                (add (add (add (add (identifier "sz_1116") (size 2)) (size 8)) (size 8)) (size 4))
                                                                (if (eq (u16 12) (identifier "label2_1117")) 
                                                                  (add (identifier "sz_1116") (size 2))
                                                                  (if 
                                                                    (eq (u16 13) (identifier "label2_1117")) 
                                                                    (add (identifier "sz_1116") (size 2)) 
                                                                    (seq (assert (eq (identifier "label2_1117") (u16 14))) (add (identifier "sz_1116") (size 2)))))))))))))))))))
                                    (apply (myself "Size") (get-item 1 (get-alt "SF1" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                  (if (eq (u16 1) (identifier "label2_1067"))
                                    (add
                                      (add
                                        (let "label2_1113" (label-of (get-item 0 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))
                                          (if (eq (u16 0) (identifier "label2_1113")) 
                                            (add (add (identifier "sz_1066") (size 2)) (size 2))
                                            (if (eq (u16 1) (identifier "label2_1113")) 
                                              (add (add (identifier "sz_1066") (size 2)) (size 2))
                                              (if (eq (u16 2) (identifier "label2_1113")) 
                                                (add (add (identifier "sz_1066") (size 2)) (size 2)) 
                                                (seq (assert (eq (identifier "label2_1113") (u16 3))) (add (add (identifier "sz_1066") (size 2)) (size 2)))))))
                                        (apply (myself "Size") (get-item 1 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                      (apply (myself "Size") (get-item 2 (get-alt "SF2" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                    (if (eq (u16 2) (identifier "label2_1067"))
                                      (add
                                        (add
                                          (add
                                            (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                              (add (add (identifier "sz_1066") (size 2)) (size 2))
                                              (if (eq (u16 1) (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                (add (add (identifier "sz_1066") (size 2)) (size 2))
                                                (seq (assert (eq (label-of (get-item 0 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 2)))
                                                  (add (add (add (identifier "sz_1066") (size 2)) (size 2)) (size 1)))))
                                            (apply (myself "Size") (get-item 1 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                          (apply (myself "Size") (get-item 2 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                        (apply (myself "Size") (get-item 3 (get-alt "SF3" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                      (if (eq (u16 3) (identifier "label2_1067"))
                                        (add
                                          (add
                                            (add
                                              (add
                                                (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                  (add (add (identifier "sz_1066") (size 2)) (size 2))
                                                  (seq (assert (eq (label-of (get-item 0 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                    (add (add (add (identifier "sz_1066") (size 2)) (size 2)) (size 1))))
                                                (apply (myself "Size") (get-item 1 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (apply (myself "Size") (get-item 2 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                            (apply (myself "Size") (get-item 3 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                          (apply (myself "Size") (get-item 4 (get-alt "SF4" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                        (if (eq (u16 4) (identifier "label2_1067"))
                                          (let "sz_1096"
                                            (add
                                              (add
                                                (add
                                                  (if (eq (u16 0) (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (add (add (identifier "sz_1066") (size 2)) (size 2))
                                                    (seq (assert (eq (label-of (get-item 0 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 1)))
                                                      (add (add (add (add (identifier "sz_1066") (size 2)) (size 2)) (size 1)) (size 1))))
                                                  (apply (myself "Size") (get-item 1 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                (apply (myself "Size") (get-item 2 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (apply (myself "Size") (get-item 3 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                            (let "sz_ref_1099"
                                              (make-vec
                                                (add (identifier "sz_1096")
                                                  (let "n_ref_1097" (make-vec (cardinality (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (let "lebsz_ref_1098" 
                                                      (make-vec (u32 1))
                                                      (seq
                                                        (while (ge (unsafe-nth (u8 0) (identifier "n_ref_1097")) (left-shift (unsafe-nth (u8 0) (identifier "lebsz_ref_1098")) (u8 7)))
                                                          (set-vec (u8 0) (identifier "lebsz_ref_1098") (add (unsafe-nth (u8 0) (identifier "lebsz_ref_1098")) (u32 1))))
                                                        (size-of-u32 (unsafe-nth (u8 0) (identifier "lebsz_ref_1098"))))))))
                                              (seq
                                                (let "repeat_n_1100" 
                                                  (make-vec (i32 0))
                                                  (while
                                                    (gt (to-i32 (cardinality (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (unsafe-nth (u8 0) (identifier "repeat_n_1100")))
                                                    (seq
                                                      (set-vec (u8 0) 
                                                        (identifier "sz_ref_1099")
                                                        (add (unsafe-nth (u8 0) (identifier "sz_ref_1099"))
                                                          (apply (myself "Size")
                                                            (unsafe-nth (unsafe-nth (u8 0) (identifier "repeat_n_1100")) (get-item 4 (get-alt "SF4s" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))))
                                                      (set-vec (u8 0) (identifier "repeat_n_1100") (add (unsafe-nth (u8 0) (identifier "repeat_n_1100")) (i32 1)))))) 
                                                (unsafe-nth (u8 0) (identifier "sz_ref_1099")))))
                                          (if (eq (u16 5) (identifier "label2_1067"))
                                            (add
                                              (add
                                                (add
                                                  (add
                                                    (add
                                                      (add
                                                        (seq (assert (eq (label-of (get-item 0 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) (u16 0)))
                                                          (add (add (identifier "sz_1066") (size 2)) (size 2)))
                                                        (apply (myself "Size") (get-item 1 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (apply (myself "Size") (get-item 2 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (apply (myself "Size") (get-item 3 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                  (apply (myself "Size") (get-item 4 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                (apply (myself "Size") (get-item 5 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (apply (myself "Size") (get-item 6 (get-alt "SF6" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                            (if (eq (u16 6) (identifier "label2_1067"))
                                              (add
                                                (add
                                                  (add
                                                    (add
                                                      (add
                                                        (let "sz_1075"
                                                          (add
                                                            (add (add (identifier "sz_1066") (size 2))
                                                              (apply 
                                                                (ext-identifier raql_top_output sersize-of-row-binary)
                                                                (get-field "output" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                            (apply (myself "Size") (get-field "size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                          (if (is-null (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                            (add (identifier "sz_1075") (size 1))
                                                            (add
                                                              (add (identifier "sz_1075")
                                                                (apply (myself "Size") (force (get-field "max_size" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))) 
                                                              (size 1)))) 
                                                        (apply (myself "Size") (get-field "what" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (apply (myself "Size") (get-field "by" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                    (apply (myself "Size") (get-field "time" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                  (apply (myself "Size") (get-field "duration" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                (apply (myself "Size") (get-field "sigmas" (get-alt "Top" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                              (seq (assert (eq (identifier "label2_1067") (u16 7)))
                                                (let "sz_1072"
                                                  (add
                                                    (add
                                                      (add
                                                        (add (add (identifier "sz_1066") (size 2))
                                                          (apply (myself "Size") (get-field "what" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                        (apply (myself "Size") (get-field "time" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))
                                                      (apply (myself "Size") (get-field "max_age" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0)))))))) 
                                                    (size 1))
                                                  (if (is-null (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))) 
                                                    (add (identifier "sz_1072") (size 1))
                                                    (add
                                                      (add (identifier "sz_1072")
                                                        (apply (myself "Size") (force (get-field "sample_size" (get-alt "Past" (get-field "operation" (get-alt "Stateful" (get-field "text" (param 0))))))))) 
                                                      (size 1))))))))))))))
                            (seq (assert (eq (identifier "label2_1060") (u16 6)))
                              (seq (assert (eq (label-of (get-alt "Generator" (get-field "text" (param 0)))) (u16 0)))
                                (add (add (add (add (identifier "sz_1059") (size 2)) (size 2)) (apply (myself "Size") (get-item 0 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0)))))))
                                  (apply (myself "Size") (get-item 1 (get-alt "Split" (get-alt "Generator" (get-field "text" (param 0))))))))))))))))) 
            (size 4)) (add (identifier "sz_1176") (apply (ext-identifier raql_type sersize-of-row-binary) (get-field "typ" (param 0)))))
        (if (is-null (get-field "units" (param 0))) (add (identifier "sz_1177") (size 1)) (add (add (identifier "sz_1177") (apply (ext-identifier units sersize-of-row-binary) (force (get-field "units" (param 0))))) (size 1)))))
 */
static std::function<Size(std::shared_ptr<::dessser::gen::raql_expr::t>  &)> sersize_of_row_binary_init()
{
  std::function<Size(std::shared_ptr<::dessser::gen::raql_expr::t>  &)> fun1516 { [&](std::shared_ptr<::dessser::gen::raql_expr::t>  p_0) {
    Size id_1517 { 0UL };
    Size let_res_1518;
    {
      Size sz_1059 { id_1517 };
      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1519 { (*p_0).text };
      uint16_t id_1520 { uint16_t(id_1519.index()) };
      Size let_res_1521;
      {
        uint16_t label2_1060 { id_1520 };
        uint16_t id_1522 { 0 };
        bool id_1523 { bool(id_1522 == label2_1060) };
        Size choose_res_1524;
        if (id_1523) {
          Size id_1525 { 2UL };
          Size id_1526 { Size(sz_1059 + id_1525) };
          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1527 { (*p_0).text };
          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1528 { std::get<0 /* Tuple */>(id_1527) };
          uint32_t id_1529 { id_1528.size() };
          Vec<1, uint32_t> id_1530 {  id_1529  };
          Size let_res_1531;
          {
            Vec<1, uint32_t> n_ref_1171 { id_1530 };
            uint32_t id_1532 { 1U };
            Vec<1, uint32_t> id_1533 {  id_1532  };
            Size let_res_1534;
            {
              Vec<1, uint32_t> lebsz_ref_1172 { id_1533 };
              bool while_flag_1535 { true };
              do {
                uint8_t id_1536 { 0 };
                uint32_t id_1537 { n_ref_1171[id_1536] };
                uint8_t id_1538 { 0 };
                uint32_t id_1539 { lebsz_ref_1172[id_1538] };
                uint8_t id_1540 { 7 };
                uint32_t id_1541 { uint32_t(id_1539 << id_1540) };
                bool id_1542 { bool(id_1537 >= id_1541) };
                while_flag_1535 = id_1542;
                if (while_flag_1535) {
                  uint8_t id_1543 { 0 };
                  uint8_t id_1544 { 0 };
                  uint32_t id_1545 { lebsz_ref_1172[id_1544] };
                  uint32_t id_1546 { 1U };
                  uint32_t id_1547 { uint32_t(id_1545 + id_1546) };
                  Void id_1548 { ((void)(lebsz_ref_1172[id_1543] = id_1547), ::dessser::Void()) };
                  (void)id_1548;
                }
              } while (while_flag_1535);
              (void)::dessser::Void();
              uint8_t id_1549 { 0 };
              uint32_t id_1550 { lebsz_ref_1172[id_1549] };
              Size id_1551 { Size(id_1550) };
              let_res_1534 = id_1551;
            }
            let_res_1531 = let_res_1534;
          }
          Size id_1552 { Size(id_1526 + let_res_1531) };
          Vec<1, Size> id_1553 {  id_1552  };
          Size let_res_1554;
          {
            Vec<1, Size> sz_ref_1173 { id_1553 };
            int32_t id_1555 { 0L };
            Vec<1, int32_t> id_1556 {  id_1555  };
            {
              Vec<1, int32_t> repeat_n_1174 { id_1556 };
              bool while_flag_1557 { true };
              do {
                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1558 { (*p_0).text };
                Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1559 { std::get<0 /* Tuple */>(id_1558) };
                uint32_t id_1560 { id_1559.size() };
                int32_t id_1561 { int32_t(id_1560) };
                uint8_t id_1562 { 0 };
                int32_t id_1563 { repeat_n_1174[id_1562] };
                bool id_1564 { bool(id_1561 > id_1563) };
                while_flag_1557 = id_1564;
                if (while_flag_1557) {
                  uint8_t id_1565 { 0 };
                  uint8_t id_1566 { 0 };
                  Size id_1567 { sz_ref_1173[id_1566] };
                  uint8_t id_1568 { 0 };
                  int32_t id_1569 { repeat_n_1174[id_1568] };
                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1570 { (*p_0).text };
                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1571 { std::get<0 /* Tuple */>(id_1570) };
                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_1572 { id_1571[id_1569] };
                  Size id_1573 { fun1516(id_1572) };
                  Size id_1574 { Size(id_1567 + id_1573) };
                  Void id_1575 { ((void)(sz_ref_1173[id_1565] = id_1574), ::dessser::Void()) };
                  (void)id_1575;
                  uint8_t id_1576 { 0 };
                  uint8_t id_1577 { 0 };
                  int32_t id_1578 { repeat_n_1174[id_1577] };
                  int32_t id_1579 { 1L };
                  int32_t id_1580 { int32_t(id_1578 + id_1579) };
                  Void id_1581 { ((void)(repeat_n_1174[id_1576] = id_1580), ::dessser::Void()) };
                  (void)id_1581;
                  (void)id_1581;
                }
              } while (while_flag_1557);
              (void)::dessser::Void();
            }
            (void)::dessser::Void();
            uint8_t id_1582 { 0 };
            Size id_1583 { sz_ref_1173[id_1582] };
            let_res_1554 = id_1583;
          }
          choose_res_1524 = let_res_1554;
        } else {
          uint16_t id_1584 { 1 };
          bool id_1585 { bool(id_1584 == label2_1060) };
          Size choose_res_1586;
          if (id_1585) {
            Size id_1587 { 2UL };
            Size id_1588 { Size(sz_1059 + id_1587) };
            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1589 { (*p_0).text };
            Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1590 { std::get<1 /* Record */>(id_1589) };
            uint32_t id_1591 { id_1590.size() };
            Vec<1, uint32_t> id_1592 {  id_1591  };
            Size let_res_1593;
            {
              Vec<1, uint32_t> n_ref_1165 { id_1592 };
              uint32_t id_1594 { 1U };
              Vec<1, uint32_t> id_1595 {  id_1594  };
              Size let_res_1596;
              {
                Vec<1, uint32_t> lebsz_ref_1166 { id_1595 };
                bool while_flag_1597 { true };
                do {
                  uint8_t id_1598 { 0 };
                  uint32_t id_1599 { n_ref_1165[id_1598] };
                  uint8_t id_1600 { 0 };
                  uint32_t id_1601 { lebsz_ref_1166[id_1600] };
                  uint8_t id_1602 { 7 };
                  uint32_t id_1603 { uint32_t(id_1601 << id_1602) };
                  bool id_1604 { bool(id_1599 >= id_1603) };
                  while_flag_1597 = id_1604;
                  if (while_flag_1597) {
                    uint8_t id_1605 { 0 };
                    uint8_t id_1606 { 0 };
                    uint32_t id_1607 { lebsz_ref_1166[id_1606] };
                    uint32_t id_1608 { 1U };
                    uint32_t id_1609 { uint32_t(id_1607 + id_1608) };
                    Void id_1610 { ((void)(lebsz_ref_1166[id_1605] = id_1609), ::dessser::Void()) };
                    (void)id_1610;
                  }
                } while (while_flag_1597);
                (void)::dessser::Void();
                uint8_t id_1611 { 0 };
                uint32_t id_1612 { lebsz_ref_1166[id_1611] };
                Size id_1613 { Size(id_1612) };
                let_res_1596 = id_1613;
              }
              let_res_1593 = let_res_1596;
            }
            Size id_1614 { Size(id_1588 + let_res_1593) };
            Vec<1, Size> id_1615 {  id_1614  };
            Size let_res_1616;
            {
              Vec<1, Size> sz_ref_1167 { id_1615 };
              int32_t id_1617 { 0L };
              Vec<1, int32_t> id_1618 {  id_1617  };
              {
                Vec<1, int32_t> repeat_n_1168 { id_1618 };
                bool while_flag_1619 { true };
                do {
                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1620 { (*p_0).text };
                  Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1621 { std::get<1 /* Record */>(id_1620) };
                  uint32_t id_1622 { id_1621.size() };
                  int32_t id_1623 { int32_t(id_1622) };
                  uint8_t id_1624 { 0 };
                  int32_t id_1625 { repeat_n_1168[id_1624] };
                  bool id_1626 { bool(id_1623 > id_1625) };
                  while_flag_1619 = id_1626;
                  if (while_flag_1619) {
                    uint8_t id_1627 { 0 };
                    uint8_t id_1628 { 0 };
                    Size id_1629 { sz_ref_1167[id_1628] };
                    Size let_res_1630;
                    {
                      Size sz_1169 { id_1629 };
                      auto fun1631 { dessser::gen::field_name::sersize_of_row_binary };
                      uint8_t id_1632 { 0 };
                      int32_t id_1633 { repeat_n_1168[id_1632] };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1634 { (*p_0).text };
                      Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1635 { std::get<1 /* Record */>(id_1634) };
                      ::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 id_1636 { id_1635[id_1633] };
                      dessser::gen::field_name::t_ext id_1637 { std::get<0>(id_1636) };
                      Size id_1638 { fun1631(id_1637) };
                      Size id_1639 { Size(sz_1169 + id_1638) };
                      let_res_1630 = id_1639;
                    }
                    Size let_res_1640;
                    {
                      Size sz_1170 { let_res_1630 };
                      uint8_t id_1641 { 0 };
                      int32_t id_1642 { repeat_n_1168[id_1641] };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1643 { (*p_0).text };
                      Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_1644 { std::get<1 /* Record */>(id_1643) };
                      ::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 id_1645 { id_1644[id_1642] };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1646 { std::get<1>(id_1645) };
                      Size id_1647 { fun1516(id_1646) };
                      Size id_1648 { Size(sz_1170 + id_1647) };
                      let_res_1640 = id_1648;
                    }
                    Void id_1649 { ((void)(sz_ref_1167[id_1627] = let_res_1640), ::dessser::Void()) };
                    (void)id_1649;
                    uint8_t id_1650 { 0 };
                    uint8_t id_1651 { 0 };
                    int32_t id_1652 { repeat_n_1168[id_1651] };
                    int32_t id_1653 { 1L };
                    int32_t id_1654 { int32_t(id_1652 + id_1653) };
                    Void id_1655 { ((void)(repeat_n_1168[id_1650] = id_1654), ::dessser::Void()) };
                    (void)id_1655;
                    (void)id_1655;
                  }
                } while (while_flag_1619);
                (void)::dessser::Void();
              }
              (void)::dessser::Void();
              uint8_t id_1656 { 0 };
              Size id_1657 { sz_ref_1167[id_1656] };
              let_res_1616 = id_1657;
            }
            choose_res_1586 = let_res_1616;
          } else {
            uint16_t id_1658 { 2 };
            bool id_1659 { bool(id_1658 == label2_1060) };
            Size choose_res_1660;
            if (id_1659) {
              Size id_1661 { 2UL };
              Size id_1662 { Size(sz_1059 + id_1661) };
              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1663 { (*p_0).text };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1664 { std::get<2 /* Vector */>(id_1663) };
              uint32_t id_1665 { id_1664.size() };
              Vec<1, uint32_t> id_1666 {  id_1665  };
              Size let_res_1667;
              {
                Vec<1, uint32_t> n_ref_1161 { id_1666 };
                uint32_t id_1668 { 1U };
                Vec<1, uint32_t> id_1669 {  id_1668  };
                Size let_res_1670;
                {
                  Vec<1, uint32_t> lebsz_ref_1162 { id_1669 };
                  bool while_flag_1671 { true };
                  do {
                    uint8_t id_1672 { 0 };
                    uint32_t id_1673 { n_ref_1161[id_1672] };
                    uint8_t id_1674 { 0 };
                    uint32_t id_1675 { lebsz_ref_1162[id_1674] };
                    uint8_t id_1676 { 7 };
                    uint32_t id_1677 { uint32_t(id_1675 << id_1676) };
                    bool id_1678 { bool(id_1673 >= id_1677) };
                    while_flag_1671 = id_1678;
                    if (while_flag_1671) {
                      uint8_t id_1679 { 0 };
                      uint8_t id_1680 { 0 };
                      uint32_t id_1681 { lebsz_ref_1162[id_1680] };
                      uint32_t id_1682 { 1U };
                      uint32_t id_1683 { uint32_t(id_1681 + id_1682) };
                      Void id_1684 { ((void)(lebsz_ref_1162[id_1679] = id_1683), ::dessser::Void()) };
                      (void)id_1684;
                    }
                  } while (while_flag_1671);
                  (void)::dessser::Void();
                  uint8_t id_1685 { 0 };
                  uint32_t id_1686 { lebsz_ref_1162[id_1685] };
                  Size id_1687 { Size(id_1686) };
                  let_res_1670 = id_1687;
                }
                let_res_1667 = let_res_1670;
              }
              Size id_1688 { Size(id_1662 + let_res_1667) };
              Vec<1, Size> id_1689 {  id_1688  };
              Size let_res_1690;
              {
                Vec<1, Size> sz_ref_1163 { id_1689 };
                int32_t id_1691 { 0L };
                Vec<1, int32_t> id_1692 {  id_1691  };
                {
                  Vec<1, int32_t> repeat_n_1164 { id_1692 };
                  bool while_flag_1693 { true };
                  do {
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1694 { (*p_0).text };
                    Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1695 { std::get<2 /* Vector */>(id_1694) };
                    uint32_t id_1696 { id_1695.size() };
                    int32_t id_1697 { int32_t(id_1696) };
                    uint8_t id_1698 { 0 };
                    int32_t id_1699 { repeat_n_1164[id_1698] };
                    bool id_1700 { bool(id_1697 > id_1699) };
                    while_flag_1693 = id_1700;
                    if (while_flag_1693) {
                      uint8_t id_1701 { 0 };
                      uint8_t id_1702 { 0 };
                      Size id_1703 { sz_ref_1163[id_1702] };
                      uint8_t id_1704 { 0 };
                      int32_t id_1705 { repeat_n_1164[id_1704] };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1706 { (*p_0).text };
                      Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1707 { std::get<2 /* Vector */>(id_1706) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_1708 { id_1707[id_1705] };
                      Size id_1709 { fun1516(id_1708) };
                      Size id_1710 { Size(id_1703 + id_1709) };
                      Void id_1711 { ((void)(sz_ref_1163[id_1701] = id_1710), ::dessser::Void()) };
                      (void)id_1711;
                      uint8_t id_1712 { 0 };
                      uint8_t id_1713 { 0 };
                      int32_t id_1714 { repeat_n_1164[id_1713] };
                      int32_t id_1715 { 1L };
                      int32_t id_1716 { int32_t(id_1714 + id_1715) };
                      Void id_1717 { ((void)(repeat_n_1164[id_1712] = id_1716), ::dessser::Void()) };
                      (void)id_1717;
                      (void)id_1717;
                    }
                  } while (while_flag_1693);
                  (void)::dessser::Void();
                }
                (void)::dessser::Void();
                uint8_t id_1718 { 0 };
                Size id_1719 { sz_ref_1163[id_1718] };
                let_res_1690 = id_1719;
              }
              choose_res_1660 = let_res_1690;
            } else {
              uint16_t id_1720 { 3 };
              bool id_1721 { bool(id_1720 == label2_1060) };
              Size choose_res_1722;
              if (id_1721) {
                Size id_1723 { 2UL };
                Size id_1724 { Size(sz_1059 + id_1723) };
                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1725 { (*p_0).text };
                ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1726 { std::get<3 /* Case */>(id_1725) };
                Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1727 { std::get<0>(id_1726) };
                uint32_t id_1728 { id_1727.size() };
                Vec<1, uint32_t> id_1729 {  id_1728  };
                Size let_res_1730;
                {
                  Vec<1, uint32_t> n_ref_1154 { id_1729 };
                  uint32_t id_1731 { 1U };
                  Vec<1, uint32_t> id_1732 {  id_1731  };
                  Size let_res_1733;
                  {
                    Vec<1, uint32_t> lebsz_ref_1155 { id_1732 };
                    bool while_flag_1734 { true };
                    do {
                      uint8_t id_1735 { 0 };
                      uint32_t id_1736 { n_ref_1154[id_1735] };
                      uint8_t id_1737 { 0 };
                      uint32_t id_1738 { lebsz_ref_1155[id_1737] };
                      uint8_t id_1739 { 7 };
                      uint32_t id_1740 { uint32_t(id_1738 << id_1739) };
                      bool id_1741 { bool(id_1736 >= id_1740) };
                      while_flag_1734 = id_1741;
                      if (while_flag_1734) {
                        uint8_t id_1742 { 0 };
                        uint8_t id_1743 { 0 };
                        uint32_t id_1744 { lebsz_ref_1155[id_1743] };
                        uint32_t id_1745 { 1U };
                        uint32_t id_1746 { uint32_t(id_1744 + id_1745) };
                        Void id_1747 { ((void)(lebsz_ref_1155[id_1742] = id_1746), ::dessser::Void()) };
                        (void)id_1747;
                      }
                    } while (while_flag_1734);
                    (void)::dessser::Void();
                    uint8_t id_1748 { 0 };
                    uint32_t id_1749 { lebsz_ref_1155[id_1748] };
                    Size id_1750 { Size(id_1749) };
                    let_res_1733 = id_1750;
                  }
                  let_res_1730 = let_res_1733;
                }
                Size id_1751 { Size(id_1724 + let_res_1730) };
                Vec<1, Size> id_1752 {  id_1751  };
                Size let_res_1753;
                {
                  Vec<1, Size> sz_ref_1156 { id_1752 };
                  int32_t id_1754 { 0L };
                  Vec<1, int32_t> id_1755 {  id_1754  };
                  {
                    Vec<1, int32_t> repeat_n_1157 { id_1755 };
                    bool while_flag_1756 { true };
                    do {
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1757 { (*p_0).text };
                      ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1758 { std::get<3 /* Case */>(id_1757) };
                      Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1759 { std::get<0>(id_1758) };
                      uint32_t id_1760 { id_1759.size() };
                      int32_t id_1761 { int32_t(id_1760) };
                      uint8_t id_1762 { 0 };
                      int32_t id_1763 { repeat_n_1157[id_1762] };
                      bool id_1764 { bool(id_1761 > id_1763) };
                      while_flag_1756 = id_1764;
                      if (while_flag_1756) {
                        uint8_t id_1765 { 0 };
                        uint8_t id_1766 { 0 };
                        Size id_1767 { sz_ref_1156[id_1766] };
                        uint8_t id_1768 { 0 };
                        int32_t id_1769 { repeat_n_1157[id_1768] };
                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1770 { (*p_0).text };
                        ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1771 { std::get<3 /* Case */>(id_1770) };
                        Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1772 { std::get<0>(id_1771) };
                        ::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa id_1773 { id_1772[id_1769] };
                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1774 { id_1773.case_cond };
                        Size id_1775 { fun1516(id_1774) };
                        Size id_1776 { Size(id_1767 + id_1775) };
                        uint8_t id_1777 { 0 };
                        int32_t id_1778 { repeat_n_1157[id_1777] };
                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1779 { (*p_0).text };
                        ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1780 { std::get<3 /* Case */>(id_1779) };
                        Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_1781 { std::get<0>(id_1780) };
                        ::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa id_1782 { id_1781[id_1778] };
                        std::shared_ptr<::dessser::gen::raql_expr::t>  id_1783 { id_1782.case_cons };
                        Size id_1784 { fun1516(id_1783) };
                        Size id_1785 { Size(id_1776 + id_1784) };
                        Void id_1786 { ((void)(sz_ref_1156[id_1765] = id_1785), ::dessser::Void()) };
                        (void)id_1786;
                        uint8_t id_1787 { 0 };
                        uint8_t id_1788 { 0 };
                        int32_t id_1789 { repeat_n_1157[id_1788] };
                        int32_t id_1790 { 1L };
                        int32_t id_1791 { int32_t(id_1789 + id_1790) };
                        Void id_1792 { ((void)(repeat_n_1157[id_1787] = id_1791), ::dessser::Void()) };
                        (void)id_1792;
                        (void)id_1792;
                      }
                    } while (while_flag_1756);
                    (void)::dessser::Void();
                  }
                  (void)::dessser::Void();
                  uint8_t id_1793 { 0 };
                  Size id_1794 { sz_ref_1156[id_1793] };
                  let_res_1753 = id_1794;
                }
                Size let_res_1795;
                {
                  Size sz_1160 { let_res_1753 };
                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1796 { (*p_0).text };
                  ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1797 { std::get<3 /* Case */>(id_1796) };
                  std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1798 { std::get<1>(id_1797) };
                  bool id_1799 { !(id_1798.has_value ()) };
                  Size choose_res_1800;
                  if (id_1799) {
                    Size id_1801 { 1UL };
                    Size id_1802 { Size(sz_1160 + id_1801) };
                    choose_res_1800 = id_1802;
                  } else {
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1803 { (*p_0).text };
                    ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_1804 { std::get<3 /* Case */>(id_1803) };
                    std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_1805 { std::get<1>(id_1804) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_1806 { id_1805.value() };
                    Size id_1807 { fun1516(id_1806) };
                    Size id_1808 { Size(sz_1160 + id_1807) };
                    Size id_1809 { 1UL };
                    Size id_1810 { Size(id_1808 + id_1809) };
                    choose_res_1800 = id_1810;
                  }
                  let_res_1795 = choose_res_1800;
                }
                choose_res_1722 = let_res_1795;
              } else {
                uint16_t id_1811 { 4 };
                bool id_1812 { bool(id_1811 == label2_1060) };
                Size choose_res_1813;
                if (id_1812) {
                  uint16_t id_1814 { 0 };
                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1815 { (*p_0).text };
                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1816 { std::get<4 /* Stateless */>(id_1815) };
                  uint16_t id_1817 { uint16_t(id_1816.index()) };
                  bool id_1818 { bool(id_1814 == id_1817) };
                  Size choose_res_1819;
                  if (id_1818) {
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1820 { (*p_0).text };
                    ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1821 { std::get<4 /* Stateless */>(id_1820) };
                    ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1822 { std::get<0 /* SL0 */>(id_1821) };
                    uint16_t id_1823 { uint16_t(id_1822.index()) };
                    Size let_res_1824;
                    {
                      uint16_t label2_1148 { id_1823 };
                      uint16_t id_1825 { 0 };
                      bool id_1826 { bool(id_1825 == label2_1148) };
                      Size choose_res_1827;
                      if (id_1826) {
                        Size id_1828 { 2UL };
                        Size id_1829 { Size(sz_1059 + id_1828) };
                        Size id_1830 { 2UL };
                        Size id_1831 { Size(id_1829 + id_1830) };
                        Size id_1832 { 2UL };
                        Size id_1833 { Size(id_1831 + id_1832) };
                        auto fun1834 { dessser::gen::raql_value::sersize_of_row_binary };
                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1835 { (*p_0).text };
                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1836 { std::get<4 /* Stateless */>(id_1835) };
                        ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1837 { std::get<0 /* SL0 */>(id_1836) };
                        dessser::gen::raql_value::t_ext id_1838 { std::get<0 /* Const */>(id_1837) };
                        Size id_1839 { fun1834(id_1838) };
                        Size id_1840 { Size(id_1833 + id_1839) };
                        choose_res_1827 = id_1840;
                      } else {
                        uint16_t id_1841 { 1 };
                        bool id_1842 { bool(id_1841 == label2_1148) };
                        Size choose_res_1843;
                        if (id_1842) {
                          Size id_1844 { 2UL };
                          Size id_1845 { Size(sz_1059 + id_1844) };
                          Size id_1846 { 2UL };
                          Size id_1847 { Size(id_1845 + id_1846) };
                          Size id_1848 { 2UL };
                          Size id_1849 { Size(id_1847 + id_1848) };
                          auto fun1850 { dessser::gen::raql_variable::sersize_of_row_binary };
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1851 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1852 { std::get<4 /* Stateless */>(id_1851) };
                          ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1853 { std::get<0 /* SL0 */>(id_1852) };
                          dessser::gen::raql_variable::t_ext id_1854 { std::get<1 /* Variable */>(id_1853) };
                          Size id_1855 { fun1850(id_1854) };
                          Size id_1856 { Size(id_1849 + id_1855) };
                          choose_res_1843 = id_1856;
                        } else {
                          uint16_t id_1857 { 2 };
                          bool id_1858 { bool(id_1857 == label2_1148) };
                          Size choose_res_1859;
                          if (id_1858) {
                            Size id_1860 { 2UL };
                            Size id_1861 { Size(sz_1059 + id_1860) };
                            Size id_1862 { 2UL };
                            Size id_1863 { Size(id_1861 + id_1862) };
                            Size id_1864 { 2UL };
                            Size id_1865 { Size(id_1863 + id_1864) };
                            auto fun1866 { dessser::gen::raql_binding_key::sersize_of_row_binary };
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1867 { (*p_0).text };
                            ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1868 { std::get<4 /* Stateless */>(id_1867) };
                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1869 { std::get<0 /* SL0 */>(id_1868) };
                            dessser::gen::raql_binding_key::t_ext id_1870 { std::get<2 /* Binding */>(id_1869) };
                            Size id_1871 { fun1866(id_1870) };
                            Size id_1872 { Size(id_1865 + id_1871) };
                            choose_res_1859 = id_1872;
                          } else {
                            uint16_t id_1873 { 3 };
                            bool id_1874 { bool(id_1873 == label2_1148) };
                            Size choose_res_1875;
                            if (id_1874) {
                              Size id_1876 { 2UL };
                              Size id_1877 { Size(sz_1059 + id_1876) };
                              Size id_1878 { 2UL };
                              Size id_1879 { Size(id_1877 + id_1878) };
                              Size id_1880 { 2UL };
                              Size id_1881 { Size(id_1879 + id_1880) };
                              choose_res_1875 = id_1881;
                            } else {
                              uint16_t id_1882 { 4 };
                              bool id_1883 { bool(id_1882 == label2_1148) };
                              Size choose_res_1884;
                              if (id_1883) {
                                Size id_1885 { 2UL };
                                Size id_1886 { Size(sz_1059 + id_1885) };
                                Size id_1887 { 2UL };
                                Size id_1888 { Size(id_1886 + id_1887) };
                                Size id_1889 { 2UL };
                                Size id_1890 { Size(id_1888 + id_1889) };
                                choose_res_1884 = id_1890;
                              } else {
                                uint16_t id_1891 { 5 };
                                bool id_1892 { bool(id_1891 == label2_1148) };
                                Size choose_res_1893;
                                if (id_1892) {
                                  Size id_1894 { 2UL };
                                  Size id_1895 { Size(sz_1059 + id_1894) };
                                  Size id_1896 { 2UL };
                                  Size id_1897 { Size(id_1895 + id_1896) };
                                  Size id_1898 { 2UL };
                                  Size id_1899 { Size(id_1897 + id_1898) };
                                  choose_res_1893 = id_1899;
                                } else {
                                  uint16_t id_1900 { 6 };
                                  bool id_1901 { bool(id_1900 == label2_1148) };
                                  Size choose_res_1902;
                                  if (id_1901) {
                                    Size id_1903 { 2UL };
                                    Size id_1904 { Size(sz_1059 + id_1903) };
                                    Size id_1905 { 2UL };
                                    Size id_1906 { Size(id_1904 + id_1905) };
                                    Size id_1907 { 2UL };
                                    Size id_1908 { Size(id_1906 + id_1907) };
                                    choose_res_1902 = id_1908;
                                  } else {
                                    uint16_t id_1909 { 7 };
                                    bool id_1910 { bool(id_1909 == label2_1148) };
                                    Size choose_res_1911;
                                    if (id_1910) {
                                      Size id_1912 { 2UL };
                                      Size id_1913 { Size(sz_1059 + id_1912) };
                                      Size id_1914 { 2UL };
                                      Size id_1915 { Size(id_1913 + id_1914) };
                                      Size id_1916 { 2UL };
                                      Size id_1917 { Size(id_1915 + id_1916) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1918 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1919 { std::get<4 /* Stateless */>(id_1918) };
                                      ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1920 { std::get<0 /* SL0 */>(id_1919) };
                                      Lst<dessser::gen::raql_path_comp::t_ext> id_1921 { std::get<7 /* Path */>(id_1920) };
                                      uint32_t id_1922 { id_1921.size() };
                                      Vec<1, uint32_t> id_1923 {  id_1922  };
                                      Size let_res_1924;
                                      {
                                        Vec<1, uint32_t> n_ref_1149 { id_1923 };
                                        uint32_t id_1925 { 1U };
                                        Vec<1, uint32_t> id_1926 {  id_1925  };
                                        Size let_res_1927;
                                        {
                                          Vec<1, uint32_t> lebsz_ref_1150 { id_1926 };
                                          bool while_flag_1928 { true };
                                          do {
                                            uint8_t id_1929 { 0 };
                                            uint32_t id_1930 { n_ref_1149[id_1929] };
                                            uint8_t id_1931 { 0 };
                                            uint32_t id_1932 { lebsz_ref_1150[id_1931] };
                                            uint8_t id_1933 { 7 };
                                            uint32_t id_1934 { uint32_t(id_1932 << id_1933) };
                                            bool id_1935 { bool(id_1930 >= id_1934) };
                                            while_flag_1928 = id_1935;
                                            if (while_flag_1928) {
                                              uint8_t id_1936 { 0 };
                                              uint8_t id_1937 { 0 };
                                              uint32_t id_1938 { lebsz_ref_1150[id_1937] };
                                              uint32_t id_1939 { 1U };
                                              uint32_t id_1940 { uint32_t(id_1938 + id_1939) };
                                              Void id_1941 { ((void)(lebsz_ref_1150[id_1936] = id_1940), ::dessser::Void()) };
                                              (void)id_1941;
                                            }
                                          } while (while_flag_1928);
                                          (void)::dessser::Void();
                                          uint8_t id_1942 { 0 };
                                          uint32_t id_1943 { lebsz_ref_1150[id_1942] };
                                          Size id_1944 { Size(id_1943) };
                                          let_res_1927 = id_1944;
                                        }
                                        let_res_1924 = let_res_1927;
                                      }
                                      Size id_1945 { Size(id_1917 + let_res_1924) };
                                      Vec<1, Size> id_1946 {  id_1945  };
                                      Size let_res_1947;
                                      {
                                        Vec<1, Size> sz_ref_1151 { id_1946 };
                                        int32_t id_1948 { 0L };
                                        Vec<1, int32_t> id_1949 {  id_1948  };
                                        {
                                          Vec<1, int32_t> repeat_n_1152 { id_1949 };
                                          bool while_flag_1950 { true };
                                          do {
                                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1951 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1952 { std::get<4 /* Stateless */>(id_1951) };
                                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1953 { std::get<0 /* SL0 */>(id_1952) };
                                            Lst<dessser::gen::raql_path_comp::t_ext> id_1954 { std::get<7 /* Path */>(id_1953) };
                                            uint32_t id_1955 { id_1954.size() };
                                            int32_t id_1956 { int32_t(id_1955) };
                                            uint8_t id_1957 { 0 };
                                            int32_t id_1958 { repeat_n_1152[id_1957] };
                                            bool id_1959 { bool(id_1956 > id_1958) };
                                            while_flag_1950 = id_1959;
                                            if (while_flag_1950) {
                                              uint8_t id_1960 { 0 };
                                              uint8_t id_1961 { 0 };
                                              Size id_1962 { sz_ref_1151[id_1961] };
                                              auto fun1963 { dessser::gen::raql_path_comp::sersize_of_row_binary };
                                              uint8_t id_1964 { 0 };
                                              int32_t id_1965 { repeat_n_1152[id_1964] };
                                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1966 { (*p_0).text };
                                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1967 { std::get<4 /* Stateless */>(id_1966) };
                                              ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_1968 { std::get<0 /* SL0 */>(id_1967) };
                                              Lst<dessser::gen::raql_path_comp::t_ext> id_1969 { std::get<7 /* Path */>(id_1968) };
                                              dessser::gen::raql_path_comp::t_ext id_1970 { id_1969[id_1965] };
                                              Size id_1971 { fun1963(id_1970) };
                                              Size id_1972 { Size(id_1962 + id_1971) };
                                              Void id_1973 { ((void)(sz_ref_1151[id_1960] = id_1972), ::dessser::Void()) };
                                              (void)id_1973;
                                              uint8_t id_1974 { 0 };
                                              uint8_t id_1975 { 0 };
                                              int32_t id_1976 { repeat_n_1152[id_1975] };
                                              int32_t id_1977 { 1L };
                                              int32_t id_1978 { int32_t(id_1976 + id_1977) };
                                              Void id_1979 { ((void)(repeat_n_1152[id_1974] = id_1978), ::dessser::Void()) };
                                              (void)id_1979;
                                              (void)id_1979;
                                            }
                                          } while (while_flag_1950);
                                          (void)::dessser::Void();
                                        }
                                        (void)::dessser::Void();
                                        uint8_t id_1980 { 0 };
                                        Size id_1981 { sz_ref_1151[id_1980] };
                                        let_res_1947 = id_1981;
                                      }
                                      choose_res_1911 = let_res_1947;
                                    } else {
                                      uint16_t id_1982 { 8 };
                                      bool id_1983 { bool(label2_1148 == id_1982) };
                                      Void id_1984 { ((void)(assert(id_1983)), ::dessser::Void()) };
                                      (void)id_1984;
                                      Size id_1985 { 2UL };
                                      Size id_1986 { Size(sz_1059 + id_1985) };
                                      Size id_1987 { 2UL };
                                      Size id_1988 { Size(id_1986 + id_1987) };
                                      Size id_1989 { 2UL };
                                      Size id_1990 { Size(id_1988 + id_1989) };
                                      choose_res_1911 = id_1990;
                                    }
                                    choose_res_1902 = choose_res_1911;
                                  }
                                  choose_res_1893 = choose_res_1902;
                                }
                                choose_res_1884 = choose_res_1893;
                              }
                              choose_res_1875 = choose_res_1884;
                            }
                            choose_res_1859 = choose_res_1875;
                          }
                          choose_res_1843 = choose_res_1859;
                        }
                        choose_res_1827 = choose_res_1843;
                      }
                      let_res_1824 = choose_res_1827;
                    }
                    choose_res_1819 = let_res_1824;
                  } else {
                    uint16_t id_1991 { 1 };
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_1992 { (*p_0).text };
                    ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_1993 { std::get<4 /* Stateless */>(id_1992) };
                    uint16_t id_1994 { uint16_t(id_1993.index()) };
                    bool id_1995 { bool(id_1991 == id_1994) };
                    Size choose_res_1996;
                    if (id_1995) {
                      Size id_1997 { 2UL };
                      Size id_1998 { Size(sz_1059 + id_1997) };
                      Size id_1999 { 2UL };
                      Size id_2000 { Size(id_1998 + id_1999) };
                      Size let_res_2001;
                      {
                        Size sz_1139 { id_2000 };
                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2002 { (*p_0).text };
                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2003 { std::get<4 /* Stateless */>(id_2002) };
                        ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2004 { std::get<1 /* SL1 */>(id_2003) };
                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_2005 { std::get<0>(id_2004) };
                        uint16_t id_2006 { uint16_t(id_2005.index()) };
                        Size let_res_2007;
                        {
                          uint16_t label2_1140 { id_2006 };
                          uint16_t id_2008 { 0 };
                          bool id_2009 { bool(id_2008 == label2_1140) };
                          Size choose_res_2010;
                          if (id_2009) {
                            Size id_2011 { 2UL };
                            Size id_2012 { Size(sz_1139 + id_2011) };
                            choose_res_2010 = id_2012;
                          } else {
                            uint16_t id_2013 { 1 };
                            bool id_2014 { bool(id_2013 == label2_1140) };
                            Size choose_res_2015;
                            if (id_2014) {
                              Size id_2016 { 2UL };
                              Size id_2017 { Size(sz_1139 + id_2016) };
                              auto fun2018 { dessser::gen::raql_type::sersize_of_row_binary };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2019 { (*p_0).text };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2020 { std::get<4 /* Stateless */>(id_2019) };
                              ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2021 { std::get<1 /* SL1 */>(id_2020) };
                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_2022 { std::get<0>(id_2021) };
                              dessser::gen::raql_type::t_ext id_2023 { std::get<1 /* Cast */>(id_2022) };
                              Size id_2024 { fun2018(id_2023) };
                              Size id_2025 { Size(id_2017 + id_2024) };
                              choose_res_2015 = id_2025;
                            } else {
                              uint16_t id_2026 { 2 };
                              bool id_2027 { bool(id_2026 == label2_1140) };
                              Size choose_res_2028;
                              if (id_2027) {
                                Size id_2029 { 2UL };
                                Size id_2030 { Size(sz_1139 + id_2029) };
                                choose_res_2028 = id_2030;
                              } else {
                                uint16_t id_2031 { 3 };
                                bool id_2032 { bool(id_2031 == label2_1140) };
                                Size choose_res_2033;
                                if (id_2032) {
                                  Size id_2034 { 2UL };
                                  Size id_2035 { Size(sz_1139 + id_2034) };
                                  auto fun2036 { dessser::gen::raql_type::sersize_of_row_binary };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2037 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2038 { std::get<4 /* Stateless */>(id_2037) };
                                  ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2039 { std::get<1 /* SL1 */>(id_2038) };
                                  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_2040 { std::get<0>(id_2039) };
                                  ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_2041 { std::get<3 /* Peek */>(id_2040) };
                                  dessser::gen::raql_type::t_ext id_2042 { std::get<0>(id_2041) };
                                  Size id_2043 { fun2036(id_2042) };
                                  Size id_2044 { Size(id_2035 + id_2043) };
                                  Size let_res_2045;
                                  {
                                    Size sz_1145 { id_2044 };
                                    uint16_t id_2046 { 0 };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2047 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2048 { std::get<4 /* Stateless */>(id_2047) };
                                    ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2049 { std::get<1 /* SL1 */>(id_2048) };
                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_2050 { std::get<0>(id_2049) };
                                    ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_2051 { std::get<3 /* Peek */>(id_2050) };
                                    ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b id_2052 { std::get<1>(id_2051) };
                                    uint16_t id_2053 { uint16_t(id_2052) };
                                    bool id_2054 { bool(id_2046 == id_2053) };
                                    Size choose_res_2055;
                                    if (id_2054) {
                                      Size id_2056 { 2UL };
                                      Size id_2057 { Size(sz_1145 + id_2056) };
                                      choose_res_2055 = id_2057;
                                    } else {
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2058 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2059 { std::get<4 /* Stateless */>(id_2058) };
                                      ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2060 { std::get<1 /* SL1 */>(id_2059) };
                                      ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_2061 { std::get<0>(id_2060) };
                                      ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_2062 { std::get<3 /* Peek */>(id_2061) };
                                      ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b id_2063 { std::get<1>(id_2062) };
                                      uint16_t id_2064 { uint16_t(id_2063) };
                                      uint16_t id_2065 { 1 };
                                      bool id_2066 { bool(id_2064 == id_2065) };
                                      Void id_2067 { ((void)(assert(id_2066)), ::dessser::Void()) };
                                      (void)id_2067;
                                      Size id_2068 { 2UL };
                                      Size id_2069 { Size(sz_1145 + id_2068) };
                                      choose_res_2055 = id_2069;
                                    }
                                    let_res_2045 = choose_res_2055;
                                  }
                                  choose_res_2033 = let_res_2045;
                                } else {
                                  uint16_t id_2070 { 4 };
                                  bool id_2071 { bool(id_2070 == label2_1140) };
                                  Size choose_res_2072;
                                  if (id_2071) {
                                    Size id_2073 { 2UL };
                                    Size id_2074 { Size(sz_1139 + id_2073) };
                                    choose_res_2072 = id_2074;
                                  } else {
                                    uint16_t id_2075 { 5 };
                                    bool id_2076 { bool(id_2075 == label2_1140) };
                                    Size choose_res_2077;
                                    if (id_2076) {
                                      Size id_2078 { 2UL };
                                      Size id_2079 { Size(sz_1139 + id_2078) };
                                      choose_res_2077 = id_2079;
                                    } else {
                                      uint16_t id_2080 { 6 };
                                      bool id_2081 { bool(id_2080 == label2_1140) };
                                      Size choose_res_2082;
                                      if (id_2081) {
                                        Size id_2083 { 2UL };
                                        Size id_2084 { Size(sz_1139 + id_2083) };
                                        choose_res_2082 = id_2084;
                                      } else {
                                        uint16_t id_2085 { 7 };
                                        bool id_2086 { bool(id_2085 == label2_1140) };
                                        Size choose_res_2087;
                                        if (id_2086) {
                                          Size id_2088 { 2UL };
                                          Size id_2089 { Size(sz_1139 + id_2088) };
                                          choose_res_2087 = id_2089;
                                        } else {
                                          uint16_t id_2090 { 8 };
                                          bool id_2091 { bool(id_2090 == label2_1140) };
                                          Size choose_res_2092;
                                          if (id_2091) {
                                            Size id_2093 { 2UL };
                                            Size id_2094 { Size(sz_1139 + id_2093) };
                                            choose_res_2092 = id_2094;
                                          } else {
                                            uint16_t id_2095 { 9 };
                                            bool id_2096 { bool(id_2095 == label2_1140) };
                                            Size choose_res_2097;
                                            if (id_2096) {
                                              Size id_2098 { 2UL };
                                              Size id_2099 { Size(sz_1139 + id_2098) };
                                              choose_res_2097 = id_2099;
                                            } else {
                                              uint16_t id_2100 { 10 };
                                              bool id_2101 { bool(id_2100 == label2_1140) };
                                              Size choose_res_2102;
                                              if (id_2101) {
                                                Size id_2103 { 2UL };
                                                Size id_2104 { Size(sz_1139 + id_2103) };
                                                choose_res_2102 = id_2104;
                                              } else {
                                                uint16_t id_2105 { 11 };
                                                bool id_2106 { bool(id_2105 == label2_1140) };
                                                Size choose_res_2107;
                                                if (id_2106) {
                                                  Size id_2108 { 2UL };
                                                  Size id_2109 { Size(sz_1139 + id_2108) };
                                                  choose_res_2107 = id_2109;
                                                } else {
                                                  uint16_t id_2110 { 12 };
                                                  bool id_2111 { bool(id_2110 == label2_1140) };
                                                  Size choose_res_2112;
                                                  if (id_2111) {
                                                    Size id_2113 { 2UL };
                                                    Size id_2114 { Size(sz_1139 + id_2113) };
                                                    choose_res_2112 = id_2114;
                                                  } else {
                                                    uint16_t id_2115 { 13 };
                                                    bool id_2116 { bool(id_2115 == label2_1140) };
                                                    Size choose_res_2117;
                                                    if (id_2116) {
                                                      Size id_2118 { 2UL };
                                                      Size id_2119 { Size(sz_1139 + id_2118) };
                                                      choose_res_2117 = id_2119;
                                                    } else {
                                                      uint16_t id_2120 { 14 };
                                                      bool id_2121 { bool(id_2120 == label2_1140) };
                                                      Size choose_res_2122;
                                                      if (id_2121) {
                                                        Size id_2123 { 2UL };
                                                        Size id_2124 { Size(sz_1139 + id_2123) };
                                                        choose_res_2122 = id_2124;
                                                      } else {
                                                        uint16_t id_2125 { 15 };
                                                        bool id_2126 { bool(id_2125 == label2_1140) };
                                                        Size choose_res_2127;
                                                        if (id_2126) {
                                                          Size id_2128 { 2UL };
                                                          Size id_2129 { Size(sz_1139 + id_2128) };
                                                          choose_res_2127 = id_2129;
                                                        } else {
                                                          uint16_t id_2130 { 16 };
                                                          bool id_2131 { bool(id_2130 == label2_1140) };
                                                          Size choose_res_2132;
                                                          if (id_2131) {
                                                            Size id_2133 { 2UL };
                                                            Size id_2134 { Size(sz_1139 + id_2133) };
                                                            choose_res_2132 = id_2134;
                                                          } else {
                                                            uint16_t id_2135 { 17 };
                                                            bool id_2136 { bool(id_2135 == label2_1140) };
                                                            Size choose_res_2137;
                                                            if (id_2136) {
                                                              Size id_2138 { 2UL };
                                                              Size id_2139 { Size(sz_1139 + id_2138) };
                                                              choose_res_2137 = id_2139;
                                                            } else {
                                                              uint16_t id_2140 { 18 };
                                                              bool id_2141 { bool(id_2140 == label2_1140) };
                                                              Size choose_res_2142;
                                                              if (id_2141) {
                                                                Size id_2143 { 2UL };
                                                                Size id_2144 { Size(sz_1139 + id_2143) };
                                                                choose_res_2142 = id_2144;
                                                              } else {
                                                                uint16_t id_2145 { 19 };
                                                                bool id_2146 { bool(id_2145 == label2_1140) };
                                                                Size choose_res_2147;
                                                                if (id_2146) {
                                                                  Size id_2148 { 2UL };
                                                                  Size id_2149 { Size(sz_1139 + id_2148) };
                                                                  choose_res_2147 = id_2149;
                                                                } else {
                                                                  uint16_t id_2150 { 20 };
                                                                  bool id_2151 { bool(id_2150 == label2_1140) };
                                                                  Size choose_res_2152;
                                                                  if (id_2151) {
                                                                    Size id_2153 { 2UL };
                                                                    Size id_2154 { Size(sz_1139 + id_2153) };
                                                                    choose_res_2152 = id_2154;
                                                                  } else {
                                                                    uint16_t id_2155 { 21 };
                                                                    bool id_2156 { bool(id_2155 == label2_1140) };
                                                                    Size choose_res_2157;
                                                                    if (id_2156) {
                                                                      Size id_2158 { 2UL };
                                                                      Size id_2159 { Size(sz_1139 + id_2158) };
                                                                      choose_res_2157 = id_2159;
                                                                    } else {
                                                                      uint16_t id_2160 { 22 };
                                                                      bool id_2161 { bool(id_2160 == label2_1140) };
                                                                      Size choose_res_2162;
                                                                      if (id_2161) {
                                                                        Size id_2163 { 2UL };
                                                                        Size id_2164 { Size(sz_1139 + id_2163) };
                                                                        choose_res_2162 = id_2164;
                                                                      } else {
                                                                        uint16_t id_2165 { 23 };
                                                                        bool id_2166 { bool(id_2165 == label2_1140) };
                                                                        Size choose_res_2167;
                                                                        if (id_2166) {
                                                                          Size id_2168 { 2UL };
                                                                          Size id_2169 { Size(sz_1139 + id_2168) };
                                                                          choose_res_2167 = id_2169;
                                                                        } else {
                                                                          uint16_t id_2170 { 24 };
                                                                          bool id_2171 { bool(id_2170 == label2_1140) };
                                                                          Size choose_res_2172;
                                                                          if (id_2171) {
                                                                            Size id_2173 { 2UL };
                                                                            Size id_2174 { Size(sz_1139 + id_2173) };
                                                                            choose_res_2172 = id_2174;
                                                                          } else {
                                                                            uint16_t id_2175 { 25 };
                                                                            bool id_2176 { bool(id_2175 == label2_1140) };
                                                                            Size choose_res_2177;
                                                                            if (id_2176) {
                                                                              Size id_2178 { 2UL };
                                                                              Size id_2179 { Size(sz_1139 + id_2178) };
                                                                              choose_res_2177 = id_2179;
                                                                            } else {
                                                                              uint16_t id_2180 { 26 };
                                                                              bool id_2181 { bool(id_2180 == label2_1140) };
                                                                              Size choose_res_2182;
                                                                              if (id_2181) {
                                                                                Size id_2183 { 2UL };
                                                                                Size id_2184 { Size(sz_1139 + id_2183) };
                                                                                choose_res_2182 = id_2184;
                                                                              } else {
                                                                                uint16_t id_2185 { 27 };
                                                                                bool id_2186 { bool(id_2185 == label2_1140) };
                                                                                Size choose_res_2187;
                                                                                if (id_2186) {
                                                                                  Size id_2188 { 2UL };
                                                                                  Size id_2189 { Size(sz_1139 + id_2188) };
                                                                                  choose_res_2187 = id_2189;
                                                                                } else {
                                                                                  uint16_t id_2190 { 28 };
                                                                                  bool id_2191 { bool(id_2190 == label2_1140) };
                                                                                  Size choose_res_2192;
                                                                                  if (id_2191) {
                                                                                    Size id_2193 { 2UL };
                                                                                    Size id_2194 { Size(sz_1139 + id_2193) };
                                                                                    choose_res_2192 = id_2194;
                                                                                  } else {
                                                                                    uint16_t id_2195 { 29 };
                                                                                    bool id_2196 { bool(id_2195 == label2_1140) };
                                                                                    Size choose_res_2197;
                                                                                    if (id_2196) {
                                                                                      Size id_2198 { 2UL };
                                                                                      Size id_2199 { Size(sz_1139 + id_2198) };
                                                                                      choose_res_2197 = id_2199;
                                                                                    } else {
                                                                                      uint16_t id_2200 { 30 };
                                                                                      bool id_2201 { bool(id_2200 == label2_1140) };
                                                                                      Size choose_res_2202;
                                                                                      if (id_2201) {
                                                                                        Size id_2203 { 2UL };
                                                                                        Size id_2204 { Size(sz_1139 + id_2203) };
                                                                                        choose_res_2202 = id_2204;
                                                                                      } else {
                                                                                        uint16_t id_2205 { 31 };
                                                                                        bool id_2206 { bool(id_2205 == label2_1140) };
                                                                                        Size choose_res_2207;
                                                                                        if (id_2206) {
                                                                                          Size id_2208 { 2UL };
                                                                                          Size id_2209 { Size(sz_1139 + id_2208) };
                                                                                          choose_res_2207 = id_2209;
                                                                                        } else {
                                                                                          uint16_t id_2210 { 32 };
                                                                                          bool id_2211 { bool(id_2210 == label2_1140) };
                                                                                          Size choose_res_2212;
                                                                                          if (id_2211) {
                                                                                            Size id_2213 { 2UL };
                                                                                            Size id_2214 { Size(sz_1139 + id_2213) };
                                                                                            choose_res_2212 = id_2214;
                                                                                          } else {
                                                                                            uint16_t id_2215 { 33 };
                                                                                            bool id_2216 { bool(id_2215 == label2_1140) };
                                                                                            Size choose_res_2217;
                                                                                            if (id_2216) {
                                                                                              Size id_2218 { 2UL };
                                                                                              Size id_2219 { Size(sz_1139 + id_2218) };
                                                                                              choose_res_2217 = id_2219;
                                                                                            } else {
                                                                                              uint16_t id_2220 { 34 };
                                                                                              bool id_2221 { bool(id_2220 == label2_1140) };
                                                                                              Size choose_res_2222;
                                                                                              if (id_2221) {
                                                                                                Size id_2223 { 2UL };
                                                                                                Size id_2224 { Size(sz_1139 + id_2223) };
                                                                                                choose_res_2222 = id_2224;
                                                                                              } else {
                                                                                                uint16_t id_2225 { 35 };
                                                                                                bool id_2226 { bool(id_2225 == label2_1140) };
                                                                                                Size choose_res_2227;
                                                                                                if (id_2226) {
                                                                                                  Size id_2228 { 2UL };
                                                                                                  Size id_2229 { Size(sz_1139 + id_2228) };
                                                                                                  choose_res_2227 = id_2229;
                                                                                                } else {
                                                                                                  uint16_t id_2230 { 36 };
                                                                                                  bool id_2231 { bool(id_2230 == label2_1140) };
                                                                                                  Size choose_res_2232;
                                                                                                  if (id_2231) {
                                                                                                    Size id_2233 { 2UL };
                                                                                                    Size id_2234 { Size(sz_1139 + id_2233) };
                                                                                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2235 { (*p_0).text };
                                                                                                    ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2236 { std::get<4 /* Stateless */>(id_2235) };
                                                                                                    ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2237 { std::get<1 /* SL1 */>(id_2236) };
                                                                                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_2238 { std::get<0>(id_2237) };
                                                                                                    std::string id_2239 { std::get<36 /* Like */>(id_2238) };
                                                                                                    uint32_t id_2240 { (uint32_t)id_2239.size() };
                                                                                                    Vec<1, uint32_t> id_2241 {  id_2240  };
                                                                                                    Size let_res_2242;
                                                                                                    {
                                                                                                      Vec<1, uint32_t> n_ref_1142 { id_2241 };
                                                                                                      uint32_t id_2243 { 1U };
                                                                                                      Vec<1, uint32_t> id_2244 {  id_2243  };
                                                                                                      Size let_res_2245;
                                                                                                      {
                                                                                                        Vec<1, uint32_t> lebsz_ref_1143 { id_2244 };
                                                                                                        bool while_flag_2246 { true };
                                                                                                        do {
                                                                                                          uint8_t id_2247 { 0 };
                                                                                                          uint32_t id_2248 { n_ref_1142[id_2247] };
                                                                                                          uint8_t id_2249 { 0 };
                                                                                                          uint32_t id_2250 { lebsz_ref_1143[id_2249] };
                                                                                                          uint8_t id_2251 { 7 };
                                                                                                          uint32_t id_2252 { uint32_t(id_2250 << id_2251) };
                                                                                                          bool id_2253 { bool(id_2248 >= id_2252) };
                                                                                                          while_flag_2246 = id_2253;
                                                                                                          if (while_flag_2246) {
                                                                                                            uint8_t id_2254 { 0 };
                                                                                                            uint8_t id_2255 { 0 };
                                                                                                            uint32_t id_2256 { lebsz_ref_1143[id_2255] };
                                                                                                            uint32_t id_2257 { 1U };
                                                                                                            uint32_t id_2258 { uint32_t(id_2256 + id_2257) };
                                                                                                            Void id_2259 { ((void)(lebsz_ref_1143[id_2254] = id_2258), ::dessser::Void()) };
                                                                                                            (void)id_2259;
                                                                                                          }
                                                                                                        } while (while_flag_2246);
                                                                                                        (void)::dessser::Void();
                                                                                                        uint8_t id_2260 { 0 };
                                                                                                        uint32_t id_2261 { lebsz_ref_1143[id_2260] };
                                                                                                        Size id_2262 { Size(id_2261) };
                                                                                                        let_res_2245 = id_2262;
                                                                                                      }
                                                                                                      let_res_2242 = let_res_2245;
                                                                                                    }
                                                                                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2263 { (*p_0).text };
                                                                                                    ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2264 { std::get<4 /* Stateless */>(id_2263) };
                                                                                                    ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2265 { std::get<1 /* SL1 */>(id_2264) };
                                                                                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_2266 { std::get<0>(id_2265) };
                                                                                                    std::string id_2267 { std::get<36 /* Like */>(id_2266) };
                                                                                                    uint32_t id_2268 { (uint32_t)id_2267.size() };
                                                                                                    Size id_2269 { Size(id_2268) };
                                                                                                    Size id_2270 { Size(let_res_2242 + id_2269) };
                                                                                                    Size id_2271 { Size(id_2234 + id_2270) };
                                                                                                    choose_res_2232 = id_2271;
                                                                                                  } else {
                                                                                                    uint16_t id_2272 { 37 };
                                                                                                    bool id_2273 { bool(id_2272 == label2_1140) };
                                                                                                    Size choose_res_2274;
                                                                                                    if (id_2273) {
                                                                                                      Size id_2275 { 2UL };
                                                                                                      Size id_2276 { Size(sz_1139 + id_2275) };
                                                                                                      choose_res_2274 = id_2276;
                                                                                                    } else {
                                                                                                      uint16_t id_2277 { 38 };
                                                                                                      bool id_2278 { bool(id_2277 == label2_1140) };
                                                                                                      Size choose_res_2279;
                                                                                                      if (id_2278) {
                                                                                                        Size id_2280 { 2UL };
                                                                                                        Size id_2281 { Size(sz_1139 + id_2280) };
                                                                                                        choose_res_2279 = id_2281;
                                                                                                      } else {
                                                                                                        uint16_t id_2282 { 39 };
                                                                                                        bool id_2283 { bool(id_2282 == label2_1140) };
                                                                                                        Size choose_res_2284;
                                                                                                        if (id_2283) {
                                                                                                          Size id_2285 { 2UL };
                                                                                                          Size id_2286 { Size(sz_1139 + id_2285) };
                                                                                                          choose_res_2284 = id_2286;
                                                                                                        } else {
                                                                                                          uint16_t id_2287 { 40 };
                                                                                                          bool id_2288 { bool(label2_1140 == id_2287) };
                                                                                                          Void id_2289 { ((void)(assert(id_2288)), ::dessser::Void()) };
                                                                                                          (void)id_2289;
                                                                                                          Size id_2290 { 2UL };
                                                                                                          Size id_2291 { Size(sz_1139 + id_2290) };
                                                                                                          choose_res_2284 = id_2291;
                                                                                                        }
                                                                                                        choose_res_2279 = choose_res_2284;
                                                                                                      }
                                                                                                      choose_res_2274 = choose_res_2279;
                                                                                                    }
                                                                                                    choose_res_2232 = choose_res_2274;
                                                                                                  }
                                                                                                  choose_res_2227 = choose_res_2232;
                                                                                                }
                                                                                                choose_res_2222 = choose_res_2227;
                                                                                              }
                                                                                              choose_res_2217 = choose_res_2222;
                                                                                            }
                                                                                            choose_res_2212 = choose_res_2217;
                                                                                          }
                                                                                          choose_res_2207 = choose_res_2212;
                                                                                        }
                                                                                        choose_res_2202 = choose_res_2207;
                                                                                      }
                                                                                      choose_res_2197 = choose_res_2202;
                                                                                    }
                                                                                    choose_res_2192 = choose_res_2197;
                                                                                  }
                                                                                  choose_res_2187 = choose_res_2192;
                                                                                }
                                                                                choose_res_2182 = choose_res_2187;
                                                                              }
                                                                              choose_res_2177 = choose_res_2182;
                                                                            }
                                                                            choose_res_2172 = choose_res_2177;
                                                                          }
                                                                          choose_res_2167 = choose_res_2172;
                                                                        }
                                                                        choose_res_2162 = choose_res_2167;
                                                                      }
                                                                      choose_res_2157 = choose_res_2162;
                                                                    }
                                                                    choose_res_2152 = choose_res_2157;
                                                                  }
                                                                  choose_res_2147 = choose_res_2152;
                                                                }
                                                                choose_res_2142 = choose_res_2147;
                                                              }
                                                              choose_res_2137 = choose_res_2142;
                                                            }
                                                            choose_res_2132 = choose_res_2137;
                                                          }
                                                          choose_res_2127 = choose_res_2132;
                                                        }
                                                        choose_res_2122 = choose_res_2127;
                                                      }
                                                      choose_res_2117 = choose_res_2122;
                                                    }
                                                    choose_res_2112 = choose_res_2117;
                                                  }
                                                  choose_res_2107 = choose_res_2112;
                                                }
                                                choose_res_2102 = choose_res_2107;
                                              }
                                              choose_res_2097 = choose_res_2102;
                                            }
                                            choose_res_2092 = choose_res_2097;
                                          }
                                          choose_res_2087 = choose_res_2092;
                                        }
                                        choose_res_2082 = choose_res_2087;
                                      }
                                      choose_res_2077 = choose_res_2082;
                                    }
                                    choose_res_2072 = choose_res_2077;
                                  }
                                  choose_res_2033 = choose_res_2072;
                                }
                                choose_res_2028 = choose_res_2033;
                              }
                              choose_res_2015 = choose_res_2028;
                            }
                            choose_res_2010 = choose_res_2015;
                          }
                          let_res_2007 = choose_res_2010;
                        }
                        let_res_2001 = let_res_2007;
                      }
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2292 { (*p_0).text };
                      ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2293 { std::get<4 /* Stateless */>(id_2292) };
                      ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_2294 { std::get<1 /* SL1 */>(id_2293) };
                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_2295 { std::get<1>(id_2294) };
                      Size id_2296 { fun1516(id_2295) };
                      Size id_2297 { Size(let_res_2001 + id_2296) };
                      choose_res_1996 = id_2297;
                    } else {
                      uint16_t id_2298 { 2 };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2299 { (*p_0).text };
                      ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2300 { std::get<4 /* Stateless */>(id_2299) };
                      uint16_t id_2301 { uint16_t(id_2300.index()) };
                      bool id_2302 { bool(id_2298 == id_2301) };
                      Size choose_res_2303;
                      if (id_2302) {
                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2304 { (*p_0).text };
                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2305 { std::get<4 /* Stateless */>(id_2304) };
                        ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_2306 { std::get<2 /* SL1s */>(id_2305) };
                        ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25 id_2307 { std::get<0>(id_2306) };
                        uint16_t id_2308 { uint16_t(id_2307) };
                        Size let_res_2309;
                        {
                          uint16_t label2_1133 { id_2308 };
                          uint16_t id_2310 { 0 };
                          bool id_2311 { bool(id_2310 == label2_1133) };
                          Size choose_res_2312;
                          if (id_2311) {
                            Size id_2313 { 2UL };
                            Size id_2314 { Size(sz_1059 + id_2313) };
                            Size id_2315 { 2UL };
                            Size id_2316 { Size(id_2314 + id_2315) };
                            Size id_2317 { 2UL };
                            Size id_2318 { Size(id_2316 + id_2317) };
                            choose_res_2312 = id_2318;
                          } else {
                            uint16_t id_2319 { 1 };
                            bool id_2320 { bool(id_2319 == label2_1133) };
                            Size choose_res_2321;
                            if (id_2320) {
                              Size id_2322 { 2UL };
                              Size id_2323 { Size(sz_1059 + id_2322) };
                              Size id_2324 { 2UL };
                              Size id_2325 { Size(id_2323 + id_2324) };
                              Size id_2326 { 2UL };
                              Size id_2327 { Size(id_2325 + id_2326) };
                              choose_res_2321 = id_2327;
                            } else {
                              uint16_t id_2328 { 2 };
                              bool id_2329 { bool(id_2328 == label2_1133) };
                              Size choose_res_2330;
                              if (id_2329) {
                                Size id_2331 { 2UL };
                                Size id_2332 { Size(sz_1059 + id_2331) };
                                Size id_2333 { 2UL };
                                Size id_2334 { Size(id_2332 + id_2333) };
                                Size id_2335 { 2UL };
                                Size id_2336 { Size(id_2334 + id_2335) };
                                choose_res_2330 = id_2336;
                              } else {
                                uint16_t id_2337 { 3 };
                                bool id_2338 { bool(label2_1133 == id_2337) };
                                Void id_2339 { ((void)(assert(id_2338)), ::dessser::Void()) };
                                (void)id_2339;
                                Size id_2340 { 2UL };
                                Size id_2341 { Size(sz_1059 + id_2340) };
                                Size id_2342 { 2UL };
                                Size id_2343 { Size(id_2341 + id_2342) };
                                Size id_2344 { 2UL };
                                Size id_2345 { Size(id_2343 + id_2344) };
                                choose_res_2330 = id_2345;
                              }
                              choose_res_2321 = choose_res_2330;
                            }
                            choose_res_2312 = choose_res_2321;
                          }
                          let_res_2309 = choose_res_2312;
                        }
                        Size let_res_2346;
                        {
                          Size sz_1134 { let_res_2309 };
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2347 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2348 { std::get<4 /* Stateless */>(id_2347) };
                          ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_2349 { std::get<2 /* SL1s */>(id_2348) };
                          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2350 { std::get<1>(id_2349) };
                          uint32_t id_2351 { id_2350.size() };
                          Vec<1, uint32_t> id_2352 {  id_2351  };
                          Size let_res_2353;
                          {
                            Vec<1, uint32_t> n_ref_1135 { id_2352 };
                            uint32_t id_2354 { 1U };
                            Vec<1, uint32_t> id_2355 {  id_2354  };
                            Size let_res_2356;
                            {
                              Vec<1, uint32_t> lebsz_ref_1136 { id_2355 };
                              bool while_flag_2357 { true };
                              do {
                                uint8_t id_2358 { 0 };
                                uint32_t id_2359 { n_ref_1135[id_2358] };
                                uint8_t id_2360 { 0 };
                                uint32_t id_2361 { lebsz_ref_1136[id_2360] };
                                uint8_t id_2362 { 7 };
                                uint32_t id_2363 { uint32_t(id_2361 << id_2362) };
                                bool id_2364 { bool(id_2359 >= id_2363) };
                                while_flag_2357 = id_2364;
                                if (while_flag_2357) {
                                  uint8_t id_2365 { 0 };
                                  uint8_t id_2366 { 0 };
                                  uint32_t id_2367 { lebsz_ref_1136[id_2366] };
                                  uint32_t id_2368 { 1U };
                                  uint32_t id_2369 { uint32_t(id_2367 + id_2368) };
                                  Void id_2370 { ((void)(lebsz_ref_1136[id_2365] = id_2369), ::dessser::Void()) };
                                  (void)id_2370;
                                }
                              } while (while_flag_2357);
                              (void)::dessser::Void();
                              uint8_t id_2371 { 0 };
                              uint32_t id_2372 { lebsz_ref_1136[id_2371] };
                              Size id_2373 { Size(id_2372) };
                              let_res_2356 = id_2373;
                            }
                            let_res_2353 = let_res_2356;
                          }
                          Size id_2374 { Size(sz_1134 + let_res_2353) };
                          Vec<1, Size> id_2375 {  id_2374  };
                          Size let_res_2376;
                          {
                            Vec<1, Size> sz_ref_1137 { id_2375 };
                            int32_t id_2377 { 0L };
                            Vec<1, int32_t> id_2378 {  id_2377  };
                            {
                              Vec<1, int32_t> repeat_n_1138 { id_2378 };
                              bool while_flag_2379 { true };
                              do {
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2380 { (*p_0).text };
                                ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2381 { std::get<4 /* Stateless */>(id_2380) };
                                ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_2382 { std::get<2 /* SL1s */>(id_2381) };
                                Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2383 { std::get<1>(id_2382) };
                                uint32_t id_2384 { id_2383.size() };
                                int32_t id_2385 { int32_t(id_2384) };
                                uint8_t id_2386 { 0 };
                                int32_t id_2387 { repeat_n_1138[id_2386] };
                                bool id_2388 { bool(id_2385 > id_2387) };
                                while_flag_2379 = id_2388;
                                if (while_flag_2379) {
                                  uint8_t id_2389 { 0 };
                                  uint8_t id_2390 { 0 };
                                  Size id_2391 { sz_ref_1137[id_2390] };
                                  uint8_t id_2392 { 0 };
                                  int32_t id_2393 { repeat_n_1138[id_2392] };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2394 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2395 { std::get<4 /* Stateless */>(id_2394) };
                                  ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_2396 { std::get<2 /* SL1s */>(id_2395) };
                                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2397 { std::get<1>(id_2396) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2398 { id_2397[id_2393] };
                                  Size id_2399 { fun1516(id_2398) };
                                  Size id_2400 { Size(id_2391 + id_2399) };
                                  Void id_2401 { ((void)(sz_ref_1137[id_2389] = id_2400), ::dessser::Void()) };
                                  (void)id_2401;
                                  uint8_t id_2402 { 0 };
                                  uint8_t id_2403 { 0 };
                                  int32_t id_2404 { repeat_n_1138[id_2403] };
                                  int32_t id_2405 { 1L };
                                  int32_t id_2406 { int32_t(id_2404 + id_2405) };
                                  Void id_2407 { ((void)(repeat_n_1138[id_2402] = id_2406), ::dessser::Void()) };
                                  (void)id_2407;
                                  (void)id_2407;
                                }
                              } while (while_flag_2379);
                              (void)::dessser::Void();
                            }
                            (void)::dessser::Void();
                            uint8_t id_2408 { 0 };
                            Size id_2409 { sz_ref_1137[id_2408] };
                            let_res_2376 = id_2409;
                          }
                          let_res_2346 = let_res_2376;
                        }
                        choose_res_2303 = let_res_2346;
                      } else {
                        uint16_t id_2410 { 3 };
                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2411 { (*p_0).text };
                        ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2412 { std::get<4 /* Stateless */>(id_2411) };
                        uint16_t id_2413 { uint16_t(id_2412.index()) };
                        bool id_2414 { bool(id_2410 == id_2413) };
                        Size choose_res_2415;
                        if (id_2414) {
                          Size id_2416 { 2UL };
                          Size id_2417 { Size(sz_1059 + id_2416) };
                          Size id_2418 { 2UL };
                          Size id_2419 { Size(id_2417 + id_2418) };
                          Size let_res_2420;
                          {
                            Size sz_1128 { id_2419 };
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2421 { (*p_0).text };
                            ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2422 { std::get<4 /* Stateless */>(id_2421) };
                            ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_2423 { std::get<3 /* SL2 */>(id_2422) };
                            ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_2424 { std::get<0>(id_2423) };
                            uint16_t id_2425 { uint16_t(id_2424.index()) };
                            Size let_res_2426;
                            {
                              uint16_t label2_1129 { id_2425 };
                              uint16_t id_2427 { 0 };
                              bool id_2428 { bool(id_2427 == label2_1129) };
                              Size choose_res_2429;
                              if (id_2428) {
                                Size id_2430 { 2UL };
                                Size id_2431 { Size(sz_1128 + id_2430) };
                                choose_res_2429 = id_2431;
                              } else {
                                uint16_t id_2432 { 1 };
                                bool id_2433 { bool(id_2432 == label2_1129) };
                                Size choose_res_2434;
                                if (id_2433) {
                                  Size id_2435 { 2UL };
                                  Size id_2436 { Size(sz_1128 + id_2435) };
                                  choose_res_2434 = id_2436;
                                } else {
                                  uint16_t id_2437 { 2 };
                                  bool id_2438 { bool(id_2437 == label2_1129) };
                                  Size choose_res_2439;
                                  if (id_2438) {
                                    Size id_2440 { 2UL };
                                    Size id_2441 { Size(sz_1128 + id_2440) };
                                    choose_res_2439 = id_2441;
                                  } else {
                                    uint16_t id_2442 { 3 };
                                    bool id_2443 { bool(id_2442 == label2_1129) };
                                    Size choose_res_2444;
                                    if (id_2443) {
                                      Size id_2445 { 2UL };
                                      Size id_2446 { Size(sz_1128 + id_2445) };
                                      choose_res_2444 = id_2446;
                                    } else {
                                      uint16_t id_2447 { 4 };
                                      bool id_2448 { bool(id_2447 == label2_1129) };
                                      Size choose_res_2449;
                                      if (id_2448) {
                                        Size id_2450 { 2UL };
                                        Size id_2451 { Size(sz_1128 + id_2450) };
                                        choose_res_2449 = id_2451;
                                      } else {
                                        uint16_t id_2452 { 5 };
                                        bool id_2453 { bool(id_2452 == label2_1129) };
                                        Size choose_res_2454;
                                        if (id_2453) {
                                          Size id_2455 { 2UL };
                                          Size id_2456 { Size(sz_1128 + id_2455) };
                                          choose_res_2454 = id_2456;
                                        } else {
                                          uint16_t id_2457 { 6 };
                                          bool id_2458 { bool(id_2457 == label2_1129) };
                                          Size choose_res_2459;
                                          if (id_2458) {
                                            Size id_2460 { 2UL };
                                            Size id_2461 { Size(sz_1128 + id_2460) };
                                            choose_res_2459 = id_2461;
                                          } else {
                                            uint16_t id_2462 { 7 };
                                            bool id_2463 { bool(id_2462 == label2_1129) };
                                            Size choose_res_2464;
                                            if (id_2463) {
                                              Size id_2465 { 2UL };
                                              Size id_2466 { Size(sz_1128 + id_2465) };
                                              choose_res_2464 = id_2466;
                                            } else {
                                              uint16_t id_2467 { 8 };
                                              bool id_2468 { bool(id_2467 == label2_1129) };
                                              Size choose_res_2469;
                                              if (id_2468) {
                                                Size id_2470 { 2UL };
                                                Size id_2471 { Size(sz_1128 + id_2470) };
                                                choose_res_2469 = id_2471;
                                              } else {
                                                uint16_t id_2472 { 9 };
                                                bool id_2473 { bool(id_2472 == label2_1129) };
                                                Size choose_res_2474;
                                                if (id_2473) {
                                                  Size id_2475 { 2UL };
                                                  Size id_2476 { Size(sz_1128 + id_2475) };
                                                  choose_res_2474 = id_2476;
                                                } else {
                                                  uint16_t id_2477 { 10 };
                                                  bool id_2478 { bool(id_2477 == label2_1129) };
                                                  Size choose_res_2479;
                                                  if (id_2478) {
                                                    Size id_2480 { 2UL };
                                                    Size id_2481 { Size(sz_1128 + id_2480) };
                                                    choose_res_2479 = id_2481;
                                                  } else {
                                                    uint16_t id_2482 { 11 };
                                                    bool id_2483 { bool(id_2482 == label2_1129) };
                                                    Size choose_res_2484;
                                                    if (id_2483) {
                                                      Size id_2485 { 2UL };
                                                      Size id_2486 { Size(sz_1128 + id_2485) };
                                                      choose_res_2484 = id_2486;
                                                    } else {
                                                      uint16_t id_2487 { 12 };
                                                      bool id_2488 { bool(id_2487 == label2_1129) };
                                                      Size choose_res_2489;
                                                      if (id_2488) {
                                                        Size id_2490 { 2UL };
                                                        Size id_2491 { Size(sz_1128 + id_2490) };
                                                        choose_res_2489 = id_2491;
                                                      } else {
                                                        uint16_t id_2492 { 13 };
                                                        bool id_2493 { bool(id_2492 == label2_1129) };
                                                        Size choose_res_2494;
                                                        if (id_2493) {
                                                          Size id_2495 { 2UL };
                                                          Size id_2496 { Size(sz_1128 + id_2495) };
                                                          choose_res_2494 = id_2496;
                                                        } else {
                                                          uint16_t id_2497 { 14 };
                                                          bool id_2498 { bool(id_2497 == label2_1129) };
                                                          Size choose_res_2499;
                                                          if (id_2498) {
                                                            Size id_2500 { 2UL };
                                                            Size id_2501 { Size(sz_1128 + id_2500) };
                                                            choose_res_2499 = id_2501;
                                                          } else {
                                                            uint16_t id_2502 { 15 };
                                                            bool id_2503 { bool(id_2502 == label2_1129) };
                                                            Size choose_res_2504;
                                                            if (id_2503) {
                                                              Size id_2505 { 2UL };
                                                              Size id_2506 { Size(sz_1128 + id_2505) };
                                                              choose_res_2504 = id_2506;
                                                            } else {
                                                              uint16_t id_2507 { 16 };
                                                              bool id_2508 { bool(id_2507 == label2_1129) };
                                                              Size choose_res_2509;
                                                              if (id_2508) {
                                                                Size id_2510 { 2UL };
                                                                Size id_2511 { Size(sz_1128 + id_2510) };
                                                                choose_res_2509 = id_2511;
                                                              } else {
                                                                uint16_t id_2512 { 17 };
                                                                bool id_2513 { bool(id_2512 == label2_1129) };
                                                                Size choose_res_2514;
                                                                if (id_2513) {
                                                                  Size id_2515 { 2UL };
                                                                  Size id_2516 { Size(sz_1128 + id_2515) };
                                                                  choose_res_2514 = id_2516;
                                                                } else {
                                                                  uint16_t id_2517 { 18 };
                                                                  bool id_2518 { bool(id_2517 == label2_1129) };
                                                                  Size choose_res_2519;
                                                                  if (id_2518) {
                                                                    Size id_2520 { 2UL };
                                                                    Size id_2521 { Size(sz_1128 + id_2520) };
                                                                    choose_res_2519 = id_2521;
                                                                  } else {
                                                                    uint16_t id_2522 { 19 };
                                                                    bool id_2523 { bool(id_2522 == label2_1129) };
                                                                    Size choose_res_2524;
                                                                    if (id_2523) {
                                                                      Size id_2525 { 2UL };
                                                                      Size id_2526 { Size(sz_1128 + id_2525) };
                                                                      choose_res_2524 = id_2526;
                                                                    } else {
                                                                      uint16_t id_2527 { 20 };
                                                                      bool id_2528 { bool(id_2527 == label2_1129) };
                                                                      Size choose_res_2529;
                                                                      if (id_2528) {
                                                                        Size id_2530 { 2UL };
                                                                        Size id_2531 { Size(sz_1128 + id_2530) };
                                                                        choose_res_2529 = id_2531;
                                                                      } else {
                                                                        uint16_t id_2532 { 21 };
                                                                        bool id_2533 { bool(id_2532 == label2_1129) };
                                                                        Size choose_res_2534;
                                                                        if (id_2533) {
                                                                          Size id_2535 { 2UL };
                                                                          Size id_2536 { Size(sz_1128 + id_2535) };
                                                                          choose_res_2534 = id_2536;
                                                                        } else {
                                                                          uint16_t id_2537 { 22 };
                                                                          bool id_2538 { bool(id_2537 == label2_1129) };
                                                                          Size choose_res_2539;
                                                                          if (id_2538) {
                                                                            Size id_2540 { 2UL };
                                                                            Size id_2541 { Size(sz_1128 + id_2540) };
                                                                            choose_res_2539 = id_2541;
                                                                          } else {
                                                                            uint16_t id_2542 { 23 };
                                                                            bool id_2543 { bool(id_2542 == label2_1129) };
                                                                            Size choose_res_2544;
                                                                            if (id_2543) {
                                                                              Size id_2545 { 2UL };
                                                                              Size id_2546 { Size(sz_1128 + id_2545) };
                                                                              choose_res_2544 = id_2546;
                                                                            } else {
                                                                              uint16_t id_2547 { 24 };
                                                                              bool id_2548 { bool(id_2547 == label2_1129) };
                                                                              Size choose_res_2549;
                                                                              if (id_2548) {
                                                                                Size id_2550 { 2UL };
                                                                                Size id_2551 { Size(sz_1128 + id_2550) };
                                                                                Size id_2552 { 1UL };
                                                                                Size id_2553 { Size(id_2551 + id_2552) };
                                                                                choose_res_2549 = id_2553;
                                                                              } else {
                                                                                uint16_t id_2554 { 25 };
                                                                                bool id_2555 { bool(label2_1129 == id_2554) };
                                                                                Void id_2556 { ((void)(assert(id_2555)), ::dessser::Void()) };
                                                                                (void)id_2556;
                                                                                Size id_2557 { 2UL };
                                                                                Size id_2558 { Size(sz_1128 + id_2557) };
                                                                                choose_res_2549 = id_2558;
                                                                              }
                                                                              choose_res_2544 = choose_res_2549;
                                                                            }
                                                                            choose_res_2539 = choose_res_2544;
                                                                          }
                                                                          choose_res_2534 = choose_res_2539;
                                                                        }
                                                                        choose_res_2529 = choose_res_2534;
                                                                      }
                                                                      choose_res_2524 = choose_res_2529;
                                                                    }
                                                                    choose_res_2519 = choose_res_2524;
                                                                  }
                                                                  choose_res_2514 = choose_res_2519;
                                                                }
                                                                choose_res_2509 = choose_res_2514;
                                                              }
                                                              choose_res_2504 = choose_res_2509;
                                                            }
                                                            choose_res_2499 = choose_res_2504;
                                                          }
                                                          choose_res_2494 = choose_res_2499;
                                                        }
                                                        choose_res_2489 = choose_res_2494;
                                                      }
                                                      choose_res_2484 = choose_res_2489;
                                                    }
                                                    choose_res_2479 = choose_res_2484;
                                                  }
                                                  choose_res_2474 = choose_res_2479;
                                                }
                                                choose_res_2469 = choose_res_2474;
                                              }
                                              choose_res_2464 = choose_res_2469;
                                            }
                                            choose_res_2459 = choose_res_2464;
                                          }
                                          choose_res_2454 = choose_res_2459;
                                        }
                                        choose_res_2449 = choose_res_2454;
                                      }
                                      choose_res_2444 = choose_res_2449;
                                    }
                                    choose_res_2439 = choose_res_2444;
                                  }
                                  choose_res_2434 = choose_res_2439;
                                }
                                choose_res_2429 = choose_res_2434;
                              }
                              let_res_2426 = choose_res_2429;
                            }
                            let_res_2420 = let_res_2426;
                          }
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2559 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2560 { std::get<4 /* Stateless */>(id_2559) };
                          ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_2561 { std::get<3 /* SL2 */>(id_2560) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2562 { std::get<1>(id_2561) };
                          Size id_2563 { fun1516(id_2562) };
                          Size id_2564 { Size(let_res_2420 + id_2563) };
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2565 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2566 { std::get<4 /* Stateless */>(id_2565) };
                          ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_2567 { std::get<3 /* SL2 */>(id_2566) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2568 { std::get<2>(id_2567) };
                          Size id_2569 { fun1516(id_2568) };
                          Size id_2570 { Size(id_2564 + id_2569) };
                          choose_res_2415 = id_2570;
                        } else {
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2571 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2572 { std::get<4 /* Stateless */>(id_2571) };
                          uint16_t id_2573 { uint16_t(id_2572.index()) };
                          uint16_t id_2574 { 4 };
                          bool id_2575 { bool(id_2573 == id_2574) };
                          Void id_2576 { ((void)(assert(id_2575)), ::dessser::Void()) };
                          (void)id_2576;
                          uint16_t id_2577 { 0 };
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2578 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2579 { std::get<4 /* Stateless */>(id_2578) };
                          ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_2580 { std::get<4 /* SL3 */>(id_2579) };
                          ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c id_2581 { std::get<0>(id_2580) };
                          uint16_t id_2582 { uint16_t(id_2581) };
                          bool id_2583 { bool(id_2577 == id_2582) };
                          Size choose_res_2584;
                          if (id_2583) {
                            Size id_2585 { 2UL };
                            Size id_2586 { Size(sz_1059 + id_2585) };
                            Size id_2587 { 2UL };
                            Size id_2588 { Size(id_2586 + id_2587) };
                            Size id_2589 { 2UL };
                            Size id_2590 { Size(id_2588 + id_2589) };
                            choose_res_2584 = id_2590;
                          } else {
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2591 { (*p_0).text };
                            ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2592 { std::get<4 /* Stateless */>(id_2591) };
                            ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_2593 { std::get<4 /* SL3 */>(id_2592) };
                            ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c id_2594 { std::get<0>(id_2593) };
                            uint16_t id_2595 { uint16_t(id_2594) };
                            uint16_t id_2596 { 1 };
                            bool id_2597 { bool(id_2595 == id_2596) };
                            Void id_2598 { ((void)(assert(id_2597)), ::dessser::Void()) };
                            (void)id_2598;
                            Size id_2599 { 2UL };
                            Size id_2600 { Size(sz_1059 + id_2599) };
                            Size id_2601 { 2UL };
                            Size id_2602 { Size(id_2600 + id_2601) };
                            Size id_2603 { 2UL };
                            Size id_2604 { Size(id_2602 + id_2603) };
                            choose_res_2584 = id_2604;
                          }
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2605 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2606 { std::get<4 /* Stateless */>(id_2605) };
                          ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_2607 { std::get<4 /* SL3 */>(id_2606) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2608 { std::get<1>(id_2607) };
                          Size id_2609 { fun1516(id_2608) };
                          Size id_2610 { Size(choose_res_2584 + id_2609) };
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2611 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2612 { std::get<4 /* Stateless */>(id_2611) };
                          ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_2613 { std::get<4 /* SL3 */>(id_2612) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2614 { std::get<2>(id_2613) };
                          Size id_2615 { fun1516(id_2614) };
                          Size id_2616 { Size(id_2610 + id_2615) };
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2617 { (*p_0).text };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_2618 { std::get<4 /* Stateless */>(id_2617) };
                          ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_2619 { std::get<4 /* SL3 */>(id_2618) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2620 { std::get<3>(id_2619) };
                          Size id_2621 { fun1516(id_2620) };
                          Size id_2622 { Size(id_2616 + id_2621) };
                          choose_res_2415 = id_2622;
                        }
                        choose_res_2303 = choose_res_2415;
                      }
                      choose_res_1996 = choose_res_2303;
                    }
                    choose_res_1819 = choose_res_1996;
                  }
                  choose_res_1813 = choose_res_1819;
                } else {
                  uint16_t id_2623 { 5 };
                  bool id_2624 { bool(id_2623 == label2_1060) };
                  Size choose_res_2625;
                  if (id_2624) {
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2626 { (*p_0).text };
                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2627 { std::get<5 /* Stateful */>(id_2626) };
                    std::optional<::dessser::gen::raql_expr::lifespan> id_2628 { id_2627.lifespan };
                    bool id_2629 { !(id_2628.has_value ()) };
                    Size choose_res_2630;
                    if (id_2629) {
                      Size id_2631 { 2UL };
                      Size id_2632 { Size(sz_1059 + id_2631) };
                      Size id_2633 { 1UL };
                      Size id_2634 { Size(id_2632 + id_2633) };
                      choose_res_2630 = id_2634;
                    } else {
                      Size id_2635 { 2UL };
                      Size id_2636 { Size(sz_1059 + id_2635) };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2637 { (*p_0).text };
                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2638 { std::get<5 /* Stateful */>(id_2637) };
                      std::optional<::dessser::gen::raql_expr::lifespan> id_2639 { id_2638.lifespan };
                      ::dessser::gen::raql_expr::lifespan id_2640 { id_2639.value() };
                      Size id_2641 { lifespan_sersize_of_row_binary(id_2640) };
                      Size id_2642 { Size(id_2636 + id_2641) };
                      Size id_2643 { 1UL };
                      Size id_2644 { Size(id_2642 + id_2643) };
                      choose_res_2630 = id_2644;
                    }
                    Size id_2645 { 1UL };
                    Size id_2646 { Size(choose_res_2630 + id_2645) };
                    Size let_res_2647;
                    {
                      Size sz_1066 { id_2646 };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2648 { (*p_0).text };
                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2649 { std::get<5 /* Stateful */>(id_2648) };
                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2650 { id_2649.operation };
                      uint16_t id_2651 { uint16_t(id_2650.index()) };
                      Size let_res_2652;
                      {
                        uint16_t label2_1067 { id_2651 };
                        uint16_t id_2653 { 0 };
                        bool id_2654 { bool(id_2653 == label2_1067) };
                        Size choose_res_2655;
                        if (id_2654) {
                          Size id_2656 { 2UL };
                          Size id_2657 { Size(sz_1066 + id_2656) };
                          Size let_res_2658;
                          {
                            Size sz_1116 { id_2657 };
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2659 { (*p_0).text };
                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2660 { std::get<5 /* Stateful */>(id_2659) };
                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2661 { id_2660.operation };
                            ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_2662 { std::get<0 /* SF1 */>(id_2661) };
                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_2663 { std::get<0>(id_2662) };
                            uint16_t id_2664 { uint16_t(id_2663.index()) };
                            Size let_res_2665;
                            {
                              uint16_t label2_1117 { id_2664 };
                              uint16_t id_2666 { 0 };
                              bool id_2667 { bool(id_2666 == label2_1117) };
                              Size choose_res_2668;
                              if (id_2667) {
                                Size id_2669 { 2UL };
                                Size id_2670 { Size(sz_1116 + id_2669) };
                                choose_res_2668 = id_2670;
                              } else {
                                uint16_t id_2671 { 1 };
                                bool id_2672 { bool(id_2671 == label2_1117) };
                                Size choose_res_2673;
                                if (id_2672) {
                                  Size id_2674 { 2UL };
                                  Size id_2675 { Size(sz_1116 + id_2674) };
                                  choose_res_2673 = id_2675;
                                } else {
                                  uint16_t id_2676 { 2 };
                                  bool id_2677 { bool(id_2676 == label2_1117) };
                                  Size choose_res_2678;
                                  if (id_2677) {
                                    Size id_2679 { 2UL };
                                    Size id_2680 { Size(sz_1116 + id_2679) };
                                    choose_res_2678 = id_2680;
                                  } else {
                                    uint16_t id_2681 { 3 };
                                    bool id_2682 { bool(id_2681 == label2_1117) };
                                    Size choose_res_2683;
                                    if (id_2682) {
                                      Size id_2684 { 2UL };
                                      Size id_2685 { Size(sz_1116 + id_2684) };
                                      choose_res_2683 = id_2685;
                                    } else {
                                      uint16_t id_2686 { 4 };
                                      bool id_2687 { bool(id_2686 == label2_1117) };
                                      Size choose_res_2688;
                                      if (id_2687) {
                                        Size id_2689 { 2UL };
                                        Size id_2690 { Size(sz_1116 + id_2689) };
                                        choose_res_2688 = id_2690;
                                      } else {
                                        uint16_t id_2691 { 5 };
                                        bool id_2692 { bool(id_2691 == label2_1117) };
                                        Size choose_res_2693;
                                        if (id_2692) {
                                          Size id_2694 { 2UL };
                                          Size id_2695 { Size(sz_1116 + id_2694) };
                                          choose_res_2693 = id_2695;
                                        } else {
                                          uint16_t id_2696 { 6 };
                                          bool id_2697 { bool(id_2696 == label2_1117) };
                                          Size choose_res_2698;
                                          if (id_2697) {
                                            Size id_2699 { 2UL };
                                            Size id_2700 { Size(sz_1116 + id_2699) };
                                            choose_res_2698 = id_2700;
                                          } else {
                                            uint16_t id_2701 { 7 };
                                            bool id_2702 { bool(id_2701 == label2_1117) };
                                            Size choose_res_2703;
                                            if (id_2702) {
                                              Size id_2704 { 2UL };
                                              Size id_2705 { Size(sz_1116 + id_2704) };
                                              choose_res_2703 = id_2705;
                                            } else {
                                              uint16_t id_2706 { 8 };
                                              bool id_2707 { bool(id_2706 == label2_1117) };
                                              Size choose_res_2708;
                                              if (id_2707) {
                                                Size id_2709 { 2UL };
                                                Size id_2710 { Size(sz_1116 + id_2709) };
                                                choose_res_2708 = id_2710;
                                              } else {
                                                uint16_t id_2711 { 9 };
                                                bool id_2712 { bool(id_2711 == label2_1117) };
                                                Size choose_res_2713;
                                                if (id_2712) {
                                                  Size id_2714 { 2UL };
                                                  Size id_2715 { Size(sz_1116 + id_2714) };
                                                  choose_res_2713 = id_2715;
                                                } else {
                                                  uint16_t id_2716 { 10 };
                                                  bool id_2717 { bool(id_2716 == label2_1117) };
                                                  Size choose_res_2718;
                                                  if (id_2717) {
                                                    Size id_2719 { 2UL };
                                                    Size id_2720 { Size(sz_1116 + id_2719) };
                                                    choose_res_2718 = id_2720;
                                                  } else {
                                                    uint16_t id_2721 { 11 };
                                                    bool id_2722 { bool(id_2721 == label2_1117) };
                                                    Size choose_res_2723;
                                                    if (id_2722) {
                                                      Size id_2724 { 2UL };
                                                      Size id_2725 { Size(sz_1116 + id_2724) };
                                                      Size id_2726 { 8UL };
                                                      Size id_2727 { Size(id_2725 + id_2726) };
                                                      Size id_2728 { 8UL };
                                                      Size id_2729 { Size(id_2727 + id_2728) };
                                                      Size id_2730 { 4UL };
                                                      Size id_2731 { Size(id_2729 + id_2730) };
                                                      choose_res_2723 = id_2731;
                                                    } else {
                                                      uint16_t id_2732 { 12 };
                                                      bool id_2733 { bool(id_2732 == label2_1117) };
                                                      Size choose_res_2734;
                                                      if (id_2733) {
                                                        Size id_2735 { 2UL };
                                                        Size id_2736 { Size(sz_1116 + id_2735) };
                                                        choose_res_2734 = id_2736;
                                                      } else {
                                                        uint16_t id_2737 { 13 };
                                                        bool id_2738 { bool(id_2737 == label2_1117) };
                                                        Size choose_res_2739;
                                                        if (id_2738) {
                                                          Size id_2740 { 2UL };
                                                          Size id_2741 { Size(sz_1116 + id_2740) };
                                                          choose_res_2739 = id_2741;
                                                        } else {
                                                          uint16_t id_2742 { 14 };
                                                          bool id_2743 { bool(label2_1117 == id_2742) };
                                                          Void id_2744 { ((void)(assert(id_2743)), ::dessser::Void()) };
                                                          (void)id_2744;
                                                          Size id_2745 { 2UL };
                                                          Size id_2746 { Size(sz_1116 + id_2745) };
                                                          choose_res_2739 = id_2746;
                                                        }
                                                        choose_res_2734 = choose_res_2739;
                                                      }
                                                      choose_res_2723 = choose_res_2734;
                                                    }
                                                    choose_res_2718 = choose_res_2723;
                                                  }
                                                  choose_res_2713 = choose_res_2718;
                                                }
                                                choose_res_2708 = choose_res_2713;
                                              }
                                              choose_res_2703 = choose_res_2708;
                                            }
                                            choose_res_2698 = choose_res_2703;
                                          }
                                          choose_res_2693 = choose_res_2698;
                                        }
                                        choose_res_2688 = choose_res_2693;
                                      }
                                      choose_res_2683 = choose_res_2688;
                                    }
                                    choose_res_2678 = choose_res_2683;
                                  }
                                  choose_res_2673 = choose_res_2678;
                                }
                                choose_res_2668 = choose_res_2673;
                              }
                              let_res_2665 = choose_res_2668;
                            }
                            let_res_2658 = let_res_2665;
                          }
                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2747 { (*p_0).text };
                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2748 { std::get<5 /* Stateful */>(id_2747) };
                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2749 { id_2748.operation };
                          ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_2750 { std::get<0 /* SF1 */>(id_2749) };
                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_2751 { std::get<1>(id_2750) };
                          Size id_2752 { fun1516(id_2751) };
                          Size id_2753 { Size(let_res_2658 + id_2752) };
                          choose_res_2655 = id_2753;
                        } else {
                          uint16_t id_2754 { 1 };
                          bool id_2755 { bool(id_2754 == label2_1067) };
                          Size choose_res_2756;
                          if (id_2755) {
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2757 { (*p_0).text };
                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2758 { std::get<5 /* Stateful */>(id_2757) };
                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2759 { id_2758.operation };
                            ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c id_2760 { std::get<1 /* SF2 */>(id_2759) };
                            ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8 id_2761 { std::get<0>(id_2760) };
                            uint16_t id_2762 { uint16_t(id_2761) };
                            Size let_res_2763;
                            {
                              uint16_t label2_1113 { id_2762 };
                              uint16_t id_2764 { 0 };
                              bool id_2765 { bool(id_2764 == label2_1113) };
                              Size choose_res_2766;
                              if (id_2765) {
                                Size id_2767 { 2UL };
                                Size id_2768 { Size(sz_1066 + id_2767) };
                                Size id_2769 { 2UL };
                                Size id_2770 { Size(id_2768 + id_2769) };
                                choose_res_2766 = id_2770;
                              } else {
                                uint16_t id_2771 { 1 };
                                bool id_2772 { bool(id_2771 == label2_1113) };
                                Size choose_res_2773;
                                if (id_2772) {
                                  Size id_2774 { 2UL };
                                  Size id_2775 { Size(sz_1066 + id_2774) };
                                  Size id_2776 { 2UL };
                                  Size id_2777 { Size(id_2775 + id_2776) };
                                  choose_res_2773 = id_2777;
                                } else {
                                  uint16_t id_2778 { 2 };
                                  bool id_2779 { bool(id_2778 == label2_1113) };
                                  Size choose_res_2780;
                                  if (id_2779) {
                                    Size id_2781 { 2UL };
                                    Size id_2782 { Size(sz_1066 + id_2781) };
                                    Size id_2783 { 2UL };
                                    Size id_2784 { Size(id_2782 + id_2783) };
                                    choose_res_2780 = id_2784;
                                  } else {
                                    uint16_t id_2785 { 3 };
                                    bool id_2786 { bool(label2_1113 == id_2785) };
                                    Void id_2787 { ((void)(assert(id_2786)), ::dessser::Void()) };
                                    (void)id_2787;
                                    Size id_2788 { 2UL };
                                    Size id_2789 { Size(sz_1066 + id_2788) };
                                    Size id_2790 { 2UL };
                                    Size id_2791 { Size(id_2789 + id_2790) };
                                    choose_res_2780 = id_2791;
                                  }
                                  choose_res_2773 = choose_res_2780;
                                }
                                choose_res_2766 = choose_res_2773;
                              }
                              let_res_2763 = choose_res_2766;
                            }
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2792 { (*p_0).text };
                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2793 { std::get<5 /* Stateful */>(id_2792) };
                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2794 { id_2793.operation };
                            ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c id_2795 { std::get<1 /* SF2 */>(id_2794) };
                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_2796 { std::get<1>(id_2795) };
                            Size id_2797 { fun1516(id_2796) };
                            Size id_2798 { Size(let_res_2763 + id_2797) };
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2799 { (*p_0).text };
                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2800 { std::get<5 /* Stateful */>(id_2799) };
                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2801 { id_2800.operation };
                            ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c id_2802 { std::get<1 /* SF2 */>(id_2801) };
                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_2803 { std::get<2>(id_2802) };
                            Size id_2804 { fun1516(id_2803) };
                            Size id_2805 { Size(id_2798 + id_2804) };
                            choose_res_2756 = id_2805;
                          } else {
                            uint16_t id_2806 { 2 };
                            bool id_2807 { bool(id_2806 == label2_1067) };
                            Size choose_res_2808;
                            if (id_2807) {
                              uint16_t id_2809 { 0 };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2810 { (*p_0).text };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2811 { std::get<5 /* Stateful */>(id_2810) };
                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2812 { id_2811.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2813 { std::get<2 /* SF3 */>(id_2812) };
                              ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_2814 { std::get<0>(id_2813) };
                              uint16_t id_2815 { uint16_t(id_2814.index()) };
                              bool id_2816 { bool(id_2809 == id_2815) };
                              Size choose_res_2817;
                              if (id_2816) {
                                Size id_2818 { 2UL };
                                Size id_2819 { Size(sz_1066 + id_2818) };
                                Size id_2820 { 2UL };
                                Size id_2821 { Size(id_2819 + id_2820) };
                                choose_res_2817 = id_2821;
                              } else {
                                uint16_t id_2822 { 1 };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2823 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2824 { std::get<5 /* Stateful */>(id_2823) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2825 { id_2824.operation };
                                ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2826 { std::get<2 /* SF3 */>(id_2825) };
                                ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_2827 { std::get<0>(id_2826) };
                                uint16_t id_2828 { uint16_t(id_2827.index()) };
                                bool id_2829 { bool(id_2822 == id_2828) };
                                Size choose_res_2830;
                                if (id_2829) {
                                  Size id_2831 { 2UL };
                                  Size id_2832 { Size(sz_1066 + id_2831) };
                                  Size id_2833 { 2UL };
                                  Size id_2834 { Size(id_2832 + id_2833) };
                                  choose_res_2830 = id_2834;
                                } else {
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2835 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2836 { std::get<5 /* Stateful */>(id_2835) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2837 { id_2836.operation };
                                  ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2838 { std::get<2 /* SF3 */>(id_2837) };
                                  ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_2839 { std::get<0>(id_2838) };
                                  uint16_t id_2840 { uint16_t(id_2839.index()) };
                                  uint16_t id_2841 { 2 };
                                  bool id_2842 { bool(id_2840 == id_2841) };
                                  Void id_2843 { ((void)(assert(id_2842)), ::dessser::Void()) };
                                  (void)id_2843;
                                  Size id_2844 { 2UL };
                                  Size id_2845 { Size(sz_1066 + id_2844) };
                                  Size id_2846 { 2UL };
                                  Size id_2847 { Size(id_2845 + id_2846) };
                                  Size id_2848 { 1UL };
                                  Size id_2849 { Size(id_2847 + id_2848) };
                                  choose_res_2830 = id_2849;
                                }
                                choose_res_2817 = choose_res_2830;
                              }
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2850 { (*p_0).text };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2851 { std::get<5 /* Stateful */>(id_2850) };
                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2852 { id_2851.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2853 { std::get<2 /* SF3 */>(id_2852) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_2854 { std::get<1>(id_2853) };
                              Size id_2855 { fun1516(id_2854) };
                              Size id_2856 { Size(choose_res_2817 + id_2855) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2857 { (*p_0).text };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2858 { std::get<5 /* Stateful */>(id_2857) };
                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2859 { id_2858.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2860 { std::get<2 /* SF3 */>(id_2859) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_2861 { std::get<2>(id_2860) };
                              Size id_2862 { fun1516(id_2861) };
                              Size id_2863 { Size(id_2856 + id_2862) };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2864 { (*p_0).text };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2865 { std::get<5 /* Stateful */>(id_2864) };
                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2866 { id_2865.operation };
                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_2867 { std::get<2 /* SF3 */>(id_2866) };
                              std::shared_ptr<::dessser::gen::raql_expr::t>  id_2868 { std::get<3>(id_2867) };
                              Size id_2869 { fun1516(id_2868) };
                              Size id_2870 { Size(id_2863 + id_2869) };
                              choose_res_2808 = id_2870;
                            } else {
                              uint16_t id_2871 { 3 };
                              bool id_2872 { bool(id_2871 == label2_1067) };
                              Size choose_res_2873;
                              if (id_2872) {
                                uint16_t id_2874 { 0 };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2875 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2876 { std::get<5 /* Stateful */>(id_2875) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2877 { id_2876.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2878 { std::get<3 /* SF4 */>(id_2877) };
                                ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_2879 { std::get<0>(id_2878) };
                                uint16_t id_2880 { uint16_t(id_2879.index()) };
                                bool id_2881 { bool(id_2874 == id_2880) };
                                Size choose_res_2882;
                                if (id_2881) {
                                  Size id_2883 { 2UL };
                                  Size id_2884 { Size(sz_1066 + id_2883) };
                                  Size id_2885 { 2UL };
                                  Size id_2886 { Size(id_2884 + id_2885) };
                                  choose_res_2882 = id_2886;
                                } else {
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2887 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2888 { std::get<5 /* Stateful */>(id_2887) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2889 { id_2888.operation };
                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2890 { std::get<3 /* SF4 */>(id_2889) };
                                  ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_2891 { std::get<0>(id_2890) };
                                  uint16_t id_2892 { uint16_t(id_2891.index()) };
                                  uint16_t id_2893 { 1 };
                                  bool id_2894 { bool(id_2892 == id_2893) };
                                  Void id_2895 { ((void)(assert(id_2894)), ::dessser::Void()) };
                                  (void)id_2895;
                                  Size id_2896 { 2UL };
                                  Size id_2897 { Size(sz_1066 + id_2896) };
                                  Size id_2898 { 2UL };
                                  Size id_2899 { Size(id_2897 + id_2898) };
                                  Size id_2900 { 1UL };
                                  Size id_2901 { Size(id_2899 + id_2900) };
                                  choose_res_2882 = id_2901;
                                }
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2902 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2903 { std::get<5 /* Stateful */>(id_2902) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2904 { id_2903.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2905 { std::get<3 /* SF4 */>(id_2904) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2906 { std::get<1>(id_2905) };
                                Size id_2907 { fun1516(id_2906) };
                                Size id_2908 { Size(choose_res_2882 + id_2907) };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2909 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2910 { std::get<5 /* Stateful */>(id_2909) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2911 { id_2910.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2912 { std::get<3 /* SF4 */>(id_2911) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2913 { std::get<2>(id_2912) };
                                Size id_2914 { fun1516(id_2913) };
                                Size id_2915 { Size(id_2908 + id_2914) };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2916 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2917 { std::get<5 /* Stateful */>(id_2916) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2918 { id_2917.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2919 { std::get<3 /* SF4 */>(id_2918) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2920 { std::get<3>(id_2919) };
                                Size id_2921 { fun1516(id_2920) };
                                Size id_2922 { Size(id_2915 + id_2921) };
                                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2923 { (*p_0).text };
                                ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2924 { std::get<5 /* Stateful */>(id_2923) };
                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2925 { id_2924.operation };
                                ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_2926 { std::get<3 /* SF4 */>(id_2925) };
                                std::shared_ptr<::dessser::gen::raql_expr::t>  id_2927 { std::get<4>(id_2926) };
                                Size id_2928 { fun1516(id_2927) };
                                Size id_2929 { Size(id_2922 + id_2928) };
                                choose_res_2873 = id_2929;
                              } else {
                                uint16_t id_2930 { 4 };
                                bool id_2931 { bool(id_2930 == label2_1067) };
                                Size choose_res_2932;
                                if (id_2931) {
                                  uint16_t id_2933 { 0 };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2934 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2935 { std::get<5 /* Stateful */>(id_2934) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2936 { id_2935.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2937 { std::get<4 /* SF4s */>(id_2936) };
                                  ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_2938 { std::get<0>(id_2937) };
                                  uint16_t id_2939 { uint16_t(id_2938.index()) };
                                  bool id_2940 { bool(id_2933 == id_2939) };
                                  Size choose_res_2941;
                                  if (id_2940) {
                                    Size id_2942 { 2UL };
                                    Size id_2943 { Size(sz_1066 + id_2942) };
                                    Size id_2944 { 2UL };
                                    Size id_2945 { Size(id_2943 + id_2944) };
                                    choose_res_2941 = id_2945;
                                  } else {
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2946 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2947 { std::get<5 /* Stateful */>(id_2946) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2948 { id_2947.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2949 { std::get<4 /* SF4s */>(id_2948) };
                                    ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_2950 { std::get<0>(id_2949) };
                                    uint16_t id_2951 { uint16_t(id_2950.index()) };
                                    uint16_t id_2952 { 1 };
                                    bool id_2953 { bool(id_2951 == id_2952) };
                                    Void id_2954 { ((void)(assert(id_2953)), ::dessser::Void()) };
                                    (void)id_2954;
                                    Size id_2955 { 2UL };
                                    Size id_2956 { Size(sz_1066 + id_2955) };
                                    Size id_2957 { 2UL };
                                    Size id_2958 { Size(id_2956 + id_2957) };
                                    Size id_2959 { 1UL };
                                    Size id_2960 { Size(id_2958 + id_2959) };
                                    Size id_2961 { 1UL };
                                    Size id_2962 { Size(id_2960 + id_2961) };
                                    choose_res_2941 = id_2962;
                                  }
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2963 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2964 { std::get<5 /* Stateful */>(id_2963) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2965 { id_2964.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2966 { std::get<4 /* SF4s */>(id_2965) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2967 { std::get<1>(id_2966) };
                                  Size id_2968 { fun1516(id_2967) };
                                  Size id_2969 { Size(choose_res_2941 + id_2968) };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2970 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2971 { std::get<5 /* Stateful */>(id_2970) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2972 { id_2971.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2973 { std::get<4 /* SF4s */>(id_2972) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2974 { std::get<2>(id_2973) };
                                  Size id_2975 { fun1516(id_2974) };
                                  Size id_2976 { Size(id_2969 + id_2975) };
                                  ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2977 { (*p_0).text };
                                  ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2978 { std::get<5 /* Stateful */>(id_2977) };
                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2979 { id_2978.operation };
                                  ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2980 { std::get<4 /* SF4s */>(id_2979) };
                                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_2981 { std::get<3>(id_2980) };
                                  Size id_2982 { fun1516(id_2981) };
                                  Size id_2983 { Size(id_2976 + id_2982) };
                                  Size let_res_2984;
                                  {
                                    Size sz_1096 { id_2983 };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_2985 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_2986 { std::get<5 /* Stateful */>(id_2985) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_2987 { id_2986.operation };
                                    ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_2988 { std::get<4 /* SF4s */>(id_2987) };
                                    Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_2989 { std::get<4>(id_2988) };
                                    uint32_t id_2990 { id_2989.size() };
                                    Vec<1, uint32_t> id_2991 {  id_2990  };
                                    Size let_res_2992;
                                    {
                                      Vec<1, uint32_t> n_ref_1097 { id_2991 };
                                      uint32_t id_2993 { 1U };
                                      Vec<1, uint32_t> id_2994 {  id_2993  };
                                      Size let_res_2995;
                                      {
                                        Vec<1, uint32_t> lebsz_ref_1098 { id_2994 };
                                        bool while_flag_2996 { true };
                                        do {
                                          uint8_t id_2997 { 0 };
                                          uint32_t id_2998 { n_ref_1097[id_2997] };
                                          uint8_t id_2999 { 0 };
                                          uint32_t id_3000 { lebsz_ref_1098[id_2999] };
                                          uint8_t id_3001 { 7 };
                                          uint32_t id_3002 { uint32_t(id_3000 << id_3001) };
                                          bool id_3003 { bool(id_2998 >= id_3002) };
                                          while_flag_2996 = id_3003;
                                          if (while_flag_2996) {
                                            uint8_t id_3004 { 0 };
                                            uint8_t id_3005 { 0 };
                                            uint32_t id_3006 { lebsz_ref_1098[id_3005] };
                                            uint32_t id_3007 { 1U };
                                            uint32_t id_3008 { uint32_t(id_3006 + id_3007) };
                                            Void id_3009 { ((void)(lebsz_ref_1098[id_3004] = id_3008), ::dessser::Void()) };
                                            (void)id_3009;
                                          }
                                        } while (while_flag_2996);
                                        (void)::dessser::Void();
                                        uint8_t id_3010 { 0 };
                                        uint32_t id_3011 { lebsz_ref_1098[id_3010] };
                                        Size id_3012 { Size(id_3011) };
                                        let_res_2995 = id_3012;
                                      }
                                      let_res_2992 = let_res_2995;
                                    }
                                    Size id_3013 { Size(sz_1096 + let_res_2992) };
                                    Vec<1, Size> id_3014 {  id_3013  };
                                    Size let_res_3015;
                                    {
                                      Vec<1, Size> sz_ref_1099 { id_3014 };
                                      int32_t id_3016 { 0L };
                                      Vec<1, int32_t> id_3017 {  id_3016  };
                                      {
                                        Vec<1, int32_t> repeat_n_1100 { id_3017 };
                                        bool while_flag_3018 { true };
                                        do {
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3019 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3020 { std::get<5 /* Stateful */>(id_3019) };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3021 { id_3020.operation };
                                          ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_3022 { std::get<4 /* SF4s */>(id_3021) };
                                          Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3023 { std::get<4>(id_3022) };
                                          uint32_t id_3024 { id_3023.size() };
                                          int32_t id_3025 { int32_t(id_3024) };
                                          uint8_t id_3026 { 0 };
                                          int32_t id_3027 { repeat_n_1100[id_3026] };
                                          bool id_3028 { bool(id_3025 > id_3027) };
                                          while_flag_3018 = id_3028;
                                          if (while_flag_3018) {
                                            uint8_t id_3029 { 0 };
                                            uint8_t id_3030 { 0 };
                                            Size id_3031 { sz_ref_1099[id_3030] };
                                            uint8_t id_3032 { 0 };
                                            int32_t id_3033 { repeat_n_1100[id_3032] };
                                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3034 { (*p_0).text };
                                            ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3035 { std::get<5 /* Stateful */>(id_3034) };
                                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3036 { id_3035.operation };
                                            ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_3037 { std::get<4 /* SF4s */>(id_3036) };
                                            Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3038 { std::get<4>(id_3037) };
                                            std::shared_ptr<::dessser::gen::raql_expr::t>  id_3039 { id_3038[id_3033] };
                                            Size id_3040 { fun1516(id_3039) };
                                            Size id_3041 { Size(id_3031 + id_3040) };
                                            Void id_3042 { ((void)(sz_ref_1099[id_3029] = id_3041), ::dessser::Void()) };
                                            (void)id_3042;
                                            uint8_t id_3043 { 0 };
                                            uint8_t id_3044 { 0 };
                                            int32_t id_3045 { repeat_n_1100[id_3044] };
                                            int32_t id_3046 { 1L };
                                            int32_t id_3047 { int32_t(id_3045 + id_3046) };
                                            Void id_3048 { ((void)(repeat_n_1100[id_3043] = id_3047), ::dessser::Void()) };
                                            (void)id_3048;
                                            (void)id_3048;
                                          }
                                        } while (while_flag_3018);
                                        (void)::dessser::Void();
                                      }
                                      (void)::dessser::Void();
                                      uint8_t id_3049 { 0 };
                                      Size id_3050 { sz_ref_1099[id_3049] };
                                      let_res_3015 = id_3050;
                                    }
                                    let_res_2984 = let_res_3015;
                                  }
                                  choose_res_2932 = let_res_2984;
                                } else {
                                  uint16_t id_3051 { 5 };
                                  bool id_3052 { bool(id_3051 == label2_1067) };
                                  Size choose_res_3053;
                                  if (id_3052) {
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3054 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3055 { std::get<5 /* Stateful */>(id_3054) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3056 { id_3055.operation };
                                    ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_3057 { std::get<5 /* SF6 */>(id_3056) };
                                    ::dessser::gen::raql_expr::t08ea46bfedc9b7effc1e74e5b51a05ef id_3058 { std::get<0>(id_3057) };
                                    uint16_t id_3059 { uint16_t(id_3058) };
                                    uint16_t id_3060 { 0 };
                                    bool id_3061 { bool(id_3059 == id_3060) };
                                    Void id_3062 { ((void)(assert(id_3061)), ::dessser::Void()) };
                                    (void)id_3062;
                                    Size id_3063 { 2UL };
                                    Size id_3064 { Size(sz_1066 + id_3063) };
                                    Size id_3065 { 2UL };
                                    Size id_3066 { Size(id_3064 + id_3065) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3067 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3068 { std::get<5 /* Stateful */>(id_3067) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3069 { id_3068.operation };
                                    ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_3070 { std::get<5 /* SF6 */>(id_3069) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3071 { std::get<1>(id_3070) };
                                    Size id_3072 { fun1516(id_3071) };
                                    Size id_3073 { Size(id_3066 + id_3072) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3074 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3075 { std::get<5 /* Stateful */>(id_3074) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3076 { id_3075.operation };
                                    ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_3077 { std::get<5 /* SF6 */>(id_3076) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3078 { std::get<2>(id_3077) };
                                    Size id_3079 { fun1516(id_3078) };
                                    Size id_3080 { Size(id_3073 + id_3079) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3081 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3082 { std::get<5 /* Stateful */>(id_3081) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3083 { id_3082.operation };
                                    ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_3084 { std::get<5 /* SF6 */>(id_3083) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3085 { std::get<3>(id_3084) };
                                    Size id_3086 { fun1516(id_3085) };
                                    Size id_3087 { Size(id_3080 + id_3086) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3088 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3089 { std::get<5 /* Stateful */>(id_3088) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3090 { id_3089.operation };
                                    ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_3091 { std::get<5 /* SF6 */>(id_3090) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3092 { std::get<4>(id_3091) };
                                    Size id_3093 { fun1516(id_3092) };
                                    Size id_3094 { Size(id_3087 + id_3093) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3095 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3096 { std::get<5 /* Stateful */>(id_3095) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3097 { id_3096.operation };
                                    ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_3098 { std::get<5 /* SF6 */>(id_3097) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3099 { std::get<5>(id_3098) };
                                    Size id_3100 { fun1516(id_3099) };
                                    Size id_3101 { Size(id_3094 + id_3100) };
                                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3102 { (*p_0).text };
                                    ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3103 { std::get<5 /* Stateful */>(id_3102) };
                                    ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3104 { id_3103.operation };
                                    ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_3105 { std::get<5 /* SF6 */>(id_3104) };
                                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3106 { std::get<6>(id_3105) };
                                    Size id_3107 { fun1516(id_3106) };
                                    Size id_3108 { Size(id_3101 + id_3107) };
                                    choose_res_3053 = id_3108;
                                  } else {
                                    uint16_t id_3109 { 6 };
                                    bool id_3110 { bool(id_3109 == label2_1067) };
                                    Size choose_res_3111;
                                    if (id_3110) {
                                      Size id_3112 { 2UL };
                                      Size id_3113 { Size(sz_1066 + id_3112) };
                                      auto fun3114 { dessser::gen::raql_top_output::sersize_of_row_binary };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3115 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3116 { std::get<5 /* Stateful */>(id_3115) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3117 { id_3116.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3118 { std::get<6 /* Top */>(id_3117) };
                                      dessser::gen::raql_top_output::t_ext id_3119 { id_3118.output };
                                      Size id_3120 { fun3114(id_3119) };
                                      Size id_3121 { Size(id_3113 + id_3120) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3122 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3123 { std::get<5 /* Stateful */>(id_3122) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3124 { id_3123.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3125 { std::get<6 /* Top */>(id_3124) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3126 { id_3125.size };
                                      Size id_3127 { fun1516(id_3126) };
                                      Size id_3128 { Size(id_3121 + id_3127) };
                                      Size let_res_3129;
                                      {
                                        Size sz_1075 { id_3128 };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3130 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3131 { std::get<5 /* Stateful */>(id_3130) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3132 { id_3131.operation };
                                        ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3133 { std::get<6 /* Top */>(id_3132) };
                                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3134 { id_3133.max_size };
                                        bool id_3135 { !(id_3134.has_value ()) };
                                        Size choose_res_3136;
                                        if (id_3135) {
                                          Size id_3137 { 1UL };
                                          Size id_3138 { Size(sz_1075 + id_3137) };
                                          choose_res_3136 = id_3138;
                                        } else {
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3139 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3140 { std::get<5 /* Stateful */>(id_3139) };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3141 { id_3140.operation };
                                          ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3142 { std::get<6 /* Top */>(id_3141) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3143 { id_3142.max_size };
                                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_3144 { id_3143.value() };
                                          Size id_3145 { fun1516(id_3144) };
                                          Size id_3146 { Size(sz_1075 + id_3145) };
                                          Size id_3147 { 1UL };
                                          Size id_3148 { Size(id_3146 + id_3147) };
                                          choose_res_3136 = id_3148;
                                        }
                                        let_res_3129 = choose_res_3136;
                                      }
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3149 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3150 { std::get<5 /* Stateful */>(id_3149) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3151 { id_3150.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3152 { std::get<6 /* Top */>(id_3151) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3153 { id_3152.Top_what };
                                      Size id_3154 { fun1516(id_3153) };
                                      Size id_3155 { Size(let_res_3129 + id_3154) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3156 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3157 { std::get<5 /* Stateful */>(id_3156) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3158 { id_3157.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3159 { std::get<6 /* Top */>(id_3158) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3160 { id_3159.by };
                                      Size id_3161 { fun1516(id_3160) };
                                      Size id_3162 { Size(id_3155 + id_3161) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3163 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3164 { std::get<5 /* Stateful */>(id_3163) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3165 { id_3164.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3166 { std::get<6 /* Top */>(id_3165) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3167 { id_3166.Top_time };
                                      Size id_3168 { fun1516(id_3167) };
                                      Size id_3169 { Size(id_3162 + id_3168) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3170 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3171 { std::get<5 /* Stateful */>(id_3170) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3172 { id_3171.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3173 { std::get<6 /* Top */>(id_3172) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3174 { id_3173.duration };
                                      Size id_3175 { fun1516(id_3174) };
                                      Size id_3176 { Size(id_3169 + id_3175) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3177 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3178 { std::get<5 /* Stateful */>(id_3177) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3179 { id_3178.operation };
                                      ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_3180 { std::get<6 /* Top */>(id_3179) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3181 { id_3180.sigmas };
                                      Size id_3182 { fun1516(id_3181) };
                                      Size id_3183 { Size(id_3176 + id_3182) };
                                      choose_res_3111 = id_3183;
                                    } else {
                                      uint16_t id_3184 { 7 };
                                      bool id_3185 { bool(label2_1067 == id_3184) };
                                      Void id_3186 { ((void)(assert(id_3185)), ::dessser::Void()) };
                                      (void)id_3186;
                                      Size id_3187 { 2UL };
                                      Size id_3188 { Size(sz_1066 + id_3187) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3189 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3190 { std::get<5 /* Stateful */>(id_3189) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3191 { id_3190.operation };
                                      ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3192 { std::get<7 /* Past */>(id_3191) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3193 { id_3192.what };
                                      Size id_3194 { fun1516(id_3193) };
                                      Size id_3195 { Size(id_3188 + id_3194) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3196 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3197 { std::get<5 /* Stateful */>(id_3196) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3198 { id_3197.operation };
                                      ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3199 { std::get<7 /* Past */>(id_3198) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3200 { id_3199.time };
                                      Size id_3201 { fun1516(id_3200) };
                                      Size id_3202 { Size(id_3195 + id_3201) };
                                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3203 { (*p_0).text };
                                      ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3204 { std::get<5 /* Stateful */>(id_3203) };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3205 { id_3204.operation };
                                      ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3206 { std::get<7 /* Past */>(id_3205) };
                                      std::shared_ptr<::dessser::gen::raql_expr::t>  id_3207 { id_3206.max_age };
                                      Size id_3208 { fun1516(id_3207) };
                                      Size id_3209 { Size(id_3202 + id_3208) };
                                      Size id_3210 { 1UL };
                                      Size id_3211 { Size(id_3209 + id_3210) };
                                      Size let_res_3212;
                                      {
                                        Size sz_1072 { id_3211 };
                                        ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3213 { (*p_0).text };
                                        ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3214 { std::get<5 /* Stateful */>(id_3213) };
                                        ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3215 { id_3214.operation };
                                        ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3216 { std::get<7 /* Past */>(id_3215) };
                                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3217 { id_3216.sample_size };
                                        bool id_3218 { !(id_3217.has_value ()) };
                                        Size choose_res_3219;
                                        if (id_3218) {
                                          Size id_3220 { 1UL };
                                          Size id_3221 { Size(sz_1072 + id_3220) };
                                          choose_res_3219 = id_3221;
                                        } else {
                                          ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3222 { (*p_0).text };
                                          ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_3223 { std::get<5 /* Stateful */>(id_3222) };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_3224 { id_3223.operation };
                                          ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_3225 { std::get<7 /* Past */>(id_3224) };
                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3226 { id_3225.sample_size };
                                          std::shared_ptr<::dessser::gen::raql_expr::t>  id_3227 { id_3226.value() };
                                          Size id_3228 { fun1516(id_3227) };
                                          Size id_3229 { Size(sz_1072 + id_3228) };
                                          Size id_3230 { 1UL };
                                          Size id_3231 { Size(id_3229 + id_3230) };
                                          choose_res_3219 = id_3231;
                                        }
                                        let_res_3212 = choose_res_3219;
                                      }
                                      choose_res_3111 = let_res_3212;
                                    }
                                    choose_res_3053 = choose_res_3111;
                                  }
                                  choose_res_2932 = choose_res_3053;
                                }
                                choose_res_2873 = choose_res_2932;
                              }
                              choose_res_2808 = choose_res_2873;
                            }
                            choose_res_2756 = choose_res_2808;
                          }
                          choose_res_2655 = choose_res_2756;
                        }
                        let_res_2652 = choose_res_2655;
                      }
                      let_res_2647 = let_res_2652;
                    }
                    choose_res_2625 = let_res_2647;
                  } else {
                    uint16_t id_3232 { 6 };
                    bool id_3233 { bool(label2_1060 == id_3232) };
                    Void id_3234 { ((void)(assert(id_3233)), ::dessser::Void()) };
                    (void)id_3234;
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3235 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_3236 { std::get<6 /* Generator */>(id_3235) };
                    uint16_t id_3237 { uint16_t(id_3236.index()) };
                    uint16_t id_3238 { 0 };
                    bool id_3239 { bool(id_3237 == id_3238) };
                    Void id_3240 { ((void)(assert(id_3239)), ::dessser::Void()) };
                    (void)id_3240;
                    Size id_3241 { 2UL };
                    Size id_3242 { Size(sz_1059 + id_3241) };
                    Size id_3243 { 2UL };
                    Size id_3244 { Size(id_3242 + id_3243) };
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3245 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_3246 { std::get<6 /* Generator */>(id_3245) };
                    ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_3247 { std::get<0 /* Split */>(id_3246) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3248 { std::get<0>(id_3247) };
                    Size id_3249 { fun1516(id_3248) };
                    Size id_3250 { Size(id_3244 + id_3249) };
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3251 { (*p_0).text };
                    ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_3252 { std::get<6 /* Generator */>(id_3251) };
                    ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_3253 { std::get<0 /* Split */>(id_3252) };
                    std::shared_ptr<::dessser::gen::raql_expr::t>  id_3254 { std::get<1>(id_3253) };
                    Size id_3255 { fun1516(id_3254) };
                    Size id_3256 { Size(id_3250 + id_3255) };
                    choose_res_2625 = id_3256;
                  }
                  choose_res_1813 = choose_res_2625;
                }
                choose_res_1722 = choose_res_1813;
              }
              choose_res_1660 = choose_res_1722;
            }
            choose_res_1586 = choose_res_1660;
          }
          choose_res_1524 = choose_res_1586;
        }
        let_res_1521 = choose_res_1524;
      }
      let_res_1518 = let_res_1521;
    }
    Size id_3257 { 4UL };
    Size id_3258 { Size(let_res_1518 + id_3257) };
    Size let_res_3259;
    {
      Size sz_1176 { id_3258 };
      auto fun3260 { dessser::gen::raql_type::sersize_of_row_binary };
      dessser::gen::raql_type::t_ext id_3261 { (*p_0).typ };
      Size id_3262 { fun3260(id_3261) };
      Size id_3263 { Size(sz_1176 + id_3262) };
      let_res_3259 = id_3263;
    }
    Size let_res_3264;
    {
      Size sz_1177 { let_res_3259 };
      std::optional<dessser::gen::units::t_ext> id_3265 { (*p_0).units };
      bool id_3266 { !(id_3265.has_value ()) };
      Size choose_res_3267;
      if (id_3266) {
        Size id_3268 { 1UL };
        Size id_3269 { Size(sz_1177 + id_3268) };
        choose_res_3267 = id_3269;
      } else {
        auto fun3270 { dessser::gen::units::sersize_of_row_binary };
        std::optional<dessser::gen::units::t_ext> id_3271 { (*p_0).units };
        dessser::gen::units::t_ext id_3272 { id_3271.value() };
        Size id_3273 { fun3270(id_3272) };
        Size id_3274 { Size(sz_1177 + id_3273) };
        Size id_3275 { 1UL };
        Size id_3276 { Size(id_3274 + id_3275) };
        choose_res_3267 = id_3276;
      }
      let_res_3264 = choose_res_3267;
    }
    return let_res_3264;
  }
   };
  return fun1516;
}
std::function<Size(std::shared_ptr<::dessser::gen::raql_expr::t>  &)> sersize_of_row_binary(sersize_of_row_binary_init());

/* 
    (fun ("Ptr")
      (let "dsum1_63" (let-pair "du16_fst_58" "du16_snd_59" (read-u16 little-endian (param 0)) (make-tup (identifier "du16_fst_58") (identifier "du16_snd_59")))
        (let-pair "dsum1_fst_64" "dsum1_snd_65" (identifier "dsum1_63")
          (if (eq (u16 0) (identifier "dsum1_fst_64")) (make-tup (construct "[NoState Void | ImmediateState Void | LocalState Void | GlobalState Void]" 0 (nop)) (identifier "dsum1_snd_65"))
            (if (eq (u16 1) (identifier "dsum1_fst_64")) (make-tup (construct "[NoState Void | ImmediateState Void | LocalState Void | GlobalState Void]" 1 (nop)) (identifier "dsum1_snd_65"))
              (if (eq (u16 2) (identifier "dsum1_fst_64")) (make-tup (construct "[NoState Void | ImmediateState Void | LocalState Void | GlobalState Void]" 2 (nop)) (identifier "dsum1_snd_65"))
                (seq (assert (eq (identifier "dsum1_fst_64") (u16 3))) (make-tup (construct "[NoState Void | ImmediateState Void | LocalState Void | GlobalState Void]" 3 (nop)) (identifier "dsum1_snd_65")))))))))
 */
static std::function<::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f(Pointer &)> lifespan_of_row_binary_init()
{
  std::function<::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f(Pointer &)> fun3277 { [&](Pointer p_0) {
    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3278 { p_0.readU16Le() };
    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3279;
    {
      auto du16_fst_58 { std::get<0>(id_3278) };
      auto du16_snd_59 { std::get<1>(id_3278) };
      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3280 { du16_fst_58, du16_snd_59 };
      letpair_res_3279 = id_3280;
    }
    ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f let_res_3281;
    {
      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_63 { letpair_res_3279 };
      ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f letpair_res_3282;
      {
        auto dsum1_fst_64 { std::get<0>(dsum1_63) };
        auto dsum1_snd_65 { std::get<1>(dsum1_63) };
        uint16_t id_3283 { 0 };
        bool id_3284 { bool(id_3283 == dsum1_fst_64) };
        ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f choose_res_3285;
        if (id_3284) {
          (void)::dessser::Void();
          ::dessser::gen::raql_expr::lifespan id_3286 { NoState };
          ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f id_3287 { id_3286, dsum1_snd_65 };
          choose_res_3285 = id_3287;
        } else {
          uint16_t id_3288 { 1 };
          bool id_3289 { bool(id_3288 == dsum1_fst_64) };
          ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f choose_res_3290;
          if (id_3289) {
            (void)::dessser::Void();
            ::dessser::gen::raql_expr::lifespan id_3291 { ImmediateState };
            ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f id_3292 { id_3291, dsum1_snd_65 };
            choose_res_3290 = id_3292;
          } else {
            uint16_t id_3293 { 2 };
            bool id_3294 { bool(id_3293 == dsum1_fst_64) };
            ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f choose_res_3295;
            if (id_3294) {
              (void)::dessser::Void();
              ::dessser::gen::raql_expr::lifespan id_3296 { LocalState };
              ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f id_3297 { id_3296, dsum1_snd_65 };
              choose_res_3295 = id_3297;
            } else {
              uint16_t id_3298 { 3 };
              bool id_3299 { bool(dsum1_fst_64 == id_3298) };
              Void id_3300 { ((void)(assert(id_3299)), ::dessser::Void()) };
              (void)id_3300;
              (void)::dessser::Void();
              ::dessser::gen::raql_expr::lifespan id_3301 { GlobalState };
              ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f id_3302 { id_3301, dsum1_snd_65 };
              choose_res_3295 = id_3302;
            }
            choose_res_3290 = choose_res_3295;
          }
          choose_res_3285 = choose_res_3290;
        }
        letpair_res_3282 = choose_res_3285;
      }
      let_res_3281 = letpair_res_3282;
    }
    return let_res_3281;
  }
   };
  return fun3277;
}
std::function<::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f(Pointer &)> lifespan_of_row_binary(lifespan_of_row_binary_init());

/* 
    (fun ("Ptr")
      (let "drec_1037"
        (let "dsum1_84" (let-pair "du16_fst_79" "du16_snd_80" (read-u16 little-endian (param 0)) (make-tup (identifier "du16_fst_79") (identifier "du16_snd_80")))
          (let-pair "dsum1_fst_85" "dsum1_snd_86" (identifier "dsum1_84")
            (if (eq (u16 0) (identifier "dsum1_fst_85"))
              (let-pair "dlist4_fst_1032" "dlist4_snd_1033"
                (let "dlist1_1020"
                  (let "leb_ref_1011" (make-vec (u32 0))
                    (let "shft_ref_1012" (make-vec (u8 0))
                      (let "p_ref_1013" (make-vec (identifier "dsum1_snd_86"))
                        (seq
                          (while
                            (let "leb128_1014" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_1013")))
                              (let-pair "leb128_fst_1015" "leb128_snd_1016" 
                                (identifier "leb128_1014")
                                (seq (set-vec (u8 0) (identifier "p_ref_1013") (identifier "leb128_snd_1016"))
                                  (set-vec (u8 0) (identifier "leb_ref_1011")
                                    (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_1015") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_1012"))) (unsafe-nth (u8 0) (identifier "leb_ref_1011"))))
                                  (set-vec (u8 0) (identifier "shft_ref_1012") (add (unsafe-nth (u8 0) (identifier "shft_ref_1012")) (u8 7))) 
                                  (ge (identifier "leb128_fst_1015") (u8 128))))) 
                            (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_1011")) (unsafe-nth (u8 0) (identifier "p_ref_1013")))))))
                  (let-pair "dlist1_fst_1021" "dlist1_snd_1022" (identifier "dlist1_1020")
                    (let "inits_src_ref_1023" (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_1022")))
                      (seq
                        (let "repeat_n_1024" (make-vec (i32 0))
                          (while (gt (to-i32 (identifier "dlist1_fst_1021")) (unsafe-nth (u8 0) (identifier "repeat_n_1024")))
                            (seq
                              (let "dlist2_1025" (unsafe-nth (u8 0) (identifier "inits_src_ref_1023"))
                                (let-pair "dlist2_fst_1026" "dlist2_snd_1027" 
                                  (identifier "dlist2_1025")
                                  (set-vec (u8 0) (identifier "inits_src_ref_1023")
                                    (let-pair "dlist3_fst_1029" "dlist3_snd_1030" 
                                      (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_1027")) 
                                      (make-tup (cons (identifier "dlist3_fst_1029") (identifier "dlist2_fst_1026")) (identifier "dlist3_snd_1030"))))))
                              (set-vec (u8 0) (identifier "repeat_n_1024") (add (unsafe-nth (u8 0) (identifier "repeat_n_1024")) (i32 1)))))) 
                        (unsafe-nth (u8 0) (identifier "inits_src_ref_1023"))))))
                (make-tup
                  (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 0
                    (identity (identifier "dlist4_fst_1032"))) (identifier "dlist4_snd_1033")))
              (if (eq (u16 1) (identifier "dsum1_fst_85"))
                (let-pair "dlist4_fst_1006" "dlist4_snd_1007"
                  (let "dlist1_988"
                    (let "leb_ref_979" (make-vec (u32 0))
                      (let "shft_ref_980" (make-vec (u8 0))
                        (let "p_ref_981" (make-vec (identifier "dsum1_snd_86"))
                          (seq
                            (while
                              (let "leb128_982" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_981")))
                                (let-pair "leb128_fst_983" "leb128_snd_984" 
                                  (identifier "leb128_982")
                                  (seq (set-vec (u8 0) (identifier "p_ref_981") (identifier "leb128_snd_984"))
                                    (set-vec (u8 0) (identifier "leb_ref_979")
                                      (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_983") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_980"))) (unsafe-nth (u8 0) (identifier "leb_ref_979"))))
                                    (set-vec (u8 0) (identifier "shft_ref_980") (add (unsafe-nth (u8 0) (identifier "shft_ref_980")) (u8 7))) 
                                    (ge (identifier "leb128_fst_983") (u8 128))))) 
                              (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_979")) (unsafe-nth (u8 0) (identifier "p_ref_981")))))))
                    (let-pair "dlist1_fst_989" "dlist1_snd_990" (identifier "dlist1_988")
                      (let "inits_src_ref_991" (make-vec (make-tup (end-of-list "($field_name; THIS)") (identifier "dlist1_snd_990")))
                        (seq
                          (let "repeat_n_992" (make-vec (i32 0))
                            (while (gt (to-i32 (identifier "dlist1_fst_989")) (unsafe-nth (u8 0) (identifier "repeat_n_992")))
                              (seq
                                (let "dlist2_993" (unsafe-nth (u8 0) (identifier "inits_src_ref_991"))
                                  (let-pair "dlist2_fst_994" "dlist2_snd_995" 
                                    (identifier "dlist2_993")
                                    (set-vec (u8 0) (identifier "inits_src_ref_991")
                                      (let-pair "dtup_fst_997" "dtup_snd_998" 
                                        (apply (ext-identifier field_name of-row-binary) (identifier "dlist2_snd_995"))
                                        (let-pair "dtup_fst_1000" "dtup_snd_1001" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_998"))
                                          (make-tup (cons (make-tup (identifier "dtup_fst_997") (identifier "dtup_fst_1000")) (identifier "dlist2_fst_994")) (identifier "dtup_snd_1001")))))))
                                (set-vec (u8 0) (identifier "repeat_n_992") (add (unsafe-nth (u8 0) (identifier "repeat_n_992")) (i32 1)))))) 
                          (unsafe-nth (u8 0) (identifier "inits_src_ref_991"))))))
                  (make-tup
                    (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 1
                      (identity (identifier "dlist4_fst_1006"))) (identifier "dlist4_snd_1007")))
                (if (eq (u16 2) (identifier "dsum1_fst_85"))
                  (let-pair "dlist4_fst_974" "dlist4_snd_975"
                    (let "dlist1_962"
                      (let "leb_ref_953" (make-vec (u32 0))
                        (let "shft_ref_954" (make-vec (u8 0))
                          (let "p_ref_955" (make-vec (identifier "dsum1_snd_86"))
                            (seq
                              (while
                                (let "leb128_956" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_955")))
                                  (let-pair "leb128_fst_957" "leb128_snd_958" 
                                    (identifier "leb128_956")
                                    (seq (set-vec (u8 0) (identifier "p_ref_955") (identifier "leb128_snd_958"))
                                      (set-vec (u8 0) (identifier "leb_ref_953")
                                        (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_957") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_954"))) (unsafe-nth (u8 0) (identifier "leb_ref_953"))))
                                      (set-vec (u8 0) (identifier "shft_ref_954") (add (unsafe-nth (u8 0) (identifier "shft_ref_954")) (u8 7))) 
                                      (ge (identifier "leb128_fst_957") (u8 128))))) 
                                (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_953")) (unsafe-nth (u8 0) (identifier "p_ref_955")))))))
                      (let-pair "dlist1_fst_963" "dlist1_snd_964" (identifier "dlist1_962")
                        (let "inits_src_ref_965" (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_964")))
                          (seq
                            (let "repeat_n_966" (make-vec (i32 0))
                              (while (gt (to-i32 (identifier "dlist1_fst_963")) (unsafe-nth (u8 0) (identifier "repeat_n_966")))
                                (seq
                                  (let "dlist2_967" (unsafe-nth (u8 0) (identifier "inits_src_ref_965"))
                                    (let-pair "dlist2_fst_968" "dlist2_snd_969" 
                                      (identifier "dlist2_967")
                                      (set-vec (u8 0) (identifier "inits_src_ref_965")
                                        (let-pair "dlist3_fst_971" "dlist3_snd_972" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_969")) 
                                          (make-tup (cons (identifier "dlist3_fst_971") (identifier "dlist2_fst_968")) (identifier "dlist3_snd_972"))))))
                                  (set-vec (u8 0) (identifier "repeat_n_966") (add (unsafe-nth (u8 0) (identifier "repeat_n_966")) (i32 1)))))) 
                            (unsafe-nth (u8 0) (identifier "inits_src_ref_965"))))))
                    (make-tup
                      (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 2
                        (identity (identifier "dlist4_fst_974"))) (identifier "dlist4_snd_975")))
                  (if (eq (u16 3) (identifier "dsum1_fst_85"))
                    (let "dtup_941"
                      (let-pair "dlist4_fst_939" "dlist4_snd_940"
                        (let "dlist1_921"
                          (let "leb_ref_912" (make-vec (u32 0))
                            (let "shft_ref_913" (make-vec (u8 0))
                              (let "p_ref_914" (make-vec (identifier "dsum1_snd_86"))
                                (seq
                                  (while
                                    (let "leb128_915" (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_914")))
                                      (let-pair "leb128_fst_916" "leb128_snd_917" 
                                        (identifier "leb128_915")
                                        (seq (set-vec (u8 0) (identifier "p_ref_914") (identifier "leb128_snd_917"))
                                          (set-vec (u8 0) (identifier "leb_ref_912")
                                            (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_916") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_913"))) (unsafe-nth (u8 0) (identifier "leb_ref_912"))))
                                          (set-vec (u8 0) (identifier "shft_ref_913") (add (unsafe-nth (u8 0) (identifier "shft_ref_913")) (u8 7))) 
                                          (ge (identifier "leb128_fst_916") (u8 128))))) 
                                    (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_912")) (unsafe-nth (u8 0) (identifier "p_ref_914")))))))
                          (let-pair "dlist1_fst_922" "dlist1_snd_923" 
                            (identifier "dlist1_921")
                            (let "inits_src_ref_924" (make-vec (make-tup (end-of-list "{case_cond: THIS; case_cons: THIS}") (identifier "dlist1_snd_923")))
                              (seq
                                (let "repeat_n_925" (make-vec (i32 0))
                                  (while (gt (to-i32 (identifier "dlist1_fst_922")) (unsafe-nth (u8 0) (identifier "repeat_n_925")))
                                    (seq
                                      (let "dlist2_926" (unsafe-nth (u8 0) (identifier "inits_src_ref_924"))
                                        (let-pair "dlist2_fst_927" "dlist2_snd_928" 
                                          (identifier "dlist2_926")
                                          (set-vec (u8 0) (identifier "inits_src_ref_924")
                                            (let-pair "drec_fst_930" "drec_snd_931" 
                                              (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_928"))
                                              (let-pair "drec_fst_933" "drec_snd_934" 
                                                (apply (myself "(THIS; Ptr)") (identifier "drec_snd_931"))
                                                (make-tup (cons (make-rec (string "case_cons") (identifier "drec_fst_933") (string "case_cond") (identifier "drec_fst_930")) (identifier "dlist2_fst_927"))
                                                  (identifier "drec_snd_934"))))))) 
                                      (set-vec (u8 0) (identifier "repeat_n_925") (add (unsafe-nth (u8 0) (identifier "repeat_n_925")) (i32 1)))))) 
                                (unsafe-nth (u8 0) (identifier "inits_src_ref_924")))))) 
                        (make-tup (identity (identifier "dlist4_fst_939")) (identifier "dlist4_snd_940")))
                      (let-pair "dtup_fst_942" "dtup_snd_943" (identifier "dtup_941")
                        (let-pair "dtup_fst_948" "dtup_snd_949"
                          (if (eq (peek-u8 (identifier "dtup_snd_943") (size 0)) (u8 1)) 
                            (make-tup (null "THIS") (ptr-add (identifier "dtup_snd_943") (size 1)))
                            (let-pair "make1_1_fst_945" "make1_1_snd_946" 
                              (apply (myself "(THIS; Ptr)") (ptr-add (identifier "dtup_snd_943") (size 1))) 
                              (make-tup (not-null (identifier "make1_1_fst_945")) (identifier "make1_1_snd_946"))))
                          (make-tup
                            (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 3
                              (make-tup (identifier "dtup_fst_942") (identifier "dtup_fst_948"))) 
                            (identifier "dtup_snd_949")))))
                    (if (eq (u16 4) (identifier "dsum1_fst_85"))
                      (let-pair "dsum2_fst_910" "dsum2_snd_911"
                        (let "dsum1_485" (let-pair "du16_fst_480" "du16_snd_481" (read-u16 little-endian (identifier "dsum1_snd_86")) (make-tup (identifier "du16_fst_480") (identifier "du16_snd_481")))
                          (let-pair "dsum1_fst_486" "dsum1_snd_487" (identifier "dsum1_485")
                            (if (eq (u16 0) (identifier "dsum1_fst_486"))
                              (let-pair "dsum2_fst_907" "dsum2_snd_908"
                                (let "dsum1_853" (let-pair "du16_fst_848" "du16_snd_849" (read-u16 little-endian (identifier "dsum1_snd_487")) (make-tup (identifier "du16_fst_848") (identifier "du16_snd_849")))
                                  (let-pair "dsum1_fst_854" "dsum1_snd_855" 
                                    (identifier "dsum1_853")
                                    (if (eq (u16 0) (identifier "dsum1_fst_854"))
                                      (let-pair "dsum2_fst_904" "dsum2_snd_905" 
                                        (apply (ext-identifier raql_value of-row-binary) (identifier "dsum1_snd_855"))
                                        (make-tup
                                          (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 0
                                            (identifier "dsum2_fst_904")) 
                                          (identifier "dsum2_snd_905")))
                                      (if (eq (u16 1) (identifier "dsum1_fst_854"))
                                        (let-pair "dsum2_fst_901" "dsum2_snd_902" 
                                          (apply (ext-identifier raql_variable of-row-binary) (identifier "dsum1_snd_855"))
                                          (make-tup
                                            (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 1
                                              (identifier "dsum2_fst_901")) 
                                            (identifier "dsum2_snd_902")))
                                        (if (eq (u16 2) (identifier "dsum1_fst_854"))
                                          (let-pair "dsum2_fst_898" "dsum2_snd_899" 
                                            (apply (ext-identifier raql_binding_key of-row-binary) (identifier "dsum1_snd_855"))
                                            (make-tup
                                              (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 2
                                                (identifier "dsum2_fst_898")) 
                                              (identifier "dsum2_snd_899")))
                                          (if (eq (u16 3) (identifier "dsum1_fst_854"))
                                            (make-tup
                                              (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 3
                                                (nop)) (identifier "dsum1_snd_855"))
                                            (if (eq (u16 4) (identifier "dsum1_fst_854"))
                                              (make-tup
                                                (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 4
                                                  (nop)) (identifier "dsum1_snd_855"))
                                              (if (eq (u16 5) (identifier "dsum1_fst_854"))
                                                (make-tup
                                                  (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 5
                                                    (nop)) (identifier "dsum1_snd_855"))
                                                (if (eq (u16 6) (identifier "dsum1_fst_854"))
                                                  (make-tup
                                                    (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 6
                                                      (nop)) (identifier "dsum1_snd_855"))
                                                  (if (eq (u16 7) (identifier "dsum1_fst_854"))
                                                    (let-pair "dlist4_fst_880" "dlist4_snd_881"
                                                      (let "dlist1_868"
                                                        (let "leb_ref_859" 
                                                          (make-vec (u32 0))
                                                          (let "shft_ref_860" 
                                                            (make-vec (u8 0))
                                                            (let "p_ref_861" 
                                                              (make-vec (identifier "dsum1_snd_855"))
                                                              (seq
                                                                (while
                                                                  (let "leb128_862" 
                                                                    (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_861")))
                                                                    (let-pair "leb128_fst_863" "leb128_snd_864" 
                                                                    (identifier "leb128_862")
                                                                    (seq 
                                                                    (set-vec (u8 0) (identifier "p_ref_861") (identifier "leb128_snd_864"))
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb_ref_859")
                                                                    (bit-or 
                                                                    (left-shift (to-u32 (bit-and (identifier "leb128_fst_863") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_860")))
                                                                    (unsafe-nth (u8 0) (identifier "leb_ref_859")))) 
                                                                    (set-vec (u8 0) (identifier "shft_ref_860") (add (unsafe-nth (u8 0) (identifier "shft_ref_860")) (u8 7))) 
                                                                    (ge (identifier "leb128_fst_863") (u8 128))))) 
                                                                  (nop)) 
                                                                (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_859")) (unsafe-nth (u8 0) (identifier "p_ref_861")))))))
                                                        (let-pair "dlist1_fst_869" "dlist1_snd_870" 
                                                          (identifier "dlist1_868")
                                                          (let "inits_src_ref_871" 
                                                            (make-vec (make-tup (end-of-list "$raql_path_comp") (identifier "dlist1_snd_870")))
                                                            (seq
                                                              (let "repeat_n_872" 
                                                                (make-vec (i32 0))
                                                                (while 
                                                                  (gt (to-i32 (identifier "dlist1_fst_869")) (unsafe-nth (u8 0) (identifier "repeat_n_872")))
                                                                  (seq
                                                                    (let "dlist2_873" 
                                                                    (unsafe-nth (u8 0) (identifier "inits_src_ref_871"))
                                                                    (let-pair "dlist2_fst_874" "dlist2_snd_875" 
                                                                    (identifier "dlist2_873")
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "inits_src_ref_871")
                                                                    (let-pair "dlist3_fst_877" "dlist3_snd_878" 
                                                                    (apply (ext-identifier raql_path_comp of-row-binary) (identifier "dlist2_snd_875"))
                                                                    (make-tup (cons (identifier "dlist3_fst_877") (identifier "dlist2_fst_874")) (identifier "dlist3_snd_878"))))))
                                                                    (set-vec (u8 0) (identifier "repeat_n_872") (add (unsafe-nth (u8 0) (identifier "repeat_n_872")) (i32 1))))))
                                                              (unsafe-nth (u8 0) (identifier "inits_src_ref_871"))))))
                                                      (make-tup
                                                        (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 7
                                                          (identity (identifier "dlist4_fst_880"))) 
                                                        (identifier "dlist4_snd_881")))
                                                    (seq (assert (eq (identifier "dsum1_fst_854") (u16 8)))
                                                      (make-tup
                                                        (construct "[Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void]" 8
                                                          (nop)) (identifier "dsum1_snd_855")))))))))))))
                                (make-tup
                                  (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 0
                                    (identifier "dsum2_fst_907")) (identifier "dsum2_snd_908")))
                              (if (eq (u16 1) (identifier "dsum1_fst_486"))
                                (let-pair "dtup_fst_839" "dtup_snd_840"
                                  (let "dsum1_679" (let-pair "du16_fst_674" "du16_snd_675" (read-u16 little-endian (identifier "dsum1_snd_487")) (make-tup (identifier "du16_fst_674") (identifier "du16_snd_675")))
                                    (let-pair "dsum1_fst_680" "dsum1_snd_681" 
                                      (identifier "dsum1_679")
                                      (if (eq (u16 0) (identifier "dsum1_fst_680"))
                                        (make-tup
                                          (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 0
                                            (nop)) (identifier "dsum1_snd_681"))
                                        (if (eq (u16 1) (identifier "dsum1_fst_680"))
                                          (let-pair "dsum2_fst_833" "dsum2_snd_834" 
                                            (apply (ext-identifier raql_type of-row-binary) (identifier "dsum1_snd_681"))
                                            (make-tup
                                              (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 1
                                                (identifier "dsum2_fst_833")) 
                                              (identifier "dsum2_snd_834")))
                                          (if (eq (u16 2) (identifier "dsum1_fst_680"))
                                            (make-tup
                                              (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 2
                                                (nop)) (identifier "dsum1_snd_681"))
                                            (if (eq (u16 3) (identifier "dsum1_fst_680"))
                                              (let "dtup_805" (apply (ext-identifier raql_type of-row-binary) (identifier "dsum1_snd_681"))
                                                (let-pair "dtup_fst_806" "dtup_snd_807" 
                                                  (identifier "dtup_805")
                                                  (let-pair "dtup_fst_824" "dtup_snd_825"
                                                    (let "dsum1_814" 
                                                      (let-pair "du16_fst_809" "du16_snd_810" (read-u16 little-endian (identifier "dtup_snd_807")) (make-tup (identifier "du16_fst_809") (identifier "du16_snd_810")))
                                                      (let-pair "dsum1_fst_815" "dsum1_snd_816" 
                                                        (identifier "dsum1_814")
                                                        (if (eq (u16 0) (identifier "dsum1_fst_815")) 
                                                          (make-tup (construct "[LittleEndian Void | BigEndian Void]" 0 (nop)) (identifier "dsum1_snd_816"))
                                                          (seq (assert (eq (identifier "dsum1_fst_815") (u16 1))) (make-tup (construct "[LittleEndian Void | BigEndian Void]" 1 (nop)) (identifier "dsum1_snd_816"))))))
                                                    (make-tup
                                                      (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 3
                                                        (make-tup (identifier "dtup_fst_806") (identifier "dtup_fst_824"))) 
                                                      (identifier "dtup_snd_825")))))
                                              (if (eq (u16 4) (identifier "dsum1_fst_680"))
                                                (make-tup
                                                  (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 4
                                                    (nop)) (identifier "dsum1_snd_681"))
                                                (if (eq (u16 5) (identifier "dsum1_fst_680"))
                                                  (make-tup
                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 5
                                                      (nop)) (identifier "dsum1_snd_681"))
                                                  (if (eq (u16 6) (identifier "dsum1_fst_680"))
                                                    (make-tup
                                                      (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 6
                                                        (nop)) (identifier "dsum1_snd_681"))
                                                    (if (eq (u16 7) (identifier "dsum1_fst_680"))
                                                      (make-tup
                                                        (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 7
                                                          (nop)) (identifier "dsum1_snd_681"))
                                                      (if (eq (u16 8) (identifier "dsum1_fst_680"))
                                                        (make-tup
                                                          (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 8
                                                            (nop)) (identifier "dsum1_snd_681"))
                                                        (if (eq (u16 9) (identifier "dsum1_fst_680"))
                                                          (make-tup
                                                            (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 9
                                                              (nop)) 
                                                            (identifier "dsum1_snd_681"))
                                                          (if (eq (u16 10) (identifier "dsum1_fst_680"))
                                                            (make-tup
                                                              (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 10
                                                                (nop)) 
                                                              (identifier "dsum1_snd_681"))
                                                            (if (eq (u16 11) (identifier "dsum1_fst_680"))
                                                              (make-tup
                                                                (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 11
                                                                  (nop)) 
                                                                (identifier "dsum1_snd_681"))
                                                              (if (eq (u16 12) (identifier "dsum1_fst_680"))
                                                                (make-tup
                                                                  (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 12
                                                                    (nop)) 
                                                                  (identifier "dsum1_snd_681"))
                                                                (if (eq (u16 13) (identifier "dsum1_fst_680"))
                                                                  (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 13
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                  (if 
                                                                    (eq (u16 14) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 14
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 15) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 15
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 16
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 17
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 18
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 19
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 20
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 21
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 22
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 23
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 24
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 25) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 25
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 26) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 26
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 27) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 27
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 28) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 28
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 29) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 29
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 30) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 30
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 31) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 31
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 32) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 32
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 33) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 33
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 34) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 34
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 35) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 35
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 36) (identifier "dsum1_fst_680"))
                                                                    (let "dstring1_700"
                                                                    (let "leb_ref_694" 
                                                                    (make-vec (u32 0))
                                                                    (let "shft_ref_695" 
                                                                    (make-vec (u8 0))
                                                                    (let "p_ref_696" 
                                                                    (make-vec (identifier "dsum1_snd_681"))
                                                                    (seq
                                                                    (while
                                                                    (let "leb128_697" 
                                                                    (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_696")))
                                                                    (let-pair "leb128_fst_698" "leb128_snd_699" 
                                                                    (identifier "leb128_697")
                                                                    (seq 
                                                                    (set-vec (u8 0) (identifier "p_ref_696") (identifier "leb128_snd_699"))
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb_ref_694")
                                                                    (bit-or 
                                                                    (left-shift (to-u32 (bit-and (identifier "leb128_fst_698") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_695")))
                                                                    (unsafe-nth (u8 0) (identifier "leb_ref_694")))) 
                                                                    (set-vec (u8 0) (identifier "shft_ref_695") (add (unsafe-nth (u8 0) (identifier "shft_ref_695")) (u8 7))) 
                                                                    (ge (identifier "leb128_fst_698") (u8 128))))) 
                                                                    (nop)) 
                                                                    (make-tup (size-of-u32 (unsafe-nth (u8 0) (identifier "leb_ref_694"))) (unsafe-nth (u8 0) (identifier "p_ref_696")))))))
                                                                    (let-pair "dstring1_fst_701" "dstring1_snd_702" 
                                                                    (identifier "dstring1_700")
                                                                    (let-pair "dstring2_fst_704" "dstring2_snd_705" 
                                                                    (read-bytes (identifier "dstring1_snd_702") (identifier "dstring1_fst_701"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 36
                                                                    (string-of-bytes (identifier "dstring2_fst_704"))) 
                                                                    (identifier "dstring2_snd_705")))))
                                                                    (if 
                                                                    (eq (u16 37) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 37
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 38) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 38
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (if 
                                                                    (eq (u16 39) (identifier "dsum1_fst_680"))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 39
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681"))
                                                                    (seq 
                                                                    (assert (eq (identifier "dsum1_fst_680") (u16 40)))
                                                                    (make-tup
                                                                    (construct "[Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]" 40
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_681")))))))))))))))))))))))))))))))))))))))))))))
                                  (let-pair "dtup_fst_842" "dtup_snd_843" 
                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_840"))
                                    (make-tup
                                      (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 1
                                        (make-tup (identifier "dtup_fst_839") (identifier "dtup_fst_842"))) 
                                      (identifier "dtup_snd_843"))))
                                (if (eq (u16 2) (identifier "dsum1_fst_486"))
                                  (let "dtup_641"
                                    (let "dsum1_626" (let-pair "du16_fst_621" "du16_snd_622" (read-u16 little-endian (identifier "dsum1_snd_487")) (make-tup (identifier "du16_fst_621") (identifier "du16_snd_622")))
                                      (let-pair "dsum1_fst_627" "dsum1_snd_628" 
                                        (identifier "dsum1_626")
                                        (if (eq (u16 0) (identifier "dsum1_fst_627")) 
                                          (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 0 (nop)) (identifier "dsum1_snd_628"))
                                          (if (eq (u16 1) (identifier "dsum1_fst_627")) 
                                            (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 1 (nop)) (identifier "dsum1_snd_628"))
                                            (if (eq (u16 2) (identifier "dsum1_fst_627")) 
                                              (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 2 (nop)) (identifier "dsum1_snd_628"))
                                              (seq (assert (eq (identifier "dsum1_fst_627") (u16 3))) (make-tup (construct "[Max Void | Min Void | Print Void | Coalesce Void]" 3 (nop)) (identifier "dsum1_snd_628"))))))))
                                    (let-pair "dtup_fst_642" "dtup_snd_643" 
                                      (identifier "dtup_641")
                                      (let-pair "dlist4_fst_665" "dlist4_snd_666"
                                        (let "dlist1_653"
                                          (let "leb_ref_644" (make-vec (u32 0))
                                            (let "shft_ref_645" (make-vec (u8 0))
                                              (let "p_ref_646" (make-vec (identifier "dtup_snd_643"))
                                                (seq
                                                  (while
                                                    (let "leb128_647" 
                                                      (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_646")))
                                                      (let-pair "leb128_fst_648" "leb128_snd_649" 
                                                        (identifier "leb128_647")
                                                        (seq (set-vec (u8 0) (identifier "p_ref_646") (identifier "leb128_snd_649"))
                                                          (set-vec (u8 0) 
                                                            (identifier "leb_ref_644")
                                                            (bit-or (left-shift (to-u32 (bit-and (identifier "leb128_fst_648") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_645")))
                                                              (unsafe-nth (u8 0) (identifier "leb_ref_644")))) 
                                                          (set-vec (u8 0) (identifier "shft_ref_645") (add (unsafe-nth (u8 0) (identifier "shft_ref_645")) (u8 7))) 
                                                          (ge (identifier "leb128_fst_648") (u8 128))))) 
                                                    (nop)) (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_644")) (unsafe-nth (u8 0) (identifier "p_ref_646")))))))
                                          (let-pair "dlist1_fst_654" "dlist1_snd_655" 
                                            (identifier "dlist1_653")
                                            (let "inits_src_ref_656" 
                                              (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_655")))
                                              (seq
                                                (let "repeat_n_657" (make-vec (i32 0))
                                                  (while (gt (to-i32 (identifier "dlist1_fst_654")) (unsafe-nth (u8 0) (identifier "repeat_n_657")))
                                                    (seq
                                                      (let "dlist2_658" 
                                                        (unsafe-nth (u8 0) (identifier "inits_src_ref_656"))
                                                        (let-pair "dlist2_fst_659" "dlist2_snd_660" 
                                                          (identifier "dlist2_658")
                                                          (set-vec (u8 0) 
                                                            (identifier "inits_src_ref_656")
                                                            (let-pair "dlist3_fst_662" "dlist3_snd_663" 
                                                              (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_660"))
                                                              (make-tup (cons (identifier "dlist3_fst_662") (identifier "dlist2_fst_659")) (identifier "dlist3_snd_663"))))))
                                                      (set-vec (u8 0) (identifier "repeat_n_657") (add (unsafe-nth (u8 0) (identifier "repeat_n_657")) (i32 1)))))) 
                                                (unsafe-nth (u8 0) (identifier "inits_src_ref_656"))))))
                                        (make-tup
                                          (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 2
                                            (make-tup (identifier "dtup_fst_642") (identity (identifier "dlist4_fst_665")))) 
                                          (identifier "dlist4_snd_666")))))
                                  (if (eq (u16 3) (identifier "dsum1_fst_486"))
                                    (let-pair "dtup_fst_609" "dtup_snd_610"
                                      (let "dsum1_524" (let-pair "du16_fst_519" "du16_snd_520" (read-u16 little-endian (identifier "dsum1_snd_487")) (make-tup (identifier "du16_fst_519") (identifier "du16_snd_520")))
                                        (let-pair "dsum1_fst_525" "dsum1_snd_526" 
                                          (identifier "dsum1_524")
                                          (if (eq (u16 0) (identifier "dsum1_fst_525"))
                                            (make-tup
                                              (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 0
                                                (nop)) (identifier "dsum1_snd_526"))
                                            (if (eq (u16 1) (identifier "dsum1_fst_525"))
                                              (make-tup
                                                (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 1
                                                  (nop)) (identifier "dsum1_snd_526"))
                                              (if (eq (u16 2) (identifier "dsum1_fst_525"))
                                                (make-tup
                                                  (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 2
                                                    (nop)) (identifier "dsum1_snd_526"))
                                                (if (eq (u16 3) (identifier "dsum1_fst_525"))
                                                  (make-tup
                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 3
                                                      (nop)) (identifier "dsum1_snd_526"))
                                                  (if (eq (u16 4) (identifier "dsum1_fst_525"))
                                                    (make-tup
                                                      (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 4
                                                        (nop)) (identifier "dsum1_snd_526"))
                                                    (if (eq (u16 5) (identifier "dsum1_fst_525"))
                                                      (make-tup
                                                        (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 5
                                                          (nop)) (identifier "dsum1_snd_526"))
                                                      (if (eq (u16 6) (identifier "dsum1_fst_525"))
                                                        (make-tup
                                                          (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 6
                                                            (nop)) (identifier "dsum1_snd_526"))
                                                        (if (eq (u16 7) (identifier "dsum1_fst_525"))
                                                          (make-tup
                                                            (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 7
                                                              (nop)) 
                                                            (identifier "dsum1_snd_526"))
                                                          (if (eq (u16 8) (identifier "dsum1_fst_525"))
                                                            (make-tup
                                                              (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 8
                                                                (nop)) 
                                                              (identifier "dsum1_snd_526"))
                                                            (if (eq (u16 9) (identifier "dsum1_fst_525"))
                                                              (make-tup
                                                                (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 9
                                                                  (nop)) 
                                                                (identifier "dsum1_snd_526"))
                                                              (if (eq (u16 10) (identifier "dsum1_fst_525"))
                                                                (make-tup
                                                                  (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 10
                                                                    (nop)) 
                                                                  (identifier "dsum1_snd_526"))
                                                                (if (eq (u16 11) (identifier "dsum1_fst_525"))
                                                                  (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 11
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                  (if 
                                                                    (eq (u16 12) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 12
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 13) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 13
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 14) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 14
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 15) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 15
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 16) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 16
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 17) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 17
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 18) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 18
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 19) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 19
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 20) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 20
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 21) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 21
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 22) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 22
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 23) (identifier "dsum1_fst_525"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 23
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))
                                                                    (if 
                                                                    (eq (u16 24) (identifier "dsum1_fst_525"))
                                                                    (let-pair "dbool_fst_531" "dbool_snd_532" 
                                                                    (read-u8 (identifier "dsum1_snd_526"))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 24
                                                                    (not (eq (identifier "dbool_fst_531") (u8 0)))) 
                                                                    (identifier "dbool_snd_532")))
                                                                    (seq 
                                                                    (assert (eq (identifier "dsum1_fst_525") (u16 25)))
                                                                    (make-tup
                                                                    (construct "[Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]" 25
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_526"))))))))))))))))))))))))))))))
                                      (let-pair "dtup_fst_612" "dtup_snd_613" 
                                        (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_610"))
                                        (let-pair "dtup_fst_615" "dtup_snd_616" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_613"))
                                          (make-tup
                                            (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 3
                                              (make-tup (identifier "dtup_fst_609") (identifier "dtup_fst_612") (identifier "dtup_fst_615"))) 
                                            (identifier "dtup_snd_616")))))
                                    (seq (assert (eq (identifier "dsum1_fst_486") (u16 4)))
                                      (let-pair "dtup_fst_504" "dtup_snd_505"
                                        (let "dsum1_494" (let-pair "du16_fst_489" "du16_snd_490" (read-u16 little-endian (identifier "dsum1_snd_487")) (make-tup (identifier "du16_fst_489") (identifier "du16_snd_490")))
                                          (let-pair "dsum1_fst_495" "dsum1_snd_496" 
                                            (identifier "dsum1_494")
                                            (if (eq (u16 0) (identifier "dsum1_fst_495")) 
                                              (make-tup (construct "[SubString Void | MapSet Void]" 0 (nop)) (identifier "dsum1_snd_496"))
                                              (seq (assert (eq (identifier "dsum1_fst_495") (u16 1))) (make-tup (construct "[SubString Void | MapSet Void]" 1 (nop)) (identifier "dsum1_snd_496"))))))
                                        (let-pair "dtup_fst_507" "dtup_snd_508" 
                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_505"))
                                          (let-pair "dtup_fst_510" "dtup_snd_511" 
                                            (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_508"))
                                            (let-pair "dtup_fst_513" "dtup_snd_514" 
                                              (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_511"))
                                              (make-tup
                                                (construct "[SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)]" 4
                                                  (make-tup (identifier "dtup_fst_504") (identifier "dtup_fst_507") (identifier "dtup_fst_510") (identifier "dtup_fst_513"))) 
                                                (identifier "dtup_snd_514")))))))))))))
                        (make-tup
                          (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 4
                            (identifier "dsum2_fst_910")) (identifier "dsum2_snd_911")))
                      (if (eq (u16 5) (identifier "dsum1_fst_85"))
                        (let "drec_111"
                          (if (eq (peek-u8 (identifier "dsum1_snd_86") (size 0)) (u8 1))
                            (make-tup (null "(lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])") (ptr-add (identifier "dsum1_snd_86") (size 1)))
                            (let-pair "make1_1_fst_109" "make1_1_snd_110" 
                              (apply (identifier "lifespan-of-row-binary") (ptr-add (identifier "dsum1_snd_86") (size 1))) 
                              (make-tup (not-null (identifier "make1_1_fst_109")) (identifier "make1_1_snd_110"))))
                          (let-pair "drec_fst_112" "drec_snd_113" (identifier "drec_111")
                            (let "drec_117" (let-pair "dbool_fst_115" "dbool_snd_116" (read-u8 (identifier "drec_snd_113")) (make-tup (not (eq (identifier "dbool_fst_115") (u8 0))) (identifier "dbool_snd_116")))
                              (let-pair "drec_fst_118" "drec_snd_119" 
                                (identifier "drec_117")
                                (let-pair "drec_fst_474" "drec_snd_475"
                                  (let "dsum1_126" (let-pair "du16_fst_121" "du16_snd_122" (read-u16 little-endian (identifier "drec_snd_119")) (make-tup (identifier "du16_fst_121") (identifier "du16_snd_122")))
                                    (let-pair "dsum1_fst_127" "dsum1_snd_128" 
                                      (identifier "dsum1_126")
                                      (if (eq (u16 0) (identifier "dsum1_fst_127"))
                                        (let-pair "dtup_fst_465" "dtup_snd_466"
                                          (let "dsum1_398" (let-pair "du16_fst_393" "du16_snd_394" (read-u16 little-endian (identifier "dsum1_snd_128")) (make-tup (identifier "du16_fst_393") (identifier "du16_snd_394")))
                                            (let-pair "dsum1_fst_399" "dsum1_snd_400" 
                                              (identifier "dsum1_398")
                                              (if (eq (u16 0) (identifier "dsum1_fst_399"))
                                                (make-tup
                                                  (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 0
                                                    (nop)) (identifier "dsum1_snd_400"))
                                                (if (eq (u16 1) (identifier "dsum1_fst_399"))
                                                  (make-tup
                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 1
                                                      (nop)) (identifier "dsum1_snd_400"))
                                                  (if (eq (u16 2) (identifier "dsum1_fst_399"))
                                                    (make-tup
                                                      (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 2
                                                        (nop)) (identifier "dsum1_snd_400"))
                                                    (if (eq (u16 3) (identifier "dsum1_fst_399"))
                                                      (make-tup
                                                        (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 3
                                                          (nop)) (identifier "dsum1_snd_400"))
                                                      (if (eq (u16 4) (identifier "dsum1_fst_399"))
                                                        (make-tup
                                                          (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 4
                                                            (nop)) (identifier "dsum1_snd_400"))
                                                        (if (eq (u16 5) (identifier "dsum1_fst_399"))
                                                          (make-tup
                                                            (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 5
                                                              (nop)) 
                                                            (identifier "dsum1_snd_400"))
                                                          (if (eq (u16 6) (identifier "dsum1_fst_399"))
                                                            (make-tup
                                                              (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 6
                                                                (nop)) 
                                                              (identifier "dsum1_snd_400"))
                                                            (if (eq (u16 7) (identifier "dsum1_fst_399"))
                                                              (make-tup
                                                                (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 7
                                                                  (nop)) 
                                                                (identifier "dsum1_snd_400"))
                                                              (if (eq (u16 8) (identifier "dsum1_fst_399"))
                                                                (make-tup
                                                                  (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 8
                                                                    (nop)) 
                                                                  (identifier "dsum1_snd_400"))
                                                                (if (eq (u16 9) (identifier "dsum1_fst_399"))
                                                                  (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 9
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_400"))
                                                                  (if 
                                                                    (eq (u16 10) (identifier "dsum1_fst_399"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 10
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_400"))
                                                                    (if 
                                                                    (eq (u16 11) (identifier "dsum1_fst_399"))
                                                                    (let "dtup_413"
                                                                    (let-pair "dfloat_fst_411" "dfloat_snd_412" 
                                                                    (read-u64 little-endian (identifier "dsum1_snd_400")) 
                                                                    (make-tup (float-of-u64 (identifier "dfloat_fst_411")) (identifier "dfloat_snd_412")))
                                                                    (let-pair "dtup_fst_414" "dtup_snd_415" 
                                                                    (identifier "dtup_413")
                                                                    (let "dtup_419"
                                                                    (let-pair "dfloat_fst_417" "dfloat_snd_418" 
                                                                    (read-u64 little-endian (identifier "dtup_snd_415")) 
                                                                    (make-tup (float-of-u64 (identifier "dfloat_fst_417")) (identifier "dfloat_snd_418")))
                                                                    (let-pair "dtup_fst_420" "dtup_snd_421" 
                                                                    (identifier "dtup_419")
                                                                    (let-pair "du32_fst_423" "du32_snd_424" 
                                                                    (read-u32 little-endian (identifier "dtup_snd_421"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 11
                                                                    (make-tup (identifier "dtup_fst_414") (identifier "dtup_fst_420") (identifier "du32_fst_423"))) 
                                                                    (identifier "du32_snd_424")))))))
                                                                    (if 
                                                                    (eq (u16 12) (identifier "dsum1_fst_399"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 12
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_400"))
                                                                    (if 
                                                                    (eq (u16 13) (identifier "dsum1_fst_399"))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 13
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_400"))
                                                                    (seq 
                                                                    (assert (eq (identifier "dsum1_fst_399") (u16 14)))
                                                                    (make-tup
                                                                    (construct "[AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]" 14
                                                                    (nop)) 
                                                                    (identifier "dsum1_snd_400")))))))))))))))))))
                                          (let-pair "dtup_fst_468" "dtup_snd_469" 
                                            (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_466"))
                                            (make-tup
                                              (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 0
                                                (make-tup (identifier "dtup_fst_465") (identifier "dtup_fst_468"))) 
                                              (identifier "dtup_snd_469"))))
                                        (if (eq (u16 1) (identifier "dsum1_fst_127"))
                                          (let-pair "dtup_fst_381" "dtup_snd_382"
                                            (let "dsum1_365" (let-pair "du16_fst_360" "du16_snd_361" (read-u16 little-endian (identifier "dsum1_snd_128")) (make-tup (identifier "du16_fst_360") (identifier "du16_snd_361")))
                                              (let-pair "dsum1_fst_366" "dsum1_snd_367" 
                                                (identifier "dsum1_365")
                                                (if (eq (u16 0) (identifier "dsum1_fst_366")) 
                                                  (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 0 (nop)) (identifier "dsum1_snd_367"))
                                                  (if (eq (u16 1) (identifier "dsum1_fst_366")) 
                                                    (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 1 (nop)) (identifier "dsum1_snd_367"))
                                                    (if (eq (u16 2) (identifier "dsum1_fst_366")) 
                                                      (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 2 (nop)) (identifier "dsum1_snd_367"))
                                                      (seq (assert (eq (identifier "dsum1_fst_366") (u16 3)))
                                                        (make-tup (construct "[Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]" 3 (nop)) (identifier "dsum1_snd_367"))))))))
                                            (let-pair "dtup_fst_384" "dtup_snd_385" 
                                              (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_382"))
                                              (let-pair "dtup_fst_387" "dtup_snd_388" 
                                                (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_385"))
                                                (make-tup
                                                  (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 1
                                                    (make-tup (identifier "dtup_fst_381") (identifier "dtup_fst_384") (identifier "dtup_fst_387"))) 
                                                  (identifier "dtup_snd_388")))))
                                          (if (eq (u16 2) (identifier "dsum1_fst_127"))
                                            (let-pair "dtup_fst_345" "dtup_snd_346"
                                              (let "dsum1_329" (let-pair "du16_fst_324" "du16_snd_325" (read-u16 little-endian (identifier "dsum1_snd_128")) (make-tup (identifier "du16_fst_324") (identifier "du16_snd_325")))
                                                (let-pair "dsum1_fst_330" "dsum1_snd_331" 
                                                  (identifier "dsum1_329")
                                                  (if (eq (u16 0) (identifier "dsum1_fst_330")) 
                                                    (make-tup (construct "[MovingAvg Void | Hysteresis Void | OnceEvery BOOL]" 0 (nop)) (identifier "dsum1_snd_331"))
                                                    (if (eq (u16 1) (identifier "dsum1_fst_330")) 
                                                      (make-tup (construct "[MovingAvg Void | Hysteresis Void | OnceEvery BOOL]" 1 (nop)) (identifier "dsum1_snd_331"))
                                                      (seq (assert (eq (identifier "dsum1_fst_330") (u16 2)))
                                                        (let-pair "dbool_fst_333" "dbool_snd_334" 
                                                          (read-u8 (identifier "dsum1_snd_331"))
                                                          (make-tup (construct "[MovingAvg Void | Hysteresis Void | OnceEvery BOOL]" 2 (not (eq (identifier "dbool_fst_333") (u8 0)))) (identifier "dbool_snd_334"))))))))
                                              (let-pair "dtup_fst_348" "dtup_snd_349" 
                                                (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_346"))
                                                (let-pair "dtup_fst_351" "dtup_snd_352" 
                                                  (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_349"))
                                                  (let-pair "dtup_fst_354" "dtup_snd_355" 
                                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_352"))
                                                    (make-tup
                                                      (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 2
                                                        (make-tup (identifier "dtup_fst_345") (identifier "dtup_fst_348") (identifier "dtup_fst_351") (identifier "dtup_fst_354"))) 
                                                      (identifier "dtup_snd_355"))))))
                                            (if (eq (u16 3) (identifier "dsum1_fst_127"))
                                              (let-pair "dtup_fst_306" "dtup_snd_307"
                                                (let "dsum1_293" (let-pair "du16_fst_288" "du16_snd_289" (read-u16 little-endian (identifier "dsum1_snd_128")) (make-tup (identifier "du16_fst_288") (identifier "du16_snd_289")))
                                                  (let-pair "dsum1_fst_294" "dsum1_snd_295" 
                                                    (identifier "dsum1_293")
                                                    (if (eq (u16 0) (identifier "dsum1_fst_294")) 
                                                      (make-tup (construct "[DampedHolt Void | Remember BOOL]" 0 (nop)) (identifier "dsum1_snd_295"))
                                                      (seq (assert (eq (identifier "dsum1_fst_294") (u16 1)))
                                                        (let-pair "dbool_fst_297" "dbool_snd_298" 
                                                          (read-u8 (identifier "dsum1_snd_295"))
                                                          (make-tup (construct "[DampedHolt Void | Remember BOOL]" 1 (not (eq (identifier "dbool_fst_297") (u8 0)))) (identifier "dbool_snd_298")))))))
                                                (let-pair "dtup_fst_309" "dtup_snd_310" 
                                                  (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_307"))
                                                  (let-pair "dtup_fst_312" "dtup_snd_313" 
                                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_310"))
                                                    (let-pair "dtup_fst_315" "dtup_snd_316" 
                                                      (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_313"))
                                                      (let-pair "dtup_fst_318" "dtup_snd_319" 
                                                        (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_316"))
                                                        (make-tup
                                                          (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 3
                                                            (make-tup (identifier "dtup_fst_306") (identifier "dtup_fst_309") (identifier "dtup_fst_312") (identifier "dtup_fst_315") (identifier "dtup_fst_318")))
                                                          (identifier "dtup_snd_319")))))))
                                              (if (eq (u16 4) (identifier "dsum1_fst_127"))
                                                (let "dtup_246"
                                                  (let "dsum1_225" (let-pair "du16_fst_220" "du16_snd_221" (read-u16 little-endian (identifier "dsum1_snd_128")) (make-tup (identifier "du16_fst_220") (identifier "du16_snd_221")))
                                                    (let-pair "dsum1_fst_226" "dsum1_snd_227" 
                                                      (identifier "dsum1_225")
                                                      (if (eq (u16 0) (identifier "dsum1_fst_226")) 
                                                        (make-tup (construct "[MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]" 0 (nop)) (identifier "dsum1_snd_227"))
                                                        (seq (assert (eq (identifier "dsum1_fst_226") (u16 1)))
                                                          (let "drec_231"
                                                            (let-pair "dbool_fst_229" "dbool_snd_230" (read-u8 (identifier "dsum1_snd_227")) (make-tup (not (eq (identifier "dbool_fst_229") (u8 0))) (identifier "dbool_snd_230")))
                                                            (let-pair "drec_fst_232" "drec_snd_233" 
                                                              (identifier "drec_231")
                                                              (let-pair "dbool_fst_235" "dbool_snd_236" 
                                                                (read-u8 (identifier "drec_snd_233"))
                                                                (make-tup
                                                                  (construct "[MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]" 1
                                                                    (make-rec (string "up_to") (not (eq (identifier "dbool_fst_235") (u8 0))) (string "inv") (identifier "drec_fst_232"))) 
                                                                  (identifier "dbool_snd_236")))))))))
                                                  (let-pair "dtup_fst_247" "dtup_snd_248" 
                                                    (identifier "dtup_246")
                                                    (let-pair "dtup_fst_250" "dtup_snd_251" 
                                                      (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_248"))
                                                      (let-pair "dtup_fst_253" "dtup_snd_254" 
                                                        (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_251"))
                                                        (let-pair "dtup_fst_256" "dtup_snd_257" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_254"))
                                                          (let-pair "dlist4_fst_279" "dlist4_snd_280"
                                                            (let "dlist1_267"
                                                              (let "leb_ref_258" 
                                                                (make-vec (u32 0))
                                                                (let "shft_ref_259" 
                                                                  (make-vec (u8 0))
                                                                  (let "p_ref_260" 
                                                                    (make-vec (identifier "dtup_snd_257"))
                                                                    (seq
                                                                    (while
                                                                    (let "leb128_261" 
                                                                    (read-u8 (unsafe-nth (u8 0) (identifier "p_ref_260")))
                                                                    (let-pair "leb128_fst_262" "leb128_snd_263" 
                                                                    (identifier "leb128_261")
                                                                    (seq 
                                                                    (set-vec (u8 0) (identifier "p_ref_260") (identifier "leb128_snd_263"))
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "leb_ref_258")
                                                                    (bit-or 
                                                                    (left-shift (to-u32 (bit-and (identifier "leb128_fst_262") (u8 127))) (unsafe-nth (u8 0) (identifier "shft_ref_259")))
                                                                    (unsafe-nth (u8 0) (identifier "leb_ref_258")))) 
                                                                    (set-vec (u8 0) (identifier "shft_ref_259") (add (unsafe-nth (u8 0) (identifier "shft_ref_259")) (u8 7))) 
                                                                    (ge (identifier "leb128_fst_262") (u8 128))))) 
                                                                    (nop)) 
                                                                    (make-tup (unsafe-nth (u8 0) (identifier "leb_ref_258")) (unsafe-nth (u8 0) (identifier "p_ref_260")))))))
                                                              (let-pair "dlist1_fst_268" "dlist1_snd_269" 
                                                                (identifier "dlist1_267")
                                                                (let "inits_src_ref_270" 
                                                                  (make-vec (make-tup (end-of-list "THIS") (identifier "dlist1_snd_269")))
                                                                  (seq
                                                                    (let "repeat_n_271" 
                                                                    (make-vec (i32 0))
                                                                    (while 
                                                                    (gt (to-i32 (identifier "dlist1_fst_268")) (unsafe-nth (u8 0) (identifier "repeat_n_271")))
                                                                    (seq
                                                                    (let "dlist2_272" 
                                                                    (unsafe-nth (u8 0) (identifier "inits_src_ref_270"))
                                                                    (let-pair "dlist2_fst_273" "dlist2_snd_274" 
                                                                    (identifier "dlist2_272")
                                                                    (set-vec 
                                                                    (u8 0) 
                                                                    (identifier "inits_src_ref_270")
                                                                    (let-pair "dlist3_fst_276" "dlist3_snd_277" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "dlist2_snd_274"))
                                                                    (make-tup (cons (identifier "dlist3_fst_276") (identifier "dlist2_fst_273")) (identifier "dlist3_snd_277"))))))
                                                                    (set-vec (u8 0) (identifier "repeat_n_271") (add (unsafe-nth (u8 0) (identifier "repeat_n_271")) (i32 1))))))
                                                                    (unsafe-nth (u8 0) (identifier "inits_src_ref_270"))))))
                                                            (make-tup
                                                              (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 4
                                                                (make-tup (identifier "dtup_fst_247") (identifier "dtup_fst_250") (identifier "dtup_fst_253") (identifier "dtup_fst_256") (identity (identifier "dlist4_fst_279"))))
                                                              (identifier "dlist4_snd_280"))))))))
                                                (if (eq (u16 5) (identifier "dsum1_fst_127"))
                                                  (let "dsum1_189" (let-pair "du16_fst_184" "du16_snd_185" (read-u16 little-endian (identifier "dsum1_snd_128")) (make-tup (identifier "du16_fst_184") (identifier "du16_snd_185")))
                                                    (let-pair "dsum1_fst_190" "dsum1_snd_191" 
                                                      (identifier "dsum1_189")
                                                      (seq (assert (eq (identifier "dsum1_fst_190") (u16 0)))
                                                        (let-pair "dtup_fst_199" "dtup_snd_200" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "dsum1_snd_191"))
                                                          (let-pair "dtup_fst_202" "dtup_snd_203" 
                                                            (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_200"))
                                                            (let-pair "dtup_fst_205" "dtup_snd_206" 
                                                              (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_203"))
                                                              (let-pair "dtup_fst_208" "dtup_snd_209" 
                                                                (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_206"))
                                                                (let-pair "dtup_fst_211" "dtup_snd_212" 
                                                                  (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_209"))
                                                                  (let-pair "dtup_fst_214" "dtup_snd_215" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_212"))
                                                                    (make-tup
                                                                    (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 5
                                                                    (make-tup 
                                                                    (construct "[DampedHoltWinter Void]" 0 (nop)) 
                                                                    (identifier "dtup_fst_199") 
                                                                    (identifier "dtup_fst_202") 
                                                                    (identifier "dtup_fst_205") 
                                                                    (identifier "dtup_fst_208") 
                                                                    (identifier "dtup_fst_211") 
                                                                    (identifier "dtup_fst_214"))) 
                                                                    (identifier "dtup_snd_215")))))))))))
                                                  (if (eq (u16 6) (identifier "dsum1_fst_127"))
                                                    (let "drec_153" (apply (ext-identifier raql_top_output of-row-binary) (identifier "dsum1_snd_128"))
                                                      (let-pair "drec_fst_154" "drec_snd_155" 
                                                        (identifier "drec_153")
                                                        (let-pair "drec_fst_157" "drec_snd_158" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "drec_snd_155"))
                                                          (let-pair "drec_fst_163" "drec_snd_164"
                                                            (if (eq (peek-u8 (identifier "drec_snd_158") (size 0)) (u8 1)) 
                                                              (make-tup (null "THIS") (ptr-add (identifier "drec_snd_158") (size 1)))
                                                              (let-pair "make1_1_fst_160" "make1_1_snd_161" 
                                                                (apply (myself "(THIS; Ptr)") (ptr-add (identifier "drec_snd_158") (size 1))) 
                                                                (make-tup (not-null (identifier "make1_1_fst_160")) (identifier "make1_1_snd_161"))))
                                                            (let-pair "drec_fst_166" "drec_snd_167" 
                                                              (apply (myself "(THIS; Ptr)") (identifier "drec_snd_164"))
                                                              (let-pair "drec_fst_169" "drec_snd_170" 
                                                                (apply (myself "(THIS; Ptr)") (identifier "drec_snd_167"))
                                                                (let-pair "drec_fst_172" "drec_snd_173" 
                                                                  (apply (myself "(THIS; Ptr)") (identifier "drec_snd_170"))
                                                                  (let-pair "drec_fst_175" "drec_snd_176" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "drec_snd_173"))
                                                                    (let-pair "drec_fst_178" "drec_snd_179" 
                                                                    (apply (myself "(THIS; Ptr)") (identifier "drec_snd_176"))
                                                                    (make-tup
                                                                    (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 6
                                                                    (make-rec 
                                                                    (string "sigmas") 
                                                                    (identifier "drec_fst_178") 
                                                                    (string "duration") 
                                                                    (identifier "drec_fst_175") 
                                                                    (string "time") 
                                                                    (identifier "drec_fst_172") 
                                                                    (string "by") 
                                                                    (identifier "drec_fst_169") 
                                                                    (string "what") 
                                                                    (identifier "drec_fst_166") 
                                                                    (string "max_size") 
                                                                    (identifier "drec_fst_163") 
                                                                    (string "size") 
                                                                    (identifier "drec_fst_157") 
                                                                    (string "output") 
                                                                    (identifier "drec_fst_154"))) 
                                                                    (identifier "drec_snd_179")))))))))))
                                                    (seq (assert (eq (identifier "dsum1_fst_127") (u16 7)))
                                                      (let-pair "drec_fst_130" "drec_snd_131" 
                                                        (apply (myself "(THIS; Ptr)") (identifier "dsum1_snd_128"))
                                                        (let-pair "drec_fst_133" "drec_snd_134" 
                                                          (apply (myself "(THIS; Ptr)") (identifier "drec_snd_131"))
                                                          (let-pair "drec_fst_136" "drec_snd_137" 
                                                            (apply (myself "(THIS; Ptr)") (identifier "drec_snd_134"))
                                                            (let "drec_141"
                                                              (let-pair "dbool_fst_139" "dbool_snd_140" (read-u8 (identifier "drec_snd_137")) (make-tup (not (eq (identifier "dbool_fst_139") (u8 0))) (identifier "dbool_snd_140")))
                                                              (let-pair "drec_fst_142" "drec_snd_143" 
                                                                (identifier "drec_141")
                                                                (let-pair "drec_fst_148" "drec_snd_149"
                                                                  (if 
                                                                    (eq (peek-u8 (identifier "drec_snd_143") (size 0)) (u8 1)) 
                                                                    (make-tup (null "THIS") (ptr-add (identifier "drec_snd_143") (size 1)))
                                                                    (let-pair "make1_1_fst_145" "make1_1_snd_146" 
                                                                    (apply (myself "(THIS; Ptr)") (ptr-add (identifier "drec_snd_143") (size 1)))
                                                                    (make-tup (not-null (identifier "make1_1_fst_145")) (identifier "make1_1_snd_146"))))
                                                                  (make-tup
                                                                    (construct "[SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]" 7
                                                                    (make-rec 
                                                                    (string "sample_size") 
                                                                    (identifier "drec_fst_148") 
                                                                    (string "tumbling") 
                                                                    (identifier "drec_fst_142") 
                                                                    (string "max_age") 
                                                                    (identifier "drec_fst_136") 
                                                                    (string "time") 
                                                                    (identifier "drec_fst_133") 
                                                                    (string "what") 
                                                                    (identifier "drec_fst_130"))) 
                                                                    (identifier "drec_snd_149"))))))))))))))))))
                                  (make-tup
                                    (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 5
                                      (make-rec (string "operation") (identifier "drec_fst_474") (string "skip_nulls") (identifier "drec_fst_118") (string "lifespan") (identifier "drec_fst_112"))) 
                                    (identifier "drec_snd_475")))))))
                        (seq (assert (eq (identifier "dsum1_fst_85") (u16 6)))
                          (let "dsum1_93" (let-pair "du16_fst_88" "du16_snd_89" (read-u16 little-endian (identifier "dsum1_snd_86")) (make-tup (identifier "du16_fst_88") (identifier "du16_snd_89")))
                            (let-pair "dsum1_fst_94" "dsum1_snd_95" (identifier "dsum1_93")
                              (seq (assert (eq (identifier "dsum1_fst_94") (u16 0)))
                                (let-pair "dtup_fst_97" "dtup_snd_98" 
                                  (apply (myself "(THIS; Ptr)") (identifier "dsum1_snd_95"))
                                  (let-pair "dtup_fst_100" "dtup_snd_101" 
                                    (apply (myself "(THIS; Ptr)") (identifier "dtup_snd_98"))
                                    (make-tup
                                      (construct "[Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]" 6
                                        (construct "[Split (THIS; THIS)]" 0 (make-tup (identifier "dtup_fst_97") (identifier "dtup_fst_100")))) 
                                      (identifier "dtup_snd_101"))))))))))))))))
        (let-pair "drec_fst_1038" "drec_snd_1039" (identifier "drec_1037")
          (let "drec_1043" (let-pair "du32_fst_1041" "du32_snd_1042" (read-u32 little-endian (identifier "drec_snd_1039")) (make-tup (identifier "du32_fst_1041") (identifier "du32_snd_1042")))
            (let-pair "drec_fst_1044" "drec_snd_1045" (identifier "drec_1043")
              (let "drec_1046" (apply (ext-identifier raql_type of-row-binary) (identifier "drec_snd_1045"))
                (let-pair "drec_fst_1047" "drec_snd_1048" (identifier "drec_1046")
                  (let-pair "drec_fst_1053" "drec_snd_1054"
                    (if (eq (peek-u8 (identifier "drec_snd_1048") (size 0)) (u8 1)) 
                      (make-tup (null "$units") (ptr-add (identifier "drec_snd_1048") (size 1)))
                      (let-pair "make1_1_fst_1050" "make1_1_snd_1051" 
                        (apply (ext-identifier units of-row-binary) (ptr-add (identifier "drec_snd_1048") (size 1))) 
                        (make-tup (not-null (identifier "make1_1_fst_1050")) (identifier "make1_1_snd_1051"))))
                    (make-tup (make-rec (string "units") (identifier "drec_fst_1053") (string "typ") (identifier "drec_fst_1047") (string "uniq_num") (identifier "drec_fst_1044") (string "text") (identifier "drec_fst_1038"))
                      (identifier "drec_snd_1054"))))))))))
 */
static std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> of_row_binary_init()
{
  std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> fun3303 { [&](Pointer p_0) {
    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3304 { p_0.readU16Le() };
    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3305;
    {
      auto du16_fst_79 { std::get<0>(id_3304) };
      auto du16_snd_80 { std::get<1>(id_3304) };
      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3306 { du16_fst_79, du16_snd_80 };
      letpair_res_3305 = id_3306;
    }
    ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 let_res_3307;
    {
      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_84 { letpair_res_3305 };
      ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_3308;
      {
        auto dsum1_fst_85 { std::get<0>(dsum1_84) };
        auto dsum1_snd_86 { std::get<1>(dsum1_84) };
        uint16_t id_3309 { 0 };
        bool id_3310 { bool(id_3309 == dsum1_fst_85) };
        ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 choose_res_3311;
        if (id_3310) {
          uint32_t id_3312 { 0U };
          Vec<1, uint32_t> id_3313 {  id_3312  };
          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3314;
          {
            Vec<1, uint32_t> leb_ref_1011 { id_3313 };
            uint8_t id_3315 { 0 };
            Vec<1, uint8_t> id_3316 {  id_3315  };
            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3317;
            {
              Vec<1, uint8_t> shft_ref_1012 { id_3316 };
              Vec<1, Pointer> id_3318 {  dsum1_snd_86  };
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3319;
              {
                Vec<1, Pointer> p_ref_1013 { id_3318 };
                bool while_flag_3320 { true };
                do {
                  uint8_t id_3321 { 0 };
                  Pointer id_3322 { p_ref_1013[id_3321] };
                  ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3323 { id_3322.readU8() };
                  bool let_res_3324;
                  {
                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_1014 { id_3323 };
                    bool letpair_res_3325;
                    {
                      auto leb128_fst_1015 { std::get<0>(leb128_1014) };
                      auto leb128_snd_1016 { std::get<1>(leb128_1014) };
                      uint8_t id_3326 { 0 };
                      Void id_3327 { ((void)(p_ref_1013[id_3326] = leb128_snd_1016), ::dessser::Void()) };
                      (void)id_3327;
                      uint8_t id_3328 { 0 };
                      uint8_t id_3329 { 127 };
                      uint8_t id_3330 { uint8_t(leb128_fst_1015 & id_3329) };
                      uint32_t id_3331 { uint32_t(id_3330) };
                      uint8_t id_3332 { 0 };
                      uint8_t id_3333 { shft_ref_1012[id_3332] };
                      uint32_t id_3334 { uint32_t(id_3331 << id_3333) };
                      uint8_t id_3335 { 0 };
                      uint32_t id_3336 { leb_ref_1011[id_3335] };
                      uint32_t id_3337 { uint32_t(id_3334 | id_3336) };
                      Void id_3338 { ((void)(leb_ref_1011[id_3328] = id_3337), ::dessser::Void()) };
                      (void)id_3338;
                      uint8_t id_3339 { 0 };
                      uint8_t id_3340 { 0 };
                      uint8_t id_3341 { shft_ref_1012[id_3340] };
                      uint8_t id_3342 { 7 };
                      uint8_t id_3343 { uint8_t(id_3341 + id_3342) };
                      Void id_3344 { ((void)(shft_ref_1012[id_3339] = id_3343), ::dessser::Void()) };
                      (void)id_3344;
                      uint8_t id_3345 { 128 };
                      bool id_3346 { bool(leb128_fst_1015 >= id_3345) };
                      letpair_res_3325 = id_3346;
                    }
                    let_res_3324 = letpair_res_3325;
                  }
                  while_flag_3320 = let_res_3324;
                  if (while_flag_3320) {
                    (void)::dessser::Void();
                  }
                } while (while_flag_3320);
                (void)::dessser::Void();
                uint8_t id_3347 { 0 };
                uint32_t id_3348 { leb_ref_1011[id_3347] };
                uint8_t id_3349 { 0 };
                Pointer id_3350 { p_ref_1013[id_3349] };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3351 { id_3348, id_3350 };
                let_res_3319 = id_3351;
              }
              let_res_3317 = let_res_3319;
            }
            let_res_3314 = let_res_3317;
          }
          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3352;
          {
            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_1020 { let_res_3314 };
            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3353;
            {
              auto dlist1_fst_1021 { std::get<0>(dlist1_1020) };
              auto dlist1_snd_1022 { std::get<1>(dlist1_1020) };
              Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_3354;
              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3355 { endoflist_3354, dlist1_snd_1022 };
              Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_3356 {  id_3355  };
              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3357;
              {
                Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_1023 { id_3356 };
                int32_t id_3358 { 0L };
                Vec<1, int32_t> id_3359 {  id_3358  };
                {
                  Vec<1, int32_t> repeat_n_1024 { id_3359 };
                  bool while_flag_3360 { true };
                  do {
                    int32_t id_3361 { int32_t(dlist1_fst_1021) };
                    uint8_t id_3362 { 0 };
                    int32_t id_3363 { repeat_n_1024[id_3362] };
                    bool id_3364 { bool(id_3361 > id_3363) };
                    while_flag_3360 = id_3364;
                    if (while_flag_3360) {
                      uint8_t id_3365 { 0 };
                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3366 { inits_src_ref_1023[id_3365] };
                      {
                        ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_1025 { id_3366 };
                        {
                          auto dlist2_fst_1026 { std::get<0>(dlist2_1025) };
                          auto dlist2_snd_1027 { std::get<1>(dlist2_1025) };
                          uint8_t id_3367 { 0 };
                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3368 { fun3303(dlist2_snd_1027) };
                          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3369;
                          {
                            auto dlist3_fst_1029 { std::get<0>(id_3368) };
                            auto dlist3_snd_1030 { std::get<1>(id_3368) };
                            Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3370 { dlist3_fst_1029, dlist2_fst_1026 };
                            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3371 { id_3370, dlist3_snd_1030 };
                            letpair_res_3369 = id_3371;
                          }
                          Void id_3372 { ((void)(inits_src_ref_1023[id_3367] = letpair_res_3369), ::dessser::Void()) };
                          (void)id_3372;
                        }
                        (void)::dessser::Void();
                      }
                      (void)::dessser::Void();
                      uint8_t id_3373 { 0 };
                      uint8_t id_3374 { 0 };
                      int32_t id_3375 { repeat_n_1024[id_3374] };
                      int32_t id_3376 { 1L };
                      int32_t id_3377 { int32_t(id_3375 + id_3376) };
                      Void id_3378 { ((void)(repeat_n_1024[id_3373] = id_3377), ::dessser::Void()) };
                      (void)id_3378;
                      (void)id_3378;
                    }
                  } while (while_flag_3360);
                  (void)::dessser::Void();
                }
                (void)::dessser::Void();
                uint8_t id_3379 { 0 };
                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3380 { inits_src_ref_1023[id_3379] };
                let_res_3357 = id_3380;
              }
              letpair_res_3353 = let_res_3357;
            }
            let_res_3352 = letpair_res_3353;
          }
          ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_3381;
          {
            auto dlist4_fst_1032 { std::get<0>(let_res_3352) };
            auto dlist4_snd_1033 { std::get<1>(let_res_3352) };
            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3382 { std::in_place_index<0>, dlist4_fst_1032 };
            ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 id_3383 { id_3382, dlist4_snd_1033 };
            letpair_res_3381 = id_3383;
          }
          choose_res_3311 = letpair_res_3381;
        } else {
          uint16_t id_3384 { 1 };
          bool id_3385 { bool(id_3384 == dsum1_fst_85) };
          ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 choose_res_3386;
          if (id_3385) {
            uint32_t id_3387 { 0U };
            Vec<1, uint32_t> id_3388 {  id_3387  };
            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3389;
            {
              Vec<1, uint32_t> leb_ref_979 { id_3388 };
              uint8_t id_3390 { 0 };
              Vec<1, uint8_t> id_3391 {  id_3390  };
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3392;
              {
                Vec<1, uint8_t> shft_ref_980 { id_3391 };
                Vec<1, Pointer> id_3393 {  dsum1_snd_86  };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3394;
                {
                  Vec<1, Pointer> p_ref_981 { id_3393 };
                  bool while_flag_3395 { true };
                  do {
                    uint8_t id_3396 { 0 };
                    Pointer id_3397 { p_ref_981[id_3396] };
                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3398 { id_3397.readU8() };
                    bool let_res_3399;
                    {
                      ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_982 { id_3398 };
                      bool letpair_res_3400;
                      {
                        auto leb128_fst_983 { std::get<0>(leb128_982) };
                        auto leb128_snd_984 { std::get<1>(leb128_982) };
                        uint8_t id_3401 { 0 };
                        Void id_3402 { ((void)(p_ref_981[id_3401] = leb128_snd_984), ::dessser::Void()) };
                        (void)id_3402;
                        uint8_t id_3403 { 0 };
                        uint8_t id_3404 { 127 };
                        uint8_t id_3405 { uint8_t(leb128_fst_983 & id_3404) };
                        uint32_t id_3406 { uint32_t(id_3405) };
                        uint8_t id_3407 { 0 };
                        uint8_t id_3408 { shft_ref_980[id_3407] };
                        uint32_t id_3409 { uint32_t(id_3406 << id_3408) };
                        uint8_t id_3410 { 0 };
                        uint32_t id_3411 { leb_ref_979[id_3410] };
                        uint32_t id_3412 { uint32_t(id_3409 | id_3411) };
                        Void id_3413 { ((void)(leb_ref_979[id_3403] = id_3412), ::dessser::Void()) };
                        (void)id_3413;
                        uint8_t id_3414 { 0 };
                        uint8_t id_3415 { 0 };
                        uint8_t id_3416 { shft_ref_980[id_3415] };
                        uint8_t id_3417 { 7 };
                        uint8_t id_3418 { uint8_t(id_3416 + id_3417) };
                        Void id_3419 { ((void)(shft_ref_980[id_3414] = id_3418), ::dessser::Void()) };
                        (void)id_3419;
                        uint8_t id_3420 { 128 };
                        bool id_3421 { bool(leb128_fst_983 >= id_3420) };
                        letpair_res_3400 = id_3421;
                      }
                      let_res_3399 = letpair_res_3400;
                    }
                    while_flag_3395 = let_res_3399;
                    if (while_flag_3395) {
                      (void)::dessser::Void();
                    }
                  } while (while_flag_3395);
                  (void)::dessser::Void();
                  uint8_t id_3422 { 0 };
                  uint32_t id_3423 { leb_ref_979[id_3422] };
                  uint8_t id_3424 { 0 };
                  Pointer id_3425 { p_ref_981[id_3424] };
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3426 { id_3423, id_3425 };
                  let_res_3394 = id_3426;
                }
                let_res_3392 = let_res_3394;
              }
              let_res_3389 = let_res_3392;
            }
            ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 let_res_3427;
            {
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_988 { let_res_3389 };
              ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 letpair_res_3428;
              {
                auto dlist1_fst_989 { std::get<0>(dlist1_988) };
                auto dlist1_snd_990 { std::get<1>(dlist1_988) };
                Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> endoflist_3429;
                ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3430 { endoflist_3429, dlist1_snd_990 };
                Vec<1, ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4> id_3431 {  id_3430  };
                ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 let_res_3432;
                {
                  Vec<1, ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4> inits_src_ref_991 { id_3431 };
                  int32_t id_3433 { 0L };
                  Vec<1, int32_t> id_3434 {  id_3433  };
                  {
                    Vec<1, int32_t> repeat_n_992 { id_3434 };
                    bool while_flag_3435 { true };
                    do {
                      int32_t id_3436 { int32_t(dlist1_fst_989) };
                      uint8_t id_3437 { 0 };
                      int32_t id_3438 { repeat_n_992[id_3437] };
                      bool id_3439 { bool(id_3436 > id_3438) };
                      while_flag_3435 = id_3439;
                      if (while_flag_3435) {
                        uint8_t id_3440 { 0 };
                        ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3441 { inits_src_ref_991[id_3440] };
                        {
                          ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 dlist2_993 { id_3441 };
                          {
                            auto dlist2_fst_994 { std::get<0>(dlist2_993) };
                            auto dlist2_snd_995 { std::get<1>(dlist2_993) };
                            uint8_t id_3442 { 0 };
                            auto fun3443 { dessser::gen::field_name::of_row_binary };
                            ::dessser::gen::raql_expr::t18cecf882d7ac80cef37dfe6b22279d4 id_3444 { fun3443(dlist2_snd_995) };
                            ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 letpair_res_3445;
                            {
                              auto dtup_fst_997 { std::get<0>(id_3444) };
                              auto dtup_snd_998 { std::get<1>(id_3444) };
                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3446 { fun3303(dtup_snd_998) };
                              ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 letpair_res_3447;
                              {
                                auto dtup_fst_1000 { std::get<0>(id_3446) };
                                auto dtup_snd_1001 { std::get<1>(id_3446) };
                                ::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9 id_3448 { dtup_fst_997, dtup_fst_1000 };
                                Lst<::dessser::gen::raql_expr::t893212699a9dab9c7aae59235cac13d9> id_3449 { id_3448, dlist2_fst_994 };
                                ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3450 { id_3449, dtup_snd_1001 };
                                letpair_res_3447 = id_3450;
                              }
                              letpair_res_3445 = letpair_res_3447;
                            }
                            Void id_3451 { ((void)(inits_src_ref_991[id_3442] = letpair_res_3445), ::dessser::Void()) };
                            (void)id_3451;
                          }
                          (void)::dessser::Void();
                        }
                        (void)::dessser::Void();
                        uint8_t id_3452 { 0 };
                        uint8_t id_3453 { 0 };
                        int32_t id_3454 { repeat_n_992[id_3453] };
                        int32_t id_3455 { 1L };
                        int32_t id_3456 { int32_t(id_3454 + id_3455) };
                        Void id_3457 { ((void)(repeat_n_992[id_3452] = id_3456), ::dessser::Void()) };
                        (void)id_3457;
                        (void)id_3457;
                      }
                    } while (while_flag_3435);
                    (void)::dessser::Void();
                  }
                  (void)::dessser::Void();
                  uint8_t id_3458 { 0 };
                  ::dessser::gen::raql_expr::te61b5292977bf2669de474a297a8d1e4 id_3459 { inits_src_ref_991[id_3458] };
                  let_res_3432 = id_3459;
                }
                letpair_res_3428 = let_res_3432;
              }
              let_res_3427 = letpair_res_3428;
            }
            ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_3460;
            {
              auto dlist4_fst_1006 { std::get<0>(let_res_3427) };
              auto dlist4_snd_1007 { std::get<1>(let_res_3427) };
              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3461 { std::in_place_index<1>, dlist4_fst_1006 };
              ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 id_3462 { id_3461, dlist4_snd_1007 };
              letpair_res_3460 = id_3462;
            }
            choose_res_3386 = letpair_res_3460;
          } else {
            uint16_t id_3463 { 2 };
            bool id_3464 { bool(id_3463 == dsum1_fst_85) };
            ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 choose_res_3465;
            if (id_3464) {
              uint32_t id_3466 { 0U };
              Vec<1, uint32_t> id_3467 {  id_3466  };
              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3468;
              {
                Vec<1, uint32_t> leb_ref_953 { id_3467 };
                uint8_t id_3469 { 0 };
                Vec<1, uint8_t> id_3470 {  id_3469  };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3471;
                {
                  Vec<1, uint8_t> shft_ref_954 { id_3470 };
                  Vec<1, Pointer> id_3472 {  dsum1_snd_86  };
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3473;
                  {
                    Vec<1, Pointer> p_ref_955 { id_3472 };
                    bool while_flag_3474 { true };
                    do {
                      uint8_t id_3475 { 0 };
                      Pointer id_3476 { p_ref_955[id_3475] };
                      ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3477 { id_3476.readU8() };
                      bool let_res_3478;
                      {
                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_956 { id_3477 };
                        bool letpair_res_3479;
                        {
                          auto leb128_fst_957 { std::get<0>(leb128_956) };
                          auto leb128_snd_958 { std::get<1>(leb128_956) };
                          uint8_t id_3480 { 0 };
                          Void id_3481 { ((void)(p_ref_955[id_3480] = leb128_snd_958), ::dessser::Void()) };
                          (void)id_3481;
                          uint8_t id_3482 { 0 };
                          uint8_t id_3483 { 127 };
                          uint8_t id_3484 { uint8_t(leb128_fst_957 & id_3483) };
                          uint32_t id_3485 { uint32_t(id_3484) };
                          uint8_t id_3486 { 0 };
                          uint8_t id_3487 { shft_ref_954[id_3486] };
                          uint32_t id_3488 { uint32_t(id_3485 << id_3487) };
                          uint8_t id_3489 { 0 };
                          uint32_t id_3490 { leb_ref_953[id_3489] };
                          uint32_t id_3491 { uint32_t(id_3488 | id_3490) };
                          Void id_3492 { ((void)(leb_ref_953[id_3482] = id_3491), ::dessser::Void()) };
                          (void)id_3492;
                          uint8_t id_3493 { 0 };
                          uint8_t id_3494 { 0 };
                          uint8_t id_3495 { shft_ref_954[id_3494] };
                          uint8_t id_3496 { 7 };
                          uint8_t id_3497 { uint8_t(id_3495 + id_3496) };
                          Void id_3498 { ((void)(shft_ref_954[id_3493] = id_3497), ::dessser::Void()) };
                          (void)id_3498;
                          uint8_t id_3499 { 128 };
                          bool id_3500 { bool(leb128_fst_957 >= id_3499) };
                          letpair_res_3479 = id_3500;
                        }
                        let_res_3478 = letpair_res_3479;
                      }
                      while_flag_3474 = let_res_3478;
                      if (while_flag_3474) {
                        (void)::dessser::Void();
                      }
                    } while (while_flag_3474);
                    (void)::dessser::Void();
                    uint8_t id_3501 { 0 };
                    uint32_t id_3502 { leb_ref_953[id_3501] };
                    uint8_t id_3503 { 0 };
                    Pointer id_3504 { p_ref_955[id_3503] };
                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3505 { id_3502, id_3504 };
                    let_res_3473 = id_3505;
                  }
                  let_res_3471 = let_res_3473;
                }
                let_res_3468 = let_res_3471;
              }
              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3506;
              {
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_962 { let_res_3468 };
                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3507;
                {
                  auto dlist1_fst_963 { std::get<0>(dlist1_962) };
                  auto dlist1_snd_964 { std::get<1>(dlist1_962) };
                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_3508;
                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3509 { endoflist_3508, dlist1_snd_964 };
                  Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_3510 {  id_3509  };
                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_3511;
                  {
                    Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_965 { id_3510 };
                    int32_t id_3512 { 0L };
                    Vec<1, int32_t> id_3513 {  id_3512  };
                    {
                      Vec<1, int32_t> repeat_n_966 { id_3513 };
                      bool while_flag_3514 { true };
                      do {
                        int32_t id_3515 { int32_t(dlist1_fst_963) };
                        uint8_t id_3516 { 0 };
                        int32_t id_3517 { repeat_n_966[id_3516] };
                        bool id_3518 { bool(id_3515 > id_3517) };
                        while_flag_3514 = id_3518;
                        if (while_flag_3514) {
                          uint8_t id_3519 { 0 };
                          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3520 { inits_src_ref_965[id_3519] };
                          {
                            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_967 { id_3520 };
                            {
                              auto dlist2_fst_968 { std::get<0>(dlist2_967) };
                              auto dlist2_snd_969 { std::get<1>(dlist2_967) };
                              uint8_t id_3521 { 0 };
                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3522 { fun3303(dlist2_snd_969) };
                              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_3523;
                              {
                                auto dlist3_fst_971 { std::get<0>(id_3522) };
                                auto dlist3_snd_972 { std::get<1>(id_3522) };
                                Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3524 { dlist3_fst_971, dlist2_fst_968 };
                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3525 { id_3524, dlist3_snd_972 };
                                letpair_res_3523 = id_3525;
                              }
                              Void id_3526 { ((void)(inits_src_ref_965[id_3521] = letpair_res_3523), ::dessser::Void()) };
                              (void)id_3526;
                            }
                            (void)::dessser::Void();
                          }
                          (void)::dessser::Void();
                          uint8_t id_3527 { 0 };
                          uint8_t id_3528 { 0 };
                          int32_t id_3529 { repeat_n_966[id_3528] };
                          int32_t id_3530 { 1L };
                          int32_t id_3531 { int32_t(id_3529 + id_3530) };
                          Void id_3532 { ((void)(repeat_n_966[id_3527] = id_3531), ::dessser::Void()) };
                          (void)id_3532;
                          (void)id_3532;
                        }
                      } while (while_flag_3514);
                      (void)::dessser::Void();
                    }
                    (void)::dessser::Void();
                    uint8_t id_3533 { 0 };
                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_3534 { inits_src_ref_965[id_3533] };
                    let_res_3511 = id_3534;
                  }
                  letpair_res_3507 = let_res_3511;
                }
                let_res_3506 = letpair_res_3507;
              }
              ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_3535;
              {
                auto dlist4_fst_974 { std::get<0>(let_res_3506) };
                auto dlist4_snd_975 { std::get<1>(let_res_3506) };
                ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3536 { std::in_place_index<2>, dlist4_fst_974 };
                ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 id_3537 { id_3536, dlist4_snd_975 };
                letpair_res_3535 = id_3537;
              }
              choose_res_3465 = letpair_res_3535;
            } else {
              uint16_t id_3538 { 3 };
              bool id_3539 { bool(id_3538 == dsum1_fst_85) };
              ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 choose_res_3540;
              if (id_3539) {
                uint32_t id_3541 { 0U };
                Vec<1, uint32_t> id_3542 {  id_3541  };
                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3543;
                {
                  Vec<1, uint32_t> leb_ref_912 { id_3542 };
                  uint8_t id_3544 { 0 };
                  Vec<1, uint8_t> id_3545 {  id_3544  };
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3546;
                  {
                    Vec<1, uint8_t> shft_ref_913 { id_3545 };
                    Vec<1, Pointer> id_3547 {  dsum1_snd_86  };
                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3548;
                    {
                      Vec<1, Pointer> p_ref_914 { id_3547 };
                      bool while_flag_3549 { true };
                      do {
                        uint8_t id_3550 { 0 };
                        Pointer id_3551 { p_ref_914[id_3550] };
                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3552 { id_3551.readU8() };
                        bool let_res_3553;
                        {
                          ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_915 { id_3552 };
                          bool letpair_res_3554;
                          {
                            auto leb128_fst_916 { std::get<0>(leb128_915) };
                            auto leb128_snd_917 { std::get<1>(leb128_915) };
                            uint8_t id_3555 { 0 };
                            Void id_3556 { ((void)(p_ref_914[id_3555] = leb128_snd_917), ::dessser::Void()) };
                            (void)id_3556;
                            uint8_t id_3557 { 0 };
                            uint8_t id_3558 { 127 };
                            uint8_t id_3559 { uint8_t(leb128_fst_916 & id_3558) };
                            uint32_t id_3560 { uint32_t(id_3559) };
                            uint8_t id_3561 { 0 };
                            uint8_t id_3562 { shft_ref_913[id_3561] };
                            uint32_t id_3563 { uint32_t(id_3560 << id_3562) };
                            uint8_t id_3564 { 0 };
                            uint32_t id_3565 { leb_ref_912[id_3564] };
                            uint32_t id_3566 { uint32_t(id_3563 | id_3565) };
                            Void id_3567 { ((void)(leb_ref_912[id_3557] = id_3566), ::dessser::Void()) };
                            (void)id_3567;
                            uint8_t id_3568 { 0 };
                            uint8_t id_3569 { 0 };
                            uint8_t id_3570 { shft_ref_913[id_3569] };
                            uint8_t id_3571 { 7 };
                            uint8_t id_3572 { uint8_t(id_3570 + id_3571) };
                            Void id_3573 { ((void)(shft_ref_913[id_3568] = id_3572), ::dessser::Void()) };
                            (void)id_3573;
                            uint8_t id_3574 { 128 };
                            bool id_3575 { bool(leb128_fst_916 >= id_3574) };
                            letpair_res_3554 = id_3575;
                          }
                          let_res_3553 = letpair_res_3554;
                        }
                        while_flag_3549 = let_res_3553;
                        if (while_flag_3549) {
                          (void)::dessser::Void();
                        }
                      } while (while_flag_3549);
                      (void)::dessser::Void();
                      uint8_t id_3576 { 0 };
                      uint32_t id_3577 { leb_ref_912[id_3576] };
                      uint8_t id_3578 { 0 };
                      Pointer id_3579 { p_ref_914[id_3578] };
                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3580 { id_3577, id_3579 };
                      let_res_3548 = id_3580;
                    }
                    let_res_3546 = let_res_3548;
                  }
                  let_res_3543 = let_res_3546;
                }
                ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 let_res_3581;
                {
                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_921 { let_res_3543 };
                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3582;
                  {
                    auto dlist1_fst_922 { std::get<0>(dlist1_921) };
                    auto dlist1_snd_923 { std::get<1>(dlist1_921) };
                    Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> endoflist_3583;
                    ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3584 { endoflist_3583, dlist1_snd_923 };
                    Vec<1, ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2> id_3585 {  id_3584  };
                    ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 let_res_3586;
                    {
                      Vec<1, ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2> inits_src_ref_924 { id_3585 };
                      int32_t id_3587 { 0L };
                      Vec<1, int32_t> id_3588 {  id_3587  };
                      {
                        Vec<1, int32_t> repeat_n_925 { id_3588 };
                        bool while_flag_3589 { true };
                        do {
                          int32_t id_3590 { int32_t(dlist1_fst_922) };
                          uint8_t id_3591 { 0 };
                          int32_t id_3592 { repeat_n_925[id_3591] };
                          bool id_3593 { bool(id_3590 > id_3592) };
                          while_flag_3589 = id_3593;
                          if (while_flag_3589) {
                            uint8_t id_3594 { 0 };
                            ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3595 { inits_src_ref_924[id_3594] };
                            {
                              ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 dlist2_926 { id_3595 };
                              {
                                auto dlist2_fst_927 { std::get<0>(dlist2_926) };
                                auto dlist2_snd_928 { std::get<1>(dlist2_926) };
                                uint8_t id_3596 { 0 };
                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3597 { fun3303(dlist2_snd_928) };
                                ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3598;
                                {
                                  auto drec_fst_930 { std::get<0>(id_3597) };
                                  auto drec_snd_931 { std::get<1>(id_3597) };
                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3599 { fun3303(drec_snd_931) };
                                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3600;
                                  {
                                    auto drec_fst_933 { std::get<0>(id_3599) };
                                    auto drec_snd_934 { std::get<1>(id_3599) };
                                    ::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa id_3601 { drec_fst_930, drec_fst_933 };
                                    Lst<::dessser::gen::raql_expr::ta4f782a597a104ffca4e8eb34b1832aa> id_3602 { id_3601, dlist2_fst_927 };
                                    ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3603 { id_3602, drec_snd_934 };
                                    letpair_res_3600 = id_3603;
                                  }
                                  letpair_res_3598 = letpair_res_3600;
                                }
                                Void id_3604 { ((void)(inits_src_ref_924[id_3596] = letpair_res_3598), ::dessser::Void()) };
                                (void)id_3604;
                              }
                              (void)::dessser::Void();
                            }
                            (void)::dessser::Void();
                            uint8_t id_3605 { 0 };
                            uint8_t id_3606 { 0 };
                            int32_t id_3607 { repeat_n_925[id_3606] };
                            int32_t id_3608 { 1L };
                            int32_t id_3609 { int32_t(id_3607 + id_3608) };
                            Void id_3610 { ((void)(repeat_n_925[id_3605] = id_3609), ::dessser::Void()) };
                            (void)id_3610;
                            (void)id_3610;
                          }
                        } while (while_flag_3589);
                        (void)::dessser::Void();
                      }
                      (void)::dessser::Void();
                      uint8_t id_3611 { 0 };
                      ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3612 { inits_src_ref_924[id_3611] };
                      let_res_3586 = id_3612;
                    }
                    letpair_res_3582 = let_res_3586;
                  }
                  let_res_3581 = letpair_res_3582;
                }
                ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 letpair_res_3613;
                {
                  auto dlist4_fst_939 { std::get<0>(let_res_3581) };
                  auto dlist4_snd_940 { std::get<1>(let_res_3581) };
                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 id_3614 { dlist4_fst_939, dlist4_snd_940 };
                  letpair_res_3613 = id_3614;
                }
                ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 let_res_3615;
                {
                  ::dessser::gen::raql_expr::te88211e2a2e61aaae42952aaddf8e9e2 dtup_941 { letpair_res_3613 };
                  ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_3616;
                  {
                    auto dtup_fst_942 { std::get<0>(dtup_941) };
                    auto dtup_snd_943 { std::get<1>(dtup_941) };
                    Size id_3617 { 0UL };
                    uint8_t id_3618 { dtup_snd_943.peekU8(id_3617) };
                    uint8_t id_3619 { 1 };
                    bool id_3620 { bool(id_3618 == id_3619) };
                    ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 choose_res_3621;
                    if (id_3620) {
                      std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3622 { std::nullopt };
                      Size id_3623 { 1UL };
                      Pointer id_3624 { dtup_snd_943.skip(id_3623) };
                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_3625 { id_3622, id_3624 };
                      choose_res_3621 = id_3625;
                    } else {
                      Size id_3626 { 1UL };
                      Pointer id_3627 { dtup_snd_943.skip(id_3626) };
                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_3628 { fun3303(id_3627) };
                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 letpair_res_3629;
                      {
                        auto make1_1_fst_945 { std::get<0>(id_3628) };
                        auto make1_1_snd_946 { std::get<1>(id_3628) };
                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_3630 { make1_1_fst_945 };
                        ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_3631 { id_3630, make1_1_snd_946 };
                        letpair_res_3629 = id_3631;
                      }
                      choose_res_3621 = letpair_res_3629;
                    }
                    ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_3632;
                    {
                      auto dtup_fst_948 { std::get<0>(choose_res_3621) };
                      auto dtup_snd_949 { std::get<1>(choose_res_3621) };
                      ::dessser::gen::raql_expr::t7a300b42842ab70bb0c47c946967b5e9 id_3633 { dtup_fst_942, dtup_fst_948 };
                      ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_3634 { std::in_place_index<3>, id_3633 };
                      ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 id_3635 { id_3634, dtup_snd_949 };
                      letpair_res_3632 = id_3635;
                    }
                    letpair_res_3616 = letpair_res_3632;
                  }
                  let_res_3615 = letpair_res_3616;
                }
                choose_res_3540 = let_res_3615;
              } else {
                uint16_t id_3636 { 4 };
                bool id_3637 { bool(id_3636 == dsum1_fst_85) };
                ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 choose_res_3638;
                if (id_3637) {
                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3639 { dsum1_snd_86.readU16Le() };
                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3640;
                  {
                    auto du16_fst_480 { std::get<0>(id_3639) };
                    auto du16_snd_481 { std::get<1>(id_3639) };
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3641 { du16_fst_480, du16_snd_481 };
                    letpair_res_3640 = id_3641;
                  }
                  ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f let_res_3642;
                  {
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_485 { letpair_res_3640 };
                    ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_3643;
                    {
                      auto dsum1_fst_486 { std::get<0>(dsum1_485) };
                      auto dsum1_snd_487 { std::get<1>(dsum1_485) };
                      uint16_t id_3644 { 0 };
                      bool id_3645 { bool(id_3644 == dsum1_fst_486) };
                      ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f choose_res_3646;
                      if (id_3645) {
                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3647 { dsum1_snd_487.readU16Le() };
                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3648;
                        {
                          auto du16_fst_848 { std::get<0>(id_3647) };
                          auto du16_snd_849 { std::get<1>(id_3647) };
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3649 { du16_fst_848, du16_snd_849 };
                          letpair_res_3648 = id_3649;
                        }
                        ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 let_res_3650;
                        {
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_853 { letpair_res_3648 };
                          ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3651;
                          {
                            auto dsum1_fst_854 { std::get<0>(dsum1_853) };
                            auto dsum1_snd_855 { std::get<1>(dsum1_853) };
                            uint16_t id_3652 { 0 };
                            bool id_3653 { bool(id_3652 == dsum1_fst_854) };
                            ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3654;
                            if (id_3653) {
                              auto fun3655 { dessser::gen::raql_value::of_row_binary };
                              ::dessser::gen::raql_expr::tf3063cfb73e0f06d3ea99ebd15a86d50 id_3656 { fun3655(dsum1_snd_855) };
                              ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3657;
                              {
                                auto dsum2_fst_904 { std::get<0>(id_3656) };
                                auto dsum2_snd_905 { std::get<1>(id_3656) };
                                ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3658 { std::in_place_index<0>, dsum2_fst_904 };
                                ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3659 { id_3658, dsum2_snd_905 };
                                letpair_res_3657 = id_3659;
                              }
                              choose_res_3654 = letpair_res_3657;
                            } else {
                              uint16_t id_3660 { 1 };
                              bool id_3661 { bool(id_3660 == dsum1_fst_854) };
                              ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3662;
                              if (id_3661) {
                                auto fun3663 { dessser::gen::raql_variable::of_row_binary };
                                ::dessser::gen::raql_expr::tc4e06565de85990f3a8300f3d579c5ec id_3664 { fun3663(dsum1_snd_855) };
                                ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3665;
                                {
                                  auto dsum2_fst_901 { std::get<0>(id_3664) };
                                  auto dsum2_snd_902 { std::get<1>(id_3664) };
                                  ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3666 { std::in_place_index<1>, dsum2_fst_901 };
                                  ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3667 { id_3666, dsum2_snd_902 };
                                  letpair_res_3665 = id_3667;
                                }
                                choose_res_3662 = letpair_res_3665;
                              } else {
                                uint16_t id_3668 { 2 };
                                bool id_3669 { bool(id_3668 == dsum1_fst_854) };
                                ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3670;
                                if (id_3669) {
                                  auto fun3671 { dessser::gen::raql_binding_key::of_row_binary };
                                  ::dessser::gen::raql_expr::tafafa3f11f4987d5593612447c141adc id_3672 { fun3671(dsum1_snd_855) };
                                  ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3673;
                                  {
                                    auto dsum2_fst_898 { std::get<0>(id_3672) };
                                    auto dsum2_snd_899 { std::get<1>(id_3672) };
                                    ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3674 { std::in_place_index<2>, dsum2_fst_898 };
                                    ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3675 { id_3674, dsum2_snd_899 };
                                    letpair_res_3673 = id_3675;
                                  }
                                  choose_res_3670 = letpair_res_3673;
                                } else {
                                  uint16_t id_3676 { 3 };
                                  bool id_3677 { bool(id_3676 == dsum1_fst_854) };
                                  ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3678;
                                  if (id_3677) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3679 { std::in_place_index<3>, ::dessser::Void() };
                                    ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3680 { id_3679, dsum1_snd_855 };
                                    choose_res_3678 = id_3680;
                                  } else {
                                    uint16_t id_3681 { 4 };
                                    bool id_3682 { bool(id_3681 == dsum1_fst_854) };
                                    ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3683;
                                    if (id_3682) {
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3684 { std::in_place_index<4>, ::dessser::Void() };
                                      ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3685 { id_3684, dsum1_snd_855 };
                                      choose_res_3683 = id_3685;
                                    } else {
                                      uint16_t id_3686 { 5 };
                                      bool id_3687 { bool(id_3686 == dsum1_fst_854) };
                                      ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3688;
                                      if (id_3687) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3689 { std::in_place_index<5>, ::dessser::Void() };
                                        ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3690 { id_3689, dsum1_snd_855 };
                                        choose_res_3688 = id_3690;
                                      } else {
                                        uint16_t id_3691 { 6 };
                                        bool id_3692 { bool(id_3691 == dsum1_fst_854) };
                                        ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3693;
                                        if (id_3692) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3694 { std::in_place_index<6>, ::dessser::Void() };
                                          ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3695 { id_3694, dsum1_snd_855 };
                                          choose_res_3693 = id_3695;
                                        } else {
                                          uint16_t id_3696 { 7 };
                                          bool id_3697 { bool(id_3696 == dsum1_fst_854) };
                                          ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 choose_res_3698;
                                          if (id_3697) {
                                            uint32_t id_3699 { 0U };
                                            Vec<1, uint32_t> id_3700 {  id_3699  };
                                            ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3701;
                                            {
                                              Vec<1, uint32_t> leb_ref_859 { id_3700 };
                                              uint8_t id_3702 { 0 };
                                              Vec<1, uint8_t> id_3703 {  id_3702  };
                                              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3704;
                                              {
                                                Vec<1, uint8_t> shft_ref_860 { id_3703 };
                                                Vec<1, Pointer> id_3705 {  dsum1_snd_855  };
                                                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_3706;
                                                {
                                                  Vec<1, Pointer> p_ref_861 { id_3705 };
                                                  bool while_flag_3707 { true };
                                                  do {
                                                    uint8_t id_3708 { 0 };
                                                    Pointer id_3709 { p_ref_861[id_3708] };
                                                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_3710 { id_3709.readU8() };
                                                    bool let_res_3711;
                                                    {
                                                      ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_862 { id_3710 };
                                                      bool letpair_res_3712;
                                                      {
                                                        auto leb128_fst_863 { std::get<0>(leb128_862) };
                                                        auto leb128_snd_864 { std::get<1>(leb128_862) };
                                                        uint8_t id_3713 { 0 };
                                                        Void id_3714 { ((void)(p_ref_861[id_3713] = leb128_snd_864), ::dessser::Void()) };
                                                        (void)id_3714;
                                                        uint8_t id_3715 { 0 };
                                                        uint8_t id_3716 { 127 };
                                                        uint8_t id_3717 { uint8_t(leb128_fst_863 & id_3716) };
                                                        uint32_t id_3718 { uint32_t(id_3717) };
                                                        uint8_t id_3719 { 0 };
                                                        uint8_t id_3720 { shft_ref_860[id_3719] };
                                                        uint32_t id_3721 { uint32_t(id_3718 << id_3720) };
                                                        uint8_t id_3722 { 0 };
                                                        uint32_t id_3723 { leb_ref_859[id_3722] };
                                                        uint32_t id_3724 { uint32_t(id_3721 | id_3723) };
                                                        Void id_3725 { ((void)(leb_ref_859[id_3715] = id_3724), ::dessser::Void()) };
                                                        (void)id_3725;
                                                        uint8_t id_3726 { 0 };
                                                        uint8_t id_3727 { 0 };
                                                        uint8_t id_3728 { shft_ref_860[id_3727] };
                                                        uint8_t id_3729 { 7 };
                                                        uint8_t id_3730 { uint8_t(id_3728 + id_3729) };
                                                        Void id_3731 { ((void)(shft_ref_860[id_3726] = id_3730), ::dessser::Void()) };
                                                        (void)id_3731;
                                                        uint8_t id_3732 { 128 };
                                                        bool id_3733 { bool(leb128_fst_863 >= id_3732) };
                                                        letpair_res_3712 = id_3733;
                                                      }
                                                      let_res_3711 = letpair_res_3712;
                                                    }
                                                    while_flag_3707 = let_res_3711;
                                                    if (while_flag_3707) {
                                                      (void)::dessser::Void();
                                                    }
                                                  } while (while_flag_3707);
                                                  (void)::dessser::Void();
                                                  uint8_t id_3734 { 0 };
                                                  uint32_t id_3735 { leb_ref_859[id_3734] };
                                                  uint8_t id_3736 { 0 };
                                                  Pointer id_3737 { p_ref_861[id_3736] };
                                                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_3738 { id_3735, id_3737 };
                                                  let_res_3706 = id_3738;
                                                }
                                                let_res_3704 = let_res_3706;
                                              }
                                              let_res_3701 = let_res_3704;
                                            }
                                            ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 let_res_3739;
                                            {
                                              ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_868 { let_res_3701 };
                                              ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 letpair_res_3740;
                                              {
                                                auto dlist1_fst_869 { std::get<0>(dlist1_868) };
                                                auto dlist1_snd_870 { std::get<1>(dlist1_868) };
                                                Lst<dessser::gen::raql_path_comp::t_ext> endoflist_3741;
                                                ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3742 { endoflist_3741, dlist1_snd_870 };
                                                Vec<1, ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9> id_3743 {  id_3742  };
                                                ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 let_res_3744;
                                                {
                                                  Vec<1, ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9> inits_src_ref_871 { id_3743 };
                                                  int32_t id_3745 { 0L };
                                                  Vec<1, int32_t> id_3746 {  id_3745  };
                                                  {
                                                    Vec<1, int32_t> repeat_n_872 { id_3746 };
                                                    bool while_flag_3747 { true };
                                                    do {
                                                      int32_t id_3748 { int32_t(dlist1_fst_869) };
                                                      uint8_t id_3749 { 0 };
                                                      int32_t id_3750 { repeat_n_872[id_3749] };
                                                      bool id_3751 { bool(id_3748 > id_3750) };
                                                      while_flag_3747 = id_3751;
                                                      if (while_flag_3747) {
                                                        uint8_t id_3752 { 0 };
                                                        ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3753 { inits_src_ref_871[id_3752] };
                                                        {
                                                          ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 dlist2_873 { id_3753 };
                                                          {
                                                            auto dlist2_fst_874 { std::get<0>(dlist2_873) };
                                                            auto dlist2_snd_875 { std::get<1>(dlist2_873) };
                                                            uint8_t id_3754 { 0 };
                                                            auto fun3755 { dessser::gen::raql_path_comp::of_row_binary };
                                                            ::dessser::gen::raql_expr::tdb32a2e5c34c950a3600da6c2ff4f8f3 id_3756 { fun3755(dlist2_snd_875) };
                                                            ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 letpair_res_3757;
                                                            {
                                                              auto dlist3_fst_877 { std::get<0>(id_3756) };
                                                              auto dlist3_snd_878 { std::get<1>(id_3756) };
                                                              Lst<dessser::gen::raql_path_comp::t_ext> id_3758 { dlist3_fst_877, dlist2_fst_874 };
                                                              ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3759 { id_3758, dlist3_snd_878 };
                                                              letpair_res_3757 = id_3759;
                                                            }
                                                            Void id_3760 { ((void)(inits_src_ref_871[id_3754] = letpair_res_3757), ::dessser::Void()) };
                                                            (void)id_3760;
                                                          }
                                                          (void)::dessser::Void();
                                                        }
                                                        (void)::dessser::Void();
                                                        uint8_t id_3761 { 0 };
                                                        uint8_t id_3762 { 0 };
                                                        int32_t id_3763 { repeat_n_872[id_3762] };
                                                        int32_t id_3764 { 1L };
                                                        int32_t id_3765 { int32_t(id_3763 + id_3764) };
                                                        Void id_3766 { ((void)(repeat_n_872[id_3761] = id_3765), ::dessser::Void()) };
                                                        (void)id_3766;
                                                        (void)id_3766;
                                                      }
                                                    } while (while_flag_3747);
                                                    (void)::dessser::Void();
                                                  }
                                                  (void)::dessser::Void();
                                                  uint8_t id_3767 { 0 };
                                                  ::dessser::gen::raql_expr::t6459c10486533027b3ba85d163bef4e9 id_3768 { inits_src_ref_871[id_3767] };
                                                  let_res_3744 = id_3768;
                                                }
                                                letpair_res_3740 = let_res_3744;
                                              }
                                              let_res_3739 = letpair_res_3740;
                                            }
                                            ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 letpair_res_3769;
                                            {
                                              auto dlist4_fst_880 { std::get<0>(let_res_3739) };
                                              auto dlist4_snd_881 { std::get<1>(let_res_3739) };
                                              ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3770 { std::in_place_index<7>, dlist4_fst_880 };
                                              ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3771 { id_3770, dlist4_snd_881 };
                                              letpair_res_3769 = id_3771;
                                            }
                                            choose_res_3698 = letpair_res_3769;
                                          } else {
                                            uint16_t id_3772 { 8 };
                                            bool id_3773 { bool(dsum1_fst_854 == id_3772) };
                                            Void id_3774 { ((void)(assert(id_3773)), ::dessser::Void()) };
                                            (void)id_3774;
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::tc12b6657c8a8e014a9c0805fe6c1ffaa id_3775 { std::in_place_index<8>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::tadb8577e09b7edb2961f1b2389da22e4 id_3776 { id_3775, dsum1_snd_855 };
                                            choose_res_3698 = id_3776;
                                          }
                                          choose_res_3693 = choose_res_3698;
                                        }
                                        choose_res_3688 = choose_res_3693;
                                      }
                                      choose_res_3683 = choose_res_3688;
                                    }
                                    choose_res_3678 = choose_res_3683;
                                  }
                                  choose_res_3670 = choose_res_3678;
                                }
                                choose_res_3662 = choose_res_3670;
                              }
                              choose_res_3654 = choose_res_3662;
                            }
                            letpair_res_3651 = choose_res_3654;
                          }
                          let_res_3650 = letpair_res_3651;
                        }
                        ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_3777;
                        {
                          auto dsum2_fst_907 { std::get<0>(let_res_3650) };
                          auto dsum2_snd_908 { std::get<1>(let_res_3650) };
                          ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_3778 { std::in_place_index<0>, dsum2_fst_907 };
                          ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f id_3779 { id_3778, dsum2_snd_908 };
                          letpair_res_3777 = id_3779;
                        }
                        choose_res_3646 = letpair_res_3777;
                      } else {
                        uint16_t id_3780 { 1 };
                        bool id_3781 { bool(id_3780 == dsum1_fst_486) };
                        ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f choose_res_3782;
                        if (id_3781) {
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3783 { dsum1_snd_487.readU16Le() };
                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3784;
                          {
                            auto du16_fst_674 { std::get<0>(id_3783) };
                            auto du16_snd_675 { std::get<1>(id_3783) };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3785 { du16_fst_674, du16_snd_675 };
                            letpair_res_3784 = id_3785;
                          }
                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 let_res_3786;
                          {
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_679 { letpair_res_3784 };
                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 letpair_res_3787;
                            {
                              auto dsum1_fst_680 { std::get<0>(dsum1_679) };
                              auto dsum1_snd_681 { std::get<1>(dsum1_679) };
                              uint16_t id_3788 { 0 };
                              bool id_3789 { bool(id_3788 == dsum1_fst_680) };
                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3790;
                              if (id_3789) {
                                (void)::dessser::Void();
                                ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3791 { std::in_place_index<0>, ::dessser::Void() };
                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3792 { id_3791, dsum1_snd_681 };
                                choose_res_3790 = id_3792;
                              } else {
                                uint16_t id_3793 { 1 };
                                bool id_3794 { bool(id_3793 == dsum1_fst_680) };
                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3795;
                                if (id_3794) {
                                  auto fun3796 { dessser::gen::raql_type::of_row_binary };
                                  ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 id_3797 { fun3796(dsum1_snd_681) };
                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 letpair_res_3798;
                                  {
                                    auto dsum2_fst_833 { std::get<0>(id_3797) };
                                    auto dsum2_snd_834 { std::get<1>(id_3797) };
                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3799 { std::in_place_index<1>, dsum2_fst_833 };
                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3800 { id_3799, dsum2_snd_834 };
                                    letpair_res_3798 = id_3800;
                                  }
                                  choose_res_3795 = letpair_res_3798;
                                } else {
                                  uint16_t id_3801 { 2 };
                                  bool id_3802 { bool(id_3801 == dsum1_fst_680) };
                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3803;
                                  if (id_3802) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3804 { std::in_place_index<2>, ::dessser::Void() };
                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3805 { id_3804, dsum1_snd_681 };
                                    choose_res_3803 = id_3805;
                                  } else {
                                    uint16_t id_3806 { 3 };
                                    bool id_3807 { bool(id_3806 == dsum1_fst_680) };
                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3808;
                                    if (id_3807) {
                                      auto fun3809 { dessser::gen::raql_type::of_row_binary };
                                      ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 id_3810 { fun3809(dsum1_snd_681) };
                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 let_res_3811;
                                      {
                                        ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 dtup_805 { id_3810 };
                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 letpair_res_3812;
                                        {
                                          auto dtup_fst_806 { std::get<0>(dtup_805) };
                                          auto dtup_snd_807 { std::get<1>(dtup_805) };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3813 { dtup_snd_807.readU16Le() };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_3814;
                                          {
                                            auto du16_fst_809 { std::get<0>(id_3813) };
                                            auto du16_snd_810 { std::get<1>(id_3813) };
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_3815 { du16_fst_809, du16_snd_810 };
                                            letpair_res_3814 = id_3815;
                                          }
                                          ::dessser::gen::raql_expr::tb856470d2bf18dbfcf9343fbe7dab286 let_res_3816;
                                          {
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_814 { letpair_res_3814 };
                                            ::dessser::gen::raql_expr::tb856470d2bf18dbfcf9343fbe7dab286 letpair_res_3817;
                                            {
                                              auto dsum1_fst_815 { std::get<0>(dsum1_814) };
                                              auto dsum1_snd_816 { std::get<1>(dsum1_814) };
                                              uint16_t id_3818 { 0 };
                                              bool id_3819 { bool(id_3818 == dsum1_fst_815) };
                                              ::dessser::gen::raql_expr::tb856470d2bf18dbfcf9343fbe7dab286 choose_res_3820;
                                              if (id_3819) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b id_3821 { LittleEndian };
                                                ::dessser::gen::raql_expr::tb856470d2bf18dbfcf9343fbe7dab286 id_3822 { id_3821, dsum1_snd_816 };
                                                choose_res_3820 = id_3822;
                                              } else {
                                                uint16_t id_3823 { 1 };
                                                bool id_3824 { bool(dsum1_fst_815 == id_3823) };
                                                Void id_3825 { ((void)(assert(id_3824)), ::dessser::Void()) };
                                                (void)id_3825;
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::tda87e7e66ea8965a5a02c25a378e045b id_3826 { BigEndian };
                                                ::dessser::gen::raql_expr::tb856470d2bf18dbfcf9343fbe7dab286 id_3827 { id_3826, dsum1_snd_816 };
                                                choose_res_3820 = id_3827;
                                              }
                                              letpair_res_3817 = choose_res_3820;
                                            }
                                            let_res_3816 = letpair_res_3817;
                                          }
                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 letpair_res_3828;
                                          {
                                            auto dtup_fst_824 { std::get<0>(let_res_3816) };
                                            auto dtup_snd_825 { std::get<1>(let_res_3816) };
                                            ::dessser::gen::raql_expr::t4554edf650b893234c2bebd2f1cc4562 id_3829 { dtup_fst_806, dtup_fst_824 };
                                            ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3830 { std::in_place_index<3>, id_3829 };
                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3831 { id_3830, dtup_snd_825 };
                                            letpair_res_3828 = id_3831;
                                          }
                                          letpair_res_3812 = letpair_res_3828;
                                        }
                                        let_res_3811 = letpair_res_3812;
                                      }
                                      choose_res_3808 = let_res_3811;
                                    } else {
                                      uint16_t id_3832 { 4 };
                                      bool id_3833 { bool(id_3832 == dsum1_fst_680) };
                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3834;
                                      if (id_3833) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3835 { std::in_place_index<4>, ::dessser::Void() };
                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3836 { id_3835, dsum1_snd_681 };
                                        choose_res_3834 = id_3836;
                                      } else {
                                        uint16_t id_3837 { 5 };
                                        bool id_3838 { bool(id_3837 == dsum1_fst_680) };
                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3839;
                                        if (id_3838) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3840 { std::in_place_index<5>, ::dessser::Void() };
                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3841 { id_3840, dsum1_snd_681 };
                                          choose_res_3839 = id_3841;
                                        } else {
                                          uint16_t id_3842 { 6 };
                                          bool id_3843 { bool(id_3842 == dsum1_fst_680) };
                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3844;
                                          if (id_3843) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3845 { std::in_place_index<6>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3846 { id_3845, dsum1_snd_681 };
                                            choose_res_3844 = id_3846;
                                          } else {
                                            uint16_t id_3847 { 7 };
                                            bool id_3848 { bool(id_3847 == dsum1_fst_680) };
                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3849;
                                            if (id_3848) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3850 { std::in_place_index<7>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3851 { id_3850, dsum1_snd_681 };
                                              choose_res_3849 = id_3851;
                                            } else {
                                              uint16_t id_3852 { 8 };
                                              bool id_3853 { bool(id_3852 == dsum1_fst_680) };
                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3854;
                                              if (id_3853) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3855 { std::in_place_index<8>, ::dessser::Void() };
                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3856 { id_3855, dsum1_snd_681 };
                                                choose_res_3854 = id_3856;
                                              } else {
                                                uint16_t id_3857 { 9 };
                                                bool id_3858 { bool(id_3857 == dsum1_fst_680) };
                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3859;
                                                if (id_3858) {
                                                  (void)::dessser::Void();
                                                  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3860 { std::in_place_index<9>, ::dessser::Void() };
                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3861 { id_3860, dsum1_snd_681 };
                                                  choose_res_3859 = id_3861;
                                                } else {
                                                  uint16_t id_3862 { 10 };
                                                  bool id_3863 { bool(id_3862 == dsum1_fst_680) };
                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3864;
                                                  if (id_3863) {
                                                    (void)::dessser::Void();
                                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3865 { std::in_place_index<10>, ::dessser::Void() };
                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3866 { id_3865, dsum1_snd_681 };
                                                    choose_res_3864 = id_3866;
                                                  } else {
                                                    uint16_t id_3867 { 11 };
                                                    bool id_3868 { bool(id_3867 == dsum1_fst_680) };
                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3869;
                                                    if (id_3868) {
                                                      (void)::dessser::Void();
                                                      ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3870 { std::in_place_index<11>, ::dessser::Void() };
                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3871 { id_3870, dsum1_snd_681 };
                                                      choose_res_3869 = id_3871;
                                                    } else {
                                                      uint16_t id_3872 { 12 };
                                                      bool id_3873 { bool(id_3872 == dsum1_fst_680) };
                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3874;
                                                      if (id_3873) {
                                                        (void)::dessser::Void();
                                                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3875 { std::in_place_index<12>, ::dessser::Void() };
                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3876 { id_3875, dsum1_snd_681 };
                                                        choose_res_3874 = id_3876;
                                                      } else {
                                                        uint16_t id_3877 { 13 };
                                                        bool id_3878 { bool(id_3877 == dsum1_fst_680) };
                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3879;
                                                        if (id_3878) {
                                                          (void)::dessser::Void();
                                                          ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3880 { std::in_place_index<13>, ::dessser::Void() };
                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3881 { id_3880, dsum1_snd_681 };
                                                          choose_res_3879 = id_3881;
                                                        } else {
                                                          uint16_t id_3882 { 14 };
                                                          bool id_3883 { bool(id_3882 == dsum1_fst_680) };
                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3884;
                                                          if (id_3883) {
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3885 { std::in_place_index<14>, ::dessser::Void() };
                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3886 { id_3885, dsum1_snd_681 };
                                                            choose_res_3884 = id_3886;
                                                          } else {
                                                            uint16_t id_3887 { 15 };
                                                            bool id_3888 { bool(id_3887 == dsum1_fst_680) };
                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3889;
                                                            if (id_3888) {
                                                              (void)::dessser::Void();
                                                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3890 { std::in_place_index<15>, ::dessser::Void() };
                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3891 { id_3890, dsum1_snd_681 };
                                                              choose_res_3889 = id_3891;
                                                            } else {
                                                              uint16_t id_3892 { 16 };
                                                              bool id_3893 { bool(id_3892 == dsum1_fst_680) };
                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3894;
                                                              if (id_3893) {
                                                                (void)::dessser::Void();
                                                                ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3895 { std::in_place_index<16>, ::dessser::Void() };
                                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3896 { id_3895, dsum1_snd_681 };
                                                                choose_res_3894 = id_3896;
                                                              } else {
                                                                uint16_t id_3897 { 17 };
                                                                bool id_3898 { bool(id_3897 == dsum1_fst_680) };
                                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3899;
                                                                if (id_3898) {
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3900 { std::in_place_index<17>, ::dessser::Void() };
                                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3901 { id_3900, dsum1_snd_681 };
                                                                  choose_res_3899 = id_3901;
                                                                } else {
                                                                  uint16_t id_3902 { 18 };
                                                                  bool id_3903 { bool(id_3902 == dsum1_fst_680) };
                                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3904;
                                                                  if (id_3903) {
                                                                    (void)::dessser::Void();
                                                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3905 { std::in_place_index<18>, ::dessser::Void() };
                                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3906 { id_3905, dsum1_snd_681 };
                                                                    choose_res_3904 = id_3906;
                                                                  } else {
                                                                    uint16_t id_3907 { 19 };
                                                                    bool id_3908 { bool(id_3907 == dsum1_fst_680) };
                                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3909;
                                                                    if (id_3908) {
                                                                      (void)::dessser::Void();
                                                                      ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3910 { std::in_place_index<19>, ::dessser::Void() };
                                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3911 { id_3910, dsum1_snd_681 };
                                                                      choose_res_3909 = id_3911;
                                                                    } else {
                                                                      uint16_t id_3912 { 20 };
                                                                      bool id_3913 { bool(id_3912 == dsum1_fst_680) };
                                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3914;
                                                                      if (id_3913) {
                                                                        (void)::dessser::Void();
                                                                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3915 { std::in_place_index<20>, ::dessser::Void() };
                                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3916 { id_3915, dsum1_snd_681 };
                                                                        choose_res_3914 = id_3916;
                                                                      } else {
                                                                        uint16_t id_3917 { 21 };
                                                                        bool id_3918 { bool(id_3917 == dsum1_fst_680) };
                                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3919;
                                                                        if (id_3918) {
                                                                          (void)::dessser::Void();
                                                                          ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3920 { std::in_place_index<21>, ::dessser::Void() };
                                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3921 { id_3920, dsum1_snd_681 };
                                                                          choose_res_3919 = id_3921;
                                                                        } else {
                                                                          uint16_t id_3922 { 22 };
                                                                          bool id_3923 { bool(id_3922 == dsum1_fst_680) };
                                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3924;
                                                                          if (id_3923) {
                                                                            (void)::dessser::Void();
                                                                            ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3925 { std::in_place_index<22>, ::dessser::Void() };
                                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3926 { id_3925, dsum1_snd_681 };
                                                                            choose_res_3924 = id_3926;
                                                                          } else {
                                                                            uint16_t id_3927 { 23 };
                                                                            bool id_3928 { bool(id_3927 == dsum1_fst_680) };
                                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3929;
                                                                            if (id_3928) {
                                                                              (void)::dessser::Void();
                                                                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3930 { std::in_place_index<23>, ::dessser::Void() };
                                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3931 { id_3930, dsum1_snd_681 };
                                                                              choose_res_3929 = id_3931;
                                                                            } else {
                                                                              uint16_t id_3932 { 24 };
                                                                              bool id_3933 { bool(id_3932 == dsum1_fst_680) };
                                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3934;
                                                                              if (id_3933) {
                                                                                (void)::dessser::Void();
                                                                                ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3935 { std::in_place_index<24>, ::dessser::Void() };
                                                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3936 { id_3935, dsum1_snd_681 };
                                                                                choose_res_3934 = id_3936;
                                                                              } else {
                                                                                uint16_t id_3937 { 25 };
                                                                                bool id_3938 { bool(id_3937 == dsum1_fst_680) };
                                                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3939;
                                                                                if (id_3938) {
                                                                                  (void)::dessser::Void();
                                                                                  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3940 { std::in_place_index<25>, ::dessser::Void() };
                                                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3941 { id_3940, dsum1_snd_681 };
                                                                                  choose_res_3939 = id_3941;
                                                                                } else {
                                                                                  uint16_t id_3942 { 26 };
                                                                                  bool id_3943 { bool(id_3942 == dsum1_fst_680) };
                                                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3944;
                                                                                  if (id_3943) {
                                                                                    (void)::dessser::Void();
                                                                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3945 { std::in_place_index<26>, ::dessser::Void() };
                                                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3946 { id_3945, dsum1_snd_681 };
                                                                                    choose_res_3944 = id_3946;
                                                                                  } else {
                                                                                    uint16_t id_3947 { 27 };
                                                                                    bool id_3948 { bool(id_3947 == dsum1_fst_680) };
                                                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3949;
                                                                                    if (id_3948) {
                                                                                      (void)::dessser::Void();
                                                                                      ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3950 { std::in_place_index<27>, ::dessser::Void() };
                                                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3951 { id_3950, dsum1_snd_681 };
                                                                                      choose_res_3949 = id_3951;
                                                                                    } else {
                                                                                      uint16_t id_3952 { 28 };
                                                                                      bool id_3953 { bool(id_3952 == dsum1_fst_680) };
                                                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3954;
                                                                                      if (id_3953) {
                                                                                        (void)::dessser::Void();
                                                                                        ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3955 { std::in_place_index<28>, ::dessser::Void() };
                                                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3956 { id_3955, dsum1_snd_681 };
                                                                                        choose_res_3954 = id_3956;
                                                                                      } else {
                                                                                        uint16_t id_3957 { 29 };
                                                                                        bool id_3958 { bool(id_3957 == dsum1_fst_680) };
                                                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3959;
                                                                                        if (id_3958) {
                                                                                          (void)::dessser::Void();
                                                                                          ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3960 { std::in_place_index<29>, ::dessser::Void() };
                                                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3961 { id_3960, dsum1_snd_681 };
                                                                                          choose_res_3959 = id_3961;
                                                                                        } else {
                                                                                          uint16_t id_3962 { 30 };
                                                                                          bool id_3963 { bool(id_3962 == dsum1_fst_680) };
                                                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3964;
                                                                                          if (id_3963) {
                                                                                            (void)::dessser::Void();
                                                                                            ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3965 { std::in_place_index<30>, ::dessser::Void() };
                                                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3966 { id_3965, dsum1_snd_681 };
                                                                                            choose_res_3964 = id_3966;
                                                                                          } else {
                                                                                            uint16_t id_3967 { 31 };
                                                                                            bool id_3968 { bool(id_3967 == dsum1_fst_680) };
                                                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3969;
                                                                                            if (id_3968) {
                                                                                              (void)::dessser::Void();
                                                                                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3970 { std::in_place_index<31>, ::dessser::Void() };
                                                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3971 { id_3970, dsum1_snd_681 };
                                                                                              choose_res_3969 = id_3971;
                                                                                            } else {
                                                                                              uint16_t id_3972 { 32 };
                                                                                              bool id_3973 { bool(id_3972 == dsum1_fst_680) };
                                                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3974;
                                                                                              if (id_3973) {
                                                                                                (void)::dessser::Void();
                                                                                                ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3975 { std::in_place_index<32>, ::dessser::Void() };
                                                                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3976 { id_3975, dsum1_snd_681 };
                                                                                                choose_res_3974 = id_3976;
                                                                                              } else {
                                                                                                uint16_t id_3977 { 33 };
                                                                                                bool id_3978 { bool(id_3977 == dsum1_fst_680) };
                                                                                                ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3979;
                                                                                                if (id_3978) {
                                                                                                  (void)::dessser::Void();
                                                                                                  ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3980 { std::in_place_index<33>, ::dessser::Void() };
                                                                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3981 { id_3980, dsum1_snd_681 };
                                                                                                  choose_res_3979 = id_3981;
                                                                                                } else {
                                                                                                  uint16_t id_3982 { 34 };
                                                                                                  bool id_3983 { bool(id_3982 == dsum1_fst_680) };
                                                                                                  ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3984;
                                                                                                  if (id_3983) {
                                                                                                    (void)::dessser::Void();
                                                                                                    ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3985 { std::in_place_index<34>, ::dessser::Void() };
                                                                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3986 { id_3985, dsum1_snd_681 };
                                                                                                    choose_res_3984 = id_3986;
                                                                                                  } else {
                                                                                                    uint16_t id_3987 { 35 };
                                                                                                    bool id_3988 { bool(id_3987 == dsum1_fst_680) };
                                                                                                    ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3989;
                                                                                                    if (id_3988) {
                                                                                                      (void)::dessser::Void();
                                                                                                      ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_3990 { std::in_place_index<35>, ::dessser::Void() };
                                                                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_3991 { id_3990, dsum1_snd_681 };
                                                                                                      choose_res_3989 = id_3991;
                                                                                                    } else {
                                                                                                      uint16_t id_3992 { 36 };
                                                                                                      bool id_3993 { bool(id_3992 == dsum1_fst_680) };
                                                                                                      ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_3994;
                                                                                                      if (id_3993) {
                                                                                                        uint32_t id_3995 { 0U };
                                                                                                        Vec<1, uint32_t> id_3996 {  id_3995  };
                                                                                                        ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa let_res_3997;
                                                                                                        {
                                                                                                          Vec<1, uint32_t> leb_ref_694 { id_3996 };
                                                                                                          uint8_t id_3998 { 0 };
                                                                                                          Vec<1, uint8_t> id_3999 {  id_3998  };
                                                                                                          ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa let_res_4000;
                                                                                                          {
                                                                                                            Vec<1, uint8_t> shft_ref_695 { id_3999 };
                                                                                                            Vec<1, Pointer> id_4001 {  dsum1_snd_681  };
                                                                                                            ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa let_res_4002;
                                                                                                            {
                                                                                                              Vec<1, Pointer> p_ref_696 { id_4001 };
                                                                                                              bool while_flag_4003 { true };
                                                                                                              do {
                                                                                                                uint8_t id_4004 { 0 };
                                                                                                                Pointer id_4005 { p_ref_696[id_4004] };
                                                                                                                ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4006 { id_4005.readU8() };
                                                                                                                bool let_res_4007;
                                                                                                                {
                                                                                                                  ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_697 { id_4006 };
                                                                                                                  bool letpair_res_4008;
                                                                                                                  {
                                                                                                                    auto leb128_fst_698 { std::get<0>(leb128_697) };
                                                                                                                    auto leb128_snd_699 { std::get<1>(leb128_697) };
                                                                                                                    uint8_t id_4009 { 0 };
                                                                                                                    Void id_4010 { ((void)(p_ref_696[id_4009] = leb128_snd_699), ::dessser::Void()) };
                                                                                                                    (void)id_4010;
                                                                                                                    uint8_t id_4011 { 0 };
                                                                                                                    uint8_t id_4012 { 127 };
                                                                                                                    uint8_t id_4013 { uint8_t(leb128_fst_698 & id_4012) };
                                                                                                                    uint32_t id_4014 { uint32_t(id_4013) };
                                                                                                                    uint8_t id_4015 { 0 };
                                                                                                                    uint8_t id_4016 { shft_ref_695[id_4015] };
                                                                                                                    uint32_t id_4017 { uint32_t(id_4014 << id_4016) };
                                                                                                                    uint8_t id_4018 { 0 };
                                                                                                                    uint32_t id_4019 { leb_ref_694[id_4018] };
                                                                                                                    uint32_t id_4020 { uint32_t(id_4017 | id_4019) };
                                                                                                                    Void id_4021 { ((void)(leb_ref_694[id_4011] = id_4020), ::dessser::Void()) };
                                                                                                                    (void)id_4021;
                                                                                                                    uint8_t id_4022 { 0 };
                                                                                                                    uint8_t id_4023 { 0 };
                                                                                                                    uint8_t id_4024 { shft_ref_695[id_4023] };
                                                                                                                    uint8_t id_4025 { 7 };
                                                                                                                    uint8_t id_4026 { uint8_t(id_4024 + id_4025) };
                                                                                                                    Void id_4027 { ((void)(shft_ref_695[id_4022] = id_4026), ::dessser::Void()) };
                                                                                                                    (void)id_4027;
                                                                                                                    uint8_t id_4028 { 128 };
                                                                                                                    bool id_4029 { bool(leb128_fst_698 >= id_4028) };
                                                                                                                    letpair_res_4008 = id_4029;
                                                                                                                  }
                                                                                                                  let_res_4007 = letpair_res_4008;
                                                                                                                }
                                                                                                                while_flag_4003 = let_res_4007;
                                                                                                                if (while_flag_4003) {
                                                                                                                  (void)::dessser::Void();
                                                                                                                }
                                                                                                              } while (while_flag_4003);
                                                                                                              (void)::dessser::Void();
                                                                                                              uint8_t id_4030 { 0 };
                                                                                                              uint32_t id_4031 { leb_ref_694[id_4030] };
                                                                                                              Size id_4032 { Size(id_4031) };
                                                                                                              uint8_t id_4033 { 0 };
                                                                                                              Pointer id_4034 { p_ref_696[id_4033] };
                                                                                                              ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa id_4035 { id_4032, id_4034 };
                                                                                                              let_res_4002 = id_4035;
                                                                                                            }
                                                                                                            let_res_4000 = let_res_4002;
                                                                                                          }
                                                                                                          let_res_3997 = let_res_4000;
                                                                                                        }
                                                                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 let_res_4036;
                                                                                                        {
                                                                                                          ::dessser::gen::raql_expr::t12fb9c475959b52bf7b17b155a955ffa dstring1_700 { let_res_3997 };
                                                                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 letpair_res_4037;
                                                                                                          {
                                                                                                            auto dstring1_fst_701 { std::get<0>(dstring1_700) };
                                                                                                            auto dstring1_snd_702 { std::get<1>(dstring1_700) };
                                                                                                            ::dessser::gen::raql_expr::t9ef6882174ae71a34a3c5ef6b29242fb id_4038 { dstring1_snd_702.readBytes(dstring1_fst_701) };
                                                                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 letpair_res_4039;
                                                                                                            {
                                                                                                              auto dstring2_fst_704 { std::get<0>(id_4038) };
                                                                                                              auto dstring2_snd_705 { std::get<1>(id_4038) };
                                                                                                              std::string id_4040 { dstring2_fst_704.toString() };
                                                                                                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_4041 { std::in_place_index<36>, id_4040 };
                                                                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_4042 { id_4041, dstring2_snd_705 };
                                                                                                              letpair_res_4039 = id_4042;
                                                                                                            }
                                                                                                            letpair_res_4037 = letpair_res_4039;
                                                                                                          }
                                                                                                          let_res_4036 = letpair_res_4037;
                                                                                                        }
                                                                                                        choose_res_3994 = let_res_4036;
                                                                                                      } else {
                                                                                                        uint16_t id_4043 { 37 };
                                                                                                        bool id_4044 { bool(id_4043 == dsum1_fst_680) };
                                                                                                        ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_4045;
                                                                                                        if (id_4044) {
                                                                                                          (void)::dessser::Void();
                                                                                                          ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_4046 { std::in_place_index<37>, ::dessser::Void() };
                                                                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_4047 { id_4046, dsum1_snd_681 };
                                                                                                          choose_res_4045 = id_4047;
                                                                                                        } else {
                                                                                                          uint16_t id_4048 { 38 };
                                                                                                          bool id_4049 { bool(id_4048 == dsum1_fst_680) };
                                                                                                          ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_4050;
                                                                                                          if (id_4049) {
                                                                                                            (void)::dessser::Void();
                                                                                                            ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_4051 { std::in_place_index<38>, ::dessser::Void() };
                                                                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_4052 { id_4051, dsum1_snd_681 };
                                                                                                            choose_res_4050 = id_4052;
                                                                                                          } else {
                                                                                                            uint16_t id_4053 { 39 };
                                                                                                            bool id_4054 { bool(id_4053 == dsum1_fst_680) };
                                                                                                            ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 choose_res_4055;
                                                                                                            if (id_4054) {
                                                                                                              (void)::dessser::Void();
                                                                                                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_4056 { std::in_place_index<39>, ::dessser::Void() };
                                                                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_4057 { id_4056, dsum1_snd_681 };
                                                                                                              choose_res_4055 = id_4057;
                                                                                                            } else {
                                                                                                              uint16_t id_4058 { 40 };
                                                                                                              bool id_4059 { bool(dsum1_fst_680 == id_4058) };
                                                                                                              Void id_4060 { ((void)(assert(id_4059)), ::dessser::Void()) };
                                                                                                              (void)id_4060;
                                                                                                              (void)::dessser::Void();
                                                                                                              ::dessser::gen::raql_expr::t1e698e747432021a9543ab78c0de985f id_4061 { std::in_place_index<40>, ::dessser::Void() };
                                                                                                              ::dessser::gen::raql_expr::t5aae5cf96cc54eff6123acdd39da1c51 id_4062 { id_4061, dsum1_snd_681 };
                                                                                                              choose_res_4055 = id_4062;
                                                                                                            }
                                                                                                            choose_res_4050 = choose_res_4055;
                                                                                                          }
                                                                                                          choose_res_4045 = choose_res_4050;
                                                                                                        }
                                                                                                        choose_res_3994 = choose_res_4045;
                                                                                                      }
                                                                                                      choose_res_3989 = choose_res_3994;
                                                                                                    }
                                                                                                    choose_res_3984 = choose_res_3989;
                                                                                                  }
                                                                                                  choose_res_3979 = choose_res_3984;
                                                                                                }
                                                                                                choose_res_3974 = choose_res_3979;
                                                                                              }
                                                                                              choose_res_3969 = choose_res_3974;
                                                                                            }
                                                                                            choose_res_3964 = choose_res_3969;
                                                                                          }
                                                                                          choose_res_3959 = choose_res_3964;
                                                                                        }
                                                                                        choose_res_3954 = choose_res_3959;
                                                                                      }
                                                                                      choose_res_3949 = choose_res_3954;
                                                                                    }
                                                                                    choose_res_3944 = choose_res_3949;
                                                                                  }
                                                                                  choose_res_3939 = choose_res_3944;
                                                                                }
                                                                                choose_res_3934 = choose_res_3939;
                                                                              }
                                                                              choose_res_3929 = choose_res_3934;
                                                                            }
                                                                            choose_res_3924 = choose_res_3929;
                                                                          }
                                                                          choose_res_3919 = choose_res_3924;
                                                                        }
                                                                        choose_res_3914 = choose_res_3919;
                                                                      }
                                                                      choose_res_3909 = choose_res_3914;
                                                                    }
                                                                    choose_res_3904 = choose_res_3909;
                                                                  }
                                                                  choose_res_3899 = choose_res_3904;
                                                                }
                                                                choose_res_3894 = choose_res_3899;
                                                              }
                                                              choose_res_3889 = choose_res_3894;
                                                            }
                                                            choose_res_3884 = choose_res_3889;
                                                          }
                                                          choose_res_3879 = choose_res_3884;
                                                        }
                                                        choose_res_3874 = choose_res_3879;
                                                      }
                                                      choose_res_3869 = choose_res_3874;
                                                    }
                                                    choose_res_3864 = choose_res_3869;
                                                  }
                                                  choose_res_3859 = choose_res_3864;
                                                }
                                                choose_res_3854 = choose_res_3859;
                                              }
                                              choose_res_3849 = choose_res_3854;
                                            }
                                            choose_res_3844 = choose_res_3849;
                                          }
                                          choose_res_3839 = choose_res_3844;
                                        }
                                        choose_res_3834 = choose_res_3839;
                                      }
                                      choose_res_3808 = choose_res_3834;
                                    }
                                    choose_res_3803 = choose_res_3808;
                                  }
                                  choose_res_3795 = choose_res_3803;
                                }
                                choose_res_3790 = choose_res_3795;
                              }
                              letpair_res_3787 = choose_res_3790;
                            }
                            let_res_3786 = letpair_res_3787;
                          }
                          ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4063;
                          {
                            auto dtup_fst_839 { std::get<0>(let_res_3786) };
                            auto dtup_snd_840 { std::get<1>(let_res_3786) };
                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4064 { fun3303(dtup_snd_840) };
                            ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4065;
                            {
                              auto dtup_fst_842 { std::get<0>(id_4064) };
                              auto dtup_snd_843 { std::get<1>(id_4064) };
                              ::dessser::gen::raql_expr::t97690040bdae0cd6dad1d92efad836bd id_4066 { dtup_fst_839, dtup_fst_842 };
                              ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_4067 { std::in_place_index<1>, id_4066 };
                              ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f id_4068 { id_4067, dtup_snd_843 };
                              letpair_res_4065 = id_4068;
                            }
                            letpair_res_4063 = letpair_res_4065;
                          }
                          choose_res_3782 = letpair_res_4063;
                        } else {
                          uint16_t id_4069 { 2 };
                          bool id_4070 { bool(id_4069 == dsum1_fst_486) };
                          ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f choose_res_4071;
                          if (id_4070) {
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4072 { dsum1_snd_487.readU16Le() };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4073;
                            {
                              auto du16_fst_621 { std::get<0>(id_4072) };
                              auto du16_snd_622 { std::get<1>(id_4072) };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4074 { du16_fst_621, du16_snd_622 };
                              letpair_res_4073 = id_4074;
                            }
                            ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 let_res_4075;
                            {
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_626 { letpair_res_4073 };
                              ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 letpair_res_4076;
                              {
                                auto dsum1_fst_627 { std::get<0>(dsum1_626) };
                                auto dsum1_snd_628 { std::get<1>(dsum1_626) };
                                uint16_t id_4077 { 0 };
                                bool id_4078 { bool(id_4077 == dsum1_fst_627) };
                                ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 choose_res_4079;
                                if (id_4078) {
                                  (void)::dessser::Void();
                                  ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25 id_4080 { Max };
                                  ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 id_4081 { id_4080, dsum1_snd_628 };
                                  choose_res_4079 = id_4081;
                                } else {
                                  uint16_t id_4082 { 1 };
                                  bool id_4083 { bool(id_4082 == dsum1_fst_627) };
                                  ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 choose_res_4084;
                                  if (id_4083) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25 id_4085 { Min };
                                    ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 id_4086 { id_4085, dsum1_snd_628 };
                                    choose_res_4084 = id_4086;
                                  } else {
                                    uint16_t id_4087 { 2 };
                                    bool id_4088 { bool(id_4087 == dsum1_fst_627) };
                                    ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 choose_res_4089;
                                    if (id_4088) {
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25 id_4090 { Print };
                                      ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 id_4091 { id_4090, dsum1_snd_628 };
                                      choose_res_4089 = id_4091;
                                    } else {
                                      uint16_t id_4092 { 3 };
                                      bool id_4093 { bool(dsum1_fst_627 == id_4092) };
                                      Void id_4094 { ((void)(assert(id_4093)), ::dessser::Void()) };
                                      (void)id_4094;
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::t48461ff0cd2afb0094859451a8d8bb25 id_4095 { Coalesce };
                                      ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 id_4096 { id_4095, dsum1_snd_628 };
                                      choose_res_4089 = id_4096;
                                    }
                                    choose_res_4084 = choose_res_4089;
                                  }
                                  choose_res_4079 = choose_res_4084;
                                }
                                letpair_res_4076 = choose_res_4079;
                              }
                              let_res_4075 = letpair_res_4076;
                            }
                            ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f let_res_4097;
                            {
                              ::dessser::gen::raql_expr::taaeb09e09e7b2f3d51af215eff0c9ba8 dtup_641 { let_res_4075 };
                              ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4098;
                              {
                                auto dtup_fst_642 { std::get<0>(dtup_641) };
                                auto dtup_snd_643 { std::get<1>(dtup_641) };
                                uint32_t id_4099 { 0U };
                                Vec<1, uint32_t> id_4100 {  id_4099  };
                                ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4101;
                                {
                                  Vec<1, uint32_t> leb_ref_644 { id_4100 };
                                  uint8_t id_4102 { 0 };
                                  Vec<1, uint8_t> id_4103 {  id_4102  };
                                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4104;
                                  {
                                    Vec<1, uint8_t> shft_ref_645 { id_4103 };
                                    Vec<1, Pointer> id_4105 {  dtup_snd_643  };
                                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4106;
                                    {
                                      Vec<1, Pointer> p_ref_646 { id_4105 };
                                      bool while_flag_4107 { true };
                                      do {
                                        uint8_t id_4108 { 0 };
                                        Pointer id_4109 { p_ref_646[id_4108] };
                                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4110 { id_4109.readU8() };
                                        bool let_res_4111;
                                        {
                                          ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_647 { id_4110 };
                                          bool letpair_res_4112;
                                          {
                                            auto leb128_fst_648 { std::get<0>(leb128_647) };
                                            auto leb128_snd_649 { std::get<1>(leb128_647) };
                                            uint8_t id_4113 { 0 };
                                            Void id_4114 { ((void)(p_ref_646[id_4113] = leb128_snd_649), ::dessser::Void()) };
                                            (void)id_4114;
                                            uint8_t id_4115 { 0 };
                                            uint8_t id_4116 { 127 };
                                            uint8_t id_4117 { uint8_t(leb128_fst_648 & id_4116) };
                                            uint32_t id_4118 { uint32_t(id_4117) };
                                            uint8_t id_4119 { 0 };
                                            uint8_t id_4120 { shft_ref_645[id_4119] };
                                            uint32_t id_4121 { uint32_t(id_4118 << id_4120) };
                                            uint8_t id_4122 { 0 };
                                            uint32_t id_4123 { leb_ref_644[id_4122] };
                                            uint32_t id_4124 { uint32_t(id_4121 | id_4123) };
                                            Void id_4125 { ((void)(leb_ref_644[id_4115] = id_4124), ::dessser::Void()) };
                                            (void)id_4125;
                                            uint8_t id_4126 { 0 };
                                            uint8_t id_4127 { 0 };
                                            uint8_t id_4128 { shft_ref_645[id_4127] };
                                            uint8_t id_4129 { 7 };
                                            uint8_t id_4130 { uint8_t(id_4128 + id_4129) };
                                            Void id_4131 { ((void)(shft_ref_645[id_4126] = id_4130), ::dessser::Void()) };
                                            (void)id_4131;
                                            uint8_t id_4132 { 128 };
                                            bool id_4133 { bool(leb128_fst_648 >= id_4132) };
                                            letpair_res_4112 = id_4133;
                                          }
                                          let_res_4111 = letpair_res_4112;
                                        }
                                        while_flag_4107 = let_res_4111;
                                        if (while_flag_4107) {
                                          (void)::dessser::Void();
                                        }
                                      } while (while_flag_4107);
                                      (void)::dessser::Void();
                                      uint8_t id_4134 { 0 };
                                      uint32_t id_4135 { leb_ref_644[id_4134] };
                                      uint8_t id_4136 { 0 };
                                      Pointer id_4137 { p_ref_646[id_4136] };
                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4138 { id_4135, id_4137 };
                                      let_res_4106 = id_4138;
                                    }
                                    let_res_4104 = let_res_4106;
                                  }
                                  let_res_4101 = let_res_4104;
                                }
                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4139;
                                {
                                  ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_653 { let_res_4101 };
                                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4140;
                                  {
                                    auto dlist1_fst_654 { std::get<0>(dlist1_653) };
                                    auto dlist1_snd_655 { std::get<1>(dlist1_653) };
                                    Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_4141;
                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4142 { endoflist_4141, dlist1_snd_655 };
                                    Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_4143 {  id_4142  };
                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4144;
                                    {
                                      Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_656 { id_4143 };
                                      int32_t id_4145 { 0L };
                                      Vec<1, int32_t> id_4146 {  id_4145  };
                                      {
                                        Vec<1, int32_t> repeat_n_657 { id_4146 };
                                        bool while_flag_4147 { true };
                                        do {
                                          int32_t id_4148 { int32_t(dlist1_fst_654) };
                                          uint8_t id_4149 { 0 };
                                          int32_t id_4150 { repeat_n_657[id_4149] };
                                          bool id_4151 { bool(id_4148 > id_4150) };
                                          while_flag_4147 = id_4151;
                                          if (while_flag_4147) {
                                            uint8_t id_4152 { 0 };
                                            ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4153 { inits_src_ref_656[id_4152] };
                                            {
                                              ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_658 { id_4153 };
                                              {
                                                auto dlist2_fst_659 { std::get<0>(dlist2_658) };
                                                auto dlist2_snd_660 { std::get<1>(dlist2_658) };
                                                uint8_t id_4154 { 0 };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4155 { fun3303(dlist2_snd_660) };
                                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4156;
                                                {
                                                  auto dlist3_fst_662 { std::get<0>(id_4155) };
                                                  auto dlist3_snd_663 { std::get<1>(id_4155) };
                                                  Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4157 { dlist3_fst_662, dlist2_fst_659 };
                                                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4158 { id_4157, dlist3_snd_663 };
                                                  letpair_res_4156 = id_4158;
                                                }
                                                Void id_4159 { ((void)(inits_src_ref_656[id_4154] = letpair_res_4156), ::dessser::Void()) };
                                                (void)id_4159;
                                              }
                                              (void)::dessser::Void();
                                            }
                                            (void)::dessser::Void();
                                            uint8_t id_4160 { 0 };
                                            uint8_t id_4161 { 0 };
                                            int32_t id_4162 { repeat_n_657[id_4161] };
                                            int32_t id_4163 { 1L };
                                            int32_t id_4164 { int32_t(id_4162 + id_4163) };
                                            Void id_4165 { ((void)(repeat_n_657[id_4160] = id_4164), ::dessser::Void()) };
                                            (void)id_4165;
                                            (void)id_4165;
                                          }
                                        } while (while_flag_4147);
                                        (void)::dessser::Void();
                                      }
                                      (void)::dessser::Void();
                                      uint8_t id_4166 { 0 };
                                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4167 { inits_src_ref_656[id_4166] };
                                      let_res_4144 = id_4167;
                                    }
                                    letpair_res_4140 = let_res_4144;
                                  }
                                  let_res_4139 = letpair_res_4140;
                                }
                                ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4168;
                                {
                                  auto dlist4_fst_665 { std::get<0>(let_res_4139) };
                                  auto dlist4_snd_666 { std::get<1>(let_res_4139) };
                                  ::dessser::gen::raql_expr::tc52656a065611d8751e7656ebb533276 id_4169 { dtup_fst_642, dlist4_fst_665 };
                                  ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_4170 { std::in_place_index<2>, id_4169 };
                                  ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f id_4171 { id_4170, dlist4_snd_666 };
                                  letpair_res_4168 = id_4171;
                                }
                                letpair_res_4098 = letpair_res_4168;
                              }
                              let_res_4097 = letpair_res_4098;
                            }
                            choose_res_4071 = let_res_4097;
                          } else {
                            uint16_t id_4172 { 3 };
                            bool id_4173 { bool(id_4172 == dsum1_fst_486) };
                            ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f choose_res_4174;
                            if (id_4173) {
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4175 { dsum1_snd_487.readU16Le() };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4176;
                              {
                                auto du16_fst_519 { std::get<0>(id_4175) };
                                auto du16_snd_520 { std::get<1>(id_4175) };
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4177 { du16_fst_519, du16_snd_520 };
                                letpair_res_4176 = id_4177;
                              }
                              ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 let_res_4178;
                              {
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_524 { letpair_res_4176 };
                                ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 letpair_res_4179;
                                {
                                  auto dsum1_fst_525 { std::get<0>(dsum1_524) };
                                  auto dsum1_snd_526 { std::get<1>(dsum1_524) };
                                  uint16_t id_4180 { 0 };
                                  bool id_4181 { bool(id_4180 == dsum1_fst_525) };
                                  ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4182;
                                  if (id_4181) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4183 { std::in_place_index<0>, ::dessser::Void() };
                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4184 { id_4183, dsum1_snd_526 };
                                    choose_res_4182 = id_4184;
                                  } else {
                                    uint16_t id_4185 { 1 };
                                    bool id_4186 { bool(id_4185 == dsum1_fst_525) };
                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4187;
                                    if (id_4186) {
                                      (void)::dessser::Void();
                                      ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4188 { std::in_place_index<1>, ::dessser::Void() };
                                      ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4189 { id_4188, dsum1_snd_526 };
                                      choose_res_4187 = id_4189;
                                    } else {
                                      uint16_t id_4190 { 2 };
                                      bool id_4191 { bool(id_4190 == dsum1_fst_525) };
                                      ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4192;
                                      if (id_4191) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4193 { std::in_place_index<2>, ::dessser::Void() };
                                        ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4194 { id_4193, dsum1_snd_526 };
                                        choose_res_4192 = id_4194;
                                      } else {
                                        uint16_t id_4195 { 3 };
                                        bool id_4196 { bool(id_4195 == dsum1_fst_525) };
                                        ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4197;
                                        if (id_4196) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4198 { std::in_place_index<3>, ::dessser::Void() };
                                          ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4199 { id_4198, dsum1_snd_526 };
                                          choose_res_4197 = id_4199;
                                        } else {
                                          uint16_t id_4200 { 4 };
                                          bool id_4201 { bool(id_4200 == dsum1_fst_525) };
                                          ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4202;
                                          if (id_4201) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4203 { std::in_place_index<4>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4204 { id_4203, dsum1_snd_526 };
                                            choose_res_4202 = id_4204;
                                          } else {
                                            uint16_t id_4205 { 5 };
                                            bool id_4206 { bool(id_4205 == dsum1_fst_525) };
                                            ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4207;
                                            if (id_4206) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4208 { std::in_place_index<5>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4209 { id_4208, dsum1_snd_526 };
                                              choose_res_4207 = id_4209;
                                            } else {
                                              uint16_t id_4210 { 6 };
                                              bool id_4211 { bool(id_4210 == dsum1_fst_525) };
                                              ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4212;
                                              if (id_4211) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4213 { std::in_place_index<6>, ::dessser::Void() };
                                                ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4214 { id_4213, dsum1_snd_526 };
                                                choose_res_4212 = id_4214;
                                              } else {
                                                uint16_t id_4215 { 7 };
                                                bool id_4216 { bool(id_4215 == dsum1_fst_525) };
                                                ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4217;
                                                if (id_4216) {
                                                  (void)::dessser::Void();
                                                  ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4218 { std::in_place_index<7>, ::dessser::Void() };
                                                  ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4219 { id_4218, dsum1_snd_526 };
                                                  choose_res_4217 = id_4219;
                                                } else {
                                                  uint16_t id_4220 { 8 };
                                                  bool id_4221 { bool(id_4220 == dsum1_fst_525) };
                                                  ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4222;
                                                  if (id_4221) {
                                                    (void)::dessser::Void();
                                                    ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4223 { std::in_place_index<8>, ::dessser::Void() };
                                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4224 { id_4223, dsum1_snd_526 };
                                                    choose_res_4222 = id_4224;
                                                  } else {
                                                    uint16_t id_4225 { 9 };
                                                    bool id_4226 { bool(id_4225 == dsum1_fst_525) };
                                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4227;
                                                    if (id_4226) {
                                                      (void)::dessser::Void();
                                                      ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4228 { std::in_place_index<9>, ::dessser::Void() };
                                                      ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4229 { id_4228, dsum1_snd_526 };
                                                      choose_res_4227 = id_4229;
                                                    } else {
                                                      uint16_t id_4230 { 10 };
                                                      bool id_4231 { bool(id_4230 == dsum1_fst_525) };
                                                      ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4232;
                                                      if (id_4231) {
                                                        (void)::dessser::Void();
                                                        ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4233 { std::in_place_index<10>, ::dessser::Void() };
                                                        ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4234 { id_4233, dsum1_snd_526 };
                                                        choose_res_4232 = id_4234;
                                                      } else {
                                                        uint16_t id_4235 { 11 };
                                                        bool id_4236 { bool(id_4235 == dsum1_fst_525) };
                                                        ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4237;
                                                        if (id_4236) {
                                                          (void)::dessser::Void();
                                                          ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4238 { std::in_place_index<11>, ::dessser::Void() };
                                                          ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4239 { id_4238, dsum1_snd_526 };
                                                          choose_res_4237 = id_4239;
                                                        } else {
                                                          uint16_t id_4240 { 12 };
                                                          bool id_4241 { bool(id_4240 == dsum1_fst_525) };
                                                          ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4242;
                                                          if (id_4241) {
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4243 { std::in_place_index<12>, ::dessser::Void() };
                                                            ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4244 { id_4243, dsum1_snd_526 };
                                                            choose_res_4242 = id_4244;
                                                          } else {
                                                            uint16_t id_4245 { 13 };
                                                            bool id_4246 { bool(id_4245 == dsum1_fst_525) };
                                                            ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4247;
                                                            if (id_4246) {
                                                              (void)::dessser::Void();
                                                              ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4248 { std::in_place_index<13>, ::dessser::Void() };
                                                              ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4249 { id_4248, dsum1_snd_526 };
                                                              choose_res_4247 = id_4249;
                                                            } else {
                                                              uint16_t id_4250 { 14 };
                                                              bool id_4251 { bool(id_4250 == dsum1_fst_525) };
                                                              ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4252;
                                                              if (id_4251) {
                                                                (void)::dessser::Void();
                                                                ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4253 { std::in_place_index<14>, ::dessser::Void() };
                                                                ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4254 { id_4253, dsum1_snd_526 };
                                                                choose_res_4252 = id_4254;
                                                              } else {
                                                                uint16_t id_4255 { 15 };
                                                                bool id_4256 { bool(id_4255 == dsum1_fst_525) };
                                                                ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4257;
                                                                if (id_4256) {
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4258 { std::in_place_index<15>, ::dessser::Void() };
                                                                  ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4259 { id_4258, dsum1_snd_526 };
                                                                  choose_res_4257 = id_4259;
                                                                } else {
                                                                  uint16_t id_4260 { 16 };
                                                                  bool id_4261 { bool(id_4260 == dsum1_fst_525) };
                                                                  ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4262;
                                                                  if (id_4261) {
                                                                    (void)::dessser::Void();
                                                                    ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4263 { std::in_place_index<16>, ::dessser::Void() };
                                                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4264 { id_4263, dsum1_snd_526 };
                                                                    choose_res_4262 = id_4264;
                                                                  } else {
                                                                    uint16_t id_4265 { 17 };
                                                                    bool id_4266 { bool(id_4265 == dsum1_fst_525) };
                                                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4267;
                                                                    if (id_4266) {
                                                                      (void)::dessser::Void();
                                                                      ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4268 { std::in_place_index<17>, ::dessser::Void() };
                                                                      ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4269 { id_4268, dsum1_snd_526 };
                                                                      choose_res_4267 = id_4269;
                                                                    } else {
                                                                      uint16_t id_4270 { 18 };
                                                                      bool id_4271 { bool(id_4270 == dsum1_fst_525) };
                                                                      ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4272;
                                                                      if (id_4271) {
                                                                        (void)::dessser::Void();
                                                                        ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4273 { std::in_place_index<18>, ::dessser::Void() };
                                                                        ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4274 { id_4273, dsum1_snd_526 };
                                                                        choose_res_4272 = id_4274;
                                                                      } else {
                                                                        uint16_t id_4275 { 19 };
                                                                        bool id_4276 { bool(id_4275 == dsum1_fst_525) };
                                                                        ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4277;
                                                                        if (id_4276) {
                                                                          (void)::dessser::Void();
                                                                          ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4278 { std::in_place_index<19>, ::dessser::Void() };
                                                                          ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4279 { id_4278, dsum1_snd_526 };
                                                                          choose_res_4277 = id_4279;
                                                                        } else {
                                                                          uint16_t id_4280 { 20 };
                                                                          bool id_4281 { bool(id_4280 == dsum1_fst_525) };
                                                                          ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4282;
                                                                          if (id_4281) {
                                                                            (void)::dessser::Void();
                                                                            ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4283 { std::in_place_index<20>, ::dessser::Void() };
                                                                            ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4284 { id_4283, dsum1_snd_526 };
                                                                            choose_res_4282 = id_4284;
                                                                          } else {
                                                                            uint16_t id_4285 { 21 };
                                                                            bool id_4286 { bool(id_4285 == dsum1_fst_525) };
                                                                            ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4287;
                                                                            if (id_4286) {
                                                                              (void)::dessser::Void();
                                                                              ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4288 { std::in_place_index<21>, ::dessser::Void() };
                                                                              ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4289 { id_4288, dsum1_snd_526 };
                                                                              choose_res_4287 = id_4289;
                                                                            } else {
                                                                              uint16_t id_4290 { 22 };
                                                                              bool id_4291 { bool(id_4290 == dsum1_fst_525) };
                                                                              ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4292;
                                                                              if (id_4291) {
                                                                                (void)::dessser::Void();
                                                                                ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4293 { std::in_place_index<22>, ::dessser::Void() };
                                                                                ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4294 { id_4293, dsum1_snd_526 };
                                                                                choose_res_4292 = id_4294;
                                                                              } else {
                                                                                uint16_t id_4295 { 23 };
                                                                                bool id_4296 { bool(id_4295 == dsum1_fst_525) };
                                                                                ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4297;
                                                                                if (id_4296) {
                                                                                  (void)::dessser::Void();
                                                                                  ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4298 { std::in_place_index<23>, ::dessser::Void() };
                                                                                  ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4299 { id_4298, dsum1_snd_526 };
                                                                                  choose_res_4297 = id_4299;
                                                                                } else {
                                                                                  uint16_t id_4300 { 24 };
                                                                                  bool id_4301 { bool(id_4300 == dsum1_fst_525) };
                                                                                  ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 choose_res_4302;
                                                                                  if (id_4301) {
                                                                                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4303 { dsum1_snd_526.readU8() };
                                                                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 letpair_res_4304;
                                                                                    {
                                                                                      auto dbool_fst_531 { std::get<0>(id_4303) };
                                                                                      auto dbool_snd_532 { std::get<1>(id_4303) };
                                                                                      uint8_t id_4305 { 0 };
                                                                                      bool id_4306 { bool(dbool_fst_531 == id_4305) };
                                                                                      bool id_4307 { ! id_4306 };
                                                                                      ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4308 { std::in_place_index<24>, id_4307 };
                                                                                      ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4309 { id_4308, dbool_snd_532 };
                                                                                      letpair_res_4304 = id_4309;
                                                                                    }
                                                                                    choose_res_4302 = letpair_res_4304;
                                                                                  } else {
                                                                                    uint16_t id_4310 { 25 };
                                                                                    bool id_4311 { bool(dsum1_fst_525 == id_4310) };
                                                                                    Void id_4312 { ((void)(assert(id_4311)), ::dessser::Void()) };
                                                                                    (void)id_4312;
                                                                                    (void)::dessser::Void();
                                                                                    ::dessser::gen::raql_expr::t74907ce71e551d4dab6a10905ccb811a id_4313 { std::in_place_index<25>, ::dessser::Void() };
                                                                                    ::dessser::gen::raql_expr::ta95f2b77581fccc01ac6eada8f2a8610 id_4314 { id_4313, dsum1_snd_526 };
                                                                                    choose_res_4302 = id_4314;
                                                                                  }
                                                                                  choose_res_4297 = choose_res_4302;
                                                                                }
                                                                                choose_res_4292 = choose_res_4297;
                                                                              }
                                                                              choose_res_4287 = choose_res_4292;
                                                                            }
                                                                            choose_res_4282 = choose_res_4287;
                                                                          }
                                                                          choose_res_4277 = choose_res_4282;
                                                                        }
                                                                        choose_res_4272 = choose_res_4277;
                                                                      }
                                                                      choose_res_4267 = choose_res_4272;
                                                                    }
                                                                    choose_res_4262 = choose_res_4267;
                                                                  }
                                                                  choose_res_4257 = choose_res_4262;
                                                                }
                                                                choose_res_4252 = choose_res_4257;
                                                              }
                                                              choose_res_4247 = choose_res_4252;
                                                            }
                                                            choose_res_4242 = choose_res_4247;
                                                          }
                                                          choose_res_4237 = choose_res_4242;
                                                        }
                                                        choose_res_4232 = choose_res_4237;
                                                      }
                                                      choose_res_4227 = choose_res_4232;
                                                    }
                                                    choose_res_4222 = choose_res_4227;
                                                  }
                                                  choose_res_4217 = choose_res_4222;
                                                }
                                                choose_res_4212 = choose_res_4217;
                                              }
                                              choose_res_4207 = choose_res_4212;
                                            }
                                            choose_res_4202 = choose_res_4207;
                                          }
                                          choose_res_4197 = choose_res_4202;
                                        }
                                        choose_res_4192 = choose_res_4197;
                                      }
                                      choose_res_4187 = choose_res_4192;
                                    }
                                    choose_res_4182 = choose_res_4187;
                                  }
                                  letpair_res_4179 = choose_res_4182;
                                }
                                let_res_4178 = letpair_res_4179;
                              }
                              ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4315;
                              {
                                auto dtup_fst_609 { std::get<0>(let_res_4178) };
                                auto dtup_snd_610 { std::get<1>(let_res_4178) };
                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4316 { fun3303(dtup_snd_610) };
                                ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4317;
                                {
                                  auto dtup_fst_612 { std::get<0>(id_4316) };
                                  auto dtup_snd_613 { std::get<1>(id_4316) };
                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4318 { fun3303(dtup_snd_613) };
                                  ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4319;
                                  {
                                    auto dtup_fst_615 { std::get<0>(id_4318) };
                                    auto dtup_snd_616 { std::get<1>(id_4318) };
                                    ::dessser::gen::raql_expr::t4b90b2b95595682aca23f5c924cf0a83 id_4320 { dtup_fst_609, dtup_fst_612, dtup_fst_615 };
                                    ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_4321 { std::in_place_index<3>, id_4320 };
                                    ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f id_4322 { id_4321, dtup_snd_616 };
                                    letpair_res_4319 = id_4322;
                                  }
                                  letpair_res_4317 = letpair_res_4319;
                                }
                                letpair_res_4315 = letpair_res_4317;
                              }
                              choose_res_4174 = letpair_res_4315;
                            } else {
                              uint16_t id_4323 { 4 };
                              bool id_4324 { bool(dsum1_fst_486 == id_4323) };
                              Void id_4325 { ((void)(assert(id_4324)), ::dessser::Void()) };
                              (void)id_4325;
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4326 { dsum1_snd_487.readU16Le() };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4327;
                              {
                                auto du16_fst_489 { std::get<0>(id_4326) };
                                auto du16_snd_490 { std::get<1>(id_4326) };
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4328 { du16_fst_489, du16_snd_490 };
                                letpair_res_4327 = id_4328;
                              }
                              ::dessser::gen::raql_expr::t0b5424d5a61f72e12d141a3056c8cd11 let_res_4329;
                              {
                                ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_494 { letpair_res_4327 };
                                ::dessser::gen::raql_expr::t0b5424d5a61f72e12d141a3056c8cd11 letpair_res_4330;
                                {
                                  auto dsum1_fst_495 { std::get<0>(dsum1_494) };
                                  auto dsum1_snd_496 { std::get<1>(dsum1_494) };
                                  uint16_t id_4331 { 0 };
                                  bool id_4332 { bool(id_4331 == dsum1_fst_495) };
                                  ::dessser::gen::raql_expr::t0b5424d5a61f72e12d141a3056c8cd11 choose_res_4333;
                                  if (id_4332) {
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c id_4334 { SubString };
                                    ::dessser::gen::raql_expr::t0b5424d5a61f72e12d141a3056c8cd11 id_4335 { id_4334, dsum1_snd_496 };
                                    choose_res_4333 = id_4335;
                                  } else {
                                    uint16_t id_4336 { 1 };
                                    bool id_4337 { bool(dsum1_fst_495 == id_4336) };
                                    Void id_4338 { ((void)(assert(id_4337)), ::dessser::Void()) };
                                    (void)id_4338;
                                    (void)::dessser::Void();
                                    ::dessser::gen::raql_expr::t44061d3bf92748c5e2de2082aefca25c id_4339 { MapSet };
                                    ::dessser::gen::raql_expr::t0b5424d5a61f72e12d141a3056c8cd11 id_4340 { id_4339, dsum1_snd_496 };
                                    choose_res_4333 = id_4340;
                                  }
                                  letpair_res_4330 = choose_res_4333;
                                }
                                let_res_4329 = letpair_res_4330;
                              }
                              ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4341;
                              {
                                auto dtup_fst_504 { std::get<0>(let_res_4329) };
                                auto dtup_snd_505 { std::get<1>(let_res_4329) };
                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4342 { fun3303(dtup_snd_505) };
                                ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4343;
                                {
                                  auto dtup_fst_507 { std::get<0>(id_4342) };
                                  auto dtup_snd_508 { std::get<1>(id_4342) };
                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4344 { fun3303(dtup_snd_508) };
                                  ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4345;
                                  {
                                    auto dtup_fst_510 { std::get<0>(id_4344) };
                                    auto dtup_snd_511 { std::get<1>(id_4344) };
                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4346 { fun3303(dtup_snd_511) };
                                    ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f letpair_res_4347;
                                    {
                                      auto dtup_fst_513 { std::get<0>(id_4346) };
                                      auto dtup_snd_514 { std::get<1>(id_4346) };
                                      ::dessser::gen::raql_expr::tb45dee140d83500cc3856864567c24d9 id_4348 { dtup_fst_504, dtup_fst_507, dtup_fst_510, dtup_fst_513 };
                                      ::dessser::gen::raql_expr::t55b36257c89fe376409ef4914238d8c0 id_4349 { std::in_place_index<4>, id_4348 };
                                      ::dessser::gen::raql_expr::t6ca955fb0c0fc4c8085216b099fa656f id_4350 { id_4349, dtup_snd_514 };
                                      letpair_res_4347 = id_4350;
                                    }
                                    letpair_res_4345 = letpair_res_4347;
                                  }
                                  letpair_res_4343 = letpair_res_4345;
                                }
                                letpair_res_4341 = letpair_res_4343;
                              }
                              choose_res_4174 = letpair_res_4341;
                            }
                            choose_res_4071 = choose_res_4174;
                          }
                          choose_res_3782 = choose_res_4071;
                        }
                        choose_res_3646 = choose_res_3782;
                      }
                      letpair_res_3643 = choose_res_3646;
                    }
                    let_res_3642 = letpair_res_3643;
                  }
                  ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_4351;
                  {
                    auto dsum2_fst_910 { std::get<0>(let_res_3642) };
                    auto dsum2_snd_911 { std::get<1>(let_res_3642) };
                    ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_4352 { std::in_place_index<4>, dsum2_fst_910 };
                    ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 id_4353 { id_4352, dsum2_snd_911 };
                    letpair_res_4351 = id_4353;
                  }
                  choose_res_3638 = letpair_res_4351;
                } else {
                  uint16_t id_4354 { 5 };
                  bool id_4355 { bool(id_4354 == dsum1_fst_85) };
                  ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 choose_res_4356;
                  if (id_4355) {
                    Size id_4357 { 0UL };
                    uint8_t id_4358 { dsum1_snd_86.peekU8(id_4357) };
                    uint8_t id_4359 { 1 };
                    bool id_4360 { bool(id_4358 == id_4359) };
                    ::dessser::gen::raql_expr::t0f89cc6dc6c3118d1708bd3d50266d64 choose_res_4361;
                    if (id_4360) {
                      std::optional<::dessser::gen::raql_expr::lifespan> id_4362 { std::nullopt };
                      Size id_4363 { 1UL };
                      Pointer id_4364 { dsum1_snd_86.skip(id_4363) };
                      ::dessser::gen::raql_expr::t0f89cc6dc6c3118d1708bd3d50266d64 id_4365 { id_4362, id_4364 };
                      choose_res_4361 = id_4365;
                    } else {
                      Size id_4366 { 1UL };
                      Pointer id_4367 { dsum1_snd_86.skip(id_4366) };
                      ::dessser::gen::raql_expr::t43c513984591dd08f01f493905d45a0f id_4368 { lifespan_of_row_binary(id_4367) };
                      ::dessser::gen::raql_expr::t0f89cc6dc6c3118d1708bd3d50266d64 letpair_res_4369;
                      {
                        auto make1_1_fst_109 { std::get<0>(id_4368) };
                        auto make1_1_snd_110 { std::get<1>(id_4368) };
                        std::optional<::dessser::gen::raql_expr::lifespan> id_4370 { make1_1_fst_109 };
                        ::dessser::gen::raql_expr::t0f89cc6dc6c3118d1708bd3d50266d64 id_4371 { id_4370, make1_1_snd_110 };
                        letpair_res_4369 = id_4371;
                      }
                      choose_res_4361 = letpair_res_4369;
                    }
                    ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 let_res_4372;
                    {
                      ::dessser::gen::raql_expr::t0f89cc6dc6c3118d1708bd3d50266d64 drec_111 { choose_res_4361 };
                      ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_4373;
                      {
                        auto drec_fst_112 { std::get<0>(drec_111) };
                        auto drec_snd_113 { std::get<1>(drec_111) };
                        ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4374 { drec_snd_113.readU8() };
                        ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 letpair_res_4375;
                        {
                          auto dbool_fst_115 { std::get<0>(id_4374) };
                          auto dbool_snd_116 { std::get<1>(id_4374) };
                          uint8_t id_4376 { 0 };
                          bool id_4377 { bool(dbool_fst_115 == id_4376) };
                          bool id_4378 { ! id_4377 };
                          ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 id_4379 { id_4378, dbool_snd_116 };
                          letpair_res_4375 = id_4379;
                        }
                        ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 let_res_4380;
                        {
                          ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 drec_117 { letpair_res_4375 };
                          ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_4381;
                          {
                            auto drec_fst_118 { std::get<0>(drec_117) };
                            auto drec_snd_119 { std::get<1>(drec_117) };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4382 { drec_snd_119.readU16Le() };
                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4383;
                            {
                              auto du16_fst_121 { std::get<0>(id_4382) };
                              auto du16_snd_122 { std::get<1>(id_4382) };
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4384 { du16_fst_121, du16_snd_122 };
                              letpair_res_4383 = id_4384;
                            }
                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 let_res_4385;
                            {
                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_126 { letpair_res_4383 };
                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4386;
                              {
                                auto dsum1_fst_127 { std::get<0>(dsum1_126) };
                                auto dsum1_snd_128 { std::get<1>(dsum1_126) };
                                uint16_t id_4387 { 0 };
                                bool id_4388 { bool(id_4387 == dsum1_fst_127) };
                                ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 choose_res_4389;
                                if (id_4388) {
                                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4390 { dsum1_snd_128.readU16Le() };
                                  ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4391;
                                  {
                                    auto du16_fst_393 { std::get<0>(id_4390) };
                                    auto du16_snd_394 { std::get<1>(id_4390) };
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4392 { du16_fst_393, du16_snd_394 };
                                    letpair_res_4391 = id_4392;
                                  }
                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f let_res_4393;
                                  {
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_398 { letpair_res_4391 };
                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4394;
                                    {
                                      auto dsum1_fst_399 { std::get<0>(dsum1_398) };
                                      auto dsum1_snd_400 { std::get<1>(dsum1_398) };
                                      uint16_t id_4395 { 0 };
                                      bool id_4396 { bool(id_4395 == dsum1_fst_399) };
                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4397;
                                      if (id_4396) {
                                        (void)::dessser::Void();
                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4398 { std::in_place_index<0>, ::dessser::Void() };
                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4399 { id_4398, dsum1_snd_400 };
                                        choose_res_4397 = id_4399;
                                      } else {
                                        uint16_t id_4400 { 1 };
                                        bool id_4401 { bool(id_4400 == dsum1_fst_399) };
                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4402;
                                        if (id_4401) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4403 { std::in_place_index<1>, ::dessser::Void() };
                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4404 { id_4403, dsum1_snd_400 };
                                          choose_res_4402 = id_4404;
                                        } else {
                                          uint16_t id_4405 { 2 };
                                          bool id_4406 { bool(id_4405 == dsum1_fst_399) };
                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4407;
                                          if (id_4406) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4408 { std::in_place_index<2>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4409 { id_4408, dsum1_snd_400 };
                                            choose_res_4407 = id_4409;
                                          } else {
                                            uint16_t id_4410 { 3 };
                                            bool id_4411 { bool(id_4410 == dsum1_fst_399) };
                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4412;
                                            if (id_4411) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4413 { std::in_place_index<3>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4414 { id_4413, dsum1_snd_400 };
                                              choose_res_4412 = id_4414;
                                            } else {
                                              uint16_t id_4415 { 4 };
                                              bool id_4416 { bool(id_4415 == dsum1_fst_399) };
                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4417;
                                              if (id_4416) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4418 { std::in_place_index<4>, ::dessser::Void() };
                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4419 { id_4418, dsum1_snd_400 };
                                                choose_res_4417 = id_4419;
                                              } else {
                                                uint16_t id_4420 { 5 };
                                                bool id_4421 { bool(id_4420 == dsum1_fst_399) };
                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4422;
                                                if (id_4421) {
                                                  (void)::dessser::Void();
                                                  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4423 { std::in_place_index<5>, ::dessser::Void() };
                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4424 { id_4423, dsum1_snd_400 };
                                                  choose_res_4422 = id_4424;
                                                } else {
                                                  uint16_t id_4425 { 6 };
                                                  bool id_4426 { bool(id_4425 == dsum1_fst_399) };
                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4427;
                                                  if (id_4426) {
                                                    (void)::dessser::Void();
                                                    ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4428 { std::in_place_index<6>, ::dessser::Void() };
                                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4429 { id_4428, dsum1_snd_400 };
                                                    choose_res_4427 = id_4429;
                                                  } else {
                                                    uint16_t id_4430 { 7 };
                                                    bool id_4431 { bool(id_4430 == dsum1_fst_399) };
                                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4432;
                                                    if (id_4431) {
                                                      (void)::dessser::Void();
                                                      ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4433 { std::in_place_index<7>, ::dessser::Void() };
                                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4434 { id_4433, dsum1_snd_400 };
                                                      choose_res_4432 = id_4434;
                                                    } else {
                                                      uint16_t id_4435 { 8 };
                                                      bool id_4436 { bool(id_4435 == dsum1_fst_399) };
                                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4437;
                                                      if (id_4436) {
                                                        (void)::dessser::Void();
                                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4438 { std::in_place_index<8>, ::dessser::Void() };
                                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4439 { id_4438, dsum1_snd_400 };
                                                        choose_res_4437 = id_4439;
                                                      } else {
                                                        uint16_t id_4440 { 9 };
                                                        bool id_4441 { bool(id_4440 == dsum1_fst_399) };
                                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4442;
                                                        if (id_4441) {
                                                          (void)::dessser::Void();
                                                          ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4443 { std::in_place_index<9>, ::dessser::Void() };
                                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4444 { id_4443, dsum1_snd_400 };
                                                          choose_res_4442 = id_4444;
                                                        } else {
                                                          uint16_t id_4445 { 10 };
                                                          bool id_4446 { bool(id_4445 == dsum1_fst_399) };
                                                          ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4447;
                                                          if (id_4446) {
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4448 { std::in_place_index<10>, ::dessser::Void() };
                                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4449 { id_4448, dsum1_snd_400 };
                                                            choose_res_4447 = id_4449;
                                                          } else {
                                                            uint16_t id_4450 { 11 };
                                                            bool id_4451 { bool(id_4450 == dsum1_fst_399) };
                                                            ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4452;
                                                            if (id_4451) {
                                                              ::dessser::gen::raql_expr::td2cd337bb3c8bc04d5603393d084985b id_4453 { dsum1_snd_400.readU64Le() };
                                                              ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 letpair_res_4454;
                                                              {
                                                                auto dfloat_fst_411 { std::get<0>(id_4453) };
                                                                auto dfloat_snd_412 { std::get<1>(id_4453) };
                                                                double id_4455 { float_of_qword(dfloat_fst_411) };
                                                                ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 id_4456 { id_4455, dfloat_snd_412 };
                                                                letpair_res_4454 = id_4456;
                                                              }
                                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f let_res_4457;
                                                              {
                                                                ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 dtup_413 { letpair_res_4454 };
                                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4458;
                                                                {
                                                                  auto dtup_fst_414 { std::get<0>(dtup_413) };
                                                                  auto dtup_snd_415 { std::get<1>(dtup_413) };
                                                                  ::dessser::gen::raql_expr::td2cd337bb3c8bc04d5603393d084985b id_4459 { dtup_snd_415.readU64Le() };
                                                                  ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 letpair_res_4460;
                                                                  {
                                                                    auto dfloat_fst_417 { std::get<0>(id_4459) };
                                                                    auto dfloat_snd_418 { std::get<1>(id_4459) };
                                                                    double id_4461 { float_of_qword(dfloat_fst_417) };
                                                                    ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 id_4462 { id_4461, dfloat_snd_418 };
                                                                    letpair_res_4460 = id_4462;
                                                                  }
                                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f let_res_4463;
                                                                  {
                                                                    ::dessser::gen::raql_expr::t9a758baeff17224a77e1a522010b4168 dtup_419 { letpair_res_4460 };
                                                                    ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4464;
                                                                    {
                                                                      auto dtup_fst_420 { std::get<0>(dtup_419) };
                                                                      auto dtup_snd_421 { std::get<1>(dtup_419) };
                                                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4465 { dtup_snd_421.readU32Le() };
                                                                      ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f letpair_res_4466;
                                                                      {
                                                                        auto du32_fst_423 { std::get<0>(id_4465) };
                                                                        auto du32_snd_424 { std::get<1>(id_4465) };
                                                                        ::dessser::gen::raql_expr::t66cf3f891349e2747678760eec02eb62 id_4467 { dtup_fst_414, dtup_fst_420, du32_fst_423 };
                                                                        ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4468 { std::in_place_index<11>, id_4467 };
                                                                        ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4469 { id_4468, du32_snd_424 };
                                                                        letpair_res_4466 = id_4469;
                                                                      }
                                                                      letpair_res_4464 = letpair_res_4466;
                                                                    }
                                                                    let_res_4463 = letpair_res_4464;
                                                                  }
                                                                  letpair_res_4458 = let_res_4463;
                                                                }
                                                                let_res_4457 = letpair_res_4458;
                                                              }
                                                              choose_res_4452 = let_res_4457;
                                                            } else {
                                                              uint16_t id_4470 { 12 };
                                                              bool id_4471 { bool(id_4470 == dsum1_fst_399) };
                                                              ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4472;
                                                              if (id_4471) {
                                                                (void)::dessser::Void();
                                                                ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4473 { std::in_place_index<12>, ::dessser::Void() };
                                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4474 { id_4473, dsum1_snd_400 };
                                                                choose_res_4472 = id_4474;
                                                              } else {
                                                                uint16_t id_4475 { 13 };
                                                                bool id_4476 { bool(id_4475 == dsum1_fst_399) };
                                                                ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f choose_res_4477;
                                                                if (id_4476) {
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4478 { std::in_place_index<13>, ::dessser::Void() };
                                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4479 { id_4478, dsum1_snd_400 };
                                                                  choose_res_4477 = id_4479;
                                                                } else {
                                                                  uint16_t id_4480 { 14 };
                                                                  bool id_4481 { bool(dsum1_fst_399 == id_4480) };
                                                                  Void id_4482 { ((void)(assert(id_4481)), ::dessser::Void()) };
                                                                  (void)id_4482;
                                                                  (void)::dessser::Void();
                                                                  ::dessser::gen::raql_expr::t72c6a286926f82d38f40c2c2d00ebcc6 id_4483 { std::in_place_index<14>, ::dessser::Void() };
                                                                  ::dessser::gen::raql_expr::tb9364de84f89845fbdcb5e88d743800f id_4484 { id_4483, dsum1_snd_400 };
                                                                  choose_res_4477 = id_4484;
                                                                }
                                                                choose_res_4472 = choose_res_4477;
                                                              }
                                                              choose_res_4452 = choose_res_4472;
                                                            }
                                                            choose_res_4447 = choose_res_4452;
                                                          }
                                                          choose_res_4442 = choose_res_4447;
                                                        }
                                                        choose_res_4437 = choose_res_4442;
                                                      }
                                                      choose_res_4432 = choose_res_4437;
                                                    }
                                                    choose_res_4427 = choose_res_4432;
                                                  }
                                                  choose_res_4422 = choose_res_4427;
                                                }
                                                choose_res_4417 = choose_res_4422;
                                              }
                                              choose_res_4412 = choose_res_4417;
                                            }
                                            choose_res_4407 = choose_res_4412;
                                          }
                                          choose_res_4402 = choose_res_4407;
                                        }
                                        choose_res_4397 = choose_res_4402;
                                      }
                                      letpair_res_4394 = choose_res_4397;
                                    }
                                    let_res_4393 = letpair_res_4394;
                                  }
                                  ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4485;
                                  {
                                    auto dtup_fst_465 { std::get<0>(let_res_4393) };
                                    auto dtup_snd_466 { std::get<1>(let_res_4393) };
                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4486 { fun3303(dtup_snd_466) };
                                    ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4487;
                                    {
                                      auto dtup_fst_468 { std::get<0>(id_4486) };
                                      auto dtup_snd_469 { std::get<1>(id_4486) };
                                      ::dessser::gen::raql_expr::t33838a2e63bc4895abd013987ee48342 id_4488 { dtup_fst_465, dtup_fst_468 };
                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4489 { std::in_place_index<0>, id_4488 };
                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4490 { id_4489, dtup_snd_469 };
                                      letpair_res_4487 = id_4490;
                                    }
                                    letpair_res_4485 = letpair_res_4487;
                                  }
                                  choose_res_4389 = letpair_res_4485;
                                } else {
                                  uint16_t id_4491 { 1 };
                                  bool id_4492 { bool(id_4491 == dsum1_fst_127) };
                                  ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 choose_res_4493;
                                  if (id_4492) {
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4494 { dsum1_snd_128.readU16Le() };
                                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4495;
                                    {
                                      auto du16_fst_360 { std::get<0>(id_4494) };
                                      auto du16_snd_361 { std::get<1>(id_4494) };
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4496 { du16_fst_360, du16_snd_361 };
                                      letpair_res_4495 = id_4496;
                                    }
                                    ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b let_res_4497;
                                    {
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_365 { letpair_res_4495 };
                                      ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b letpair_res_4498;
                                      {
                                        auto dsum1_fst_366 { std::get<0>(dsum1_365) };
                                        auto dsum1_snd_367 { std::get<1>(dsum1_365) };
                                        uint16_t id_4499 { 0 };
                                        bool id_4500 { bool(id_4499 == dsum1_fst_366) };
                                        ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b choose_res_4501;
                                        if (id_4500) {
                                          (void)::dessser::Void();
                                          ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8 id_4502 { Lag };
                                          ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b id_4503 { id_4502, dsum1_snd_367 };
                                          choose_res_4501 = id_4503;
                                        } else {
                                          uint16_t id_4504 { 1 };
                                          bool id_4505 { bool(id_4504 == dsum1_fst_366) };
                                          ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b choose_res_4506;
                                          if (id_4505) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8 id_4507 { ExpSmooth };
                                            ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b id_4508 { id_4507, dsum1_snd_367 };
                                            choose_res_4506 = id_4508;
                                          } else {
                                            uint16_t id_4509 { 2 };
                                            bool id_4510 { bool(id_4509 == dsum1_fst_366) };
                                            ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b choose_res_4511;
                                            if (id_4510) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8 id_4512 { Sample };
                                              ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b id_4513 { id_4512, dsum1_snd_367 };
                                              choose_res_4511 = id_4513;
                                            } else {
                                              uint16_t id_4514 { 3 };
                                              bool id_4515 { bool(dsum1_fst_366 == id_4514) };
                                              Void id_4516 { ((void)(assert(id_4515)), ::dessser::Void()) };
                                              (void)id_4516;
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t0b18c71c293bcb822d27e54c405a88b8 id_4517 { OneOutOf };
                                              ::dessser::gen::raql_expr::t3c346fb25ff8634b127b0bf1e9cdce1b id_4518 { id_4517, dsum1_snd_367 };
                                              choose_res_4511 = id_4518;
                                            }
                                            choose_res_4506 = choose_res_4511;
                                          }
                                          choose_res_4501 = choose_res_4506;
                                        }
                                        letpair_res_4498 = choose_res_4501;
                                      }
                                      let_res_4497 = letpair_res_4498;
                                    }
                                    ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4519;
                                    {
                                      auto dtup_fst_381 { std::get<0>(let_res_4497) };
                                      auto dtup_snd_382 { std::get<1>(let_res_4497) };
                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4520 { fun3303(dtup_snd_382) };
                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4521;
                                      {
                                        auto dtup_fst_384 { std::get<0>(id_4520) };
                                        auto dtup_snd_385 { std::get<1>(id_4520) };
                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4522 { fun3303(dtup_snd_385) };
                                        ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4523;
                                        {
                                          auto dtup_fst_387 { std::get<0>(id_4522) };
                                          auto dtup_snd_388 { std::get<1>(id_4522) };
                                          ::dessser::gen::raql_expr::t9fef09de27c039b367a0c1859727157c id_4524 { dtup_fst_381, dtup_fst_384, dtup_fst_387 };
                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4525 { std::in_place_index<1>, id_4524 };
                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4526 { id_4525, dtup_snd_388 };
                                          letpair_res_4523 = id_4526;
                                        }
                                        letpair_res_4521 = letpair_res_4523;
                                      }
                                      letpair_res_4519 = letpair_res_4521;
                                    }
                                    choose_res_4493 = letpair_res_4519;
                                  } else {
                                    uint16_t id_4527 { 2 };
                                    bool id_4528 { bool(id_4527 == dsum1_fst_127) };
                                    ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 choose_res_4529;
                                    if (id_4528) {
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4530 { dsum1_snd_128.readU16Le() };
                                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4531;
                                      {
                                        auto du16_fst_324 { std::get<0>(id_4530) };
                                        auto du16_snd_325 { std::get<1>(id_4530) };
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4532 { du16_fst_324, du16_snd_325 };
                                        letpair_res_4531 = id_4532;
                                      }
                                      ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 let_res_4533;
                                      {
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_329 { letpair_res_4531 };
                                        ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 letpair_res_4534;
                                        {
                                          auto dsum1_fst_330 { std::get<0>(dsum1_329) };
                                          auto dsum1_snd_331 { std::get<1>(dsum1_329) };
                                          uint16_t id_4535 { 0 };
                                          bool id_4536 { bool(id_4535 == dsum1_fst_330) };
                                          ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 choose_res_4537;
                                          if (id_4536) {
                                            (void)::dessser::Void();
                                            ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_4538 { std::in_place_index<0>, ::dessser::Void() };
                                            ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 id_4539 { id_4538, dsum1_snd_331 };
                                            choose_res_4537 = id_4539;
                                          } else {
                                            uint16_t id_4540 { 1 };
                                            bool id_4541 { bool(id_4540 == dsum1_fst_330) };
                                            ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 choose_res_4542;
                                            if (id_4541) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_4543 { std::in_place_index<1>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 id_4544 { id_4543, dsum1_snd_331 };
                                              choose_res_4542 = id_4544;
                                            } else {
                                              uint16_t id_4545 { 2 };
                                              bool id_4546 { bool(dsum1_fst_330 == id_4545) };
                                              Void id_4547 { ((void)(assert(id_4546)), ::dessser::Void()) };
                                              (void)id_4547;
                                              ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4548 { dsum1_snd_331.readU8() };
                                              ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 letpair_res_4549;
                                              {
                                                auto dbool_fst_333 { std::get<0>(id_4548) };
                                                auto dbool_snd_334 { std::get<1>(id_4548) };
                                                uint8_t id_4550 { 0 };
                                                bool id_4551 { bool(dbool_fst_333 == id_4550) };
                                                bool id_4552 { ! id_4551 };
                                                ::dessser::gen::raql_expr::tde6226ab24e2bde569d940f438b90782 id_4553 { std::in_place_index<2>, id_4552 };
                                                ::dessser::gen::raql_expr::t3ddb4633a3ccf43793c03838edabfa36 id_4554 { id_4553, dbool_snd_334 };
                                                letpair_res_4549 = id_4554;
                                              }
                                              choose_res_4542 = letpair_res_4549;
                                            }
                                            choose_res_4537 = choose_res_4542;
                                          }
                                          letpair_res_4534 = choose_res_4537;
                                        }
                                        let_res_4533 = letpair_res_4534;
                                      }
                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4555;
                                      {
                                        auto dtup_fst_345 { std::get<0>(let_res_4533) };
                                        auto dtup_snd_346 { std::get<1>(let_res_4533) };
                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4556 { fun3303(dtup_snd_346) };
                                        ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4557;
                                        {
                                          auto dtup_fst_348 { std::get<0>(id_4556) };
                                          auto dtup_snd_349 { std::get<1>(id_4556) };
                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4558 { fun3303(dtup_snd_349) };
                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4559;
                                          {
                                            auto dtup_fst_351 { std::get<0>(id_4558) };
                                            auto dtup_snd_352 { std::get<1>(id_4558) };
                                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4560 { fun3303(dtup_snd_352) };
                                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4561;
                                            {
                                              auto dtup_fst_354 { std::get<0>(id_4560) };
                                              auto dtup_snd_355 { std::get<1>(id_4560) };
                                              ::dessser::gen::raql_expr::t27e357241014cac9c70637dbe763fa46 id_4562 { dtup_fst_345, dtup_fst_348, dtup_fst_351, dtup_fst_354 };
                                              ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4563 { std::in_place_index<2>, id_4562 };
                                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4564 { id_4563, dtup_snd_355 };
                                              letpair_res_4561 = id_4564;
                                            }
                                            letpair_res_4559 = letpair_res_4561;
                                          }
                                          letpair_res_4557 = letpair_res_4559;
                                        }
                                        letpair_res_4555 = letpair_res_4557;
                                      }
                                      choose_res_4529 = letpair_res_4555;
                                    } else {
                                      uint16_t id_4565 { 3 };
                                      bool id_4566 { bool(id_4565 == dsum1_fst_127) };
                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 choose_res_4567;
                                      if (id_4566) {
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4568 { dsum1_snd_128.readU16Le() };
                                        ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4569;
                                        {
                                          auto du16_fst_288 { std::get<0>(id_4568) };
                                          auto du16_snd_289 { std::get<1>(id_4568) };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4570 { du16_fst_288, du16_snd_289 };
                                          letpair_res_4569 = id_4570;
                                        }
                                        ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e let_res_4571;
                                        {
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_293 { letpair_res_4569 };
                                          ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e letpair_res_4572;
                                          {
                                            auto dsum1_fst_294 { std::get<0>(dsum1_293) };
                                            auto dsum1_snd_295 { std::get<1>(dsum1_293) };
                                            uint16_t id_4573 { 0 };
                                            bool id_4574 { bool(id_4573 == dsum1_fst_294) };
                                            ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e choose_res_4575;
                                            if (id_4574) {
                                              (void)::dessser::Void();
                                              ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_4576 { std::in_place_index<0>, ::dessser::Void() };
                                              ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e id_4577 { id_4576, dsum1_snd_295 };
                                              choose_res_4575 = id_4577;
                                            } else {
                                              uint16_t id_4578 { 1 };
                                              bool id_4579 { bool(dsum1_fst_294 == id_4578) };
                                              Void id_4580 { ((void)(assert(id_4579)), ::dessser::Void()) };
                                              (void)id_4580;
                                              ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4581 { dsum1_snd_295.readU8() };
                                              ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e letpair_res_4582;
                                              {
                                                auto dbool_fst_297 { std::get<0>(id_4581) };
                                                auto dbool_snd_298 { std::get<1>(id_4581) };
                                                uint8_t id_4583 { 0 };
                                                bool id_4584 { bool(dbool_fst_297 == id_4583) };
                                                bool id_4585 { ! id_4584 };
                                                ::dessser::gen::raql_expr::t482aebd3608ffaf2914a7e856b14192b id_4586 { std::in_place_index<1>, id_4585 };
                                                ::dessser::gen::raql_expr::t4ccad2556e823529795cd21badd54b9e id_4587 { id_4586, dbool_snd_298 };
                                                letpair_res_4582 = id_4587;
                                              }
                                              choose_res_4575 = letpair_res_4582;
                                            }
                                            letpair_res_4572 = choose_res_4575;
                                          }
                                          let_res_4571 = letpair_res_4572;
                                        }
                                        ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4588;
                                        {
                                          auto dtup_fst_306 { std::get<0>(let_res_4571) };
                                          auto dtup_snd_307 { std::get<1>(let_res_4571) };
                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4589 { fun3303(dtup_snd_307) };
                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4590;
                                          {
                                            auto dtup_fst_309 { std::get<0>(id_4589) };
                                            auto dtup_snd_310 { std::get<1>(id_4589) };
                                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4591 { fun3303(dtup_snd_310) };
                                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4592;
                                            {
                                              auto dtup_fst_312 { std::get<0>(id_4591) };
                                              auto dtup_snd_313 { std::get<1>(id_4591) };
                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4593 { fun3303(dtup_snd_313) };
                                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4594;
                                              {
                                                auto dtup_fst_315 { std::get<0>(id_4593) };
                                                auto dtup_snd_316 { std::get<1>(id_4593) };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4595 { fun3303(dtup_snd_316) };
                                                ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4596;
                                                {
                                                  auto dtup_fst_318 { std::get<0>(id_4595) };
                                                  auto dtup_snd_319 { std::get<1>(id_4595) };
                                                  ::dessser::gen::raql_expr::t2783f1bd5678d740a05f0e7d758a084e id_4597 { dtup_fst_306, dtup_fst_309, dtup_fst_312, dtup_fst_315, dtup_fst_318 };
                                                  ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4598 { std::in_place_index<3>, id_4597 };
                                                  ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4599 { id_4598, dtup_snd_319 };
                                                  letpair_res_4596 = id_4599;
                                                }
                                                letpair_res_4594 = letpair_res_4596;
                                              }
                                              letpair_res_4592 = letpair_res_4594;
                                            }
                                            letpair_res_4590 = letpair_res_4592;
                                          }
                                          letpair_res_4588 = letpair_res_4590;
                                        }
                                        choose_res_4567 = letpair_res_4588;
                                      } else {
                                        uint16_t id_4600 { 4 };
                                        bool id_4601 { bool(id_4600 == dsum1_fst_127) };
                                        ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 choose_res_4602;
                                        if (id_4601) {
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4603 { dsum1_snd_128.readU16Le() };
                                          ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4604;
                                          {
                                            auto du16_fst_220 { std::get<0>(id_4603) };
                                            auto du16_snd_221 { std::get<1>(id_4603) };
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4605 { du16_fst_220, du16_snd_221 };
                                            letpair_res_4604 = id_4605;
                                          }
                                          ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c let_res_4606;
                                          {
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_225 { letpair_res_4604 };
                                            ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c letpair_res_4607;
                                            {
                                              auto dsum1_fst_226 { std::get<0>(dsum1_225) };
                                              auto dsum1_snd_227 { std::get<1>(dsum1_225) };
                                              uint16_t id_4608 { 0 };
                                              bool id_4609 { bool(id_4608 == dsum1_fst_226) };
                                              ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c choose_res_4610;
                                              if (id_4609) {
                                                (void)::dessser::Void();
                                                ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_4611 { std::in_place_index<0>, ::dessser::Void() };
                                                ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c id_4612 { id_4611, dsum1_snd_227 };
                                                choose_res_4610 = id_4612;
                                              } else {
                                                uint16_t id_4613 { 1 };
                                                bool id_4614 { bool(dsum1_fst_226 == id_4613) };
                                                Void id_4615 { ((void)(assert(id_4614)), ::dessser::Void()) };
                                                (void)id_4615;
                                                ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4616 { dsum1_snd_227.readU8() };
                                                ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 letpair_res_4617;
                                                {
                                                  auto dbool_fst_229 { std::get<0>(id_4616) };
                                                  auto dbool_snd_230 { std::get<1>(id_4616) };
                                                  uint8_t id_4618 { 0 };
                                                  bool id_4619 { bool(dbool_fst_229 == id_4618) };
                                                  bool id_4620 { ! id_4619 };
                                                  ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 id_4621 { id_4620, dbool_snd_230 };
                                                  letpair_res_4617 = id_4621;
                                                }
                                                ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c let_res_4622;
                                                {
                                                  ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 drec_231 { letpair_res_4617 };
                                                  ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c letpair_res_4623;
                                                  {
                                                    auto drec_fst_232 { std::get<0>(drec_231) };
                                                    auto drec_snd_233 { std::get<1>(drec_231) };
                                                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4624 { drec_snd_233.readU8() };
                                                    ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c letpair_res_4625;
                                                    {
                                                      auto dbool_fst_235 { std::get<0>(id_4624) };
                                                      auto dbool_snd_236 { std::get<1>(id_4624) };
                                                      uint8_t id_4626 { 0 };
                                                      bool id_4627 { bool(dbool_fst_235 == id_4626) };
                                                      bool id_4628 { ! id_4627 };
                                                      ::dessser::gen::raql_expr::t98f65fefde90f21cac9f06d483a57475 id_4629 { drec_fst_232, id_4628 };
                                                      ::dessser::gen::raql_expr::tdd3c5c0a7097ddd3d17c28956240cbea id_4630 { std::in_place_index<1>, id_4629 };
                                                      ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c id_4631 { id_4630, dbool_snd_236 };
                                                      letpair_res_4625 = id_4631;
                                                    }
                                                    letpair_res_4623 = letpair_res_4625;
                                                  }
                                                  let_res_4622 = letpair_res_4623;
                                                }
                                                choose_res_4610 = let_res_4622;
                                              }
                                              letpair_res_4607 = choose_res_4610;
                                            }
                                            let_res_4606 = letpair_res_4607;
                                          }
                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 let_res_4632;
                                          {
                                            ::dessser::gen::raql_expr::te93c07274cadb39058f1f0ef45b6ad7c dtup_246 { let_res_4606 };
                                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4633;
                                            {
                                              auto dtup_fst_247 { std::get<0>(dtup_246) };
                                              auto dtup_snd_248 { std::get<1>(dtup_246) };
                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4634 { fun3303(dtup_snd_248) };
                                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4635;
                                              {
                                                auto dtup_fst_250 { std::get<0>(id_4634) };
                                                auto dtup_snd_251 { std::get<1>(id_4634) };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4636 { fun3303(dtup_snd_251) };
                                                ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4637;
                                                {
                                                  auto dtup_fst_253 { std::get<0>(id_4636) };
                                                  auto dtup_snd_254 { std::get<1>(id_4636) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4638 { fun3303(dtup_snd_254) };
                                                  ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4639;
                                                  {
                                                    auto dtup_fst_256 { std::get<0>(id_4638) };
                                                    auto dtup_snd_257 { std::get<1>(id_4638) };
                                                    uint32_t id_4640 { 0U };
                                                    Vec<1, uint32_t> id_4641 {  id_4640  };
                                                    ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4642;
                                                    {
                                                      Vec<1, uint32_t> leb_ref_258 { id_4641 };
                                                      uint8_t id_4643 { 0 };
                                                      Vec<1, uint8_t> id_4644 {  id_4643  };
                                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4645;
                                                      {
                                                        Vec<1, uint8_t> shft_ref_259 { id_4644 };
                                                        Vec<1, Pointer> id_4646 {  dtup_snd_257  };
                                                        ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 let_res_4647;
                                                        {
                                                          Vec<1, Pointer> p_ref_260 { id_4646 };
                                                          bool while_flag_4648 { true };
                                                          do {
                                                            uint8_t id_4649 { 0 };
                                                            Pointer id_4650 { p_ref_260[id_4649] };
                                                            ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4651 { id_4650.readU8() };
                                                            bool let_res_4652;
                                                            {
                                                              ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 leb128_261 { id_4651 };
                                                              bool letpair_res_4653;
                                                              {
                                                                auto leb128_fst_262 { std::get<0>(leb128_261) };
                                                                auto leb128_snd_263 { std::get<1>(leb128_261) };
                                                                uint8_t id_4654 { 0 };
                                                                Void id_4655 { ((void)(p_ref_260[id_4654] = leb128_snd_263), ::dessser::Void()) };
                                                                (void)id_4655;
                                                                uint8_t id_4656 { 0 };
                                                                uint8_t id_4657 { 127 };
                                                                uint8_t id_4658 { uint8_t(leb128_fst_262 & id_4657) };
                                                                uint32_t id_4659 { uint32_t(id_4658) };
                                                                uint8_t id_4660 { 0 };
                                                                uint8_t id_4661 { shft_ref_259[id_4660] };
                                                                uint32_t id_4662 { uint32_t(id_4659 << id_4661) };
                                                                uint8_t id_4663 { 0 };
                                                                uint32_t id_4664 { leb_ref_258[id_4663] };
                                                                uint32_t id_4665 { uint32_t(id_4662 | id_4664) };
                                                                Void id_4666 { ((void)(leb_ref_258[id_4656] = id_4665), ::dessser::Void()) };
                                                                (void)id_4666;
                                                                uint8_t id_4667 { 0 };
                                                                uint8_t id_4668 { 0 };
                                                                uint8_t id_4669 { shft_ref_259[id_4668] };
                                                                uint8_t id_4670 { 7 };
                                                                uint8_t id_4671 { uint8_t(id_4669 + id_4670) };
                                                                Void id_4672 { ((void)(shft_ref_259[id_4667] = id_4671), ::dessser::Void()) };
                                                                (void)id_4672;
                                                                uint8_t id_4673 { 128 };
                                                                bool id_4674 { bool(leb128_fst_262 >= id_4673) };
                                                                letpair_res_4653 = id_4674;
                                                              }
                                                              let_res_4652 = letpair_res_4653;
                                                            }
                                                            while_flag_4648 = let_res_4652;
                                                            if (while_flag_4648) {
                                                              (void)::dessser::Void();
                                                            }
                                                          } while (while_flag_4648);
                                                          (void)::dessser::Void();
                                                          uint8_t id_4675 { 0 };
                                                          uint32_t id_4676 { leb_ref_258[id_4675] };
                                                          uint8_t id_4677 { 0 };
                                                          Pointer id_4678 { p_ref_260[id_4677] };
                                                          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4679 { id_4676, id_4678 };
                                                          let_res_4647 = id_4679;
                                                        }
                                                        let_res_4645 = let_res_4647;
                                                      }
                                                      let_res_4642 = let_res_4645;
                                                    }
                                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4680;
                                                    {
                                                      ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 dlist1_267 { let_res_4642 };
                                                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4681;
                                                      {
                                                        auto dlist1_fst_268 { std::get<0>(dlist1_267) };
                                                        auto dlist1_snd_269 { std::get<1>(dlist1_267) };
                                                        Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > endoflist_4682;
                                                        ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4683 { endoflist_4682, dlist1_snd_269 };
                                                        Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> id_4684 {  id_4683  };
                                                        ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 let_res_4685;
                                                        {
                                                          Vec<1, ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61> inits_src_ref_270 { id_4684 };
                                                          int32_t id_4686 { 0L };
                                                          Vec<1, int32_t> id_4687 {  id_4686  };
                                                          {
                                                            Vec<1, int32_t> repeat_n_271 { id_4687 };
                                                            bool while_flag_4688 { true };
                                                            do {
                                                              int32_t id_4689 { int32_t(dlist1_fst_268) };
                                                              uint8_t id_4690 { 0 };
                                                              int32_t id_4691 { repeat_n_271[id_4690] };
                                                              bool id_4692 { bool(id_4689 > id_4691) };
                                                              while_flag_4688 = id_4692;
                                                              if (while_flag_4688) {
                                                                uint8_t id_4693 { 0 };
                                                                ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4694 { inits_src_ref_270[id_4693] };
                                                                {
                                                                  ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 dlist2_272 { id_4694 };
                                                                  {
                                                                    auto dlist2_fst_273 { std::get<0>(dlist2_272) };
                                                                    auto dlist2_snd_274 { std::get<1>(dlist2_272) };
                                                                    uint8_t id_4695 { 0 };
                                                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4696 { fun3303(dlist2_snd_274) };
                                                                    ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 letpair_res_4697;
                                                                    {
                                                                      auto dlist3_fst_276 { std::get<0>(id_4696) };
                                                                      auto dlist3_snd_277 { std::get<1>(id_4696) };
                                                                      Lst<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4698 { dlist3_fst_276, dlist2_fst_273 };
                                                                      ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4699 { id_4698, dlist3_snd_277 };
                                                                      letpair_res_4697 = id_4699;
                                                                    }
                                                                    Void id_4700 { ((void)(inits_src_ref_270[id_4695] = letpair_res_4697), ::dessser::Void()) };
                                                                    (void)id_4700;
                                                                  }
                                                                  (void)::dessser::Void();
                                                                }
                                                                (void)::dessser::Void();
                                                                uint8_t id_4701 { 0 };
                                                                uint8_t id_4702 { 0 };
                                                                int32_t id_4703 { repeat_n_271[id_4702] };
                                                                int32_t id_4704 { 1L };
                                                                int32_t id_4705 { int32_t(id_4703 + id_4704) };
                                                                Void id_4706 { ((void)(repeat_n_271[id_4701] = id_4705), ::dessser::Void()) };
                                                                (void)id_4706;
                                                                (void)id_4706;
                                                              }
                                                            } while (while_flag_4688);
                                                            (void)::dessser::Void();
                                                          }
                                                          (void)::dessser::Void();
                                                          uint8_t id_4707 { 0 };
                                                          ::dessser::gen::raql_expr::t60d2a53484b8e0b6653034ad96861c61 id_4708 { inits_src_ref_270[id_4707] };
                                                          let_res_4685 = id_4708;
                                                        }
                                                        letpair_res_4681 = let_res_4685;
                                                      }
                                                      let_res_4680 = letpair_res_4681;
                                                    }
                                                    ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4709;
                                                    {
                                                      auto dlist4_fst_279 { std::get<0>(let_res_4680) };
                                                      auto dlist4_snd_280 { std::get<1>(let_res_4680) };
                                                      ::dessser::gen::raql_expr::t62a574a444d31b9a476bfa017f081a2b id_4710 { dtup_fst_247, dtup_fst_250, dtup_fst_253, dtup_fst_256, dlist4_fst_279 };
                                                      ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4711 { std::in_place_index<4>, id_4710 };
                                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4712 { id_4711, dlist4_snd_280 };
                                                      letpair_res_4709 = id_4712;
                                                    }
                                                    letpair_res_4639 = letpair_res_4709;
                                                  }
                                                  letpair_res_4637 = letpair_res_4639;
                                                }
                                                letpair_res_4635 = letpair_res_4637;
                                              }
                                              letpair_res_4633 = letpair_res_4635;
                                            }
                                            let_res_4632 = letpair_res_4633;
                                          }
                                          choose_res_4602 = let_res_4632;
                                        } else {
                                          uint16_t id_4713 { 5 };
                                          bool id_4714 { bool(id_4713 == dsum1_fst_127) };
                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 choose_res_4715;
                                          if (id_4714) {
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4716 { dsum1_snd_128.readU16Le() };
                                            ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4717;
                                            {
                                              auto du16_fst_184 { std::get<0>(id_4716) };
                                              auto du16_snd_185 { std::get<1>(id_4716) };
                                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4718 { du16_fst_184, du16_snd_185 };
                                              letpair_res_4717 = id_4718;
                                            }
                                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 let_res_4719;
                                            {
                                              ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_189 { letpair_res_4717 };
                                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4720;
                                              {
                                                auto dsum1_fst_190 { std::get<0>(dsum1_189) };
                                                auto dsum1_snd_191 { std::get<1>(dsum1_189) };
                                                uint16_t id_4721 { 0 };
                                                bool id_4722 { bool(dsum1_fst_190 == id_4721) };
                                                Void id_4723 { ((void)(assert(id_4722)), ::dessser::Void()) };
                                                (void)id_4723;
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4724 { fun3303(dsum1_snd_191) };
                                                ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4725;
                                                {
                                                  auto dtup_fst_199 { std::get<0>(id_4724) };
                                                  auto dtup_snd_200 { std::get<1>(id_4724) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4726 { fun3303(dtup_snd_200) };
                                                  ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4727;
                                                  {
                                                    auto dtup_fst_202 { std::get<0>(id_4726) };
                                                    auto dtup_snd_203 { std::get<1>(id_4726) };
                                                    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4728 { fun3303(dtup_snd_203) };
                                                    ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4729;
                                                    {
                                                      auto dtup_fst_205 { std::get<0>(id_4728) };
                                                      auto dtup_snd_206 { std::get<1>(id_4728) };
                                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4730 { fun3303(dtup_snd_206) };
                                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4731;
                                                      {
                                                        auto dtup_fst_208 { std::get<0>(id_4730) };
                                                        auto dtup_snd_209 { std::get<1>(id_4730) };
                                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4732 { fun3303(dtup_snd_209) };
                                                        ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4733;
                                                        {
                                                          auto dtup_fst_211 { std::get<0>(id_4732) };
                                                          auto dtup_snd_212 { std::get<1>(id_4732) };
                                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4734 { fun3303(dtup_snd_212) };
                                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4735;
                                                          {
                                                            auto dtup_fst_214 { std::get<0>(id_4734) };
                                                            auto dtup_snd_215 { std::get<1>(id_4734) };
                                                            (void)::dessser::Void();
                                                            ::dessser::gen::raql_expr::t08ea46bfedc9b7effc1e74e5b51a05ef id_4736 { DampedHoltWinter };
                                                            ::dessser::gen::raql_expr::tf2c2db7fffde452d30a812e218f245f7 id_4737 { id_4736, dtup_fst_199, dtup_fst_202, dtup_fst_205, dtup_fst_208, dtup_fst_211, dtup_fst_214 };
                                                            ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4738 { std::in_place_index<5>, id_4737 };
                                                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4739 { id_4738, dtup_snd_215 };
                                                            letpair_res_4735 = id_4739;
                                                          }
                                                          letpair_res_4733 = letpair_res_4735;
                                                        }
                                                        letpair_res_4731 = letpair_res_4733;
                                                      }
                                                      letpair_res_4729 = letpair_res_4731;
                                                    }
                                                    letpair_res_4727 = letpair_res_4729;
                                                  }
                                                  letpair_res_4725 = letpair_res_4727;
                                                }
                                                letpair_res_4720 = letpair_res_4725;
                                              }
                                              let_res_4719 = letpair_res_4720;
                                            }
                                            choose_res_4715 = let_res_4719;
                                          } else {
                                            uint16_t id_4740 { 6 };
                                            bool id_4741 { bool(id_4740 == dsum1_fst_127) };
                                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 choose_res_4742;
                                            if (id_4741) {
                                              auto fun4743 { dessser::gen::raql_top_output::of_row_binary };
                                              ::dessser::gen::raql_expr::tcf2bbf57edbf797e26f0528c2c828563 id_4744 { fun4743(dsum1_snd_128) };
                                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 let_res_4745;
                                              {
                                                ::dessser::gen::raql_expr::tcf2bbf57edbf797e26f0528c2c828563 drec_153 { id_4744 };
                                                ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4746;
                                                {
                                                  auto drec_fst_154 { std::get<0>(drec_153) };
                                                  auto drec_snd_155 { std::get<1>(drec_153) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4747 { fun3303(drec_snd_155) };
                                                  ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4748;
                                                  {
                                                    auto drec_fst_157 { std::get<0>(id_4747) };
                                                    auto drec_snd_158 { std::get<1>(id_4747) };
                                                    Size id_4749 { 0UL };
                                                    uint8_t id_4750 { drec_snd_158.peekU8(id_4749) };
                                                    uint8_t id_4751 { 1 };
                                                    bool id_4752 { bool(id_4750 == id_4751) };
                                                    ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 choose_res_4753;
                                                    if (id_4752) {
                                                      std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4754 { std::nullopt };
                                                      Size id_4755 { 1UL };
                                                      Pointer id_4756 { drec_snd_158.skip(id_4755) };
                                                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4757 { id_4754, id_4756 };
                                                      choose_res_4753 = id_4757;
                                                    } else {
                                                      Size id_4758 { 1UL };
                                                      Pointer id_4759 { drec_snd_158.skip(id_4758) };
                                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4760 { fun3303(id_4759) };
                                                      ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 letpair_res_4761;
                                                      {
                                                        auto make1_1_fst_160 { std::get<0>(id_4760) };
                                                        auto make1_1_snd_161 { std::get<1>(id_4760) };
                                                        std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4762 { make1_1_fst_160 };
                                                        ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4763 { id_4762, make1_1_snd_161 };
                                                        letpair_res_4761 = id_4763;
                                                      }
                                                      choose_res_4753 = letpair_res_4761;
                                                    }
                                                    ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4764;
                                                    {
                                                      auto drec_fst_163 { std::get<0>(choose_res_4753) };
                                                      auto drec_snd_164 { std::get<1>(choose_res_4753) };
                                                      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4765 { fun3303(drec_snd_164) };
                                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4766;
                                                      {
                                                        auto drec_fst_166 { std::get<0>(id_4765) };
                                                        auto drec_snd_167 { std::get<1>(id_4765) };
                                                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4767 { fun3303(drec_snd_167) };
                                                        ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4768;
                                                        {
                                                          auto drec_fst_169 { std::get<0>(id_4767) };
                                                          auto drec_snd_170 { std::get<1>(id_4767) };
                                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4769 { fun3303(drec_snd_170) };
                                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4770;
                                                          {
                                                            auto drec_fst_172 { std::get<0>(id_4769) };
                                                            auto drec_snd_173 { std::get<1>(id_4769) };
                                                            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4771 { fun3303(drec_snd_173) };
                                                            ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4772;
                                                            {
                                                              auto drec_fst_175 { std::get<0>(id_4771) };
                                                              auto drec_snd_176 { std::get<1>(id_4771) };
                                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4773 { fun3303(drec_snd_176) };
                                                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4774;
                                                              {
                                                                auto drec_fst_178 { std::get<0>(id_4773) };
                                                                auto drec_snd_179 { std::get<1>(id_4773) };
                                                                ::dessser::gen::raql_expr::t9ff32f6938631a338c8ace99a86c40f3 id_4775 { drec_fst_154, drec_fst_157, drec_fst_163, drec_fst_166, drec_fst_169, drec_fst_172, drec_fst_175, drec_fst_178 };
                                                                ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4776 { std::in_place_index<6>, id_4775 };
                                                                ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4777 { id_4776, drec_snd_179 };
                                                                letpair_res_4774 = id_4777;
                                                              }
                                                              letpair_res_4772 = letpair_res_4774;
                                                            }
                                                            letpair_res_4770 = letpair_res_4772;
                                                          }
                                                          letpair_res_4768 = letpair_res_4770;
                                                        }
                                                        letpair_res_4766 = letpair_res_4768;
                                                      }
                                                      letpair_res_4764 = letpair_res_4766;
                                                    }
                                                    letpair_res_4748 = letpair_res_4764;
                                                  }
                                                  letpair_res_4746 = letpair_res_4748;
                                                }
                                                let_res_4745 = letpair_res_4746;
                                              }
                                              choose_res_4742 = let_res_4745;
                                            } else {
                                              uint16_t id_4778 { 7 };
                                              bool id_4779 { bool(dsum1_fst_127 == id_4778) };
                                              Void id_4780 { ((void)(assert(id_4779)), ::dessser::Void()) };
                                              (void)id_4780;
                                              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4781 { fun3303(dsum1_snd_128) };
                                              ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4782;
                                              {
                                                auto drec_fst_130 { std::get<0>(id_4781) };
                                                auto drec_snd_131 { std::get<1>(id_4781) };
                                                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4783 { fun3303(drec_snd_131) };
                                                ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4784;
                                                {
                                                  auto drec_fst_133 { std::get<0>(id_4783) };
                                                  auto drec_snd_134 { std::get<1>(id_4783) };
                                                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4785 { fun3303(drec_snd_134) };
                                                  ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4786;
                                                  {
                                                    auto drec_fst_136 { std::get<0>(id_4785) };
                                                    auto drec_snd_137 { std::get<1>(id_4785) };
                                                    ::dessser::gen::raql_expr::t1a5d74abf838df33f185a72a8912f5c9 id_4787 { drec_snd_137.readU8() };
                                                    ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 letpair_res_4788;
                                                    {
                                                      auto dbool_fst_139 { std::get<0>(id_4787) };
                                                      auto dbool_snd_140 { std::get<1>(id_4787) };
                                                      uint8_t id_4789 { 0 };
                                                      bool id_4790 { bool(dbool_fst_139 == id_4789) };
                                                      bool id_4791 { ! id_4790 };
                                                      ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 id_4792 { id_4791, dbool_snd_140 };
                                                      letpair_res_4788 = id_4792;
                                                    }
                                                    ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 let_res_4793;
                                                    {
                                                      ::dessser::gen::raql_expr::tf9a0a3fefc87c9e10a93d3a172850c26 drec_141 { letpair_res_4788 };
                                                      ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4794;
                                                      {
                                                        auto drec_fst_142 { std::get<0>(drec_141) };
                                                        auto drec_snd_143 { std::get<1>(drec_141) };
                                                        Size id_4795 { 0UL };
                                                        uint8_t id_4796 { drec_snd_143.peekU8(id_4795) };
                                                        uint8_t id_4797 { 1 };
                                                        bool id_4798 { bool(id_4796 == id_4797) };
                                                        ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 choose_res_4799;
                                                        if (id_4798) {
                                                          std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4800 { std::nullopt };
                                                          Size id_4801 { 1UL };
                                                          Pointer id_4802 { drec_snd_143.skip(id_4801) };
                                                          ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4803 { id_4800, id_4802 };
                                                          choose_res_4799 = id_4803;
                                                        } else {
                                                          Size id_4804 { 1UL };
                                                          Pointer id_4805 { drec_snd_143.skip(id_4804) };
                                                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4806 { fun3303(id_4805) };
                                                          ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 letpair_res_4807;
                                                          {
                                                            auto make1_1_fst_145 { std::get<0>(id_4806) };
                                                            auto make1_1_snd_146 { std::get<1>(id_4806) };
                                                            std::optional<std::shared_ptr<::dessser::gen::raql_expr::t> > id_4808 { make1_1_fst_145 };
                                                            ::dessser::gen::raql_expr::t0a80625c094043132be3ecb4371c3ca6 id_4809 { id_4808, make1_1_snd_146 };
                                                            letpair_res_4807 = id_4809;
                                                          }
                                                          choose_res_4799 = letpair_res_4807;
                                                        }
                                                        ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 letpair_res_4810;
                                                        {
                                                          auto drec_fst_148 { std::get<0>(choose_res_4799) };
                                                          auto drec_snd_149 { std::get<1>(choose_res_4799) };
                                                          ::dessser::gen::raql_expr::t1444e78faaacd44c5e033d97448c4e87 id_4811 { drec_fst_130, drec_fst_133, drec_fst_136, drec_fst_142, drec_fst_148 };
                                                          ::dessser::gen::raql_expr::ta6e43dc0a066d58332d394a7b333feee id_4812 { std::in_place_index<7>, id_4811 };
                                                          ::dessser::gen::raql_expr::t109794c55a35d10d7d6e6edf6773e0f3 id_4813 { id_4812, drec_snd_149 };
                                                          letpair_res_4810 = id_4813;
                                                        }
                                                        letpair_res_4794 = letpair_res_4810;
                                                      }
                                                      let_res_4793 = letpair_res_4794;
                                                    }
                                                    letpair_res_4786 = let_res_4793;
                                                  }
                                                  letpair_res_4784 = letpair_res_4786;
                                                }
                                                letpair_res_4782 = letpair_res_4784;
                                              }
                                              choose_res_4742 = letpair_res_4782;
                                            }
                                            choose_res_4715 = choose_res_4742;
                                          }
                                          choose_res_4602 = choose_res_4715;
                                        }
                                        choose_res_4567 = choose_res_4602;
                                      }
                                      choose_res_4529 = choose_res_4567;
                                    }
                                    choose_res_4493 = choose_res_4529;
                                  }
                                  choose_res_4389 = choose_res_4493;
                                }
                                letpair_res_4386 = choose_res_4389;
                              }
                              let_res_4385 = letpair_res_4386;
                            }
                            ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_4814;
                            {
                              auto drec_fst_474 { std::get<0>(let_res_4385) };
                              auto drec_snd_475 { std::get<1>(let_res_4385) };
                              ::dessser::gen::raql_expr::t21552b36d3d1886c23db508637ffd83a id_4815 { drec_fst_112, drec_fst_118, drec_fst_474 };
                              ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_4816 { std::in_place_index<5>, id_4815 };
                              ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 id_4817 { id_4816, drec_snd_475 };
                              letpair_res_4814 = id_4817;
                            }
                            letpair_res_4381 = letpair_res_4814;
                          }
                          let_res_4380 = letpair_res_4381;
                        }
                        letpair_res_4373 = let_res_4380;
                      }
                      let_res_4372 = letpair_res_4373;
                    }
                    choose_res_4356 = let_res_4372;
                  } else {
                    uint16_t id_4818 { 6 };
                    bool id_4819 { bool(dsum1_fst_85 == id_4818) };
                    Void id_4820 { ((void)(assert(id_4819)), ::dessser::Void()) };
                    (void)id_4820;
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4821 { dsum1_snd_86.readU16Le() };
                    ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 letpair_res_4822;
                    {
                      auto du16_fst_88 { std::get<0>(id_4821) };
                      auto du16_snd_89 { std::get<1>(id_4821) };
                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 id_4823 { du16_fst_88, du16_snd_89 };
                      letpair_res_4822 = id_4823;
                    }
                    ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 let_res_4824;
                    {
                      ::dessser::gen::raql_expr::ta97bb48ed75bbda6173555873826c8c6 dsum1_93 { letpair_res_4822 };
                      ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_4825;
                      {
                        auto dsum1_fst_94 { std::get<0>(dsum1_93) };
                        auto dsum1_snd_95 { std::get<1>(dsum1_93) };
                        uint16_t id_4826 { 0 };
                        bool id_4827 { bool(dsum1_fst_94 == id_4826) };
                        Void id_4828 { ((void)(assert(id_4827)), ::dessser::Void()) };
                        (void)id_4828;
                        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4829 { fun3303(dsum1_snd_95) };
                        ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_4830;
                        {
                          auto dtup_fst_97 { std::get<0>(id_4829) };
                          auto dtup_snd_98 { std::get<1>(id_4829) };
                          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4831 { fun3303(dtup_snd_98) };
                          ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 letpair_res_4832;
                          {
                            auto dtup_fst_100 { std::get<0>(id_4831) };
                            auto dtup_snd_101 { std::get<1>(id_4831) };
                            ::dessser::gen::raql_expr::t09ebe067ef7b13158d058ba3ce6f150c id_4833 { dtup_fst_97, dtup_fst_100 };
                            ::dessser::gen::raql_expr::t8411610d7f6cfe33697a36943471c946 id_4834 { std::in_place_index<0>, id_4833 };
                            ::dessser::gen::raql_expr::t3a6dacc475a53013b3638814d2cc66f8 id_4835 { std::in_place_index<6>, id_4834 };
                            ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 id_4836 { id_4835, dtup_snd_101 };
                            letpair_res_4832 = id_4836;
                          }
                          letpair_res_4830 = letpair_res_4832;
                        }
                        letpair_res_4825 = letpair_res_4830;
                      }
                      let_res_4824 = letpair_res_4825;
                    }
                    choose_res_4356 = let_res_4824;
                  }
                  choose_res_3638 = choose_res_4356;
                }
                choose_res_3540 = choose_res_3638;
              }
              choose_res_3465 = choose_res_3540;
            }
            choose_res_3386 = choose_res_3465;
          }
          choose_res_3311 = choose_res_3386;
        }
        letpair_res_3308 = choose_res_3311;
      }
      let_res_3307 = letpair_res_3308;
    }
    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 let_res_4837;
    {
      ::dessser::gen::raql_expr::tc4ed1656cf6df554256641048c8d0849 drec_1037 { let_res_3307 };
      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4838;
      {
        auto drec_fst_1038 { std::get<0>(drec_1037) };
        auto drec_snd_1039 { std::get<1>(drec_1037) };
        ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4839 { drec_snd_1039.readU32Le() };
        ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 letpair_res_4840;
        {
          auto du32_fst_1041 { std::get<0>(id_4839) };
          auto du32_snd_1042 { std::get<1>(id_4839) };
          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 id_4841 { du32_fst_1041, du32_snd_1042 };
          letpair_res_4840 = id_4841;
        }
        ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 let_res_4842;
        {
          ::dessser::gen::raql_expr::t491c44439106a32f896827242e8e76a1 drec_1043 { letpair_res_4840 };
          ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4843;
          {
            auto drec_fst_1044 { std::get<0>(drec_1043) };
            auto drec_snd_1045 { std::get<1>(drec_1043) };
            auto fun4844 { dessser::gen::raql_type::of_row_binary };
            ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 id_4845 { fun4844(drec_snd_1045) };
            ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 let_res_4846;
            {
              ::dessser::gen::raql_expr::t101502ffd7fb38beafe4b49259f92ba1 drec_1046 { id_4845 };
              ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4847;
              {
                auto drec_fst_1047 { std::get<0>(drec_1046) };
                auto drec_snd_1048 { std::get<1>(drec_1046) };
                Size id_4848 { 0UL };
                uint8_t id_4849 { drec_snd_1048.peekU8(id_4848) };
                uint8_t id_4850 { 1 };
                bool id_4851 { bool(id_4849 == id_4850) };
                ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b choose_res_4852;
                if (id_4851) {
                  std::optional<dessser::gen::units::t_ext> id_4853 { std::nullopt };
                  Size id_4854 { 1UL };
                  Pointer id_4855 { drec_snd_1048.skip(id_4854) };
                  ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b id_4856 { id_4853, id_4855 };
                  choose_res_4852 = id_4856;
                } else {
                  auto fun4857 { dessser::gen::units::of_row_binary };
                  Size id_4858 { 1UL };
                  Pointer id_4859 { drec_snd_1048.skip(id_4858) };
                  ::dessser::gen::raql_expr::tdcd8238b20249643ff5b5f9a7648e226 id_4860 { fun4857(id_4859) };
                  ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b letpair_res_4861;
                  {
                    auto make1_1_fst_1050 { std::get<0>(id_4860) };
                    auto make1_1_snd_1051 { std::get<1>(id_4860) };
                    std::optional<dessser::gen::units::t_ext> id_4862 { make1_1_fst_1050 };
                    ::dessser::gen::raql_expr::t096d6a0956a2df6dec7d0945ab177a4b id_4863 { id_4862, make1_1_snd_1051 };
                    letpair_res_4861 = id_4863;
                  }
                  choose_res_4852 = letpair_res_4861;
                }
                ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4864;
                {
                  auto drec_fst_1053 { std::get<0>(choose_res_4852) };
                  auto drec_snd_1054 { std::get<1>(choose_res_4852) };
                  std::shared_ptr<::dessser::gen::raql_expr::t>  id_4865 { std::make_shared<::dessser::gen::raql_expr::t>(drec_fst_1038, drec_fst_1044, drec_fst_1047, drec_fst_1053) };
                  ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4866 { id_4865, drec_snd_1054 };
                  letpair_res_4864 = id_4866;
                }
                letpair_res_4847 = letpair_res_4864;
              }
              let_res_4846 = letpair_res_4847;
            }
            letpair_res_4843 = let_res_4846;
          }
          let_res_4842 = letpair_res_4843;
        }
        letpair_res_4838 = let_res_4842;
      }
      let_res_4837 = letpair_res_4838;
    }
    return let_res_4837;
  }
   };
  return fun3303;
}
std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> of_row_binary(of_row_binary_init());

/* 
    (fun ("Ptr") (let-pair "make_fst_1056" "make_snd_1057" (apply (identifier "of-row-binary") (param 0)) (make-tup (identifier "make_fst_1056") (identifier "make_snd_1057"))))
 */
static std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> wrap_of_row_binary_init()
{
  std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> fun4867 { [&](Pointer p_0) {
    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4868 { of_row_binary(p_0) };
    ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 letpair_res_4869;
    {
      auto make_fst_1056 { std::get<0>(id_4868) };
      auto make_snd_1057 { std::get<1>(id_4868) };
      ::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517 id_4870 { make_fst_1056, make_snd_1057 };
      letpair_res_4869 = id_4870;
    }
    return letpair_res_4869;
  }
   };
  return fun4867;
}
std::function<::dessser::gen::raql_expr::tf4faeadcb1d4bc08688cd9dc4070e517(Pointer &)> wrap_of_row_binary(wrap_of_row_binary_init());

/* 
    (fun ("{text: [Tuple THIS[[]] | Record ($field_name; THIS)[[]] | Vector THIS[[]] | Case ({case_cond: THIS; case_cons: THIS}[[]]; THIS?) | Stateless [SL0 [Const $raql_value | Variable $raql_variable | Binding $raql_binding_key | Now Void | Random Void | EventStart Void | EventStop Void | Path $raql_path_comp[[]] | Pi Void] | SL1 ([Age Void | Cast $raql_type | Force Void | Peek ($raql_type; [LittleEndian Void | BigEndian Void]) | Length Void | Lower Void | Upper Void | UuidOfU128 Void | Not Void | Abs Void | Minus Void | Defined Void | Exp Void | Log Void | Log10 Void | Sqrt Void | Sq Void | Ceil Void | Floor Void | Round Void | Cos Void | Sin Void | Tan Void | ACos Void | ASin Void | ATan Void | CosH Void | SinH Void | TanH Void | Hash Void | BeginOfRange Void | EndOfRange Void | Sparkline Void | Strptime Void | Variant Void | Chr Void | Like STRING | Fit Void | CountryCode Void | IpFamily Void | Basename Void]; THIS) | SL1s ([Max Void | Min Void | Print Void | Coalesce Void]; THIS[[]]) | SL2 ([Add Void | Sub Void | Mul Void | Div Void | IDiv Void | Mod Void | Pow Void | Trunc Void | Reldiff Void | And Void | Or Void | Ge Void | Gt Void | Eq Void | Concat Void | StartsWith Void | EndsWith Void | BitAnd Void | BitOr Void | BitXor Void | BitShift Void | Get Void | In Void | Strftime Void | Index BOOL | Percentile Void]; THIS; THIS) | SL3 ([SubString Void | MapSet Void]; THIS; THIS; THIS)] | Stateful {lifespan: (lifespan AS [NoState Void | ImmediateState Void | LocalState Void | GlobalState Void])?; skip_nulls: BOOL; operation: [SF1 ([AggrMin Void | AggrMax Void | AggrSum Void | AggrAvg Void | AggrAnd Void | AggrOr Void | AggrBitAnd Void | AggrBitOr Void | AggrBitXor Void | AggrFirst Void | AggrLast Void | AggrHistogram (FLOAT; FLOAT; U32) | Group Void | Count Void | Distinct Void]; THIS) | SF2 ([Lag Void | ExpSmooth Void | Sample Void | OneOutOf Void]; THIS; THIS) | SF3 ([MovingAvg Void | Hysteresis Void | OnceEvery BOOL]; THIS; THIS; THIS) | SF4 ([DampedHolt Void | Remember BOOL]; THIS; THIS; THIS; THIS) | SF4s ([MultiLinReg Void | Largest {inv: BOOL; up_to: BOOL}]; THIS; THIS; THIS; THIS[[]]) | SF6 ([DampedHoltWinter Void]; THIS; THIS; THIS; THIS; THIS; THIS) | Top {output: $raql_top_output; size: THIS; max_size: THIS?; what: THIS; by: THIS; time: THIS; duration: THIS; sigmas: THIS} | Past {what: THIS; time: THIS; max_age: THIS; tumbling: BOOL; sample_size: THIS?}]} | Generator [Split (THIS; THIS)]]; uniq_num: U32; typ: $raql_type; units: $units?}" "Ptr")
      (apply (identifier "to-row-binary") (param 0) (param 1)))
 */
static std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> wrap_to_row_binary_init()
{
  std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> fun4871 { [&](std::shared_ptr<::dessser::gen::raql_expr::t>  p_0, Pointer p_1) {
    Pointer id_4872 { to_row_binary(p_0, p_1) };
    return id_4872;
  }
   };
  return fun4871;
}
std::function<Pointer(std::shared_ptr<::dessser::gen::raql_expr::t>  &,Pointer &)> wrap_to_row_binary(wrap_to_row_binary_init());


}
