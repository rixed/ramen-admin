# Configuration

VERSION = @PACKAGE_VERSION@

DESSSERC = @DESSSERC@
LINUXDEPLOY = linuxdeploy-x86_64.AppImage

ifdef NDEBUG
QMAKE_EXTRA = "CONFIG+=release"
CMAKE_BUILD_TYPE = "RELEASE"
else
QMAKE_EXTRA = "CONFIG+=debug"
CMAKE_BUILD_TYPE = "DEBUG"
endif

PACKAGED_BIN = src/RmAdmin
INSTALLED_BIN = $(PACKAGED_BIN)
INSTALLED = $(INSTALLED_BIN)

RAMEN_SRC = @RAMEN_SRC@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir ?= @bindir@

all: $(INSTALLED)

# Generic rules

.SUFFIXES: .type
.PHONY: clean clean-dist clean-dessserc-gen \
        all check check-crypto check-qt install uninstall reinstall \
        appimage coverity tidy clazy

%.cc: %.type
	@echo 'Generating code for type $<'
	@extra=""; \
	$(DESSSERC) lib --quiet --fieldmask=without -O3 \
	  --input-encoding row-binary --output-encoding row-binary \
	  --language=C++ --include-base=desssergen --pointers=shared \
	  --schema=@$< -o $@

TYPE_SOURCES = \
	team_name.type \
	field_name.type \
	function_name.type \
	program_name.type \
	fq_name.type \
	site_name.type \
	file_path.type \
	src_path.type \
	fieldmask.type \
	fq_function_name.type \
	event_time_field.type \
	event_time.type \
	raql_type.type \
	raql_value.type \
	func_ref.type \
	worker.type \
	units.type \
	global_variable.type \
	field_type.type \
	program_run_parameter.type \
	program_parameter.type \
	rc_entry.type \
	raql_variable.type \
	raql_path_comp.type \
	raql_top_output.type \
	raql_binding_key.type \
	raql_expr.type \
	raql_net_protocol.type \
	raql_ip_protocol.type \
	raql_select_field.type \
	raql_flush_method.type \
	raql_operation.type \
	retention.type \
	raql_error.type \
	raql_warning.type \
	source_info.type \
	simple_filter.type \
	alert.type \
	pivot.type \
	runtime_stats.type \
	time_range.type \
	replay.type \
	replay_request.type \
	replayer.type \
	output_specs.type \
	dashboard_widget.type \
	alerting_contact.type \
	alerting_notification.type \
	alerting_delivery_status.type \
	alerting_log.type \
	alerting_inhibition.type \
	sync_user_id.type \
	sync_selector.type \
	sync_socket.type \
	sync_value.type \
	sync_key.type \
	sync_client_cmd.type \
	sync_client_msg.type \
	sync_server_msg.type \
	sync_msg.type

src/desssergen/.created:
	mkdir -p src/desssergen
	touch $@

# We do not need the distinction between wire/non-wire types here, so
# we use the _wire types directly as the type.
# (Note: cp rather than ln because 1. timestamps need to be greater and
# 2. might not be the same FS)
src/desssergen/team_name.type: $(RAMEN_SRC)/src/team_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/field_name.type: $(RAMEN_SRC)/src/field_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/function_name.type: $(RAMEN_SRC)/src/function_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/program_name.type: $(RAMEN_SRC)/src/program_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/fq_name.type: $(RAMEN_SRC)/src/fq_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/site_name.type: $(RAMEN_SRC)/src/site_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/file_path.type: $(RAMEN_SRC)/src/file_path_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/src_path.type: $(RAMEN_SRC)/src/src_path_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/fieldmask.type: $(RAMEN_SRC)/src/fieldmask_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/raql_type.type: $(RAMEN_SRC)/src/raql_type_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/raql_value.type: $(RAMEN_SRC)/src/raql_value_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/output_specs.type: $(RAMEN_SRC)/src/output_specs_wire.type src/desssergen/.created
	cp $< $@

# Others are copied
src/desssergen/%.type: $(RAMEN_SRC)/src/%.type src/desssergen/.created
	cp $< $@

ifeq ($(shell uname),Darwin)
EXTRA_ICON_FILES = src/rmadmin.icns
else
EXTRA_ICON_FILES =
endif

MANUAL_CPP_SOURCES = \
  $(filter-out src/moc_%, $(wildcard src/*.cpp)) \
  $(filter-out src/moc_%, $(wildcard src/*.h)) \
  $(wildcard src/chart/*.cpp) \
  $(wildcard src/chart/*.h) \
  $(wildcard src/dashboard/*.cpp) \
  $(wildcard src/dashboard/*.h) \
  $(wildcard src/source/*.cpp) \
  $(wildcard src/source/*.h) \
  $(wildcard src/timeline/*.cpp) \
  $(wildcard src/timeline/*.h) \
  $(wildcard src/storage/*.cpp) \
  $(wildcard src/storage/*.h) \
  $(wildcard src/alerting/*.cpp) \
  $(wildcard src/alerting/*.h) \
  $(wildcard src/stream/*.cpp) \
  $(wildcard src/stream/*.h) \
  $(wildcard src/ps/*.cpp) \
  $(wildcard src/ps/*.h) \
  $(wildcard src/processes/*.cpp) \
  $(wildcard src/processes/*.h) \
  $(wildcard src/target_config/*.cpp) \
  $(wildcard src/target_config/*.h) \
  $(wildcard src/raw/*.cpp) \
  $(wildcard src/raw/*.h) \
  $(wildcard src/omni/*.cpp) \
  $(wildcard src/omni/*.h)

HTML_DOC_PAGES = $(foreach page,$(notdir $(wildcard $(RAMEN_SRC)/site/raql/*.html)),src/doc/$(page))

src/RmAdmin: \
		src/rmadmin.ico \
		$(EXTRA_ICON_FILES) \
		src/rmadmin.pro \
		$(MANUAL_CPP_SOURCES) \
		$(addprefix src/desssergen/, $(filter %.cc, $(TYPE_SOURCES:.type=.cc))) \
		$(addprefix src/desssergen/, $(filter %.h, $(TYPE_SOURCES:.type=.h))) \
		src/doc/doc.qrc \
		$(HTML_DOC_PAGES)
	@echo 'Generating RmAdmin $@'
	cd src && @QMAKE@ $(QMAKE_EXTRA)
	$(MAKE) -C src
	@if ! test -e $@ && test -e src/RmAdmin.app ; then \
	  echo '#!/bin/sh' > $@ ;\
	  echo 'exec ./src/RmAdmin.app/Contents/MacOS/RmAdmin' >> $@ ;\
	  chmod a+x $@ ;\
	fi

src/doc/toc.html: $(RAMEN_SRC)/doc/raql/toc.html
	cp $^ src/doc

$(RAMEN_SRC)/doc/doc.qrc: $(wildcard src/doc/*.html) src/doc/toc.html
	$(MAKE) -C $(RAMEN_SRC) doc/doc.qrc

$(RAMEN_SRC)/doc/raql/toc.html:
	$(MAKE) -C $(RAMEN_SRC) doc/raql/toc.html

src/doc/%.html: $(RAMEN_SRC)/site/raql/%.html
	cp $^ src/doc

src/doc/doc.qrc: $(RAMEN_SRC)/doc/doc.qrc
	cp $< $@

# This ico file is used for Windows app icon and internally by RmAdmin (in the about window):
src/rmadmin.ico: src/icon.png
	@echo 'Generating $@'
	@CONVERT@ $< $@

src/rmadmin.icns: src/icon.png
	@echo 'Generating $@'
	$(RM) -r icon.iconset
	mkdir icon.iconset
	@CONVERT@ $< -resize 16x16 icon.iconset/icon_16x16.png
	@CONVERT@ $< -resize 32x32 icon.iconset/icon_16x16@2x.png
	@CONVERT@ $< -resize 32x32 icon.iconset/icon_32x32.png
	@CONVERT@ $< -resize 64x64 icon.iconset/icon_32x32@2x.png
	@CONVERT@ $< -resize 128x128 icon.iconset/icon_128x128@.png
	@CONVERT@ $< -resize 256x256 icon.iconset/icon_128x128@2x.png
	@CONVERT@ $< -resize 256x256 icon.iconset/icon_256x256.png
	@CONVERT@ $< -resize 512x512 icon.iconset/icon_256x256@2x.png
	@CONVERT@ $< -resize 512x512 icon.iconset/icon_512x512.png
	@CONVERT@ $< -resize 1024x1024 icon.iconset/icon_512x512@2x.png
	iconutil --convert icns --output $@ icon.iconset

src/RmAdmin.dmg: src/rmadmin.icns src/RmAdmin src/rmadmin.ico
	@echo 'Generating MacOS disk image $@'
	@cd src &&\
	 $(RM) RmAdmin.dmg
	@echo 'Build DMG'
	@cd src &&\
	 macdeployqt RmAdmin.app -libpath=/usr/local/lib -dmg

# Better not relying on linuxdeploy for anything but gathering the libs
src/AppDir/usr/share/applications/RmAdmin.desktop: src/RmAdmin.desktop
	mkdir -p $(dir $@)
	cp -f $< $@

src/AppDir/usr/bin/RmAdmin: src/RmAdmin
	mkdir -p $(dir $@)
	cp -f $< $@

src/AppDir/usr/share/icons/hicolor/128x128/apps/RmAdmin.png: src/icon.png
	mkdir -p $(dir $@)
	cp -f $< $@

appimage: src/RmAdmin.$(VERSION).AppImage

src/RmAdmin.$(VERSION).AppImage: \
		src/AppDir/usr/share/applications/RmAdmin.desktop \
		src/AppDir/usr/bin/RmAdmin \
		src/AppDir/usr/share/icons/hicolor/128x128/apps/RmAdmin.png
	@echo 'Generating Linux AppImage into $@'
	OUTPUT=$@ $(LINUXDEPLOY) --appdir=src/AppDir --plugin qt --output appimage

#
# Extra
#

coverity:
	@echo 'Building and uploading coverity analysis'
	@test `whoami` = rixed
	@test -r .coverity_token
	@$(MAKE) -C src clean
	@cd src && \
	 cov-build --dir cov-int make && \
	 tar czvf ramen.tgz cov-int
	@curl \
	   --form token=`cat .coverity_token` \
	   --form email=rixed@free.fr \
	   --form file=src/ramen.tgz \
	   --form version="$(VERSION)" \
	   --form description="$(shell git rev-parse --short HEAD)" \
	   https://scan.coverity.com/builds?project=rixed%2Framen

tidy-build/compile_commands.json: $(MANUAL_CPP_SOURCES)
	@mkdir -p tidy-build
	@cd tidy-build && @QMAKE@ $(QMAKE_EXTRA) -spec linux-clang ../src && bear -- make

tidy: tidy-build/compile_commands.json
	@echo TODO

clazy-build/Makefile: \
		$(MANUAL_CPP_SOURCES) \
		$(addprefix src/desssergen/, $(filter %.cc, $(TYPE_SOURCES:.type=.cc))) \
		$(addprefix src/desssergen/, $(filter %.h, $(TYPE_SOURCES:.type=.h)))
	@mkdir -p clazy-build
	@cd clazy-build && @QMAKE@ $(QMAKE_EXTRA) -spec linux-clang QMAKE_CXX='clazy -Wno-unknown-attributes' ../src

clazy: clazy-build/Makefile
	@echo 'Analysing sources with clazy...'
	@$(MAKE) -C clazy-build CLAZY_IGNORE_DIRS=.*qt5.* CLAZY_CHECKS=level0,level1,no-rule-of-two-soft,no-non-pod-global-static,no-qproperty-without-notify

# Try to make format as quick as possible by not reformating the same files unless changed.
# Also prepend the vim configuration if not present already, invoquing sed in such a way
# that should work on both gnu and non-gnu seds.
format: $(MANUAL_CPP_SOURCES)
	clang-format -i --style=Google $?
	@vim_head="// vim: sw=2 ts=2 sts=2 expandtab tw=80"; \
	 for f in $?; do \
	   has_vim_head=$$(sed -ne '1{s,^'"$$vim_head"'$$,yes,p;q}' $$f); \
	   if ! test "$$has_vim_head" = yes; then \
	     sed -i.bak -e "1i$$vim_head" $$f && $(RM) $$f.bak ;\
	   fi ;\
	 done
	@touch $@

#
# Tests
#

tests/test_crypto: tests/test_crypto.c
	$(CC) -O0 -g -o $@ $< -lsodium

check-crypto: tests/test_crypto
	tests/test_crypto

check-qt:
	cd tests && @QMAKE@
	$(MAKE) -C tests
	tests/test

check: check-crypto check-qt

#
# Installation
#

#
# Cleaning
#

clean-dist: clean clean-temp
	@echo 'Cleaning all build files'
	$(RM) src/RmAdmin src/rmadmin.ico src/rmadmin.icns
	$(RM) -r src/RmAdmin.app
	$(RM) src/*.dmg

clean: clean-dessserc-gen
	@echo 'Cleaning result'
	$(RM) src/*.s src/*.o
	$(RM) perf.data* gmon.out
	@if test -e src/Makefile; then $(MAKE) -C src clean; fi
	$(RM) src/Makefile src/moc_*

clean-dessserc-gen:
	$(RM) -rf src/desssergen
