# Configuration

VERSION = @PACKAGE_VERSION@

DESSSERC = ocamlfind dessser/dessserc
LINUXDEPLOY = linuxdeploy-x86_64.AppImage

CXXFLAGS += -std=gnu++17 -Wall -W -Wno-parentheses -fPIC
CPPFLAGS += -D_GNU_SOURCE -I '@DESSSER_INC@'

ifdef NDEBUG
CPPFLAGS += -DNDEBUG
CXXFLAGS += -DNDEBUG -O3
QMAKE_EXTRA = "CONFIG+=release"
STRIP_BIN = 1
CMAKE_BUILD_TYPE = "RELEASE"
else
CPPFLAGS += -g
CXXFLAGS += -O0 -g
QMAKE_EXTRA = "CONFIG+=debug"
CMAKE_BUILD_TYPE = "DEBUG"
endif

PACKAGED_BIN = src/RmAdmin
INSTALLED_BIN = $(PACKAGED_BIN)
INSTALLED = $(INSTALLED_BIN)

RAMEN_SRC = @RAMEN_SRC@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir ?= @bindir@

all: $(INSTALLED)

# Generic rules

.SUFFIXES: .type
.PHONY: clean clean-dist clean-dessserc-gen \
        all check check-crypto check-qt install uninstall reinstall \
        appimage coverity

%.cc: %.type
	@echo 'Generating code for type $<'
	@extra=""; \
	$(DESSSERC) lib --quiet --fieldmask=without -O3 \
	  --input-encoding row-binary --output-encoding row-binary \
	  --language=C++ --include-base=desssergen --schema=@$< \
	  -o $@

TYPE_SOURCES = \
	field_name.type \
	function_name.type \
	program_name.type \
	fq_name.type \
	site_name.type \
	file_path.type \
	src_path.type \
	fieldmask.type \
	fq_function_name.type \
	event_time_field.type \
	event_time.type \
	raql_type.type \
	raql_value.type \
	func_ref.type \
	worker.type \
	units.type \
	global_variable.type \
	field_type.type \
	program_run_parameter.type \
	program_parameter.type \
	rc_entry.type \
	raql_variable.type \
	raql_path_comp.type \
	raql_top_output.type \
	raql_binding_key.type \
	raql_expr.type \
	raql_net_protocol.type \
	raql_select_field.type \
	raql_flush_method.type \
	raql_operation.type \
	retention.type \
	source_info.type \
	simple_filter.type \
	alert.type \
	runtime_stats.type \
	time_range.type \
	replay.type \
	replay_request.type \
	replayer.type \
	output_specs.type \
	dashboard_widget.type \
	alerting_contact.type \
	alerting_notification.type \
	alerting_delivery_status.type \
	alerting_log.type \
	alerting_inhibition.type \
	sync_user_id.type \
	sync_selector.type \
	sync_socket.type \
	sync_value.type \
	sync_key.type \
	sync_client_cmd.type \
	sync_client_msg.type \
	sync_server_msg.type \
	sync_msg.type

src/desssergen/.created:
	mkdir -p src/desssergen
	touch $@

# We do not need the distinction between wire/non-wire types here, so
# we use the _wire types directly as the type.
# (Note: cp rather than ln because 1. timestamps need to be greater and
# 2. might not be the same FS)
src/desssergen/field_name.type: $(RAMEN_SRC)/field_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/function_name.type: $(RAMEN_SRC)/function_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/program_name.type: $(RAMEN_SRC)/program_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/fq_name.type: $(RAMEN_SRC)/fq_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/site_name.type: $(RAMEN_SRC)/site_name_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/file_path.type: $(RAMEN_SRC)/file_path_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/src_path.type: $(RAMEN_SRC)/src_path_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/fieldmask.type: $(RAMEN_SRC)/fieldmask_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/raql_type.type: $(RAMEN_SRC)/raql_type_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/raql_value.type: $(RAMEN_SRC)/raql_value_wire.type src/desssergen/.created
	cp $< $@

src/desssergen/output_specs.type: $(RAMEN_SRC)/output_specs_wire.type src/desssergen/.created
	cp $< $@

# Others are copied
src/desssergen/%.type: $(RAMEN_SRC)/%.type src/desssergen/.created
	cp $< $@

ifeq ($(shell uname),Darwin)
EXTRA_ICON_FILES = src/rmadmin.icns
else
EXTRA_ICON_FILES =
endif

src/RmAdmin: \
		src/rmadmin.ico \
		$(EXTRA_ICON_FILES) \
		src/rmadmin.pro \
		$(wildcard src/*.cpp) \
		$(wildcard src/*.h) \
		$(addprefix src/desssergen/, $(filter %.cc, $(TYPE_SOURCES:.type=.cc))) \
		$(addprefix src/desssergen/, $(filter %.h, $(TYPE_SOURCES:.type=.h)))
	@echo 'Generating RmAdmin $@'
	cd src && @QMAKE@ $(QMAKE_EXTRA)
	$(MAKE) -C src
	@if ! test -e $@ && test -e src/RmAdmin.app ; then \
	  echo '#!/bin/sh' > $@ ;\
	  echo 'exec ./src/RmAdmin.app/Contents/MacOS/RmAdmin' >> $@ ;\
	  chmod a+x $@ ;\
	fi

# This ico file is used for Windows app icon and internally by RmAdmin (in the about window):
src/rmadmin.ico: src/icon.png
	@echo 'Generating $@'
	@CONVERT@ $< $@

src/rmadmin.icns: src/icon.png
	@echo 'Generating $@'
	$(RM) -r icon.iconset
	mkdir icon.iconset
	@CONVERT@ $< -resize 16x16 icon.iconset/icon_16x16.png
	@CONVERT@ $< -resize 32x32 icon.iconset/icon_16x16@2x.png
	@CONVERT@ $< -resize 32x32 icon.iconset/icon_32x32.png
	@CONVERT@ $< -resize 64x64 icon.iconset/icon_32x32@2x.png
	@CONVERT@ $< -resize 128x128 icon.iconset/icon_128x128@.png
	@CONVERT@ $< -resize 256x256 icon.iconset/icon_128x128@2x.png
	@CONVERT@ $< -resize 256x256 icon.iconset/icon_256x256.png
	@CONVERT@ $< -resize 512x512 icon.iconset/icon_256x256@2x.png
	@CONVERT@ $< -resize 512x512 icon.iconset/icon_512x512.png
	@CONVERT@ $< -resize 1024x1024 icon.iconset/icon_512x512@2x.png
	iconutil --convert icns --output $@ icon.iconset

# macdeployqt sulks SVG icons, doesn't include svg libs and therefore no icons
# are visible in the app, unless it is fixed by hand.
# See https://forum.qt.io/topic/87518/macdeployqt-strips-resources-from-deployed-binary/13
QTDIR ?= /usr/local/Cellar/qt/5.14.1
src/RmAdmin.dmg: src/rmadmin.icns src/RmAdmin src/rmadmin.ico
	@echo 'Generating MacOS disk image $@'
	@cd src &&\
	 $(RM) RmAdmin.dmg
	@echo 'Fixing SVG framework...'
	@mkdir -p src/RmAdmin.app/Contents/PlugIns/imageformats &&\
	 cd src/RmAdmin.app/Contents/PlugIns/imageformats &&\
	 cp $(QTDIR)/plugins/imageformats/libqsvg.dylib . &&\
	 install_name_tool -change $(QTDIR)/lib/QtGui.framework/Versions/5/QtGui @executable_path/../Frameworks/QtGui.framework/Versions/5/QtGui libqsvg.dylib &&\
	 install_name_tool -change $(QTDIR)/lib/QtWidgets.framework/Versions/5/QtWidgets @executable_path/../Frameworks/QtWidgets.framework/Versions/5/QtWidgets libqsvg.dylib &&\
	 install_name_tool -change $(QTDIR)/lib/QtSvg.framework/Versions/5/QtSvg @executable_path/../Frameworks/QtSvg.framework/Versions/5/QtSvg libqsvg.dylib &&\
	 install_name_tool -change $(QTDIR)/lib/QtCore.framework/Versions/5/QtCore @executable_path/../Frameworks/QtCore.framework/Versions/5/QtCore libqsvg.dylib
	@echo 'Build DMG'
	@cd src &&\
	 macdeployqt RmAdmin.app -libpath=/usr/local/lib -dmg

# Better not relying on linuxdeploy for anything but gathering the libs
src/AppDir/usr/share/applications/RmAdmin.desktop: src/RmAdmin.desktop
	mkdir -p $(dir $@)
	cp -f $< $@

src/AppDir/usr/bin/RmAdmin: src/RmAdmin
	mkdir -p $(dir $@)
	cp -f $< $@

src/AppDir/usr/share/icons/hicolor/128x128/apps/RmAdmin.png: src/icon.png
	mkdir -p $(dir $@)
	cp -f $< $@

appimage: src/RmAdmin.$(VERSION).AppImage

src/RmAdmin.$(VERSION).AppImage: \
		src/AppDir/usr/share/applications/RmAdmin.desktop \
		src/AppDir/usr/bin/RmAdmin \
		src/AppDir/usr/share/icons/hicolor/128x128/apps/RmAdmin.png
	@echo 'Generating Linux AppImage into $@'
	OUTPUT=$@ $(LINUXDEPLOY) --appdir=src/AppDir --plugin qt --output appimage

coverity:
	@echo 'Building and uploading coverity analysis'
	@test `whoami` = rixed
	@test -r .coverity_token
	@$(MAKE) -C src clean
	@cd src && \
	 cov-build --dir cov-int make && \
	 tar czvf ramen.tgz cov-int
	@curl \
	   --form token=`cat .coverity_token` \
	   --form email=rixed@free.fr \
	   --form file=src/ramen.tgz \
	   --form version="$(VERSION)" \
	   --form description="$(shell git rev-parse --short HEAD)" \
	   https://scan.coverity.com/builds?project=rixed%2Framen

#
# Tests
#

tests/test_crypto: tests/test_crypto.c
	$(CC) -O0 -g -o $@ $< -lsodium

check-crypto: tests/test_crypto
	tests/test_crypto

check-qt:
	cd tests && /usr/bin/qmake
	$(MAKE) -C tests
	tests/test

check: check-crypto check-qt

#
# Installation
#

#
# Cleaning
#

clean-dist: clean clean-temp
	@echo 'Cleaning all build files'
	$(RM) src/RmAdmin src/rmadmin.ico src/rmadmin.icns
	$(RM) -r src/RmAdmin.app
	$(RM) src/*.dmg

clean: clean-dessserc-gen
	@echo 'Cleaning result'
	$(RM) src/*.s src/*.o
	$(RM) perf.data* gmon.out
	@if test -e src/Makefile; then $(MAKE) -C src clean; fi
	$(RM) src/Makefile src/moc_*

clean-dessserc-gen:
	$(RM) -rf src/desssergen
